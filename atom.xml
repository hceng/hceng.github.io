<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>hceng blog</title>
  
  <subtitle>嵌入式/Linux驱动</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-03-14T16:33:48.849Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>hceng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Tiny4412——Android访问硬件的方法</title>
    <link href="http://yoursite.com/2019/03/15/Tiny4412%E2%80%94%E2%80%94Android%E8%AE%BF%E9%97%AE%E7%A1%AC%E4%BB%B6%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2019/03/15/Tiny4412——Android访问硬件的方法/</id>
    <published>2019-03-15T08:46:28.000Z</published>
    <updated>2019-03-14T16:33:48.849Z</updated>
    
    <content type="html"><![CDATA[<p>2019年，正式学习Android驱动。<br>以LED为切入点，学习Android访问硬件的方法。<br><a id="more"></a></p><p>之前写第一个<a href="https://hceng.cn/2017/08/12/AM437x%E2%80%94%E2%80%94LED%E9%A9%B1%E5%8A%A8/" target="_blank" rel="external">Linux下的LED驱动</a>时候，提到：<strong>Linux驱动 = 裸机 + 框架</strong><br>这个思维在写Linux驱动的过程中，得到了充分验证。<br>如今，学习Android驱动，开始验证：<strong>Android驱动 = Linux驱动 + 框架</strong></p><h1 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1. 环境搭建"></a>1. 环境搭建</h1><p>开发环境主要包含：<br>1.一个Linux主机(虚拟机)，在该主机里编译Linux内核和Android源码等；<br>2.一个Windows主机，在该主机里编写Android APP，并连接开发板调试；</p><h2 id="1-1-搭建Ubuntu虚拟机"><a href="#1-1-搭建Ubuntu虚拟机" class="headerlink" title="1.1 搭建Ubuntu虚拟机"></a>1.1 搭建Ubuntu虚拟机</h2><p>前面在<a href="https://hceng.cn/2018/09/12/JAVA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#0-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA" target="_blank" rel="external">学习Java</a>时，已经安装了Ubuntu18.04的虚拟机，这里继续使用该虚拟机。</p><p>值得一提的是，虚拟机的内存给多一点，虚拟机参考配置：<strong>内存6G，硬盘100G，CPU 8核</strong>。<br>在编译内核源码的过程中，发现编译太慢，一般挂一晚上都能编译好，之前内存给小了，编译了一天一夜也没好，后来改大了内存后，一会就编译完了。</p><h2 id="1-2-编译Kernel和Android"><a href="#1-2-编译Kernel和Android" class="headerlink" title="1.2 编译Kernel和Android"></a>1.2 编译Kernel和Android</h2><p>以下所有安装包都是从<a href="https://eyun.baidu.com/s/3b1UtLc#sharelink/path=%2F" target="_blank" rel="external">百问网云盘下载</a>。</p><p><strong>1、安装交叉编译工具链</strong><br>下载<code>arm-linux-gcc-4.5.1-v6-vfp-20120301.tgz</code>并解压。<br>修改<code>/etc/environment</code>，将解压的交叉编译工具链加在末尾：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">PATH=&quot;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/work/tools/toolschain/4.5.1/bin&quot;</div></pre></td></tr></table></figure></p><p>执行<code>source /etc/environment</code>更新环境变量。<br>此时执行<code>arm-linux-gcc -v</code>，打印出<code>gcc version 4.5.1 (ctng-1.8.1-FA)</code>即OK。</p><p><strong>2、编译Kernel</strong><br>下载<code>linux-3.0.86-20150324.tgz</code>并解压。<br>进入内核源码根目录执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cp tiny4412_android_defconfig .config</div><div class="line">make zImage</div></pre></td></tr></table></figure></p><p>最后生成<code>/work/linux_source/linux-3.0.86/arch/arm/boot/zImage</code>。</p><p><strong>3、编译Android</strong><br>下载<code>android-5.0.2-fs-20150325.tar.gz</code>并解压。<br>进入Android源码根目录执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">. setenv</div><div class="line">lunch</div></pre></td></tr></table></figure></p><p>在选择界面：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">You&apos;re building on Linux</div><div class="line"></div><div class="line">Lunch menu... pick a combo:</div><div class="line">     1. aosp_arm-eng</div><div class="line">     2. aosp_arm64-eng</div><div class="line">     3. aosp_mips-eng</div><div class="line">     4. aosp_mips64-eng</div><div class="line">     5. aosp_x86-eng</div><div class="line">     6. aosp_x86_64-eng</div><div class="line">     7. mini_emulator_x86-userdebug</div><div class="line">     8. m_e_arm-userdebug</div><div class="line">     9. mini_emulator_arm64-userdebug</div><div class="line">     10. mini_emulator_mips-userdebug</div><div class="line">     11. mini_emulator_x86_64-userdebug</div><div class="line">     12. aosp_hammerhead-userdebug</div><div class="line">     13. aosp_mako-userdebug</div><div class="line">     14. full_tiny4412-userdebug</div><div class="line">     15. full_tiny4412-eng</div><div class="line">     16. aosp_shamu-userdebug</div><div class="line">     17. aosp_deb-userdebug</div><div class="line">     18. aosp_flo-userdebug</div><div class="line">     19. aosp_grouper-userdebug</div><div class="line">     20. full_fugu-userdebug</div><div class="line">     21. aosp_fugu-userdebug</div><div class="line">     22. aosp_tilapia-userdebug</div><div class="line">     23. aosp_manta-userdebug</div><div class="line"></div><div class="line">Which would you like? [aosp_arm-eng]</div></pre></td></tr></table></figure></p><p>输入<code>15</code>，即选择<code>full_tiny4412-eng</code>。<br>再执行<code>make –j8</code>，等待几个小时，编译完成后执行<code>./gen-img.sh</code>生成<code>/work/android_source/android-5.0.2/system.img</code>.</p><p>当然编译过程不可能是那么一帆风顺的，实际编译Android源码过程中遇到的问题有：<br>①JDK版本过高，重新安装<code>openjdk-7-jdk</code>，<a href="https://blog.csdn.net/cwh250/article/details/81948610" target="_blank" rel="external">参考解决链接</a>。<br>②编译报错<code>aidl_language_l</code>，<a href="https://blog.csdn.net/xljxiang/article/details/83044067" target="_blank" rel="external">参考解决链接</a>。<br>③编译报错<code>error: unsupported reloc 43</code>，<a href="https://blog.csdn.net/u014770862/article/details/52624851" target="_blank" rel="external">参考解决链接</a>。<br>④制作映像文件出错<code>mkimage: command not found</code>，执行<code>sudo apt-get install u-boot-tools</code>安装即可。</p><p><strong>4、烧写</strong><br>使用厂家提供的<code>MiniTools</code>。<br>将<code>zImage</code>和<code>system.img</code>分别烧写到<code>Android Kernel</code>和<code>Android RooFs/System Image</code>。</p><h2 id="1-3-安装JDK-Windows"><a href="#1-3-安装JDK-Windows" class="headerlink" title="1.3 安装JDK(Windows)"></a>1.3 安装JDK(Windows)</h2><p>因为要在Windows上使用Android Studio编写APP，所以在Windows上也需要安装Java JDK(Java Development Kit)。<br>通过<a href="https://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="external">Oracle官网</a>下载最新的JDK：</p><div align="center"><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/190315/1.jpg"></div><p>安装好后，将JDK安装路径加入Windows的环境变量：</p><div align="center"><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/190315/2.jpg"></div><p>最后在CMD里验证：</p><div align="center"><img width="700" src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/190315/3.jpg"></div><h2 id="1-4-安装Android-Studio"><a href="#1-4-安装Android-Studio" class="headerlink" title="1.4 安装Android Studio"></a>1.4 安装Android Studio</h2><p>首先从<a href="https://developer.android.google.cn/studio/" target="_blank" rel="external">官网</a>下载Android Studio。</p><p>点击安装，会弹出首次运行没有Android SDK，点击“Cancel”。</p><div align="center"><img width="400" src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/190315/4.png"></div><p>然后选择”Custom”以自定义SDK安装路径。在弹出的界面勾选上”Android Virtual Device”，再指定SDK的安装路径。</p><div align="center"><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/190315/5.jpg"></div><p>此时会下载Android SDK和AVD，两个文件都很大，为了C盘节省空间，应用界面只指定了SDK的安装路径在D盘，还需手动指定AVD的安装路径，这个需要修改环境变量设置。</p><div align="center"><img width="600" src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/190315/6.png"></div><p>然后，等待一段时间就安装完了。</p><h2 id="1-5-Android-Studio的常用快捷键"><a href="#1-5-Android-Studio的常用快捷键" class="headerlink" title="1.5 Android Studio的常用快捷键"></a>1.5 Android Studio的常用快捷键</h2><p>参考博客：<a href="https://www.open-open.com/lib/view/open1466732917214.html#articleHeader0" target="_blank" rel="external">Android Studio2.0 教程从入门到精通MAC版 - 提高篇</a></p><h1 id="2-Android应用程序"><a href="#2-Android应用程序" class="headerlink" title="2. Android应用程序"></a>2. Android应用程序</h1><p>我的目的是写一个Android应用程序，通过该应用程序控制开发板上的LED灯。<br>因此首先得设计一个APP，该APP有一个总开关控制所有灯的亮灭，每个灯又有单独的开关控制亮灭。</p><h2 id="2-1-创建APP工程"><a href="#2-1-创建APP工程" class="headerlink" title="2.1 创建APP工程"></a>2.1 创建APP工程</h2><p>打开Android Studio，选择”Start a new Android Studio project”创建一个新APP工程。<br>然后选择”Empty Activity”空主界面，最后设置APP信息、保存路径、兼容API版本。</p><div align="center"><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/190315/7.jpg"></div><div align="center"><img width="600" src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/190315/8.jpg"></div><p>等待自动创建完成后，会自动生成工程文件，其中有两个文件后面常用：</p><ul><li><code>app\src\main\res\layout\activity_main.xml</code>，界面控件布局文件，既可通过图形界面设计控件，也可直接编辑xml；</li><li><code>app\src\main\java\cn\hceng\led\MainActivity.java</code>，实现控件各种具体功能，逻辑关系。</li></ul><h2 id="2-2-常用控件介绍"><a href="#2-2-常用控件介绍" class="headerlink" title="2.2 常用控件介绍"></a>2.2 常用控件介绍</h2><h3 id="2-2-1-TextView"><a href="#2-2-1-TextView" class="headerlink" title="2.2.1 TextView"></a>2.2.1 TextView</h3><p><strong>TextView是文本视图，用来显示文字的。</strong></p><ul><li>xml创建：<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/TEXT"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:gravity</span>=<span class="string">"center"</span></div><div class="line">    <span class="attr">android:text</span>=<span class="string">"hceng first APP!"</span></div><div class="line">    <span class="attr">android:textColor</span>=<span class="string">"#008577"</span></div><div class="line">    <span class="attr">android:textSize</span>=<span class="string">"25sp"</span></div><div class="line">    <span class="attr">android:textStyle</span>=<span class="string">"bold"</span> /&gt;</div></pre></td></tr></table></figure></li></ul><blockquote><p>1.标签<code>&lt;TextView /&gt;</code>代表着要在<code>Activity</code>中添加一个<code>TextView</code>，标签中可以设置一些属性；<br>2.<strong><code>android:id</code></strong>代表<code>TextView</code>的<code>ID</code>，也就是<code>TextView</code>的唯一标识；在java代码中我们可以通过<code>findViewById()</code>方法来通过<code>ID</code>获取控件；上述控件的唯一<code>ID</code>为<code>TEXT</code>；<br>3.<strong><code>android:layout_width</code></strong>代表控件的宽度，该属性的值是<code>match_parent</code>，表示该控件的宽度与父视图的宽度相同；<br>4.<strong><code>android:layout_height</code></strong>代表控件的高度，该属性的值是<code>wrap_content</code>，表示控件的高度根据内容的高度进行改变；<br>5.<strong><code>android:gravity</code></strong>代表文字对齐方式，该属性的值是<code>center</code>，表示居中显示；<br>6.<strong><code>android:text</code></strong>代表文字内容，该属性的值是<code>hceng first APP!</code>，表示显示这串字符；<br>7.<strong><code>android:textColor</code></strong>代表文字的颜色，该属性的值是<code>#008577</code>，表示16进制色值的绿色；<br>7.<strong><code>android:textSize</code></strong>代表文字的大小，该属性的值是<code>25sp</code>，长度宽度的数值用<code>dp</code>，字体的大小用<code>sp</code>；<br>7.<strong><code>android:textStyle</code></strong>代表文字的样，<code>normal</code>、<code>bold</code>、<code>italic</code>分别为正常，加粗、斜体，默认为<code>normal</code>；</p></blockquote><ul><li>代码控制：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.widget.TextView;</div><div class="line"></div><div class="line">        TextView myTextView = (TextView) findViewById(R.id.TEXT);</div><div class="line">        String myText = myTextView.getText().toString();</div><div class="line">        myTextView.setText(myText+<span class="string">"  Add String"</span>);</div></pre></td></tr></table></figure></li></ul><h3 id="2-2-2-Button"><a href="#2-2-2-Button" class="headerlink" title="2.2.2 Button"></a>2.2.2 Button</h3><p><strong>Button是按钮，用来控制某个目的的开关。</strong></p><ul><li>xml创建：<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/BUTTON"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"50pt"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></div><div class="line">    <span class="attr">android:text</span>=<span class="string">"ALL ON"</span> /&gt;</div></pre></td></tr></table></figure></li></ul><blockquote><p>1.<code>Button</code>标签里面的属性和前面<code>TextView</code>基本类似，这里就不赘述了；</p></blockquote><ul><li>代码控制：<br>在<code>Activity</code>的类中也是使用<code>findViewById()</code>来通过<code>ID</code>获取该按钮。<br>获取按钮后需要给按钮绑定点击事件，也就是点击按钮要做的事情，常用的方法有四种：<strong>布局文件指定响应函数</strong>、<strong>直接匿名内部类</strong>、<strong>新建子类实现</strong>、<strong>在当前类实现接口</strong>。</li></ul><p><strong>布局文件指定响应函数</strong>：</p><p>在布局文件的<code>&lt;Button /&gt;</code>标签里，添加<code>android:onClick=&quot;onClick&quot;</code>，<code>MainActivity.java</code>里就只需要实现<code>onClick()</code>方法即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.widget.Button;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        Button button = (Button) findViewById(R.id.BUTTON);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        <span class="comment">//Todo</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>直接匿名内部类</strong>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.widget.Button;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        Button button = (Button) findViewById(R.id.BUTTON);</div><div class="line"></div><div class="line">        button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span> <span class="params">(View v)</span></span>&#123;</div><div class="line">                <span class="comment">//Todo</span></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>新建子类实现</strong>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.widget.Button;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        Button button = (Button) findViewById(R.id.BUTTON);</div><div class="line">        button.setOnClickListener(<span class="keyword">new</span> MyButtonListener());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyButtonListener</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">            <span class="comment">//Todo</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>在当前类实现接口</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.widget.Button;</div><div class="line"><span class="keyword">import</span> android.view.View.OnClickListener;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">OnClickListener</span> </span>&#123; <span class="comment">//注意这里实现接口</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        Button button = (Button) findViewById(R.id.BUTTON);</div><div class="line">        button.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        <span class="comment">//Todo</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>参考博客：<a href="https://www.cnblogs.com/smyhvae/p/4375710.html" target="_blank" rel="external">Android代码规范—-按钮单击事件的四种写法</a></p><h3 id="2-2-3-CheckBox"><a href="#2-2-3-CheckBox" class="headerlink" title="2.2.3 CheckBox"></a>2.2.3 CheckBox</h3><p><strong>CheckBox是复选框，用来多项选择。</strong></p><ul><li><p>xml创建：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">CheckBox</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/LED1"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:onClick</span>=<span class="string">"onCheckboxClicked"</span></div><div class="line">    <span class="attr">android:text</span>=<span class="string">"LED1"</span> /&gt;</div></pre></td></tr></table></figure></li><li><p>分析：</p><blockquote><p>1.<code>CheckBox</code>标签里面的属性和前面也基本类似；<br>2.<code>android:onClick</code>代表控件的响应函数，该属性的值是<code>onCheckboxClicked</code>，表示操作该控件将调用<code>onCheckboxClicked()</code>方法；</p></blockquote></li><li><p>代码控制：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.widget.CheckBox;</div><div class="line"><span class="keyword">import</span> android.widget.Toast;</div><div class="line"></div><div class="line">    CheckBox checkBoxLed1 = (CheckBox) findViewById(R.id.LED1);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCheckboxClicked</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        <span class="keyword">boolean</span> checked = ((CheckBox) v).isChecked();</div><div class="line"></div><div class="line">        <span class="keyword">switch</span> (v.getId()) &#123;</div><div class="line">            <span class="keyword">case</span> R.id.LED1:</div><div class="line">                <span class="keyword">if</span> (checked) &#123;</div><div class="line">                    Toast.makeText(getApplicationContext(), <span class="string">"LED1 on"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    Toast.makeText(getApplicationContext(), <span class="string">"LED1 off"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.LED2:</div><div class="line">                <span class="comment">//Todo</span></div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></li></ul><p>在XML里，多个<code>CheckBox</code>的<code>android:onClick</code>都是<code>onCheckboxClicked</code>，也就是任意一个<code>CheckBox</code>被点击，都会调用到<code>onCheckboxClicked()</code>方法。<br>因此，需要使用<code>getId()</code>获取是按的哪一个<code>CheckBox</code>，再根据<code>isChecked()</code>的状态，进行相应操作。</p><h3 id="2-2-4-EditText"><a href="#2-2-4-EditText" class="headerlink" title="2.2.4 EditText"></a>2.2.4 EditText</h3><p><strong>EditText是输入框，用来接收用户输入的数据。</strong></p><ul><li>xml创建：<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">EditText</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/EDIT_TEXT"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:hint</span>=<span class="string">"Please input the text "</span></div><div class="line">    <span class="attr">android:maxLines</span>=<span class="string">"1"</span> /&gt;</div></pre></td></tr></table></figure></li></ul><blockquote><p>1.<strong><code>android:hint</code></strong>代表占提示字符串，用来提示用户输入内容；<br>2.<strong><code>android:macLines</code></strong>表示显示的最多行数；</p></blockquote><ul><li>代码控制：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.widget.EditText;</div><div class="line"><span class="keyword">import</span> android.widget.Toast;</div><div class="line"></div><div class="line">        EditText myEditText = (EditText) findViewById(R.id.EDIT_TEXT);</div><div class="line">        String inputText = myEditText.getText().toString();</div><div class="line">        Toast.makeText(MainActivity.<span class="keyword">this</span>, inputText, Toast.LENGTH_SHORT).show();</div></pre></td></tr></table></figure></li></ul><p>一般<code>EditText</code>还需要监控键盘回车键，或者和<code>Button</code>搭配，从而判断用户输完了数据，再获取数据。</p><h3 id="2-2-5-ImageView"><a href="#2-2-5-ImageView" class="headerlink" title="2.2.5 ImageView"></a>2.2.5 ImageView</h3><p><strong>ImageView是图片显示框，用来在界面上显示贴图。</strong></p><ul><li>xml创建：<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/IMAGEVIEW"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:src</span>=<span class="string">"@drawable/p1"</span> /&gt;</div></pre></td></tr></table></figure></li></ul><blockquote><p>1.<strong><code>android:src</code></strong>代表图片资源的，使用<code>@xx</code>来引用，图片一般放在<code>res/drawable</code>里面；</p></blockquote><ul><li>代码控制：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.widget.ImageView;</div><div class="line"></div><div class="line">        ImageView imageView = (ImageView) findViewById(R.id.IMAGEVIEW);</div><div class="line">        imageView.setImageResource(R.drawable.p2);</div></pre></td></tr></table></figure></li></ul><h3 id="2-2-6-ProgressBar"><a href="#2-2-6-ProgressBar" class="headerlink" title="2.2.6 ProgressBar"></a>2.2.6 ProgressBar</h3><p><strong>ProgressBar是进度条，用来展示当前进度。</strong></p><ul><li>xml创建：<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ProgressBar</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/PROGRESSBAR"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">style</span>=<span class="string">"@style/Widget.AppCompat.ProgressBar.Horizontal"</span></div><div class="line">    <span class="attr">android:max</span>=<span class="string">"100"</span></div><div class="line">    <span class="attr">android:visibility</span>=<span class="string">"visible"</span></div><div class="line">    <span class="attr">android:progress</span>=<span class="string">"60"</span>/&gt;</div></pre></td></tr></table></figure></li></ul><blockquote><p>1.<strong><code>style</code></strong>用来指定进度条样式，默认是转动的圆，这里是水平的一根横线表示进度条；<br>2.<strong><code>android:max</code></strong>表示进度条的最大值；<br>3.<strong><code>android:visibility</code></strong>表示是否可见进度条，<code>visible</code>是可见，<code>invisible</code>是不可见，<code>gone</code>是隐藏，即不保留控件所占空间；<br>4.<strong><code>android:progress</code></strong>表示进度条的当前值(初始值)；</p></blockquote><ul><li>代码控制：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.widget.ProgressBar;</div><div class="line"></div><div class="line">        ProgressBar myProgressBar = (ProgressBar) findViewById(R.id.PROGRESSBAR);</div><div class="line">        myProgressBar.setProgress(myProgressBar.getProgress()+<span class="number">10</span>);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (myProgressBar.getProgress() == myProgressBar.getMax()) &#123;</div><div class="line">            <span class="comment">//myProgressBar.setVisibility(View.GONE);</span></div><div class="line">            myProgressBar.setProgress(<span class="number">0</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            myProgressBar.setVisibility(View.VISIBLE);</div><div class="line">        &#125;</div></pre></td></tr></table></figure></li></ul><blockquote><p>1、通过<code>findViewById()</code>方法找到指定<code>ProgressBar</code>；<br>2、通过<code>getProgress()</code>方法获取当前进度值，<code>setProgress()</code>方法设置当前进度值；<br>3、通过<code>getMax()</code>方法获取xml设置的最大值；<br>4、通过<code>setVisibility()</code>方法设置进度条是否可见，<code>VISIBLE</code>、<code>INVISIBLE</code>、<code>GONE</code>含义同上；</p></blockquote><h3 id="2-2-7-AlterDialog"><a href="#2-2-7-AlterDialog" class="headerlink" title="2.2.7 AlterDialog"></a>2.2.7 AlterDialog</h3><p><strong>AlterDialog是警告对话框，用来展示警告信息和简单的交互。</strong></p><ul><li>代码创建：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.widget.Toast;</div><div class="line"><span class="keyword">import</span> android.app.AlertDialog;</div><div class="line"><span class="keyword">import</span> android.content.DialogInterface;</div><div class="line"></div><div class="line">        AlertDialog.Builder alterDialog = <span class="keyword">new</span> AlertDialog.Builder(MainActivity.<span class="keyword">this</span>);</div><div class="line">        alterDialog.setTitle(<span class="string">"Warning"</span>);</div><div class="line">        alterDialog.setMessage(<span class="string">"Warning content"</span>);</div><div class="line">        alterDialog.setCancelable(<span class="keyword">false</span>);</div><div class="line">        alterDialog.setPositiveButton(<span class="string">"YES"</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</div><div class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"yes"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        alterDialog.setNegativeButton(<span class="string">"NO"</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</div><div class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"no"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        alterDialog.show();</div></pre></td></tr></table></figure></li></ul><blockquote><p>1、<code>AlterDialog</code>是通过<code>Builder</code>进行创建，在创建的时候会指定该<code>AlterDialog</code>在那个<code>Activity</code>上进行显示；<br>2、通过<code>setTitle()</code>方法设置标题，通过<code>setMessage()</code>设置内容；<br>3、<code>setCancelable()</code>方法，表示弹出的<code>AlterDialog</code>在用户点击返回键是否消失，默认是<code>true</code>，这里设置为<code>false</code>，表示点击返回键不消失；<br>4、<code>setPositiveButton()</code>方法是设置点击“确定”按钮时的事件，<code>setNegativeButton</code>是设置点击“取消”按钮的事件；<br>5、<code>show()</code>方法弹出<code>AlterDialog</code>；</p></blockquote><h3 id="2-2-8-ProgressDialog"><a href="#2-2-8-ProgressDialog" class="headerlink" title="2.2.8 ProgressDialog"></a>2.2.8 ProgressDialog</h3><p><strong>ProgressDialog是进度提示框，即在<code>AlterDialog</code>上添加<code>Progress</code>。</strong></p><ul><li>代码创建：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.app.ProgressDialog;</div><div class="line"></div><div class="line">        ProgressDialog myProgressDialog = <span class="keyword">new</span> ProgressDialog(MainActivity.<span class="keyword">this</span>);</div><div class="line"></div><div class="line">        myProgressDialog.setTitle(<span class="string">"ProgressDialog"</span>);</div><div class="line">        myProgressDialog.setMessage(<span class="string">"Loading……"</span>);</div><div class="line">        myProgressDialog.setCancelable(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">        myProgressDialog.show();</div></pre></td></tr></table></figure></li></ul><h2 id="2-3-四种布局介绍"><a href="#2-3-四种布局介绍" class="headerlink" title="2.3 四种布局介绍"></a>2.3 四种布局介绍</h2><p>Android中的布局方式有四种：<strong>线性布局</strong>(LinearLayout)、<strong>相对布局</strong>(RelativeLayout)、<strong>帧布局</strong>(FrameLayout)、<strong>表格布局</strong>(TableLayout)。</p><h3 id="2-3-1-线性布局"><a href="#2-3-1-线性布局" class="headerlink" title="2.3.1 线性布局"></a>2.3.1 线性布局</h3><p>线性布局是最常用的布局之一，如名字一样，将控件在线性方向上依次排列。<br>既然是线性，那么就可能是水平线性<code>horizontal</code>，也可以是垂直线性<code>vertical</code>。</p><ul><li><p>xml示例：</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">&lt;LinearLayout &lt;!--LinearLayout 1--&gt;</div><div class="line">    android:layout_width="match_parent"</div><div class="line">    android:layout_height="match_parent"</div><div class="line">    android:orientation="vertical" &gt;</div><div class="line"></div><div class="line">    &lt;LinearLayout &lt;!--LinearLayout 1.1--&gt;</div><div class="line">        android:layout_width="match_parent"</div><div class="line">        android:layout_height="960px"</div><div class="line">        android:background="#005A5B" &gt;</div><div class="line"></div><div class="line">        &lt;TextView</div><div class="line">            android:layout_width="wrap_content"</div><div class="line">            android:layout_height="wrap_content"</div><div class="line">            android:text="A"</div><div class="line">            android:textSize="100dp"/&gt;</div><div class="line">    &lt;/LinearLayout&gt;</div><div class="line"></div><div class="line">    &lt;LinearLayout &lt;!--LinearLayout 1.2--&gt;</div><div class="line">        android:layout_width="match_parent"</div><div class="line">        android:layout_height="960px"</div><div class="line">        android:orientation="horizontal" &gt;</div><div class="line"></div><div class="line">        &lt;LinearLayout &lt;!--LinearLayout 1.2.1--&gt;</div><div class="line">            android:layout_width="540px"</div><div class="line">            android:layout_height="match_parent"</div><div class="line">            android:background="#008C72" &gt;</div><div class="line"></div><div class="line">            &lt;TextView</div><div class="line">                android:layout_width="wrap_content"</div><div class="line">                android:layout_height="wrap_content"</div><div class="line">                android:text="B"</div><div class="line">                android:textSize="100dp"/&gt;</div><div class="line">        &lt;/LinearLayout&gt;</div><div class="line"></div><div class="line">        &lt;LinearLayout &lt;!--LinearLayout 1.2.2--&gt;</div><div class="line">            android:layout_width="540px"</div><div class="line">            android:layout_height="match_parent"</div><div class="line">            android:background="#02A676" &gt;</div><div class="line"></div><div class="line">            &lt;TextView</div><div class="line">                android:layout_width="wrap_content"</div><div class="line">                android:layout_height="wrap_content"</div><div class="line">                android:text="C"</div><div class="line">                android:textSize="100dp"/&gt;</div><div class="line">        &lt;/LinearLayout&gt;</div><div class="line">    &lt;/LinearLayout&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure></li><li><p>效果：</p></li></ul><div align="center"><img width="200" src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/190315/9.jpg"></div><p>示例实现了三个色块，最外层的<code>LinearLayout 1</code>是整个区域，它指定内部按垂直排列。<br>然后里面的两个<code>LinearLayout 1.1</code>和<code>LinearLayout 1.2</code>就按垂直的上下排列。<br>再在<code>LinearLayout 1.2</code>里又指定水平排列，里面的<code>LinearLayout 1.2.1</code>和<code>LinearLayout 1.2.2</code>就左右排列。</p><h3 id="2-3-2-相对布局"><a href="#2-3-2-相对布局" class="headerlink" title="2.3.2 相对布局"></a>2.3.2 相对布局</h3><p>相对布局可以根据已经固定的控件来确定其它新加控件的位置。</p><ul><li><p>xml示例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">".MainActivity"</span>&gt;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/button_center"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_centerInParent</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"center"</span> /&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/button_above"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_above</span>=<span class="string">"@+id/button_center"</span></div><div class="line">        <span class="attr">android:layout_centerInParent</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"above"</span> /&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/button_below"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_below</span>=<span class="string">"@+id/button_center"</span></div><div class="line">        <span class="attr">android:layout_centerInParent</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"below"</span> /&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/button_left"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_centerVertical</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:layout_toLeftOf</span>=<span class="string">"@+id/button_center"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"left"</span> /&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/button_right"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_centerVertical</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:layout_toRightOf</span>=<span class="string">"@+id/button_center"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"right"</span> /&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>效果：</p></li></ul><div align="center"><img width="200" src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/190315/10.jpg"></div><p>示例实现了五个按键，先确定最中间<code>button_center</code>。<br>然后使用<code>layout_above</code>、<code>layout_below</code>、<code>layout_toLeftOf</code>、<code>layout_toRightOf</code>分别在其上下左右。<br>其中<code>layout_centerVertical</code>作用是将控件置于父控件的中心位置。</p><h3 id="2-3-3-帧布局"><a href="#2-3-3-帧布局" class="headerlink" title="2.3.3 帧布局"></a>2.3.3 帧布局</h3><p>帧布局就是以屏幕左上角为坐标原点，指定每个控件的大小，后加进来的控件覆盖前面的控件。</p><ul><li><p>xml示例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">FrameLayout</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"120pt"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"120pt"</span></div><div class="line">    <span class="attr">android:background</span>=<span class="string">"#00BF80"</span>&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">FrameLayout</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"100pt"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"100pt"</span></div><div class="line">    <span class="attr">android:background</span>=<span class="string">"#298A6A"</span>&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">FrameLayout</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"80pt"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"80pt"</span></div><div class="line">    <span class="attr">android:background</span>=<span class="string">"#00734D"</span>&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">FrameLayout</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"60pt"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"60pt"</span></div><div class="line">    <span class="attr">android:background</span>=<span class="string">"#39BF93"</span>&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">FrameLayout</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"40pt"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"40pt"</span></div><div class="line">    <span class="attr">android:background</span>=<span class="string">"#00402B"</span>&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>效果：</p></li></ul><div align="center"><img width="200" src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/190315/11.jpg"></div><p>示例实现了五个色块，都以左上角为原点，设置不同的大小，实现层级覆盖的效果。</p><h3 id="2-3-4-表格布局"><a href="#2-3-4-表格布局" class="headerlink" title="2.3.4 表格布局"></a>2.3.4 表格布局</h3><p>在表格布局中，整个页面就相当于一张大的表格，控件就放在每个表格中。</p><ul><li><p>xml示例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"> <span class="tag">&lt;<span class="name">TableLayout</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:stretchColumns</span>=<span class="string">"0"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">TableRow</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"75pt"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"75pt"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"#00BF80"</span>&gt;</div><div class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"75pt"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"75pt"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"#298A6A"</span>&gt;</div><div class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">TableRow</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">TableRow</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"75pt"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"75pt"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"#00734D"</span></div><div class="line">            <span class="attr">android:layout_span</span>=<span class="string">"2"</span>&gt;</div><div class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">TableRow</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">TableLayout</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>效果：</p></li></ul><div align="center"><img width="200" src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/190315/12.jpg"></div><p>示例实现了三个色块，先用<code>TableLayout</code>圈出整个表格，<code>stretchColumns</code>表示第N列自动扩充，可以看到上面的两个色块虽然设置的大小一样，但第0列的比第1列的大，就是因为第0列的自动扩充占据了两个剩余的部分。<br><code>TableRow</code>代表一行，在标签里可以根据需求设置多个控件，<br>再用<code>TableRow</code>，表示继续下一行，<code>layout_span</code>属性表示该控件占两个表格。</p><p>参考博客：<a href="https://www.cnblogs.com/ludashi/p/4883915.html" target="_blank" rel="external">Android开发之基本控件和详解四种布局方式</a></p><h2 id="2-4-设计的APP"><a href="#2-4-设计的APP" class="headerlink" title="2.4 设计的APP"></a>2.4 设计的APP</h2><p>有了上面的基础知识，基本就可以编写APP了。</p><h3 id="2-4-1-布局设计"><a href="#2-4-1-布局设计" class="headerlink" title="2.4.1 布局设计"></a>2.4.1 布局设计</h3><p>布局比较简单，采用线性布局，里面有6个控件：1个<code>TextView</code>显示字符、1个<code>Button</code>作为所有LED总开关、4个<code>CheckBox</code>分别控制每一个LED。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">android.support.constraint.ConstraintLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">".MainActivity"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/TEXT"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:gravity</span>=<span class="string">"center"</span></div><div class="line">            <span class="attr">android:layout_marginTop</span>=<span class="string">"30dp"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"Android access hardware"</span></div><div class="line">            <span class="attr">android:textColor</span>=<span class="string">"#008577"</span></div><div class="line">            <span class="attr">android:textSize</span>=<span class="string">"25sp"</span></div><div class="line">            <span class="attr">android:textStyle</span>=<span class="string">"bold"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/BUTTON"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"50pt"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_marginTop</span>=<span class="string">"30dp"</span></div><div class="line">            <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"ALL ON"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">CheckBox</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/LED1"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:onClick</span>=<span class="string">"onCheckboxClicked"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"LED1"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">CheckBox</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/LED2"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:onClick</span>=<span class="string">"onCheckboxClicked"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"LED2"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">CheckBox</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/LED3"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:onClick</span>=<span class="string">"onCheckboxClicked"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"LED3"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">CheckBox</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/LED4"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:onClick</span>=<span class="string">"onCheckboxClicked"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"LED4"</span> /&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.constraint.ConstraintLayout</span>&gt;</span></div></pre></td></tr></table></figure></p><h3 id="2-4-2-代码操作"><a href="#2-4-2-代码操作" class="headerlink" title="2.4.2 代码操作"></a>2.4.2 代码操作</h3><p>代码的操作逻辑也很简单，先是获取每个按键的ID，然后绑定<code>button</code>按键监听和<code>chekbox</code>按键监听。<br>在监听的函数里，进行相应的逻辑控制。这里展示屏蔽了所有的硬件操作，硬件操作在后面再添加。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.hceng.led;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.widget.Button;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.widget.CheckBox;</div><div class="line"><span class="keyword">import</span> android.widget.Toast;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> ledStatus = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Button button = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">private</span> CheckBox checkBoxLed1 = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">private</span> CheckBox checkBoxLed2 = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">private</span> CheckBox checkBoxLed3 = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">private</span> CheckBox checkBoxLed4 = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        initView();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>&#123;</div><div class="line">        checkBoxLed1 = (CheckBox) findViewById(R.id.LED1);</div><div class="line">        checkBoxLed2 = (CheckBox) findViewById(R.id.LED2);</div><div class="line">        checkBoxLed3 = (CheckBox) findViewById(R.id.LED3);</div><div class="line">        checkBoxLed4 = (CheckBox) findViewById(R.id.LED4);</div><div class="line"></div><div class="line">        button = (Button) findViewById(R.id.BUTTON);</div><div class="line">        button.setOnClickListener(<span class="keyword">new</span> MyButtonListener());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyButtonListener</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">            ledStatus = !ledStatus;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (ledStatus) &#123;</div><div class="line">                button.setText(<span class="string">"ALL OFF"</span>);</div><div class="line">                checkBoxLed1.setChecked(<span class="keyword">true</span>);</div><div class="line">                checkBoxLed2.setChecked(<span class="keyword">true</span>);</div><div class="line">                checkBoxLed3.setChecked(<span class="keyword">true</span>);</div><div class="line">                checkBoxLed4.setChecked(<span class="keyword">true</span>);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                button.setText(<span class="string">"ALL  ON"</span>);</div><div class="line">                checkBoxLed1.setChecked(<span class="keyword">false</span>);</div><div class="line">                checkBoxLed2.setChecked(<span class="keyword">false</span>);</div><div class="line">                checkBoxLed3.setChecked(<span class="keyword">false</span>);</div><div class="line">                checkBoxLed4.setChecked(<span class="keyword">false</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCheckboxClicked</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        <span class="keyword">boolean</span> checked = ((CheckBox) view).isChecked();</div><div class="line"></div><div class="line">        <span class="keyword">switch</span> (view.getId()) &#123;</div><div class="line">            <span class="keyword">case</span> R.id.LED1:</div><div class="line">                <span class="keyword">if</span> (checked) &#123;</div><div class="line">                    Toast.makeText(getApplicationContext(), <span class="string">"LED1 on"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    Toast.makeText(getApplicationContext(), <span class="string">"LED1 off"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.LED2:</div><div class="line">                <span class="keyword">if</span> (checked) &#123;</div><div class="line">                    Toast.makeText(getApplicationContext(), <span class="string">"LED2 on"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    Toast.makeText(getApplicationContext(), <span class="string">"LED2 off"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line"></div><div class="line">            <span class="keyword">case</span> R.id.LED3:</div><div class="line">                <span class="keyword">if</span> (checked) &#123;</div><div class="line">                    Toast.makeText(getApplicationContext(), <span class="string">"LED3 on"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    Toast.makeText(getApplicationContext(), <span class="string">"LED3 off"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line"></div><div class="line">            <span class="keyword">case</span> R.id.LED4:</div><div class="line">                <span class="keyword">if</span> (checked) &#123;</div><div class="line">                    Toast.makeText(getApplicationContext(), <span class="string">"LED4 on"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    Toast.makeText(getApplicationContext(), <span class="string">"LED4 off"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><div align="center"><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/190315/13.jpg"></div><h1 id="3-Android访问硬件的方法"><a href="#3-Android访问硬件的方法" class="headerlink" title="3. Android访问硬件的方法"></a>3. Android访问硬件的方法</h1><p>Android APP采用Java编写的，Java不能直接访问硬件，因此Android APP访问硬件只能两种方式：<strong>通过JNI直接访问</strong>和<strong>Android硬件访问服务</strong>。</p><h2 id="3-1-通过JNI直接访问"><a href="#3-1-通过JNI直接访问" class="headerlink" title="3.1 通过JNI直接访问"></a>3.1 通过JNI直接访问</h2><div align="center"><img width="600" src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/190315/14.jpg"></div><p><strong>驱动层</strong>：<br>和Linux驱动完全一样，编写驱动，向上提供<code>/dev/leds</code>节点；<br><strong>C库</strong>：<br>使用C/C++操作<code>/dev/leds</code>，将C库函数名和Java函数名建立映射关系，注册java本地方法；<br><strong>应用层</strong>：<br>APP加载C库(so文件)，加载后便可以调用C库提供的java本地方法：<code>open()</code>、<code>ioctl()</code>、<code>close()</code>实现对硬件的操作；</p><h3 id="3-1-1-编写LED驱动"><a href="#3-1-1-编写LED驱动" class="headerlink" title="3.1.1 编写LED驱动"></a>3.1.1 编写LED驱动</h3><p>LED的驱动很简单，就不多废话了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/miscdevice.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/device.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/fs.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/moduleparam.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/slab.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/ioctl.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/cdev.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/delay.h&gt;</span></span></div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/gpio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mach/gpio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;plat/gpio-cfg.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">int</span> led_gpios[] = &#123;</div><div class="line">    EXYNOS4212_GPM4(<span class="number">0</span>),</div><div class="line">    EXYNOS4212_GPM4(<span class="number">1</span>),</div><div class="line">    EXYNOS4212_GPM4(<span class="number">2</span>),</div><div class="line">    EXYNOS4212_GPM4(<span class="number">3</span>),</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">led_open</span><span class="params">(<span class="keyword">struct</span> inode *inode, <span class="keyword">struct</span> file *file)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</div><div class="line">        s3c_gpio_cfgpin(led_gpios[i], S3C_GPIO_OUTPUT);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* app : ioctl(fd, cmd, arg) */</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">long</span> <span class="title">led_ioctl</span><span class="params">(<span class="keyword">struct</span> file *filp, <span class="keyword">unsigned</span> <span class="keyword">int</span> cmd, <span class="keyword">unsigned</span> <span class="keyword">long</span> arg)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">/* cmd : 0-off, 1-on */</span></div><div class="line">    <span class="comment">/* arg : 0-3, which led */</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> ((cmd != <span class="number">0</span>) &amp;&amp; (cmd != <span class="number">1</span>))</div><div class="line">        <span class="keyword">return</span> -EINVAL;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (arg &gt; <span class="number">4</span>)</div><div class="line">        <span class="keyword">return</span> -EINVAL;</div><div class="line">    </div><div class="line">    gpio_set_value(led_gpios[arg], !cmd);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> file_operations leds_ops = &#123;</div><div class="line">    .owner  =   THIS_MODULE,    </div><div class="line">    .open   =   led_open,     </div><div class="line">    .unlocked_ioctl = led_ioctl,</div><div class="line">    </div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">int</span> major;</div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> <span class="keyword">class</span> *cls;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">leds_init</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    major = register_chrdev(<span class="number">0</span>, <span class="string">"leds"</span>, &amp;leds_ops);</div><div class="line"></div><div class="line">    cls = class_create(THIS_MODULE, <span class="string">"leds"</span>);</div><div class="line">    device_create(cls, <span class="literal">NULL</span>, MKDEV(major, <span class="number">0</span>), <span class="literal">NULL</span>, <span class="string">"leds"</span>); <span class="comment">/* /dev/leds */</span></div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">leds_exit</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    device_destroy(cls, MKDEV(major, <span class="number">0</span>));</div><div class="line">    class_destroy(cls);</div><div class="line">    unregister_chrdev(major, <span class="string">"leds"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">module_init(leds_init);</div><div class="line">module_exit(leds_exit);</div><div class="line"></div><div class="line">MODULE_LICENSE(<span class="string">"GPL"</span>);</div><div class="line">MODULE_AUTHOR(<span class="string">"hceng &lt;huangcheng.job@foxmail.com&gt;"</span>);</div><div class="line">MODULE_DESCRIPTION(<span class="string">"Tiny4412 leds driver."</span>);</div><div class="line">MODULE_VERSION(<span class="string">"v1.0"</span>);</div></pre></td></tr></table></figure><p>编写好后，放在内核目录<code>drivers/char/</code>里，并在Makefile里添加<code>obj-y += leds_drv.o</code>。<br>重新编译<code>make zImage</code>，将内核重新烧写到开发板里。</p><h3 id="3-1-2-编写C库文件"><a href="#3-1-2-编写C库文件" class="headerlink" title="3.1.2 编写C库文件"></a>3.1.2 编写C库文件</h3><p>参考前面Java的JNI，编写<code>hardcontrol.c</code>，生成<code>libhardcontrol.so</code>。<br>在<code>hardcontrol.c</code>里，操作<code>/dev/leds</code>，将操作函数与Java方法绑定，并注册。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ioctl.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;android/log.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DEBUG 1</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span>(DEBUG==1)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LOG_TAG <span class="meta-string">"JNI"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGV(...) __android_log_print(ANDROID_LOG_VERBOSE,TAG,__VA_ARGS__)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGD(...) __android_log_print(ANDROID_LOG_DEBUG, LOG_TAG, __VA_ARGS__)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGI(...) __android_log_print(ANDROID_LOG_INFO, LOG_TAG, __VA_ARGS__)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGE(...) __android_log_print(ANDROID_LOG_ERROR, LOG_TAG, __VA_ARGS__)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGV(...) NULL</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGD(...) NULL</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGI(...) NULL</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGE(...) NULL</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="keyword">static</span> jint fd;</div><div class="line"></div><div class="line"><span class="function">jint <span class="title">ledOpen</span><span class="params">(JNIEnv *env, jobject cls)</span></span></div><div class="line">&#123;</div><div class="line">    LOGD(<span class="string">"hardcontrol ledOpen\n"</span>);</div><div class="line">    </div><div class="line">    fd = open(<span class="string">"/dev/leds"</span>, O_RDWR);</div><div class="line">    <span class="keyword">if</span> (fd &gt;= <span class="number">0</span>)</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ledClose</span><span class="params">(JNIEnv *env, jobject cls)</span></span></div><div class="line">&#123;</div><div class="line">    LOGD(<span class="string">"hardcontrol ledClose\n"</span>);</div><div class="line">    </div><div class="line">    close(fd);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">jint <span class="title">ledCtrl</span><span class="params">(JNIEnv *env, jobject cls, jint number, jint status)</span></span></div><div class="line">&#123;</div><div class="line">    LOGD(<span class="string">"hardcontrol ledCtrl number=%d status=%d\n"</span>, number, status);</div><div class="line">    </div><div class="line">    <span class="keyword">int</span> ret = ioctl(fd, status, number);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> JNINativeMethod methods[] = &#123;</div><div class="line">    &#123;<span class="string">"ledOpen"</span>,  <span class="string">"()I"</span>,   (<span class="keyword">void</span> *)ledOpen&#125;, </div><div class="line">    &#123;<span class="string">"ledClose"</span>, <span class="string">"()V"</span>,   (<span class="keyword">void</span> *)ledClose&#125;, </div><div class="line">    &#123;<span class="string">"ledCtrl"</span>,  <span class="string">"(II)I"</span>, (<span class="keyword">void</span> *)ledCtrl&#125;, </div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function">JNIEXPORT jint JNICALL</span></div><div class="line"><span class="title">JNI_OnLoad</span><span class="params">(JavaVM *jvm, <span class="keyword">void</span> *reserved)</span></div><div class="line">&#123;</div><div class="line">    JNIEnv *env;</div><div class="line">    jclass cls;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> ((*jvm)-&gt;GetEnv(jvm, (<span class="keyword">void</span> **)&amp;env, JNI_VERSION_1_4)) </div><div class="line">        <span class="keyword">return</span> JNI_ERR; </div><div class="line">    </div><div class="line">    cls = (*env)-&gt;FindClass(env, <span class="string">"cn/hceng/hardlibrary/HardControl"</span>); </div><div class="line">    <span class="keyword">if</span> (cls == <span class="literal">NULL</span>) </div><div class="line">        <span class="keyword">return</span> JNI_ERR;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ((*env)-&gt;RegisterNatives(env, cls, methods, <span class="keyword">sizeof</span>(methods)/<span class="keyword">sizeof</span>(methods[<span class="number">0</span>])) &lt; <span class="number">0</span>)</div><div class="line">        <span class="keyword">return</span> JNI_ERR;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> JNI_VERSION_1_4;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>编译：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arm-linux-gcc -fPIC -shared hardcontrol.c -o libhardcontrol.so -I /usr/lib/jvm/java-1.7.0-openjdk-amd64/include/ -nostdlib /work/android_source/android-5.0.2/prebuilts/ndk/9/platforms/android-19/arch-arm/usr/lib/libc.so</div></pre></td></tr></table></figure></p><p>这里的<code>-I</code>指定头文件<code>jni.h</code>的路径；<code>-nostdlib</code>是为了不使用标准的<code>libc</code>库，因为后面<code>libhardcontrol.so</code>依赖<code>libc.so.6</code>，需要重新构建系统得到<code>libc.so.6</code>，但源码中有很多<code>libc.so</code>也能用，为了方便找了一个版本较高的<code>libc.so</code>。</p><p>最后把生成的<code>libhardcontrol.so</code>放在APP的<code>D:\Android\APP\LED\app\libs\armeabi\</code>路径下。</p><blockquote><p><strong>如何在C语言中打印log到android控制台</strong>：<br>1.修改<code>app\build.gradle</code>，在Android里添加ndk：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//hceng add for c language printing</div><div class="line">ndk &#123;</div><div class="line">    moduleName &quot;printing&quot;</div><div class="line">    abiFilters &quot;armeabi&quot;,&quot;armeabi-v7a&quot;,&quot;x86&quot;</div><div class="line"></div><div class="line">    ldLibs &quot;log&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>2.C文件中添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">#include &lt;android/log.h&gt;</div><div class="line">#define DEBUG 1 </div><div class="line"></div><div class="line">#if(DEBUG==1)</div><div class="line">#define LOG_TAG &quot;JNI&quot;</div><div class="line">#define LOGV(...) __android_log_print(ANDROID_LOG_VERBOSE,TAG,__VA_ARGS__)</div><div class="line">#define LOGD(...) __android_log_print(ANDROID_LOG_DEBUG, LOG_TAG, __VA_ARGS__)</div><div class="line">#define LOGI(...) __android_log_print(ANDROID_LOG_INFO, LOG_TAG, __VA_ARGS__)</div><div class="line">#define LOGE(...) __android_log_print(ANDROID_LOG_ERROR, LOG_TAG, __VA_ARGS__)</div><div class="line">#else</div><div class="line">#define LOGV(...) NULL</div><div class="line">#define LOGD(...) NULL</div><div class="line">#define LOGI(...) NULL</div><div class="line">#define LOGE(...) NULL</div><div class="line">#endif</div></pre></td></tr></table></figure></p><p>3.和printf一样使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//打印logcat</div><div class="line">LOGD(&quot;name=%s age=%f\n&quot;,name,age);</div></pre></td></tr></table></figure></p><p>4.编译C文件，需指定<code>android/log.h</code>路径和添加<code>liblog.so</code>库:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arm-linux-gcc -fPIC -shared hardcontrol.c -o libhardcontrol.so -I /usr/lib/jvm/java-1.7.0-openjdk-amd64/include/ -I /work/android_source/android-5.0.2/prebuilts/ndk/9/platforms/android-19/arch-arm/usr/include/ -nostdlib /work/android_source/android-5.0.2/prebuilts/ndk/9/platforms/android-19/arch-arm/usr/lib/libc.so /work/android_source/android-5.0.2/prebuilts/ndk/9/platforms/android-19/arch-arm/usr/lib/liblog.so</div></pre></td></tr></table></figure></p><p>参考博客：<a href="https://www.jianshu.com/p/620861484ab4?open_source=weibo_search" target="_blank" rel="external">C语言中打印log到android控制台</a></p></blockquote><h3 id="3-1-2-修改APP文件"><a href="#3-1-2-修改APP文件" class="headerlink" title="3.1.2 修改APP文件"></a>3.1.2 修改APP文件</h3><p>在APP目录<code>app\src\main\java\cn\hceng\hardlibrary\</code>下创建<code>HardControl.java</code>来加载C库和声明<code>Native</code>方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.hceng.hardlibrary;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HardControl</span> </span>&#123;</div><div class="line">    <span class="comment">//1.load</span></div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            System.loadLibrary(<span class="string">"hardcontrol"</span>); <span class="comment">//Call libhardcontrol.so from C.</span></div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//2.Function declaration</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">ledCtrl</span><span class="params">(<span class="keyword">int</span> number, <span class="keyword">int</span> status)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">ledOpen</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">ledClose</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在APP里，即可通过JNI调用本地方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> cn.hceng.hardlibrary.*; <span class="comment">//硬件库</span></div><div class="line"></div><div class="line">    HardControl.ledOpen(); <span class="comment">//硬件初始化</span></div><div class="line">    HardControl.ledCtrl(<span class="number">0</span>, <span class="number">1</span>); <span class="comment">//硬件操作</span></div><div class="line">    HardControl.ledCtrl(<span class="number">0</span>, <span class="number">0</span>); <span class="comment">//硬件操作</span></div></pre></td></tr></table></figure><br>在APP的适当位置，根据操作逻辑，调用本地方法。</p><p>最后还要修改<code>app\build.gradle</code>，在Android里添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//hceng add for led</div><div class="line">sourceSets &#123;</div><div class="line">    main &#123;</div><div class="line">        jniLibs.srcDirs = [&apos;libs&apos;];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>此时修改后，将不能在AVD里仿真了，必须在开发板上测试。</p><p>最后，编译APP，插上USB线，连接开发板，运行测试，通过APP实现对LED的控制。</p><h2 id="3-2-Android硬件访问服务"><a href="#3-2-Android硬件访问服务" class="headerlink" title="3.2 Android硬件访问服务"></a>3.2 Android硬件访问服务</h2><hr><p><div align="center"><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本文采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href="http://hceng.cn/" target="_blank" rel="external">hceng’s blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2019年，正式学习Android驱动。&lt;br&gt;以LED为切入点，学习Android访问硬件的方法。&lt;br&gt;
    
    </summary>
    
    
      <category term="Android应用" scheme="http://yoursite.com/tags/Android%E5%BA%94%E7%94%A8/"/>
    
      <category term="Android驱动" scheme="http://yoursite.com/tags/Android%E9%A9%B1%E5%8A%A8/"/>
    
  </entry>
  
  <entry>
    <title>博客两周年</title>
    <link href="http://yoursite.com/2019/03/01/%E5%8D%9A%E5%AE%A2%E4%B8%A4%E5%91%A8%E5%B9%B4/"/>
    <id>http://yoursite.com/2019/03/01/博客两周年/</id>
    <published>2019-03-01T08:58:00.000Z</published>
    <updated>2019-02-25T03:52:55.730Z</updated>
    
    <content type="html"><![CDATA[<p>2018-2019，博客一年统计。<br><a id="more"></a></p><p><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/190301/1.jpg" alt=""><br><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/190301/2.jpg" alt=""><br><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/190301/3.jpg" alt=""><br><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/190301/4.jpg" alt=""><br><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/190301/5.jpg" alt=""><br><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/190301/6.jpg" alt=""><br><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/190301/7.jpg" alt=""><br><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/190301/8.jpg" alt=""></p><hr><p><div align="center"><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本文采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href="http://hceng.cn/" target="_blank" rel="external">hceng’s blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2018-2019，博客一年统计。&lt;br&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>AM335X——1-Wire和IrDA驱动</title>
    <link href="http://yoursite.com/2019/02/15/AM335X%E2%80%94%E2%80%941-Wire%E5%92%8CIrDA%E9%A9%B1%E5%8A%A8/"/>
    <id>http://yoursite.com/2019/02/15/AM335X——1-Wire和IrDA驱动/</id>
    <published>2019-02-15T06:38:22.000Z</published>
    <updated>2019-02-22T03:02:46.972Z</updated>
    
    <content type="html"><![CDATA[<p>记录DS18B20温度传感器、DH11温湿度传感器、红外遥控驱动。<br><a id="more"></a><br>1-wire(单总线协议)就是只使用一条线(GPIO)实现时钟/数据的双向传输。<br>DS18B20是比较标准的1-wire协议，可以通过逻辑分析仪显示出含义，DH11不是很标准(专利原因？)，需要自己参考芯片手册理解含义。<br>但它们原理都差不多，且都对时序要求比较高(us级的延时)。</p><p>IrDA也是一根线，原理也差不多，因此也把它放在一起记录。<br>AM335X没有1-wire的控制器，因此使用GPIO模拟。</p><h1 id="1-DS18B20"><a href="#1-DS18B20" class="headerlink" title="1. DS18B20"></a>1. DS18B20</h1><h2 id="1-1-基础知识"><a href="#1-1-基础知识" class="headerlink" title="1.1 基础知识"></a>1.1 基础知识</h2><h3 id="1-1-1-性能参数"><a href="#1-1-1-性能参数" class="headerlink" title="1.1.1 性能参数"></a>1.1.1 性能参数</h3><p>分辨率：9~12位可编程(上电默认12位)<br>精度：±5℃(在-10~+85℃)<br>量程：-55°C ~ 125°C<br>转换时间：750ms(12位分辨率)</p><h3 id="1-1-2-温度数据格式"><a href="#1-1-2-温度数据格式" class="headerlink" title="1.1.2 温度数据格式"></a>1.1.2 温度数据格式</h3><p>一次返回的温度数据为16位，前五位表示正负，中间七位表示整数部分，最低四位为小数部分；<br>温度传感器的分辨率为用户可编程的9、10、11或12位, 分别对应0.5℃、0.25℃、0.125℃和 0.0625℃｡<br>因此温度计算结果为：<strong>(正负)整数部分+小数部分*分辨率</strong> </p><div align="center"><img width="800" src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/190215/1.png"></div><p>以<code>0000 0000 1010 0010</code>为例，前五位为0，即温度为零上；中间七位<code>0001010</code>，即温度整数部分为10；最后四位<code>0010</code>，即温度小数部分为<code>2*0.625=0.125</code>，因此温度为<code>+10.125</code>。</p><h3 id="1-1-3-64Bits只读数据"><a href="#1-1-3-64Bits只读数据" class="headerlink" title="1.1.3 64Bits只读数据"></a>1.1.3 64Bits只读数据</h3><p>低八位用于CRC校验，中间48位是DS18B20唯一序列号，高八位是产品系列号(为28h)</p><div align="center"><img width="800" src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/190215/2.png"></div><h3 id="1-1-4-操作步骤"><a href="#1-1-4-操作步骤" class="headerlink" title="1.1.4 操作步骤"></a>1.1.4 操作步骤</h3><p>每次对DS18B20操作，都必须严格按照以下步骤：<br>1、初始化；<br>2、ROM指令；<br>3、功能指令；</p><h3 id="1-1-5-ROM指令和功能指令"><a href="#1-1-5-ROM指令和功能指令" class="headerlink" title="1.1.5 ROM指令和功能指令"></a>1.1.5 ROM指令和功能指令</h3><table style="border-collapse:collapse;border-spacing:0" class="tg"><tr><th style="font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;background-color:#efefef;text-align:center;vertical-align:top" colspan="3">ROM指令</th></tr><tr><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;text-align:center;vertical-align:top">指令名称</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;text-align:center;vertical-align:top">指令代码</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;text-align:center;vertical-align:top">指令功能</td></tr><tr><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;color:#fe0000;text-align:center;vertical-align:top">读ROM</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;color:#fe0000;text-align:center;vertical-align:top">33H</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;color:#fe0000;text-align:left;vertical-align:top">读ROM中64Bits的只读数据</td></tr><tr><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;text-align:center;vertical-align:top">ROM匹配</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;text-align:center;vertical-align:top">55H</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;text-align:left;vertical-align:top">发出此命令后接着发64Bits的ROM编码，使单总线上与编码匹配的DS18B3做出响应</td></tr><tr><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;text-align:center;vertical-align:top">搜索ROM</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;text-align:center;vertical-align:top">F0H</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;text-align:left;vertical-align:top">用于确定挂在总线上的DS18B20的个数和识别64Bits的ROM地址</td></tr><tr><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;color:#fe0000;text-align:center;vertical-align:top">跳过ROM</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;color:#fe0000;text-align:center;vertical-align:top">CCH</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;color:#fe0000;text-align:left;vertical-align:top">忽略64BitsROM只读数据，接着发出功能指令，进行温度转换或读取温度</td></tr><tr><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;text-align:center;vertical-align:top">警报搜索</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;text-align:center;vertical-align:top">ECH</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;text-align:left;vertical-align:top">只有温度超过设定上限或下限的DS18B20才做出响应</td></tr></table><table style="border-collapse:collapse;border-spacing:0" class="tg"><tr><th style="font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;background-color:#efefef;text-align:center;vertical-align:top" colspan="3">功能指令</th></tr><tr><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;text-align:center;vertical-align:top">指令名称</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;text-align:center;vertical-align:top">指令代码</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;text-align:center;vertical-align:top">指令功能</td></tr><tr><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;color:#fe0000;text-align:center;vertical-align:top">温度转换</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;color:#fe0000;text-align:center;vertical-align:top">44H</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;color:#fe0000;text-align:left;vertical-align:top">启动温度转换，结果将保存在内部RAM中</td></tr><tr><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;color:#fe0000;text-align:center;vertical-align:top">读取温度</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;color:#fe0000;text-align:center;vertical-align:top">BEH</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;color:#fe0000;text-align:left;vertical-align:top">读取内部RAM中的温度数据</td></tr><tr><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;text-align:center;vertical-align:top">设置报警温度</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;text-align:center;vertical-align:top">4EH</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;text-align:left;vertical-align:top">设置上或下限报警温度指令，接着应发送两字节数据</td></tr><tr><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;text-align:center;vertical-align:top">保存报警温度</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;text-align:center;vertical-align:top">48H</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;text-align:left;vertical-align:top">将RAM中的报警温度数据，复制到EEPROM中保存</td></tr><tr><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;text-align:center;vertical-align:top">恢复RAM</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;text-align:center;vertical-align:top">B8H</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;text-align:left;vertical-align:top">将EEPROM中的报警温度数据恢复到RAM</td></tr><tr><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;text-align:center;vertical-align:top">读供电方式</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;text-align:center;vertical-align:top">B4H</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;text-align:left;vertical-align:top">寄生供电返回0，外界电源供电返回1</td></tr></table><h3 id="1-1-5-初始化时序"><a href="#1-1-5-初始化时序" class="headerlink" title="1.1.5 初始化时序"></a>1.1.5 初始化时序</h3><div align="center"><img width="800" src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/190215/3.png"></div><p>初始化DS18B20的时序如上，先拉低480us，然后拉高释放总线，随后在60-240us内，DS18B20将会拉低总线进行响应。<br>此时检测总线释放被拉低既可判断出DS18B20是否初始化成功。</p><h3 id="1-1-6-读写时序"><a href="#1-1-6-读写时序" class="headerlink" title="1.1.6 读写时序"></a>1.1.6 读写时序</h3><div align="center"><img width="800" src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/190215/4.png"></div><p>上面的图是写0或1的时序：<br>如果写0，拉低至少60us(写周期为60-120us)即可；如果写1，先拉低至少1us，然后拉高，整个写周期至少为60us即可。</p><p>下面的图是读0或1的时序：<br>先拉低至少1us，随后读取电平，如果为0，即读到的数据是0，如果为1，即可读到的数据是1。<br>整个过程必须在15us内完成，15us后引脚都会被拉高。</p><h2 id="1-2-内核驱动"><a href="#1-2-内核驱动" class="headerlink" title="1.2 内核驱动"></a>1.2 内核驱动</h2><p>内核中自带1-Wire和DS18B20的驱动。<br><code>drivers/w1/masters/w1-gpio.c</code>是单总线的IO操作方法,用于模拟单总线时序；<br><code>drivers/w1/slaves/w1_therm.c</code>是DS18B20的寄存器操作方法，和IO时序无关；</p><h3 id="1-2-1-加入内核"><a href="#1-2-1-加入内核" class="headerlink" title="1.2.1 加入内核"></a>1.2.1 加入内核</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Device Drivers  ---&gt;</div><div class="line">    &lt;*&gt; Dallas's 1-wire support  ---&gt;                                                                </div><div class="line">        [*]   Userspace communication over connector                                                   </div><div class="line">              1-wire Bus Masters  ---&gt;       </div><div class="line">                  &lt;*&gt; GPIO 1-wire busmaster</div><div class="line">              1-wire Slaves  ---&gt;       </div><div class="line">                  &lt;*&gt; Thermal family implementation</div></pre></td></tr></table></figure><h3 id="1-2-2-修改设备树"><a href="#1-2-2-修改设备树" class="headerlink" title="1.2.2 修改设备树"></a>1.2.2 修改设备树</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class">onewire@0 </span>&#123; </div><div class="line">    compatible = <span class="string">"w1-gpio"</span>;</div><div class="line">    gpios = <span class="params">&lt;<span class="variable">&amp;gpio0</span> <span class="number">13</span> <span class="number">0</span>&gt;</span>;</div><div class="line">    <span class="comment">//pinctrl-0 = &lt;&amp;ds18b20_dq_pin&gt;;</span></div><div class="line">&#125;;  </div></pre></td></tr></table></figure><h3 id="1-2-3-应用测试"><a href="#1-2-3-应用测试" class="headerlink" title="1.2.3 应用测试"></a>1.2.3 应用测试</h3><p><code>cat /sys/bus/w1/drivers/w1_slave_driver/28-01d58c07010c/w1_slave</code></p><div align="left"><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/190215/5.png"></div><h2 id="1-3-自己驱动"><a href="#1-3-自己驱动" class="headerlink" title="1.3 自己驱动"></a>1.3 自己驱动</h2><p>这次驱动，吸取了前面<a href="https://hceng.cn/2019/01/18/AM335X%E2%80%94%E2%80%94hwmon%E5%92%8Cinput%E5%AD%90%E7%B3%BB%E7%BB%9F/#3-%E6%80%BB%E7%BB%93" target="_blank" rel="external">AM335X——hwmon和input子系统</a>的经验。</p><h3 id="1-3-1-完整代码"><a href="#1-3-1-完整代码" class="headerlink" title="1.3.1 完整代码"></a>1.3.1 完整代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//cat /sys/class/hwmon/hwmon0/device/temperature</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/delay.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/gpio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/of_gpio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/platform_device.h&gt;</span> </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/hwmon.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/hwmon-sysfs.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/irqflags.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">struct</span> ds18b20 &#123;</div><div class="line">    <span class="keyword">struct</span> device *hwmon_dev;</div><div class="line">    <span class="keyword">struct</span> mutex lock;  </div><div class="line">    <span class="keyword">int</span> dq_pin;</div><div class="line">    u8 value[<span class="number">2</span>];</div><div class="line">    u8 family_code;</div><div class="line">    u8 serial_num[<span class="number">6</span>];</div><div class="line">    u8 crc;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> ds18b20 ds;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">ds18b20_init</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> ret = <span class="number">1</span>;</div><div class="line">    </div><div class="line">    mutex_lock(&amp;ds.lock);</div><div class="line"></div><div class="line">    gpio_direction_output(ds.dq_pin, <span class="number">1</span>);</div><div class="line">    udelay(<span class="number">2</span>);</div><div class="line">    gpio_direction_output(ds.dq_pin, <span class="number">0</span>); <span class="comment">//Low level 480us for reset</span></div><div class="line">    udelay(<span class="number">480</span>);                      </div><div class="line">    gpio_direction_output(ds.dq_pin, <span class="number">1</span>); <span class="comment">//Pull high release bus</span></div><div class="line">    udelay(<span class="number">60</span>);</div><div class="line">    </div><div class="line">    gpio_direction_input(ds.dq_pin); <span class="comment">//Read response pulse</span></div><div class="line">    ret = gpio_get_value(ds.dq_pin);</div><div class="line">    udelay(<span class="number">240</span>);  <span class="comment">//Waiting for the corresponding end</span></div><div class="line">    </div><div class="line">    mutex_unlock(&amp;ds.lock);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">write_byte</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> data)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> flags;</div><div class="line"></div><div class="line">    mutex_lock(&amp;ds.lock);</div><div class="line">    </div><div class="line">    local_irq_save(flags); <span class="comment">//Save interrupt</span></div><div class="line">    <span class="comment">//local_irq_disable(); //Close all interrupts</span></div><div class="line"></div><div class="line">    gpio_direction_output(ds.dq_pin, <span class="number">1</span>); </div><div class="line"></div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i ++)</div><div class="line">    &#123;</div><div class="line">        gpio_direction_output(ds.dq_pin, <span class="number">1</span>); </div><div class="line">        udelay(<span class="number">2</span>);    </div><div class="line">        gpio_direction_output(ds.dq_pin, <span class="number">0</span>); <span class="comment">//Start at a low level greater than 1us</span></div><div class="line">        udelay(<span class="number">5</span>);</div><div class="line">        </div><div class="line">        gpio_direction_output(ds.dq_pin, data &amp; <span class="number">0x01</span>);  </div><div class="line">        udelay(<span class="number">60</span>); <span class="comment">//Write cycle is greater than 60us</span></div><div class="line">        </div><div class="line">        data &gt;&gt;= <span class="number">1</span>;   </div><div class="line">    &#125;</div><div class="line">    local_irq_restore(flags); <span class="comment">//Recovery interrupt</span></div><div class="line">    <span class="comment">//local_irq_enable(); //Open all interrupts</span></div><div class="line"></div><div class="line">    mutex_unlock(&amp;ds.lock); </div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> <span class="title">read_byte</span><span class="params">(<span class="keyword">void</span>)</span>    </span></div><div class="line">&#123;    </div><div class="line">    <span class="keyword">int</span> i;    </div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> flags;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> data = <span class="number">0</span>;    </div><div class="line"></div><div class="line">    mutex_lock(&amp;ds.lock);</div><div class="line">    </div><div class="line">    local_irq_save(flags);</div><div class="line">    <span class="comment">//local_irq_disable();</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)    </div><div class="line">    &#123;    </div><div class="line">        gpio_direction_output(ds.dq_pin, <span class="number">1</span>);    </div><div class="line">        udelay(<span class="number">2</span>);    </div><div class="line">        gpio_direction_output(ds.dq_pin, <span class="number">0</span>); <span class="comment">//Start at a low level greater than 1us</span></div><div class="line">        udelay(<span class="number">5</span>);    </div><div class="line">        </div><div class="line">        gpio_direction_output(ds.dq_pin, <span class="number">1</span>); <span class="comment">//Pull high release bus </span></div><div class="line">        udelay(<span class="number">1</span>); </div><div class="line">      </div><div class="line">        data &gt;&gt;= <span class="number">1</span>;   </div><div class="line">        gpio_direction_input(ds.dq_pin);</div><div class="line">        <span class="keyword">if</span> (gpio_get_value(ds.dq_pin)) <span class="comment">//Must be read within 15us after being pulled low</span></div><div class="line">            data |= <span class="number">0x80</span>;  </div><div class="line">      </div><div class="line">        udelay(<span class="number">60</span>); <span class="comment">//Read cycle is greater than 60us;   </span></div><div class="line">    &#125;    </div><div class="line">    </div><div class="line">    local_irq_restore(flags); </div><div class="line">    <span class="comment">//local_irq_enable();</span></div><div class="line"></div><div class="line">    mutex_unlock(&amp;ds.lock);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> data;    </div><div class="line">&#125; </div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> ssize_t <span class="title">ds18b20_get_sensor_value</span><span class="params">(<span class="keyword">struct</span> device *dev, <span class="keyword">struct</span> device_attribute *devattr, <span class="keyword">char</span> *buf)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> ret = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> m, n;</div><div class="line"></div><div class="line">    ret = ds18b20_init(); <span class="comment">//Reset initialization of the DS18B20 before each read and write</span></div><div class="line">    <span class="keyword">if</span>(<span class="number">0</span> != ret)</div><div class="line">    &#123;</div><div class="line">        printk(KERN_ER<span class="string">R"%s ds18b20_init error.\n"</span>,__func__);</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;    </div><div class="line">    &#125;</div><div class="line">    write_byte(<span class="number">0xCC</span>); <span class="comment">//Skip commands for ROM operations</span></div><div class="line">    write_byte(<span class="number">0x44</span>); <span class="comment">//Start the DS18B20 acquisition temperature</span></div><div class="line"></div><div class="line">    </div><div class="line">    ret = ds18b20_init(); </div><div class="line">    <span class="keyword">if</span>(<span class="number">0</span> != ret)</div><div class="line">    &#123;</div><div class="line">        printk(KERN_ER<span class="string">R"%s ds18b20_init error.\n"</span>,__func__);</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;    </div><div class="line">    &#125;</div><div class="line">    write_byte(<span class="number">0xCC</span>); <span class="comment">//Skip commands for ROM operations    </span></div><div class="line">    write_byte(<span class="number">0xBE</span>); <span class="comment">//Read the data in the DS18B20 register</span></div><div class="line"></div><div class="line">    ds.value[<span class="number">0</span>] = read_byte(); <span class="comment">//Low byte</span></div><div class="line">    ds.value[<span class="number">1</span>] = read_byte(); <span class="comment">//High byte</span></div><div class="line"></div><div class="line">    m = ((ds.value[<span class="number">1</span>] &amp; <span class="number">0x07</span>)&lt;&lt;<span class="number">4</span>) + ((ds.value[<span class="number">0</span>] &amp; <span class="number">0xF0</span>)&gt;&gt;<span class="number">4</span>); <span class="comment">//Integer part(7 bits in the middle)</span></div><div class="line">    n = ds.value[<span class="number">0</span>] &amp; <span class="number">0x0F</span>; <span class="comment">//Fractional part(lower 4 bits)</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span>(ds.value[<span class="number">1</span>] &amp; <span class="number">0xF8</span>)<span class="comment">//The high 5 bits indicate positive and negative</span></div><div class="line">        ret = <span class="built_in">sprintf</span>(buf, <span class="string">"TEMP: -%d.%02d\n"</span>, m, n*<span class="number">625</span>);</div><div class="line">    <span class="keyword">else</span></div><div class="line">        ret = <span class="built_in">sprintf</span>(buf, <span class="string">"TEMP: %d.%02d\n"</span>, m, n*<span class="number">625</span>);;   </div><div class="line"></div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> ssize_t <span class="title">ds18b20_get_sensor_info</span><span class="params">(<span class="keyword">struct</span> device *dev, <span class="keyword">struct</span> device_attribute *devattr, <span class="keyword">char</span> *buf)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i, ret = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">struct</span> sensor_device_attribute *attr = to_sensor_dev_attr(devattr);</div><div class="line">    </div><div class="line">    ret = ds18b20_init();  </div><div class="line">    <span class="keyword">if</span>(<span class="number">0</span> != ret)</div><div class="line">    &#123;</div><div class="line">        printk(KERN_ER<span class="string">R"%s ds18b20_init error.\n"</span>,__func__);</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;    </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    write_byte(<span class="number">0x33</span>); <span class="comment">//Read ROM command</span></div><div class="line">    </div><div class="line">    ds.family_code = read_byte(); <span class="comment">//The lower 8 bits is the family code(28h)</span></div><div class="line">    </div><div class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">6</span>; i++) <span class="comment">//The middle 48 bits are the unique serial number</span></div><div class="line">        ds.serial_num[i] = read_byte();</div><div class="line">  </div><div class="line">    </div><div class="line">    ds.crc = read_byte(); <span class="comment">//The high 8 bits are the CRC check data.</span></div><div class="line"></div><div class="line">    <span class="keyword">switch</span>(attr-&gt;index)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">            ret = <span class="built_in">sprintf</span>(buf, <span class="string">"0x%x\n"</span>, ds.family_code);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">            ret = <span class="built_in">sprintf</span>(buf, <span class="string">"%02d%02d%02d%02d%02d%02d\n"</span>, ds.serial_num[<span class="number">0</span>],ds.serial_num[<span class="number">1</span>], \</div><div class="line">                          ds.serial_num[<span class="number">2</span>], ds.serial_num[<span class="number">3</span>],ds.serial_num[<span class="number">4</span>],ds.serial_num[<span class="number">5</span>]);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="number">3</span>:</div><div class="line">            ret = <span class="built_in">sprintf</span>(buf, <span class="string">"%d\n"</span>, ds.crc);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> sensor_device_attribute ds18b20_temp_attr[] = &#123;</div><div class="line">    SENSOR_ATTR(temperature, S_IRUGO, ds18b20_get_sensor_value, <span class="literal">NULL</span>, <span class="number">0</span>),</div><div class="line">    SENSOR_ATTR(family_code, S_IRUGO, ds18b20_get_sensor_info, <span class="literal">NULL</span>, <span class="number">1</span>),</div><div class="line">    SENSOR_ATTR(serial_num, S_IRUGO, ds18b20_get_sensor_info, <span class="literal">NULL</span>, <span class="number">2</span>),</div><div class="line">    SENSOR_ATTR(crc, S_IRUGO, ds18b20_get_sensor_info, <span class="literal">NULL</span>, <span class="number">3</span>),</div><div class="line">&#125;;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span>  <span class="title">ds18b20_probe</span><span class="params">(<span class="keyword">struct</span> platform_device *pdev)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> status, i;</div><div class="line">    </div><div class="line">    <span class="comment">//printk(KERN_INFO"%s OK.\n",__func__);</span></div><div class="line"></div><div class="line">    ds.dq_pin = of_get_named_gpio(pdev-&gt;dev.of_node, <span class="string">"dq-gpio"</span>, <span class="number">0</span>);</div><div class="line">    status = gpio_request(ds.dq_pin, <span class="string">"ds18b20_dq_pin"</span>);   </div><div class="line">    <span class="keyword">if</span> (status)</div><div class="line">    &#123;</div><div class="line">        dev_err(&amp;pdev-&gt;dev, <span class="string">"gpio_request() fail.\n"</span>);</div><div class="line">        <span class="keyword">return</span> -EBUSY;</div><div class="line">    &#125;   </div><div class="line"> </div><div class="line">    mutex_init(&amp;ds.lock);</div><div class="line">    mutex_lock(&amp;ds.lock);</div><div class="line">    </div><div class="line">    dev_set_drvdata(&amp;pdev-&gt;dev, &amp;ds);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;(<span class="keyword">sizeof</span>(ds18b20_temp_attr)/<span class="keyword">sizeof</span>(<span class="keyword">struct</span> sensor_device_attribute)); i++)</div><div class="line">    &#123;</div><div class="line">        status = device_create_file(&amp;pdev-&gt;dev, &amp;ds18b20_temp_attr[i].dev_attr);</div><div class="line">        <span class="keyword">if</span> (status)</div><div class="line">        &#123;</div><div class="line">            dev_err(&amp;pdev-&gt;dev, <span class="string">"device_create_file() failed.\n"</span>);</div><div class="line">            <span class="keyword">goto</span> fail_crete_file;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ds.hwmon_dev = hwmon_device_register(&amp;pdev-&gt;dev);</div><div class="line">    <span class="keyword">if</span> (IS_ERR(ds.hwmon_dev))</div><div class="line">    &#123;</div><div class="line">        dev_err(&amp;pdev-&gt;dev, <span class="string">"hwmon_device_register() fail.\n"</span>);</div><div class="line">        status = PTR_ERR(ds.hwmon_dev);</div><div class="line">        <span class="keyword">goto</span> fail_device_register;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    mutex_unlock(&amp;ds.lock);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    </div><div class="line">fail_device_register:</div><div class="line">    hwmon_device_unregister(ds.hwmon_dev);</div><div class="line">fail_crete_file:</div><div class="line">    <span class="keyword">for</span> (i--; i&gt;=<span class="number">0</span>; i--)</div><div class="line">        device_remove_file(&amp;pdev-&gt;dev, &amp;ds18b20_temp_attr[i].dev_attr);</div><div class="line">    </div><div class="line">    dev_set_drvdata(&amp;pdev-&gt;dev, <span class="literal">NULL</span>);</div><div class="line">    gpio_free(ds.dq_pin);</div><div class="line">    mutex_unlock(&amp;ds.lock);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> status;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span>  <span class="title">ds18b20_remove</span><span class="params">(<span class="keyword">struct</span> platform_device *pdev)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    </div><div class="line">    mutex_lock(&amp;ds.lock);</div><div class="line">    </div><div class="line">    hwmon_device_unregister(ds.hwmon_dev);</div><div class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;(<span class="keyword">sizeof</span>(ds18b20_temp_attr)/<span class="keyword">sizeof</span>(<span class="keyword">struct</span> sensor_device_attribute)); i++)</div><div class="line">        device_remove_file(&amp;pdev-&gt;dev, &amp;ds18b20_temp_attr[i].dev_attr);</div><div class="line">    dev_set_drvdata(&amp;pdev-&gt;dev, <span class="literal">NULL</span>);</div><div class="line">    gpio_free(ds.dq_pin);</div><div class="line">    </div><div class="line">    mutex_unlock(&amp;ds.lock);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">struct</span> of_device_id ds18b20_of_match[] = &#123;</div><div class="line">    &#123; .compatible = <span class="string">"maxim,ds18b20"</span>, .data = <span class="literal">NULL</span> &#125;,</div><div class="line">    &#123; <span class="comment">/* sentinel */</span> &#125;</div><div class="line"></div><div class="line">&#125;;</div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> platform_driver ds18b20_drv = &#123;</div><div class="line">    .probe      = ds18b20_probe,</div><div class="line">    .remove     = ds18b20_remove,</div><div class="line">    .driver     = &#123;</div><div class="line">        .name   = <span class="string">"ds18b20_drv"</span>,</div><div class="line">        .owner  = THIS_MODULE,</div><div class="line">        .of_match_table = of_match_ptr(ds18b20_of_match),</div><div class="line">    &#125;,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">ds18b20_drv_init</span><span class="params">(<span class="keyword">void</span>)</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="comment">//printk(KERN_INFO"%s OK.\n",__func__);</span></div><div class="line">    <span class="keyword">return</span> platform_driver_register(&amp;ds18b20_drv);  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ds18b20_drv_exit</span><span class="params">(<span class="keyword">void</span>)</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="comment">//printk(KERN_INFO"%s OK.\n",__func__);</span></div><div class="line">    platform_driver_unregister(&amp;ds18b20_drv);  </div><div class="line">&#125;  </div><div class="line"></div><div class="line">module_init(ds18b20_drv_init);</div><div class="line">module_exit(ds18b20_drv_exit);</div><div class="line"></div><div class="line">MODULE_LICENSE(<span class="string">"GPL"</span>);</div><div class="line">MODULE_AUTHOR(<span class="string">"hceng &lt;huangcheng.job@foxmail.com&gt;"</span>);</div><div class="line">MODULE_DESCRIPTION(<span class="string">"TI am335x board ds18b20 driver."</span>);</div><div class="line">MODULE_VERSION(<span class="string">"v1.0"</span>);</div></pre></td></tr></table></figure><p>驱动内容比较简单，严格按照前面的时序操作即可。<br>值得一提的是，因为时序是us级的，如果在发送时序过程中，产生中断就可能导致时序出错，因此在读写函数里加入<code>local_irq_save(flags);</code>、<code>local_irq_restore(flags);</code>临时开/关中断。</p><h3 id="1-3-2-设备树"><a href="#1-3-2-设备树" class="headerlink" title="1.3.2 设备树"></a>1.3.2 设备树</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">    <span class="class">ds18b20 </span>&#123;</div><div class="line">        compatible = <span class="string">"maxim,ds18b20"</span>;</div><div class="line">        dq-gpio = <span class="params">&lt;<span class="variable">&amp;gpio0</span> <span class="number">13</span> <span class="number">0</span>&gt;</span>;</div><div class="line">        pinctrl<span class="number">-0</span> = <span class="params">&lt;<span class="variable">&amp;ds18b20_dq_pin</span>&gt;</span>;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    ……</div><div class="line"></div><div class="line"><span class="variable">&amp;am33xx_pinmux</span> &#123;</div><div class="line"><span class="symbol">    ds18b20_dq_pin:</span> <span class="class">ds18b20_dq_pin0 </span>&#123;</div><div class="line">        pinctrl-single,pins = <span class="params">&lt;</span></div><div class="line">            <span class="number">0x17C</span> (PIN_INPUT_PULLDOWN | MUX_MODE7)  /* conf_uart1_rtsn.gpio0_13 */</div><div class="line">        &gt;;</div><div class="line">    &#125;;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h3 id="1-3-3-应用测试"><a href="#1-3-3-应用测试" class="headerlink" title="1.3.3 应用测试"></a>1.3.3 应用测试</h3><div align="left"><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/190215/6.png"></div><h1 id="2-DH11"><a href="#2-DH11" class="headerlink" title="2. DH11"></a>2. DH11</h1><h2 id="2-1-基础知识"><a href="#2-1-基础知识" class="headerlink" title="2.1 基础知识"></a>2.1 基础知识</h2><h3 id="2-1-1-性能参数"><a href="#2-1-1-性能参数" class="headerlink" title="2.1.1 性能参数"></a>2.1.1 性能参数</h3><ul><li><p>温度<br>分辨率：1°C<br>精度：±2℃<br>检测范围：0°C ~ 50°C</p></li><li><p>湿度<br>分辨率：1%RH<br>精度：±5%RH (0~50°C)<br>检测范围：20%RH ~ 90%RH (25°C)</p></li></ul><p>采样周期间隔不得低于1秒钟。</p><p>可以看到无论是测量温度的精度还是范围、采样周期，都比较烂。。</p><h3 id="2-1-2-数据格式"><a href="#2-1-2-数据格式" class="headerlink" title="2.1.2 数据格式"></a>2.1.2 数据格式</h3><p>一次返回的数据长度为40Bits，高位在前。<br><strong>8bit湿度整数数据+8bit湿度小数数据+8bit温度整数数据+8bit温度小数数据+8bit校验和</strong><br>可以看到数据分小数部分和整数部分，当前小数部分用于以后扩展，现读出为零。</p><p>另外还有数据校验，如果”8bit湿度整数数据+8bit湿度小数数据+8bi温度整数数据+8bit温度小数数据”所得结果的末8位，等于”8bit校验和”即数据正确。</p><h3 id="2-1-3-开始时序"><a href="#2-1-3-开始时序" class="headerlink" title="2.1.3 开始时序"></a>2.1.3 开始时序</h3><div align="center"><img width="800" src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/190215/7.jpg"></div><p>开始时，主机拉低至少18ms，随后拉高20-40us，然后释放总线，完成开始信号。<br>DH11随后拉低80us，再拉高80us，最后发送40Bits数据。</p><h3 id="2-1-4-读时序"><a href="#2-1-4-读时序" class="headerlink" title="2.1.4 读时序"></a>2.1.4 读时序</h3><div align="center"><img width="600" src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/190215/8.jpg"></div><p>先读到50us的低电平，随后如果是26-28us的高电平即收到的是数据0，如果是70us的高电平即收到的数据是1。</p><h2 id="2-2-自己驱动"><a href="#2-2-自己驱动" class="headerlink" title="2.2 自己驱动"></a>2.2 自己驱动</h2><p>内核中不含DH11驱动，自己写的驱动如下。</p><h3 id="2-2-1-完整代码"><a href="#2-2-1-完整代码" class="headerlink" title="2.2.1 完整代码"></a>2.2.1 完整代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//cat /sys/class/hwmon/hwmon0/device/temperature</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/delay.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/gpio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/of_gpio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/platform_device.h&gt;</span> </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/hwmon.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/hwmon-sysfs.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/irqflags.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/wait.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/sched.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">struct</span> dh11 &#123;</div><div class="line">    <span class="keyword">struct</span> device *hwmon_dev;</div><div class="line">    <span class="keyword">struct</span> mutex lock;  </div><div class="line">    <span class="keyword">int</span> da_pin;</div><div class="line">    u8 value[<span class="number">5</span>];</div><div class="line">    u8 humdity;</div><div class="line">    u8 temperature;</div><div class="line"></div><div class="line">    <span class="keyword">struct</span> timer_list timer;</div><div class="line">    <span class="keyword">struct</span> work_struct work;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> dh11 dh;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> <span class="title">read_byte</span><span class="params">(<span class="keyword">void</span>)</span>  </span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> i, count, dat = <span class="number">0</span>;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> flags;</div><div class="line"></div><div class="line">    local_irq_save(flags); <span class="comment">//Save interrupt</span></div><div class="line">    </div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">8</span>; i++)          </div><div class="line">    &#123;      </div><div class="line">        count = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(<span class="number">0</span> == gpio_get_value(dh.da_pin)) <span class="comment">//Waiting for 50us low level end</span></div><div class="line">        &#123;</div><div class="line">            udelay(<span class="number">5</span>);</div><div class="line">            count ++;</div><div class="line">            <span class="keyword">if</span> (count &gt; <span class="number">20</span>)</div><div class="line">                <span class="keyword">goto</span> time_out;</div><div class="line">        &#125;</div><div class="line">      </div><div class="line">        udelay(<span class="number">30</span>); <span class="comment">//Delay 30us, if it is still high, the data is 1, otherwise it is 0.</span></div><div class="line">      </div><div class="line">        dat &lt;&lt;= <span class="number">1</span>;                   </div><div class="line">      </div><div class="line">        <span class="keyword">if</span>(gpio_get_value(dh.da_pin))    </div><div class="line">            dat += <span class="number">1</span>;</div><div class="line">         </div><div class="line">        <span class="keyword">while</span>(gpio_get_value(dh.da_pin)) <span class="comment">//Waiting low level end</span></div><div class="line">        &#123;</div><div class="line">            udelay(<span class="number">5</span>);</div><div class="line">            count ++;</div><div class="line">            <span class="keyword">if</span> (count &gt; <span class="number">20</span>)</div><div class="line">                <span class="keyword">goto</span> time_out;</div><div class="line">        &#125;</div><div class="line">    &#125;  </div><div class="line"></div><div class="line">    local_irq_restore(flags); </div><div class="line">    <span class="keyword">return</span> dat;</div><div class="line">    </div><div class="line">time_out:</div><div class="line">    local_irq_restore(flags); </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//Work queue callback function for read DH11</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dh11_work_callback</span><span class="params">(<span class="keyword">struct</span> work_struct *work)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i, count;</div><div class="line"></div><div class="line">    mutex_lock(&amp;dh.lock);</div><div class="line"></div><div class="line">    <span class="comment">//Start signal</span></div><div class="line">    gpio_direction_output(dh.da_pin, <span class="number">1</span>);</div><div class="line">    udelay(<span class="number">2</span>);</div><div class="line">    gpio_direction_output(dh.da_pin, <span class="number">0</span>);</div><div class="line">    mdelay(<span class="number">20</span>);  <span class="comment">//Low level hold time cannot be less than 18ms</span></div><div class="line">    gpio_direction_output(dh.da_pin, <span class="number">1</span>); <span class="comment">//Pull up 20-40us</span></div><div class="line">    udelay(<span class="number">40</span>);    </div><div class="line">    </div><div class="line">    gpio_direction_input(dh.da_pin);</div><div class="line">    <span class="keyword">if</span> (<span class="number">0</span> == gpio_get_value(dh.da_pin)) <span class="comment">//Read response signal</span></div><div class="line">    &#123;</div><div class="line">        count = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(<span class="number">0</span> == gpio_get_value(dh.da_pin)) <span class="comment">//Waiting for the response signal to end(80us)   </span></div><div class="line">        &#123;</div><div class="line">            udelay(<span class="number">5</span>);</div><div class="line">            count ++;</div><div class="line">            <span class="keyword">if</span> (count &gt; <span class="number">20</span>)</div><div class="line">                <span class="keyword">goto</span> time_out;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        count = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(<span class="number">1</span> == gpio_get_value(dh.da_pin)) <span class="comment">//Waiting for DH11 to pull up end(80us)</span></div><div class="line">        &#123;</div><div class="line">            udelay(<span class="number">5</span>);</div><div class="line">            count ++;</div><div class="line">            <span class="keyword">if</span> (count &gt; <span class="number">20</span>)</div><div class="line">                <span class="keyword">goto</span> time_out;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++) <span class="comment">//Start reading 40 bits of data</span></div><div class="line">            dh.value[i] = read_byte();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        printk(KERN_WARNING<span class="string">"DH11 response error.\n"</span>); </div><div class="line"></div><div class="line">    <span class="comment">//checksum</span></div><div class="line">    <span class="keyword">if</span> ((dh.value[<span class="number">0</span>] + dh.value[<span class="number">1</span>] + dh.value[<span class="number">2</span>] + dh.value[<span class="number">3</span>]) == dh.value[<span class="number">4</span>]) </div><div class="line">    &#123;</div><div class="line">        dh.humdity = dh.value[<span class="number">0</span>];</div><div class="line">        dh.temperature = dh.value[<span class="number">2</span>];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        printk(KERN_WARNING<span class="string">"DHT11 checksum error.\n"</span>); </div><div class="line"></div><div class="line">    mutex_unlock(&amp;dh.lock); </div><div class="line">    <span class="keyword">return</span>;</div><div class="line"></div><div class="line">time_out:</div><div class="line">    printk(KERN_WARNING<span class="string">"DH11 timeout error.\n"</span>); </div><div class="line">    mutex_unlock(&amp;dh.lock); </div><div class="line">    <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//Timercallback function for callback work queue </span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dh11_timer_callback</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> data)</span></span></div><div class="line">&#123;</div><div class="line">    schedule_work(&amp;dh.work);</div><div class="line">    mod_timer(&amp;dh.timer, jiffies + (<span class="number">1200</span> * HZ/<span class="number">1000</span>)); <span class="comment">//Modify a timer's timeout</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> ssize_t <span class="title">dh11_get_sensor_value</span><span class="params">(<span class="keyword">struct</span> device *dev, <span class="keyword">struct</span> device_attribute *devattr, <span class="keyword">char</span> *buf)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> ret = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">struct</span> sensor_device_attribute *attr = to_sensor_dev_attr(devattr);</div><div class="line"></div><div class="line">    <span class="keyword">switch</span>(attr-&gt;index)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">            ret = <span class="built_in">sprintf</span>(buf, <span class="string">"%d\n"</span>, dh.humdity);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">            ret = <span class="built_in">sprintf</span>(buf, <span class="string">"%d\n"</span>, dh.temperature);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> sensor_device_attribute dh11_temp_attr[] = &#123;</div><div class="line">    SENSOR_ATTR(humdity, S_IRUGO, dh11_get_sensor_value, <span class="literal">NULL</span>, <span class="number">0</span>),</div><div class="line">    SENSOR_ATTR(temperature, S_IRUGO, dh11_get_sensor_value, <span class="literal">NULL</span>, <span class="number">1</span>),</div><div class="line">&#125;;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span>  <span class="title">dh11_probe</span><span class="params">(<span class="keyword">struct</span> platform_device *pdev)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> status, i;</div><div class="line">    </div><div class="line">    <span class="comment">//printk(KERN_INFO"%s OK.\n",__func__);</span></div><div class="line"></div><div class="line">    dh.da_pin = of_get_named_gpio(pdev-&gt;dev.of_node, <span class="string">"da-gpio"</span>, <span class="number">0</span>);</div><div class="line">    status = gpio_request(dh.da_pin, <span class="string">"dh11_da_pin"</span>);   </div><div class="line">    <span class="keyword">if</span> (status)</div><div class="line">    &#123;</div><div class="line">        dev_err(&amp;pdev-&gt;dev, <span class="string">"gpio_request() fail.\n"</span>);</div><div class="line">        <span class="keyword">return</span> -EBUSY;</div><div class="line">    &#125;   </div><div class="line"> </div><div class="line">    mutex_init(&amp;dh.lock);</div><div class="line">    mutex_lock(&amp;dh.lock);</div><div class="line">    </div><div class="line">    dev_set_drvdata(&amp;pdev-&gt;dev, &amp;dh);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;(<span class="keyword">sizeof</span>(dh11_temp_attr)/<span class="keyword">sizeof</span>(<span class="keyword">struct</span> sensor_device_attribute)); i++)</div><div class="line">    &#123;</div><div class="line">        status = device_create_file(&amp;pdev-&gt;dev, &amp;dh11_temp_attr[i].dev_attr);</div><div class="line">        <span class="keyword">if</span> (status)</div><div class="line">        &#123;</div><div class="line">            dev_err(&amp;pdev-&gt;dev, <span class="string">"device_create_file() failed.\n"</span>);</div><div class="line">            <span class="keyword">goto</span> fail_crete_file;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    dh.hwmon_dev = hwmon_device_register(&amp;pdev-&gt;dev);</div><div class="line">    <span class="keyword">if</span> (IS_ERR(dh.hwmon_dev))</div><div class="line">    &#123;</div><div class="line">        dev_err(&amp;pdev-&gt;dev, <span class="string">"hwmon_device_register() fail.\n"</span>);</div><div class="line">        status = PTR_ERR(dh.hwmon_dev);</div><div class="line">        <span class="keyword">goto</span> fail_device_register;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//Timer</span></div><div class="line">    init_timer(&amp;dh.timer);</div><div class="line">    dh.timer.function = dh11_timer_callback;</div><div class="line">    dh.timer.expires = jiffies + (<span class="number">1200</span> * HZ/<span class="number">1000</span>); <span class="comment">//1.2s (must &gt; 1s)</span></div><div class="line">    dh.timer.data = ((<span class="keyword">unsigned</span> <span class="keyword">long</span>)<span class="number">0</span>);</div><div class="line">    add_timer(&amp;dh.timer);</div><div class="line">    <span class="comment">//Workqueue</span></div><div class="line">    INIT_WORK(&amp;dh.work, dh11_work_callback);</div><div class="line"></div><div class="line">    mutex_unlock(&amp;dh.lock);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    </div><div class="line">fail_device_register:</div><div class="line">    hwmon_device_unregister(dh.hwmon_dev);</div><div class="line">    </div><div class="line">fail_crete_file:</div><div class="line">    <span class="keyword">for</span> (i--; i&gt;=<span class="number">0</span>; i--)</div><div class="line">        device_remove_file(&amp;pdev-&gt;dev, &amp;dh11_temp_attr[i].dev_attr);</div><div class="line">    dev_set_drvdata(&amp;pdev-&gt;dev, <span class="literal">NULL</span>);</div><div class="line">    gpio_free(dh.da_pin);</div><div class="line">    del_timer(&amp;dh.timer);</div><div class="line">    cancel_work_sync(&amp;dh.work);</div><div class="line"></div><div class="line">    mutex_unlock(&amp;dh.lock);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> status;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span>  <span class="title">dh11_remove</span><span class="params">(<span class="keyword">struct</span> platform_device *pdev)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    </div><div class="line">    mutex_lock(&amp;dh.lock);</div><div class="line">    </div><div class="line">    hwmon_device_unregister(dh.hwmon_dev);</div><div class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;(<span class="keyword">sizeof</span>(dh11_temp_attr)/<span class="keyword">sizeof</span>(<span class="keyword">struct</span> sensor_device_attribute)); i++)</div><div class="line">        device_remove_file(&amp;pdev-&gt;dev, &amp;dh11_temp_attr[i].dev_attr);</div><div class="line">    dev_set_drvdata(&amp;pdev-&gt;dev, <span class="literal">NULL</span>);</div><div class="line">    gpio_free(dh.da_pin);</div><div class="line">    del_timer(&amp;dh.timer);</div><div class="line">    cancel_work_sync(&amp;dh.work);</div><div class="line">    </div><div class="line">    mutex_unlock(&amp;dh.lock);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">struct</span> of_device_id dh11_of_match[] = &#123;</div><div class="line">    &#123; .compatible = <span class="string">"aosong,dh11"</span>, .data = <span class="literal">NULL</span> &#125;,</div><div class="line">    &#123; <span class="comment">/* sentinel */</span> &#125;</div><div class="line"></div><div class="line">&#125;;</div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> platform_driver dh11_drv = &#123;</div><div class="line">    .probe      = dh11_probe,</div><div class="line">    .remove     = dh11_remove,</div><div class="line">    .driver     = &#123;</div><div class="line">        .name   = <span class="string">"dh11_drv"</span>,</div><div class="line">        .owner  = THIS_MODULE,</div><div class="line">        .of_match_table = of_match_ptr(dh11_of_match),</div><div class="line">    &#125;,</div><div class="line">&#125;;</div><div class="line"></div><div class="line">module_platform_driver(dh11_drv);</div><div class="line"></div><div class="line">MODULE_LICENSE(<span class="string">"GPL"</span>);</div><div class="line">MODULE_AUTHOR(<span class="string">"hceng &lt;huangcheng.job@foxmail.com&gt;"</span>);</div><div class="line">MODULE_DESCRIPTION(<span class="string">"TI am335x board dh11 driver."</span>);</div><div class="line">MODULE_VERSION(<span class="string">"v1.0"</span>);</div></pre></td></tr></table></figure><p>因为DH11的采样周期长达1S，如果应用层稍微读快一点，就会报错比较明显。<br>因此，这里采取的方案是，驱动设置个定时器每隔一定时间，不断读取传感器，保存数据。应用层读取的是不久前驱动才缓存下的数据。</p><p>因此在<code>probe()</code>函数里，先设置了一个定时器:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Timer</span></div><div class="line">init_timer(&amp;dh.timer);</div><div class="line">dh.timer.function = dh11_timer_callback;</div><div class="line">dh.timer.expires = jiffies + (<span class="number">1200</span> * HZ/<span class="number">1000</span>); <span class="comment">//1.2s (must &gt; 1s)</span></div><div class="line">dh.timer.data = ((<span class="keyword">unsigned</span> <span class="keyword">long</span>)<span class="number">0</span>);</div><div class="line">add_timer(&amp;dh.timer);</div></pre></td></tr></table></figure><br>定时器每隔1.2s调用<code>dh11_timer_callback()</code>函数。</p><p>再设置了一个工作队列：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">INIT_WORK(&amp;dh.work, dh11_work_callback);</div></pre></td></tr></table></figure><br>将<code>dh11_work_callback()</code>函数加入到工作队列里。</p><p><code>dh11_timer_callback()</code>里使用<code>schedule_work()</code>读取DH11数据并重新设置定时器周期反复。</p><p><a href="https://www.jianshu.com/p/a3ad64ddbd89" target="_blank" rel="external">定时器、工作队列的补充知识参考博客</a>。</p><h3 id="2-2-2-设备树"><a href="#2-2-2-设备树" class="headerlink" title="2.2.2 设备树"></a>2.2.2 设备树</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">    <span class="class">dh11 </span>&#123;</div><div class="line">        compatible = <span class="string">"aosong,dh11"</span>;</div><div class="line">        da-gpio = <span class="params">&lt;<span class="variable">&amp;gpio0</span> <span class="number">12</span> <span class="number">0</span>&gt;</span>;</div><div class="line">        pinctrl<span class="number">-0</span> = <span class="params">&lt;<span class="variable">&amp;dh11_da_pin</span>&gt;</span>;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    ……</div><div class="line"></div><div class="line"><span class="variable">&amp;am33xx_pinmux</span> &#123;</div><div class="line"><span class="symbol">    dh11_da_pin:</span> <span class="class">dh11_da_pin0 </span>&#123;</div><div class="line">        pinctrl-single,pins = <span class="params">&lt;</span></div><div class="line">            <span class="number">0x178</span> (PIN_INPUT_PULLDOWN | MUX_MODE7)  /* conf_uart1_ctsn.gpio0_12 */</div><div class="line">        &gt;;</div><div class="line">    &#125;;</div><div class="line">&#125;;</div><div class="line"></div></pre></td></tr></table></figure><h3 id="2-2-3-应用测试"><a href="#2-2-3-应用测试" class="headerlink" title="2.2.3 应用测试"></a>2.2.3 应用测试</h3><div align="left"><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/190215/9.png"></div><h1 id="3-IrDA"><a href="#3-IrDA" class="headerlink" title="3. IrDA"></a>3. IrDA</h1><h2 id="3-1-基础知识"><a href="#3-1-基础知识" class="headerlink" title="3.1 基础知识"></a>3.1 基础知识</h2><h3 id="3-1-1-红外原理"><a href="#3-1-1-红外原理" class="headerlink" title="3.1.1 红外原理"></a>3.1.1 红外原理</h3><p>当遥控器按下不同的按键时，遥控器上的红外发射头，会发出人眼看不到(<strong>可通过手机摄像头看到</strong>)的光波给模块上的红外接收端。<br>红外接收端收到光波后，会在IRD引脚上产生相应的电平，通过对电平解析，就知道是按的遥控器哪一个键。</p><div align="center"><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/190215/10.jpg"></div><h3 id="3-1-2-数据格式"><a href="#3-1-2-数据格式" class="headerlink" title="3.1.2 数据格式"></a>3.1.2 数据格式</h3><p>按键一次的接收到数据结构如下，可以分解成五部分：引导码/连发码、系统码1、系统码2、数据码、数据反码。</p><div align="center"><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/190215/11.jpg"></div><h3 id="3-1-3-引导码-连发码"><a href="#3-1-3-引导码-连发码" class="headerlink" title="3.1.3 引导码/连发码"></a>3.1.3 引导码/连发码</h3><p>最开始的一部分是用来判断<strong>是否是连按操作</strong>和<strong>表示信号开始</strong>，分为引导码和连发码。<br>如果是第一按下或非连按，就是先9ms低电平，再4.5ms的高电平，后面接32Bits数据；<br>如果一直按着该键不放，下一个周期就发送的是连发码，先9ms低电平，再只有2.25ms的高电平，后面接32Bits数据；</p><div align="center"><img width="500" src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/190215/12.jpg"></div><h3 id="3-1-4-数据电平"><a href="#3-1-4-数据电平" class="headerlink" title="3.1.4 数据电平"></a>3.1.4 数据电平</h3><p>数据0和1前面都是0.56ms的低电平，那么就是后面的高电平持续时间不同，0为0.56ms，1为1.685ms</p><div align="center"><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/190215/13.jpg"></div><h2 id="3-2-内核驱动"><a href="#3-2-内核驱动" class="headerlink" title="3.2 内核驱动"></a>3.2 内核驱动</h2><p>内核中自带红外遥控器的驱动，但没有我使用的遥控器布局文件。<br><code>drivers/medi/rc/gpio-ir-recv.c</code>是GPIO模拟红外遥控驱动。<br><code>drivers/media/rc/keymaps/</code>下是遥控器键盘布局文件。</p><h3 id="3-2-1-加入内核"><a href="#3-2-1-加入内核" class="headerlink" title="3.2.1 加入内核"></a>3.2.1 加入内核</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Device Drivers  ---&gt; </div><div class="line">     &lt;*&gt; Multimedia support  ---&gt;</div><div class="line">        [*]   Remote Controller support</div><div class="line">        [*]   Remote controller decoders (NEW)  ---&gt;</div><div class="line">        [*]   Remote Controller devices  ---&gt;</div><div class="line">            &lt;*&gt;   GPIO IR remote control</div></pre></td></tr></table></figure><h3 id="3-2-2-添加键盘布局"><a href="#3-2-2-添加键盘布局" class="headerlink" title="3.2.2 添加键盘布局"></a>3.2.2 添加键盘布局</h3><figure class="highlight c"><figcaption><span>[rc-hceng-nec.c]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;media/rc-map.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> rc_map_table hceng_nec[] = &#123;</div><div class="line">    &#123; <span class="number">0x45</span>, KEY_CHANNELDOWN&#125;,</div><div class="line">    &#123; <span class="number">0x46</span>, KEY_CHANNEL&#125;,</div><div class="line">    &#123; <span class="number">0x47</span>, KEY_CHANNELUP&#125;,</div><div class="line">    &#123; <span class="number">0x44</span>, KEY_PREVIOUS&#125;,</div><div class="line">    &#123; <span class="number">0x40</span>, KEY_NEXT&#125;,</div><div class="line">    &#123; <span class="number">0x43</span>, KEY_PLAYPAUSE&#125;, <span class="comment">//</span></div><div class="line">    &#123; <span class="number">0x07</span>, KEY_VOLUMEDOWN&#125;,</div><div class="line">    &#123; <span class="number">0x15</span>, KEY_VOLUMEUP&#125;,</div><div class="line">    &#123; <span class="number">0x09</span>, KEY_EQUAL&#125;,</div><div class="line">    </div><div class="line">    &#123; <span class="number">0x16</span>, KEY_0&#125;,</div><div class="line">    &#123; <span class="number">0x19</span>, KEY_F1&#125;,</div><div class="line">    &#123; <span class="number">0x0d</span>, KEY_F2&#125;,</div><div class="line">    </div><div class="line">    &#123; <span class="number">0x0c</span>, KEY_1&#125;,</div><div class="line">    &#123; <span class="number">0x18</span>, KEY_2&#125;,</div><div class="line">    &#123; <span class="number">0x5e</span>, KEY_3&#125;,</div><div class="line">    &#123; <span class="number">0x08</span>, KEY_4&#125;,</div><div class="line">    &#123; <span class="number">0x1c</span>, KEY_5&#125;,</div><div class="line">    &#123; <span class="number">0x5a</span>, KEY_6&#125;,</div><div class="line">    &#123; <span class="number">0x42</span>, KEY_7&#125;,</div><div class="line">    &#123; <span class="number">0x52</span>, KEY_8&#125;, <span class="comment">//</span></div><div class="line">    &#123; <span class="number">0x4a</span>, KEY_9&#125;,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> rc_map_list hceng_nec_map = &#123;</div><div class="line">    .<span class="built_in">map</span> = &#123;</div><div class="line">        .scan    = hceng_nec,</div><div class="line">        .size    = ARRAY_SIZE(hceng_nec),</div><div class="line">        .rc_type = RC_TYPE_NEC, <span class="comment">//RC_TYPE_UNKNOWN //echo nec &gt; /sys/class/rc/rc0/protocols</span></div><div class="line">        .name    = <span class="string">"rc-hceng-nec"</span>,</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">int</span> __<span class="function">init <span class="title">init_rc_map_hceng_nec</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> rc_map_register(&amp;hceng_nec_map);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">void</span> __<span class="function"><span class="built_in">exit</span> <span class="title">exit_rc_map_hceng_nec</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    rc_map_unregister(&amp;hceng_nec_map);</div><div class="line">&#125;</div><div class="line"></div><div class="line">module_init(init_rc_map_hceng_nec)</div><div class="line">module_exit(exit_rc_map_hceng_nec)</div><div class="line"></div><div class="line">MODULE_LICENSE(<span class="string">"GPL"</span>);</div><div class="line">MODULE_AUTHOR(<span class="string">"hceng"</span>);</div></pre></td></tr></table></figure><p>将<code>rc-hceng-nec.c</code>放在<code>drivers/media/rc/keymaps/</code>下，并修改Makefile，加入<code>rc-hceng-nec.o</code>。</p><h3 id="3-2-3-修改设备树"><a href="#3-2-3-修改设备树" class="headerlink" title="3.2.3 修改设备树"></a>3.2.3 修改设备树</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">ir:</span> ir-<span class="class">receiver </span>&#123;</div><div class="line">    compatible = <span class="string">"gpio-ir-receiver"</span>;</div><div class="line">    gpios = <span class="params">&lt;<span class="variable">&amp;gpio0</span> <span class="number">12</span> <span class="number">1</span>&gt;</span>;</div><div class="line">    linux,rc-map-name = <span class="string">"rc-hceng-nec"</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h3 id="3-2-4-应用测试"><a href="#3-2-4-应用测试" class="headerlink" title="3.2.4 应用测试"></a>3.2.4 应用测试</h3><p>测试程序：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/input.h&gt;</span>  </span></div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">int</span> fd;  </div><div class="line">    <span class="keyword">int</span> version;  </div><div class="line">    <span class="keyword">int</span> ret;  </div><div class="line">    <span class="keyword">struct</span> input_event ev;  </div><div class="line">      </div><div class="line">    fd = open(<span class="string">"/dev/input/event0"</span>, O_RDONLY);  </div><div class="line">    <span class="keyword">if</span> (fd &lt; <span class="number">0</span>) &#123;  </div><div class="line">        <span class="built_in">printf</span>(<span class="string">"open file failed\n"</span>);  </div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    ioctl(fd, EVIOCGVERSION, &amp;version);  </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"evdev driver version is 0x%x: %d.%d.%d\n"</span>,  </div><div class="line">                    version, version&gt;&gt;<span class="number">16</span>, (version&gt;&gt;<span class="number">8</span>) &amp; <span class="number">0xff</span>, version &amp; <span class="number">0xff</span>);  </div><div class="line">  </div><div class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;  </div><div class="line">        ret = read(fd, &amp;ev, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> input_event));  </div><div class="line">        <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;  </div><div class="line">            <span class="built_in">printf</span>(<span class="string">"read event error!\n"</span>);  </div><div class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);  </div><div class="line">        &#125;  </div><div class="line">          </div><div class="line">        <span class="keyword">if</span> (ev.type == EV_KEY)  </div><div class="line">            <span class="built_in">printf</span>(<span class="string">"type %d,code %d, value %d\n"</span>, ev.type, ev.code, ev.value);  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125; </div></pre></td></tr></table></figure></p><div align="left"><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/190215/14.png"></div><h3 id="3-2-5-其它"><a href="#3-2-5-其它" class="headerlink" title="3.2.5 其它"></a>3.2.5 其它</h3><ul><li><p>码值关系<br>遥控器产生一个原始数据码，<br><code>rc-hceng-nec</code>里，将原始数据码和输入子系统中的按键编号进行对应，<br>最后用户态读到的code是输入子系统中的按键编号值。<br>比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">原始数据码  -------&gt; 按键编号 --------&gt;用户层读取</div><div class="line">0x16                KEY_0/11         11</div></pre></td></tr></table></figure></li><li><p>打印原始数据<br>修改<code>drivers/media/rc/ir-nec-decoder.c</code>，添加打印:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="number">183</span>                 &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">184</span>                         <span class="comment">/* Normal NEC */</span></div><div class="line"><span class="number">185</span>                         scancode = address &lt;&lt; <span class="number">8</span> | command;</div><div class="line"><span class="number">186</span>                         <span class="comment">//IR_dprintk(1, "NEC scancode 0x%04x\n", scancode);</span></div><div class="line"><span class="number">187</span>                         printk(<span class="string">"NEC scancode 0x%04x\n"</span>, scancode);</div><div class="line"><span class="number">188</span>                 &#125;</div></pre></td></tr></table></figure></li></ul><hr><p><div align="center"><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本文采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href="http://hceng.cn/" target="_blank" rel="external">hceng’s blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录DS18B20温度传感器、DH11温湿度传感器、红外遥控驱动。&lt;br&gt;
    
    </summary>
    
    
      <category term="AM335X" scheme="http://yoursite.com/tags/AM335X/"/>
    
      <category term="Linux驱动" scheme="http://yoursite.com/tags/Linux%E9%A9%B1%E5%8A%A8/"/>
    
      <category term="hwmon子系统" scheme="http://yoursite.com/tags/hwmon%E5%AD%90%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="input子系统" scheme="http://yoursite.com/tags/input%E5%AD%90%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>AM335X——hwmon和input子系统</title>
    <link href="http://yoursite.com/2019/01/18/AM335X%E2%80%94%E2%80%94hwmon%E5%92%8Cinput%E5%AD%90%E7%B3%BB%E7%BB%9F/"/>
    <id>http://yoursite.com/2019/01/18/AM335X——hwmon和input子系统/</id>
    <published>2019-01-18T13:23:41.000Z</published>
    <updated>2019-01-21T07:21:15.818Z</updated>
    
    <content type="html"><![CDATA[<p>记录两个SPI设备分别采用hwmon子系统和input子系统。<br><a id="more"></a><br>刚开始学Linux驱动的时候，就看了input子系统，现在都忘得差不多了，不过回忆起来也还快，这里再记录一下。</p><p>为什么要用各种子系统框架，就目前的理解，<strong>一是为了向应用层提供统一的接口，二是简化了编写驱动的流程</strong>。<br>各种子系统它们是通过一层一层的函数传递与封装，实现了设备驱动的注册，定义了<code>file_operations</code>结构体里面的各种函数操作，不需要在单独的设备驱动代码中进行注册、定义，直接调用相应的的子系统即可。</p><h1 id="1-hwmon子系统简介"><a href="#1-hwmon子系统简介" class="headerlink" title="1. hwmon子系统简介"></a>1. hwmon子系统简介</h1><p><code>hwmon</code>即硬件监控(<code>Hardware monitor</code>)，它是用于检测设备状态的一类传感器设备接口，比如CPU温度、风扇转速、模数转换等。</p><p><code>Hwmon</code>子系统的核心代码是<code>drivers/hwmon/hwmon.c</code>。<br>通过同路径下的<code>Kconfig</code>文件，可以得知它在<code>make menuconfig</code>中的配置名字为<code>Hardware Monitoring support</code>。<br>通过<code>hwmon.c</code>中的<code>EXPORT_SYMBOL_GPL()</code>符号，可知对外提供如下几组接口函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">hwmon_device_register_with_groups() / hwmon_device_register()</div><div class="line">hwmon_device_unregister()</div><div class="line"></div><div class="line">devm_hwmon_device_register_with_groups()</div><div class="line">devm_hwmon_device_unregister()</div></pre></td></tr></table></figure></p><h2 id="1-1-AD7705简介"><a href="#1-1-AD7705简介" class="headerlink" title="1.1 AD7705简介"></a>1.1 AD7705简介</h2><p><a href="https://www.analog.com/media/en/technical-documentation/data-sheets/ad7705_7706.pdf" target="_blank" rel="external">AD7705</a>是十六位分辨率的A/D转换器,2个通道全差分模拟输入。<br>内部有8个寄存器，常用的就<code>Communication Register</code>、<code>Setup register</code>、<code>Clock register</code>、<code>Data register</code>。<br>在每次做任何操作前，都要写<code>Communication Register</code>来设置即将操作的是哪一个寄存器、是读还是写操作、操作哪一个通道。<br>其操作流程如下：</p><blockquote><ol><li>拉低复位引脚，硬件复位；</li><li>在至少32个时钟周期里连续发送高脉冲，以同步时钟；</li><li>配置AD7705时钟(时钟源、分频系数等)；</li><li>自校准，并等待就绪引脚拉低；</li><li>从数据寄存器里读取数据；</li></ol></blockquote><h2 id="1-2-完整代码及效果"><a href="#1-2-完整代码及效果" class="headerlink" title="1.2 完整代码及效果"></a>1.2 完整代码及效果</h2><ul><li><p>设备树：</p><figure class="highlight dts"><figcaption><span>[am335x-evm.dts]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class">spidev@0 </span>&#123;</div><div class="line">compatible = <span class="string">"titan,ad7705"</span>;</div><div class="line">spi-max-frequency = <span class="params">&lt;<span class="number">2500000</span>&gt;</span>;</div><div class="line">reg = <span class="params">&lt;<span class="number">2</span>&gt;</span>;</div><div class="line">   &#125;;</div></pre></td></tr></table></figure></li><li><p>驱动代码：</p><figure class="highlight c"><figcaption><span>[ad7705_drv.c]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/delay.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/gpio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/spi/spi.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/hwmon.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/hwmon-sysfs.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>  CHANNEL_NUM  (2)  <span class="comment">//AD7705 channel number</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>  DRDY_PIN     (12) <span class="comment">//AD7705 DRDY Pin(GPIO0_12)</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>  RESET_PIN    (13) <span class="comment">//AD7705 RESET Pin(GPIO0_13)</span></span></div><div class="line"></div><div class="line"><span class="comment">//Communication Register</span></div><div class="line"><span class="keyword">enum</span> </div><div class="line">&#123;</div><div class="line">    REG_COMM         = (<span class="number">0</span> &lt;&lt; <span class="number">4</span>), <span class="comment">//Communication Register RS2:RS1:RS0 = [0:0:0]</span></div><div class="line">    REG_SETUP        = (<span class="number">1</span> &lt;&lt; <span class="number">4</span>), <span class="comment">//Setup register         RS2:RS1:RS0 = [0:0:1]</span></div><div class="line">    REG_CLOCK        = (<span class="number">2</span> &lt;&lt; <span class="number">4</span>), <span class="comment">//Clock register         RS2:RS1:RS0 = [0:1:0]</span></div><div class="line">    REG_DATA         = (<span class="number">3</span> &lt;&lt; <span class="number">4</span>), <span class="comment">//Data register          RS2:RS1:RS0 = [0:1:1]</span></div><div class="line">    REG_TEST         = (<span class="number">4</span> &lt;&lt; <span class="number">4</span>), <span class="comment">//Test register          RS2:RS1:RS0 = [1:0:0]</span></div><div class="line">    REG_RESE         = (<span class="number">5</span> &lt;&lt; <span class="number">4</span>), <span class="comment">//No operation           RS2:RS1:RS0 = [1:0:1]</span></div><div class="line">    REG_OFFSET       = (<span class="number">6</span> &lt;&lt; <span class="number">4</span>), <span class="comment">//Offset register        RS2:RS1:RS0 = [1:1:0]</span></div><div class="line">    REG_GAIN         = (<span class="number">7</span> &lt;&lt; <span class="number">4</span>), <span class="comment">//Gain register          RS2:RS1:RS0 = [1:1:1]</span></div><div class="line"> </div><div class="line">    CMD_WRITE        = (<span class="number">0</span> &lt;&lt; <span class="number">3</span>), <span class="comment">//write operation</span></div><div class="line">    CMD_READ         = (<span class="number">1</span> &lt;&lt; <span class="number">3</span>), <span class="comment">//read  operation</span></div><div class="line"></div><div class="line">    CH_1             = <span class="number">0</span>,        <span class="comment">//Register Pair 0 (AIN1+  AIN1-)</span></div><div class="line">    CH_2             = <span class="number">1</span>,        <span class="comment">//Register Pair 1 (AIN2+  AIN2-)</span></div><div class="line">    CH_3             = <span class="number">2</span>,        <span class="comment">//Register Pair 0 (AIN1-  AIN1-)</span></div><div class="line">    CH_4             = <span class="number">3</span>         <span class="comment">//Register Pair 2 (AIN1-  AIN2-)</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">//Setup register</span></div><div class="line"><span class="keyword">enum</span></div><div class="line">&#123;</div><div class="line">    MD_NORMAL        = (<span class="number">0</span> &lt;&lt; <span class="number">6</span>), <span class="comment">//Normal Mode. </span></div><div class="line">    MD_CAL_SELF      = (<span class="number">1</span> &lt;&lt; <span class="number">6</span>), <span class="comment">//Self-Calibration </span></div><div class="line">    MD_CAL_ZERO      = (<span class="number">2</span> &lt;&lt; <span class="number">6</span>), <span class="comment">//Zero-Scale System Calibration </span></div><div class="line">    MD_CAL_FULL      = (<span class="number">3</span> &lt;&lt; <span class="number">6</span>), <span class="comment">//Full-Scale System Calibration </span></div><div class="line">                                       </div><div class="line">    GAIN_1           = (<span class="number">0</span> &lt;&lt; <span class="number">3</span>), <span class="comment">//Gain 1  </span></div><div class="line">    GAIN_2           = (<span class="number">1</span> &lt;&lt; <span class="number">3</span>), <span class="comment">//Gain 2  </span></div><div class="line">    GAIN_4           = (<span class="number">2</span> &lt;&lt; <span class="number">3</span>), <span class="comment">//Gain 4  </span></div><div class="line">    GAIN_8           = (<span class="number">3</span> &lt;&lt; <span class="number">3</span>), <span class="comment">//Gain 8  </span></div><div class="line">    GAIN_16          = (<span class="number">4</span> &lt;&lt; <span class="number">3</span>), <span class="comment">//Gain 16 </span></div><div class="line">    GAIN_32          = (<span class="number">5</span> &lt;&lt; <span class="number">3</span>), <span class="comment">//Gain 32 </span></div><div class="line">    GAIN_64          = (<span class="number">6</span> &lt;&lt; <span class="number">3</span>), <span class="comment">//Gain 64 </span></div><div class="line">    GAIN_128         = (<span class="number">7</span> &lt;&lt; <span class="number">3</span>), <span class="comment">//Gain 128</span></div><div class="line"> </div><div class="line">    BIPOLAR          = (<span class="number">0</span> &lt;&lt; <span class="number">2</span>), <span class="comment">//Bipolar Operation  </span></div><div class="line">    UNIPOLAR         = (<span class="number">1</span> &lt;&lt; <span class="number">2</span>), <span class="comment">//Unipolar Operation</span></div><div class="line"> </div><div class="line">    BUF_NO           = (<span class="number">0</span> &lt;&lt; <span class="number">1</span>), <span class="comment">//Buffer Control Off</span></div><div class="line">    BUF_EN           = (<span class="number">1</span> &lt;&lt; <span class="number">1</span>), <span class="comment">//Buffer Control On</span></div><div class="line"> </div><div class="line">    FSYNC_0          = (<span class="number">0</span> &lt;&lt; <span class="number">0</span>), <span class="comment">//Filter Synchronization Normal</span></div><div class="line">    FSYNC_1          = (<span class="number">1</span> &lt;&lt; <span class="number">0</span>)  <span class="comment">//Filter Synchronization Disable</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">//Clock register</span></div><div class="line"><span class="keyword">enum</span></div><div class="line">&#123;</div><div class="line">    CLKDIS_0         = (<span class="number">0</span> &lt;&lt; <span class="number">4</span>), <span class="comment">//Master Clock Enable (Use crystal clock source)</span></div><div class="line">    CLKDIS_1         = (<span class="number">1</span> &lt;&lt; <span class="number">4</span>), <span class="comment">//Master Clock Disable(Use an external clock source) </span></div><div class="line"> </div><div class="line">    CLKDIV_0         = (<span class="number">0</span> &lt;&lt; <span class="number">3</span>), <span class="comment">//Clock Divider 0</span></div><div class="line">    CLKDIV_1         = (<span class="number">1</span> &lt;&lt; <span class="number">3</span>), <span class="comment">//Clock Divider 2 (4.9152Mhz/2=2.4576Mhz)</span></div><div class="line"> </div><div class="line">    CLK_0            = (<span class="number">0</span> &lt;&lt; <span class="number">2</span>), <span class="comment">//Clock Bit(If master clock 1MHz(CLKDIV = 0) or 2MHz(CLKDIV = 1)) </span></div><div class="line">    CLK_1            = (<span class="number">1</span> &lt;&lt; <span class="number">2</span>), <span class="comment">//Clock Bit(If master clock 2.4576MHz(CLKDIV = 0) or 4.9152MHz(CLKDIV = 1)) </span></div><div class="line">    <span class="comment">//If Clock Bit = 0</span></div><div class="line">    UPDATE_20        = (<span class="number">0</span> &lt;&lt; <span class="number">0</span>), <span class="comment">//Filter Selection Bits</span></div><div class="line">    UPDATE_25        = (<span class="number">1</span> &lt;&lt; <span class="number">0</span>),</div><div class="line">    UPDATE_100       = (<span class="number">2</span> &lt;&lt; <span class="number">0</span>),</div><div class="line">    UPDATE_200       = (<span class="number">3</span> &lt;&lt; <span class="number">0</span>),</div><div class="line">    <span class="comment">//If Clock Bit = 1      </span></div><div class="line">    UPDATE_50        = (<span class="number">0</span> &lt;&lt; <span class="number">0</span>), <span class="comment">//Filter Selection Bits</span></div><div class="line">    UPDATE_60        = (<span class="number">1</span> &lt;&lt; <span class="number">0</span>),</div><div class="line">    UPDATE_250       = (<span class="number">2</span> &lt;&lt; <span class="number">0</span>),</div><div class="line">    UPDATE_500       = (<span class="number">3</span> &lt;&lt; <span class="number">0</span>)</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> ad7705 &#123;</div><div class="line">    <span class="keyword">struct</span> device *hwmon_dev;</div><div class="line">    <span class="keyword">struct</span> mutex lock;  </div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">//Reset</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ad7705_reset</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    gpio_direction_output(RESET_PIN, <span class="number">1</span>);</div><div class="line">    msleep(<span class="number">1</span>);</div><div class="line">    gpio_direction_output(RESET_PIN, <span class="number">0</span>);</div><div class="line">    msleep(<span class="number">2</span>);</div><div class="line">    gpio_direction_output(RESET_PIN, <span class="number">1</span>);</div><div class="line">    msleep(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//Synchronous SPI timing</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ad7705_sync_spi</span><span class="params">(<span class="keyword">struct</span> spi_device *spi)</span></span></div><div class="line">&#123;</div><div class="line">    u8 tx_buf[<span class="number">6</span>]; <span class="comment">//Write logic "1" to DIN for at least 32 clocks</span></div><div class="line">    <span class="built_in">memset</span>(tx_buf, <span class="number">0xFF</span>, <span class="keyword">sizeof</span>(tx_buf));</div><div class="line">    spi_write(spi, tx_buf, <span class="keyword">sizeof</span>(tx_buf));</div><div class="line"></div><div class="line">    msleep(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//Waiting for DRDY pin signal</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">ad7705_wait_DRDY</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> time_cnt = <span class="number">500</span>*<span class="number">1000</span>;</div><div class="line"> </div><div class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;time_cnt; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="number">0</span> == gpio_get_value(DRDY_PIN))</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        udelay(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">if</span> (i &gt;= time_cnt)</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>; </div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//Self-Calibration</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ad7705_calib_self</span><span class="params">(<span class="keyword">struct</span> spi_device *spi, u8 channel)</span></span></div><div class="line">&#123;</div><div class="line">    u8 tx_buf[<span class="number">2</span>] = &#123;<span class="number">0</span>&#125;;</div><div class="line"> </div><div class="line">    tx_buf[<span class="number">0</span>] = REG_SETUP | CMD_WRITE | channel;</div><div class="line">    tx_buf[<span class="number">1</span>] = MD_CAL_SELF | GAIN_1 | UNIPOLAR | BUF_EN | FSYNC_0;</div><div class="line">    spi_write(spi, tx_buf, <span class="keyword">sizeof</span>(tx_buf));</div><div class="line"> </div><div class="line">    ad7705_wait_DRDY(); <span class="comment">//Waiting for the internal operation to complete, the time is long, about 180ms</span></div><div class="line"> </div><div class="line">    msleep(<span class="number">50</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//Initialize the specified channel</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ad7705_config_channel</span><span class="params">(<span class="keyword">struct</span> spi_device *spi, u8 channel)</span></span></div><div class="line">&#123;</div><div class="line">    u8 tx_buf[<span class="number">2</span>] = &#123;<span class="number">0</span>&#125;;</div><div class="line"> </div><div class="line">    tx_buf[<span class="number">0</span>] = REG_CLOCK | CMD_WRITE | channel;</div><div class="line">    tx_buf[<span class="number">1</span>] = CLKDIS_0 | CLKDIV_1 | CLK_1 | UPDATE_50;</div><div class="line">    spi_write(spi, tx_buf, <span class="keyword">sizeof</span>(tx_buf));</div><div class="line"> </div><div class="line">    ad7705_calib_self(spi, channel); </div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">//Reset and initialize the specified channel</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ad7705_reset_and_reconfig</span><span class="params">(<span class="keyword">struct</span> spi_device *spi)</span></span></div><div class="line">&#123;</div><div class="line">    ad7705_reset();</div><div class="line">    </div><div class="line">    msleep(<span class="number">5</span>);</div><div class="line">    ad7705_sync_spi(spi);</div><div class="line">    msleep(<span class="number">5</span>);</div><div class="line"> </div><div class="line">    ad7705_config_channel(spi, CH_1);</div><div class="line">    ad7705_config_channel(spi, CH_2);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//Read the specified channel value</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">ad7705_read_channel</span><span class="params">(<span class="keyword">struct</span> device *dev, u8 channel, u16 *data)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> spi_device *spi = to_spi_device(dev);</div><div class="line">    <span class="keyword">struct</span> ad7705 *adc = spi_get_drvdata(spi);</div><div class="line">    <span class="keyword">int</span> ret = <span class="number">-1</span>; </div><div class="line">    u16 value = <span class="number">0</span>;</div><div class="line">    u8 tx_buf[<span class="number">1</span>] = &#123;<span class="number">0</span>&#125;;</div><div class="line">    u8 rx_buf[<span class="number">2</span>] = &#123;<span class="number">0</span>&#125;;</div><div class="line"> </div><div class="line">    <span class="keyword">if</span> (mutex_lock_interruptible(&amp;adc-&gt;lock))</div><div class="line">        <span class="keyword">return</span> -ERESTARTSYS;</div><div class="line"> </div><div class="line">    <span class="keyword">if</span> (ad7705_wait_DRDY() &lt; <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        printk(KERN_ERR <span class="string">"[%s] ad7705_wait_DRDY() time out.\n"</span>, __FUNCTION__);</div><div class="line">        <span class="keyword">goto</span> fail;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    tx_buf[<span class="number">0</span>] = REG_DATA | CMD_READ | channel;</div><div class="line">    ret = spi_write_then_read(spi, tx_buf, <span class="keyword">sizeof</span>(tx_buf), rx_buf, <span class="keyword">sizeof</span>(rx_buf));</div><div class="line">    <span class="comment">//printk("channel:%d rx_buf[0]=%d  rx_buf[1]=%d \n", channel, rx_buf[0], rx_buf[1]);</span></div><div class="line">    <span class="keyword">if</span> (<span class="number">0</span> &gt; ret)</div><div class="line">    &#123;</div><div class="line">        printk(KERN_ERR <span class="string">"[%s] ad7705_read_channel() fail. ret=%d\n"</span>, __FUNCTION__, ret);</div><div class="line">        <span class="keyword">goto</span> fail;</div><div class="line">    &#125;</div><div class="line">    value = (rx_buf[<span class="number">0</span>] &lt;&lt; <span class="number">8</span>) + rx_buf[<span class="number">1</span>];</div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></div><div class="line">    <span class="keyword">if</span> (<span class="number">0xFFFF</span> == value)</div><div class="line">    &#123;</div><div class="line">        ret = <span class="number">-1</span>;</div><div class="line">        <span class="keyword">goto</span> fail;</div><div class="line">    &#125;</div><div class="line"> <span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    *data = value;</div><div class="line">    </div><div class="line">fail:</div><div class="line">    mutex_unlock(&amp;adc-&gt;lock);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//sysfs hook function </span></div><div class="line"><span class="function"><span class="keyword">static</span> ssize_t <span class="title">ad7705_get_sensor_value</span><span class="params">(<span class="keyword">struct</span> device *dev, <span class="keyword">struct</span> device_attribute *devattr, <span class="keyword">char</span> *buf)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> spi_device *spi = to_spi_device(dev);</div><div class="line">    <span class="keyword">struct</span> sensor_device_attribute *attr = to_sensor_dev_attr(devattr);</div><div class="line">    u16 ad = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> i, ret = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">int</span> vol1, vol2;</div><div class="line"></div><div class="line">    <span class="comment">//After switching channels, the value of the other channel is read for the first time.</span></div><div class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">2</span>; i++) </div><div class="line">    &#123;</div><div class="line">        ret = ad7705_read_channel(dev, attr-&gt;index, &amp;ad);</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">if</span> (<span class="number">0</span> &gt; ret)</div><div class="line">        &#123;</div><div class="line">            ad7705_reset_and_reconfig(spi);</div><div class="line">            <span class="keyword">return</span> ret;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></div><div class="line">    ret = <span class="built_in">sprintf</span>(buf, <span class="string">"%u\n"</span>, ad);</div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">    vol1 = ad*<span class="number">5</span>/<span class="number">65535</span>; <span class="comment">//Voltage integral part</span></div><div class="line">    vol2 = (ad*<span class="number">5</span>*<span class="number">1000</span>/<span class="number">65535</span>) - (vol1*<span class="number">1000</span>);<span class="comment">//Voltage fraction part</span></div><div class="line">    ret = <span class="built_in">sprintf</span>(buf, <span class="string">"vol = %d.%dV\n"</span>,vol1, vol2);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span>    </span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> sensor_device_attribute ad_input[] = &#123;</div><div class="line">    SENSOR_ATTR(ad7705_ch1, S_IRUGO, ad7705_get_sensor_value, <span class="literal">NULL</span>, CH_1),</div><div class="line">    SENSOR_ATTR(ad7705_ch2, S_IRUGO, ad7705_get_sensor_value, <span class="literal">NULL</span>, CH_2),</div><div class="line">&#125;;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span>  <span class="title">ad7705_probe</span><span class="params">(<span class="keyword">struct</span> spi_device *spi)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> ad7705 *adc = <span class="literal">NULL</span>;</div><div class="line">    <span class="keyword">int</span> i, status;</div><div class="line">    </div><div class="line">    adc = kzalloc(<span class="keyword">sizeof</span> *adc, GFP_KERNEL);</div><div class="line">    <span class="keyword">if</span> (!adc)</div><div class="line">        <span class="keyword">return</span> -ENOMEM;</div><div class="line"> </div><div class="line">    mutex_init(&amp;adc-&gt;lock);</div><div class="line">    mutex_lock(&amp;adc-&gt;lock);</div><div class="line">    </div><div class="line">    spi_set_drvdata(spi, adc);</div><div class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;CHANNEL_NUM; i++)</div><div class="line">    &#123;</div><div class="line">        status = device_create_file(&amp;spi-&gt;dev, &amp;ad_input[i].dev_attr);</div><div class="line">        <span class="keyword">if</span> (status)</div><div class="line">        &#123;</div><div class="line">            dev_err(&amp;spi-&gt;dev, <span class="string">"device_create_file() failed.\n"</span>);</div><div class="line">            <span class="keyword">goto</span> fail_crete_file;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    adc-&gt;hwmon_dev = hwmon_device_register(&amp;spi-&gt;dev);</div><div class="line">    <span class="keyword">if</span> (IS_ERR(adc-&gt;hwmon_dev))</div><div class="line">    &#123;</div><div class="line">        dev_err(&amp;spi-&gt;dev, <span class="string">"hwmon_device_register() fail.\n"</span>);</div><div class="line">        status = PTR_ERR(adc-&gt;hwmon_dev);</div><div class="line">        <span class="keyword">goto</span> fail_crete_file;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    status = gpio_request(DRDY_PIN, <span class="string">"ad7705_drdy"</span>);   <span class="comment">//ad7705 DRDY Pin</span></div><div class="line">    <span class="keyword">if</span> (status)</div><div class="line">    &#123;</div><div class="line">        dev_err(&amp;spi-&gt;dev, <span class="string">"gpio_request(AD705_DRDY_PIN) fail.\n"</span>);</div><div class="line">        <span class="keyword">goto</span> fail_device_register;</div><div class="line">    &#125;</div><div class="line">    gpio_direction_input(DRDY_PIN);</div><div class="line">    </div><div class="line">    status = gpio_request(RESET_PIN, <span class="string">"ad7705_reset"</span>);  <span class="comment">//ad7705 RESET Pin</span></div><div class="line">    <span class="keyword">if</span> (status)</div><div class="line">    &#123;</div><div class="line">        dev_err(&amp;spi-&gt;dev, <span class="string">"gpio_request(RESET_PIN) fail.\n"</span>);</div><div class="line">        <span class="keyword">goto</span> fail_request_drdy_pin;</div><div class="line">    &#125;</div><div class="line">    gpio_direction_output(RESET_PIN, <span class="number">1</span>);</div><div class="line"></div><div class="line">    ad7705_reset_and_reconfig(spi);</div><div class="line"> </div><div class="line">    mutex_unlock(&amp;adc-&gt;lock);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"> </div><div class="line">fail_request_drdy_pin:</div><div class="line">    gpio_free(DRDY_PIN);</div><div class="line">fail_device_register:</div><div class="line">    hwmon_device_unregister(adc-&gt;hwmon_dev);</div><div class="line">fail_crete_file:</div><div class="line">    <span class="keyword">for</span> (i--; i&gt;=<span class="number">0</span>; i--)</div><div class="line">        device_remove_file(&amp;spi-&gt;dev, &amp;ad_input[i].dev_attr);</div><div class="line">    </div><div class="line">    spi_set_drvdata(spi, <span class="literal">NULL</span>);</div><div class="line">    mutex_unlock(&amp;adc-&gt;lock);</div><div class="line">    kfree(adc);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> status;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span>  <span class="title">ad7705_remove</span><span class="params">(<span class="keyword">struct</span> spi_device *spi)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">struct</span> ad7705 *adc = spi_get_drvdata(spi);</div><div class="line"> </div><div class="line">    mutex_lock(&amp;adc-&gt;lock);</div><div class="line"> </div><div class="line">    gpio_free(DRDY_PIN);</div><div class="line">    gpio_free(RESET_PIN);</div><div class="line">    hwmon_device_unregister(adc-&gt;hwmon_dev);</div><div class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;CHANNEL_NUM; i++)</div><div class="line">        device_remove_file(&amp;spi-&gt;dev, &amp;ad_input[i].dev_attr);</div><div class="line">    spi_set_drvdata(spi, <span class="literal">NULL</span>);</div><div class="line"> </div><div class="line">    mutex_unlock(&amp;adc-&gt;lock);</div><div class="line">    </div><div class="line">    kfree(adc);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">struct</span> of_device_id of_match_spi[] = &#123;</div><div class="line">    &#123; .compatible = <span class="string">"titan,ad7705"</span>, .data = <span class="literal">NULL</span> &#125;,</div><div class="line">    &#123; <span class="comment">/* sentinel */</span> &#125;</div><div class="line">&#125;;</div><div class="line">    </div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> spi_driver ad7705_driver = &#123;</div><div class="line">    .driver = &#123;</div><div class="line">        .name = <span class="string">"ad7705"</span>,</div><div class="line">        .owner = THIS_MODULE,</div><div class="line">        .of_match_table = of_match_spi,</div><div class="line">    &#125;,</div><div class="line">    .probe = ad7705_probe,</div><div class="line">    .remove = ad7705_remove,</div><div class="line">&#125;;</div><div class="line"> </div><div class="line">module_spi_driver(ad7705_driver);</div><div class="line"></div><div class="line">MODULE_LICENSE(<span class="string">"GPL"</span>);</div><div class="line">MODULE_AUTHOR(<span class="string">"hceng &lt;huangcheng.job@foxmail.com&gt;"</span>);</div><div class="line">MODULE_DESCRIPTION(<span class="string">"TI am335x board spi device: ad7705 driver."</span>);</div><div class="line">MODULE_VERSION(<span class="string">"v1.0"</span>);</div></pre></td></tr></table></figure></li><li><p>测试代码：<br>因为是子系统的关系，可以在应用层使用<code>cat /sys/class/hwmon/hwmon0/device/ad7705_ch1</code>直接得到结果。<br>这里再使用该节点，写了个应用程序，以便进行连续访问：</p><figure class="highlight c"><figcaption><span>[ad7705_app.c]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">read_channel</span><span class="params">(<span class="keyword">char</span> *dev_file_path)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> fd = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> buff[<span class="number">128</span>] = &#123;<span class="number">0</span>&#125;;</div><div class="line">    </div><div class="line">    fd = open(dev_file_path, O_RDONLY);</div><div class="line">    <span class="keyword">if</span> (<span class="number">-1</span> == fd)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Can't open device file fail\n"</span>);</div><div class="line">        <span class="keyword">return</span> ;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="built_in">memset</span>(buff, <span class="number">0</span>, <span class="number">128</span>);</div><div class="line">    ret = read(fd, buff, <span class="number">128</span>);</div><div class="line">    <span class="keyword">if</span> (<span class="number">0</span> &gt; ret)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Can't read data\n"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, buff);</div><div class="line"> </div><div class="line">    close(fd);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">char</span> ch1_path[] = &#123;<span class="string">"/sys/class/hwmon/hwmon0/device/ad7705_ch1"</span>&#125;;</div><div class="line">    <span class="keyword">char</span> ch2_path[] = &#123;<span class="string">"/sys/class/hwmon/hwmon0/device/ad7705_ch2"</span>&#125;;</div><div class="line">    <span class="comment">//char ch1_path[] = &#123;"/sys/bus/spi/drivers/ad7705/spi1.2/ad7705_ch1"&#125;;</span></div><div class="line">    <span class="comment">//char ch2_path[] = &#123;"/sys/bus/spi/drivers/ad7705/spi1.2/ad7705_ch2"&#125;;</span></div><div class="line"></div><div class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        read_channel(ch1_path);</div><div class="line">        usleep(<span class="number">1000</span>*<span class="number">1000</span>);</div><div class="line"></div><div class="line">        read_channel(ch2_path);</div><div class="line">        usleep(<span class="number">1000</span>*<span class="number">1000</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><p>值得注意的是，通过<code>read()</code>返回的数据不再是整型数据，而是字符串，且返回的字符串样式，在驱动里定义。</p><ul><li>效果：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">cat /sys/class/hwmon/hwmon0/device/ad7705_ch1</div><div class="line">vol = 2.1V</div><div class="line"></div><div class="line">cat /sys/class/hwmon/hwmon0/device/ad7705_ch2</div><div class="line">vol = 0.0V</div><div class="line"></div><div class="line"></div><div class="line">./ad7705_app</div><div class="line">vol = 2.1V</div><div class="line">vol = 0.0V</div></pre></td></tr></table></figure></li></ul><h2 id="1-3-详细分析"><a href="#1-3-详细分析" class="headerlink" title="1.3 详细分析"></a>1.3 详细分析</h2><h3 id="1-3-1-驱动与设备树匹配"><a href="#1-3-1-驱动与设备树匹配" class="headerlink" title="1.3.1 驱动与设备树匹配"></a>1.3.1 驱动与设备树匹配</h3><p><code>ad7705_drv.c</code>和<code>am335x-evm.dts</code>各自中的<code>compatible</code>属性名字相同时，即调用<code>probe()</code>函数，进入一切的开端。</p><h3 id="1-3-2-设置结构体"><a href="#1-3-2-设置结构体" class="headerlink" title="1.3.2 设置结构体"></a>1.3.2 设置结构体</h3><p>这里定义了一个<code>ad7705</code>的结构体，包含设备指针和互斥锁。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> ad7705 &#123;</div><div class="line">    <span class="keyword">struct</span> device *hwmon_dev;</div><div class="line">    <span class="keyword">struct</span> mutex lock;  </div><div class="line">&#125;;</div></pre></td></tr></table></figure><br>在<code>probe()</code>里定义和分配该结构体：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> ad7705 *adc = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line">adc = kzalloc(<span class="keyword">sizeof</span> *adc, GFP_KERNEL);</div><div class="line"><span class="keyword">if</span> (!adc)</div><div class="line">    <span class="keyword">return</span> -ENOMEM;</div></pre></td></tr></table></figure><br>补充下内核中内存申请的相关知识：<br>内核中常用的内存申请函数有：<code>kmalloc()</code>、<code>kzalloc()</code>、<code>vmalloc()</code>：</p><blockquote><ul><li><code>void *kmalloc(size_t size, gfp_t flags)；</code> <code>void kfree(const void *objp);</code></li><li><code>kmalloc()</code>申请的内存位于物理内存映射区域，而且在物理上也是连续的，它们与真实的物理地址只有一个固定的偏移，因为存在较简单的转换关系，所以对申请的内存大小有限制，不能超过128KB。 </li><li>常用的flags：<br>　　<code>GFP_ATOMIC</code> —— 分配内存的过程是一个原子过程，分配内存的过程不会被（高优先级进程或中断）打断；<br>　　<code>GFP_KERNEL</code> —— 正常分配内存；<br>　　<code>GFP_DMA</code>    —— 给 DMA 控制器分配内存，需要使用该标志（DMA要求分配虚拟地址和物理地址连续；</li></ul></blockquote><p>　</p><blockquote><ul><li><code>void *kzalloc(size_t size, gfp_t flags);</code> <code>void kfree(const void *objp);</code></li><li><code>kzalloc()</code>就是调用的<code>kmalloc()</code>，多加了个<code>__GFP_ZERO</code>标志，即分配内存的时候还会将其清零； </li><li>常用的flags：<br>　　同<code>kmalloc()</code>。</li></ul></blockquote><p>　</p><blockquote><ul><li><code>void *vmalloc(unsigned long size);</code> <code>void vfree(const void *addr);</code>　</li><li><code>vmalloc()</code>会在虚拟内存空间给出一块连续的内存区，但这片连续的虚拟内存在物理内存中并不一定连续。由于<code>vmalloc()</code>没有保证申请到的是连续的物理内存，因此对申请的内存大小没有限制，如果需要申请较大的内存空间就可以用此函数了。<code>vmalloc()</code>和<code>vfree()</code>可以睡眠，因此不能从中断上下文调用。 </li></ul></blockquote><h3 id="1-3-3-设置互斥锁"><a href="#1-3-3-设置互斥锁" class="headerlink" title="1.3.3 设置互斥锁"></a>1.3.3 设置互斥锁</h3><p>为了并发控制，加入互斥锁独占资源。<br>我好像写驱动都没加锁的习惯，以后改正。<br>互斥锁的使用比较简单，先初始化，再加锁，执行要做的内容，最后解锁。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">    mutex_init(&amp;adc-&gt;lock);</div><div class="line">    mutex_lock(&amp;adc-&gt;lock); </div><div class="line">……</div><div class="line">    mutex_unlock(&amp;adc-&gt;lock);</div></pre></td></tr></table></figure></p><h3 id="1-3-4-设置私有变量"><a href="#1-3-4-设置私有变量" class="headerlink" title="1.3.4 设置私有变量"></a>1.3.4 设置私有变量</h3><p>将定义的<code>ad7705</code>结构体<code>adc</code>，保存到<code>spi_device</code>:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">spi_set_drvdata(spi, adc);</div></pre></td></tr></table></figure><br>后面其它函数就可以通过<code>device</code>得到<code>spi_device</code>，再提取到私有数据：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> spi_device *spi = to_spi_device(dev);</div><div class="line"><span class="keyword">struct</span> ad7705 *adc = spi_get_drvdata(spi);</div></pre></td></tr></table></figure></p><h3 id="1-3-5-创建sysfs属性文件"><a href="#1-3-5-创建sysfs属性文件" class="headerlink" title="1.3.5 创建sysfs属性文件"></a>1.3.5 创建sysfs属性文件</h3><p>首先解释一下<code>sysfs</code>：<br><code>sysfs</code>是Linux所提供的一种虚拟档案系统；<br>在设备模型中，<code>sysfs</code>文件系统用来表示设备的结构，将设备的层次结构形象的反应到用户空间中，从而可以通过修改<code>sysfs</code>中的文件属性来修改设备的属性值；<br><code>sysfs</code>被挂载到根目录下的<code>/sys</code>文件夹下。</p><p>使用函数<code>device_create_file()</code>将会调用到<code>sysfs_create_file()</code>，将在<code>/sys/class/hwmon/</code>下创建文件夹，并按照<code>hwmon0</code>、<code>hwmon1</code>、<code>hwmon2</code>等顺序编号</p><p>第二个参数是<code>struct device_attribute</code>结构体，通过定义的<code>sensor_device_attribute</code>结构体成员传给它。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> sensor_device_attribute ad_input[] = &#123;</div><div class="line">    SENSOR_ATTR(ad7705_ch1, S_IRUGO, ad7705_get_sensor_value, <span class="literal">NULL</span>, CH_1),</div><div class="line">    SENSOR_ATTR(ad7705_ch2, S_IRUGO, ad7705_get_sensor_value, <span class="literal">NULL</span>, CH_2),</div><div class="line">&#125;;</div></pre></td></tr></table></figure><br>参数含义分别是节点名字、节点访问权限(<code>S_IRUGO</code>:用户、组、其它成员都可读)、读函数(<code>cat</code>命令时将调用)、写函数(<code>echo</code>命令时将调用`)、索引。</p><h3 id="1-3-6-实现device-attribute的函数"><a href="#1-3-6-实现device-attribute的函数" class="headerlink" title="1.3.6 实现device_attribute的函数"></a>1.3.6 实现<code>device_attribute</code>的函数</h3><p>前面的<code>sensor_device_attribute</code>只提供了读函数<code>ad7705_get_sensor_value</code>，并未提供写函数<code>NULL</code>，这里就只实现读函数即可。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> ssize_t <span class="title">ad7705_get_sensor_value</span><span class="params">(<span class="keyword">struct</span> device *dev, <span class="keyword">struct</span> device_attribute *devattr, <span class="keyword">char</span> *buf)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> spi_device *spi = to_spi_device(dev);</div><div class="line">    <span class="keyword">struct</span> sensor_device_attribute *attr = to_sensor_dev_attr(devattr);</div><div class="line">    u16 ad = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> i, ret = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">int</span> vol1, vol2;</div><div class="line"></div><div class="line">    <span class="comment">//After switching channels, the value of the other channel is read for the first time.</span></div><div class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">2</span>; i++) </div><div class="line">    &#123;</div><div class="line">        ret = ad7705_read_channel(dev, attr-&gt;index, &amp;ad);</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">if</span> (<span class="number">0</span> &gt; ret)</div><div class="line">        &#123;</div><div class="line">            ad7705_reset_and_reconfig(spi);</div><div class="line">            <span class="keyword">return</span> ret;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></div><div class="line">    ret = <span class="built_in">sprintf</span>(buf, <span class="string">"%u\n"</span>, ad);</div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">    vol1 = ad*<span class="number">5</span>/<span class="number">65535</span>; <span class="comment">//Voltage integral part</span></div><div class="line">    vol2 = (ad*<span class="number">5</span>*<span class="number">1000</span>/<span class="number">65535</span>) - (vol1*<span class="number">1000</span>);<span class="comment">//Voltage fraction part</span></div><div class="line">    ret = <span class="built_in">sprintf</span>(buf, <span class="string">"vol = %d.%dV\n"</span>,vol1, vol2);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span>    </span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>AD7705有两个ADC通道，它们都调用<code>ad7705_get_sensor_value()</code>，但通过<code>sensor_device_attribute</code>结构体中的<code>index</code>成员，将会读指定通道值。<br><code>sprintf()</code>将指定格式的数据传给用户层。</p><h3 id="1-3-7-注册hwmon子系统"><a href="#1-3-7-注册hwmon子系统" class="headerlink" title="1.3.7 注册hwmon子系统"></a>1.3.7 注册hwmon子系统</h3><p>使用<code>hwmon_device_register</code>注册<code>hwmon</code>设备。</p><h3 id="1-3-8-引脚GPIO初始化"><a href="#1-3-8-引脚GPIO初始化" class="headerlink" title="1.3.8 引脚GPIO初始化"></a>1.3.8 引脚GPIO初始化</h3><p>AD7705除了SPI引脚，还用到了一个就绪引脚和复位引脚。<br>这两个脚的信息可以从设备树中指定，再获取，这里直接写死在驱动里面了。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">status = gpio_request(DRDY_PIN, <span class="string">"ad7705_drdy"</span>);   <span class="comment">//ad7705 DRDY Pin</span></div><div class="line"><span class="keyword">if</span> (status)</div><div class="line">&#123;</div><div class="line">    dev_err(&amp;spi-&gt;dev, <span class="string">"gpio_request(AD705_DRDY_PIN) fail.\n"</span>);</div><div class="line">    <span class="keyword">goto</span> fail_device_register;</div><div class="line">&#125;</div><div class="line">gpio_direction_input(DRDY_PIN);</div><div class="line"></div><div class="line">status = gpio_request(RESET_PIN, <span class="string">"ad7705_reset"</span>);  <span class="comment">//ad7705 RESET Pin</span></div><div class="line"><span class="keyword">if</span> (status)</div><div class="line">&#123;</div><div class="line">    dev_err(&amp;spi-&gt;dev, <span class="string">"gpio_request(RESET_PIN) fail.\n"</span>);</div><div class="line">    <span class="keyword">goto</span> fail_request_drdy_pin;</div><div class="line">&#125;</div><div class="line">gpio_direction_output(RESET_PIN, <span class="number">1</span>);</div></pre></td></tr></table></figure><br>GPIO常见的操作:</p><blockquote><p>1.判断引脚是否合法<br>　<code>int gpio_is_valid(int number);</code><br>2.申请该引脚<br>　<code>int gpio_request(unsigned gpio, const char *label);</code><br>3.设置为输入还是输出<br>　<code>int gpio_direction_input(unsigned gpio);</code><br>　<code>int gpio_direction_output(unsigned gpio, int value);</code><br>4.获取/设置引脚电平<br>　<code>int gpio_get_value(unsigned gpio);</code><br>　<code>void gpio_set_value(unsigned gpio, int value);</code><br>5.申请作为中断引脚/释放中断<br>　<code>int gpio_to_irq(unsigned gpio);</code><br>　<code>void free_irq(unsigned int irq, void *dev_id);</code><br>6.导出到用户态(/sys/class/gpio/gpioN)<br>　<code>int gpio_export(unsigned gpio, bool direction_may_change);</code><br>　<code>void gpio_unexport(unsigned gpio);</code> </p></blockquote><h3 id="1-3-9-复位和配置AD7705"><a href="#1-3-9-复位和配置AD7705" class="headerlink" title="1.3.9 复位和配置AD7705"></a>1.3.9 复位和配置AD7705</h3><p>调用<code>ad7705_reset()</code>硬件复位，调用<code>ad7705_sync_spi()</code>同步下时钟，调用<code>ad7705_config_channel()</code>配置时钟和自校准。</p><h1 id="2-input子系统简介"><a href="#2-input子系统简介" class="headerlink" title="2. input子系统简介"></a>2. input子系统简介</h1><p>输入子系统是对不同类型的输入设备进行统一处理的驱动程序。<br>一个输入事件，如按键，是通过设备驱动层-&gt;系统核心层-&gt;事件处理层-&gt;用户空间的顺序到达用户空间并传给应用程序使用。</p><div align="center"><img width="600" src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/190118/1.jpg"></div><p>Input子系统由<strong>设备驱动层</strong>、<strong>系统核心层</strong>、<strong>事件处理层</strong>三部分组成。<br>事件处理层的驱动程序叫<strong>事件驱动程序</strong>，它负责和应用程序的接口，其内容是标准的，对所有输入设备都可用，就不需要我们编写了。<br>设备驱动层的驱动程序叫<strong>设备驱动程序</strong>，它负责和底层输入设备的通信，需要我们自己编写。</p><h2 id="2-1-ADXL345简介"><a href="#2-1-ADXL345简介" class="headerlink" title="2.1 ADXL345简介"></a>2.1 ADXL345简介</h2><p><a href="https://www.analog.com/media/en/technical-documentation/data-sheets/adxl345.pdf" target="_blank" rel="external">ADXL345</a>是一款小而薄的超低功耗3轴加速度计，分辨率为13位，测量范围达±16g。<br>数字输出数据为16位二进制补码格式，可通过SPI(3线或4线)或I2C数字接口访问。<br>芯片默认是SPI四线模式，且<code>CPHA=1 CPOL=1</code>，也就是一般SPI的模式3。<br>但我使用的ADXL345模块默认是I2C接口，即把12脚<code>SDO</code>接地了，如果使用SPI接口，需要去掉R4这个0欧电阻。</p><div align="center"><img width="600" src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/190118/2.png"></div><p>关于ADXL345的使用目的，目前能想到这几个：<br>1、读取加速度(加速度是矢量，既有大小又有方向)，估计某些场合需要这个参数；<br>2、让ADXL345处于睡眠状态，当被摇动时候，触发最大阈值，从睡眠模式唤醒并从中断引脚输出高电平唤醒主控；<br>3、根据加速度计算得到角度值，进行屏幕翻转判定等；</p><p>Linux内核中自带ADXL345驱动，路径为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">drivers/input/misc/adxl34x-i2c.c</div><div class="line">drivers/input/misc/adxl34x-spi.c</div><div class="line"></div><div class="line">drivers/input/misc/adxl34x.c</div></pre></td></tr></table></figure></p><p>ADI的官网有对该驱动使用、测试方法有<a href="https://wiki.analog.com/resources/tools-software/linux-drivers/input-misc/adxl345" target="_blank" rel="external">详细介绍</a>。</p><h2 id="2-2-代码框架介绍"><a href="#2-2-代码框架介绍" class="headerlink" title="2.2 代码框架介绍"></a>2.2 代码框架介绍</h2><p><div align="center"><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/190118/3.jpg"></div><br>以SPI接口为例，先理一下代码的框架，图中最左边有是设备驱动模型中的设备，可以由设备树或者C文件提供。<br>它们目的都是向<code>adxl34x-spi.c</code>提供时钟速度、片选引脚、中断引脚、SPI模式等信息。</p><p>如果是设备树，就得修改下<code>adxl34x-spi.c</code>和<code>am335x-evm.dts</code>，使各自中的<code>compatible</code>属性匹配，从而调用<code>adxl34x-spi.c</code>中的<code>probe()</code>函数。<br>如果是C文件，就需要自己创建个<code>board_info.c</code>文件，填充<code>spi_board_info</code>内容，并注册。这里注意目前的内核已经没有将注册函数<code>spi_register_board_info()</code>导出，不能使用，可以通过<code>spi_busnum_to_master()</code>、<code>spi_new_device()</code>的方式注册。最后<code>spi_board_info</code>中的<code>.modalias</code>和<code>spi_driver</code>中的<code>.name</code>名字匹配，则调用<code>adxl34x-spi.c</code>中的<code>probe()</code>函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">spi_info_init</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">struct</span> spi_master *master = <span class="literal">NULL</span>;</div><div class="line"><span class="keyword">struct</span> spi_device *device = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line">master = spi_busnum_to_master(am335x_spi1_slave_info-&gt;bus_num);</div><div class="line"><span class="keyword">if</span> (!master) </div><div class="line"><span class="keyword">return</span> -EINVAL;</div><div class="line"></div><div class="line">device = spi_new_device(master, am335x_spi1_slave_info);</div><div class="line"><span class="keyword">if</span> (!device)</div><div class="line"><span class="keyword">return</span> -EINVAL;</div><div class="line"></div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="comment">//return spi_register_board_info(am335x_spi1_slave_info, ARRAY_SIZE(am335x_spi1_slave_info));</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>然后中间的是设备驱动模型中的驱动，它可以看成三部分：<br>1、在<code>probe()</code>中调用<code>adxl34x.c</code>中的<code>adxl34x_probe()</code>；<br>2、提供<code>read()</code>、<code>write()</code>函数；<br>3、调用<code>adxl34x.c</code>的电源管理相关函数，支持电源管理模型；<br>如果使用I2C接口，其目的还是一样的。</p><p>最右边的就是ADXL345的具体操作内容，也是后面详细分析的重点。</p><h2 id="2-3-完整代码及效果"><a href="#2-3-完整代码及效果" class="headerlink" title="2.3 完整代码及效果"></a>2.3 完整代码及效果</h2><ul><li>驱动部分：<br><code>adxl34x-spi.c</code>和<code>adxl34x.c</code>的完整代码就没必要贴了。<br>这里使用的设备树提供设备信息，只稍微的修改了点<code>adxl34x-spi.c</code>的内容：<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">struct</span> of_device_id of_match_spi[] = &#123;</div><div class="line">    &#123; .compatible = <span class="string">"adi,adxl34x"</span>, .data = <span class="literal">NULL</span> &#125;,</div><div class="line">    &#123; <span class="comment">/* sentinel */</span> &#125;</div><div class="line">&#125;;</div><div class="line">    </div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> spi_driver adxl34x_driver = &#123;</div><div class="line">    .driver = &#123;</div><div class="line">        .name = <span class="string">"adxl34x"</span>,</div><div class="line">        .owner = THIS_MODULE,</div><div class="line">        .pm = &amp;adxl34x_spi_pm,</div><div class="line">        .of_match_table = of_match_spi,</div><div class="line">    &#125;,</div><div class="line">    .probe   = adxl34x_spi_probe,</div><div class="line">    .remove  = adxl34x_spi_remove,</div><div class="line">&#125;;</div></pre></td></tr></table></figure></li></ul><ul><li><p>设备树部分：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class">spidev@0 </span>&#123;</div><div class="line">    compatible = <span class="string">"adi,adxl34x"</span>;</div><div class="line">    spi-max-frequency = <span class="params">&lt;<span class="number">2500000</span>&gt;</span>;</div><div class="line">    reg = <span class="params">&lt;<span class="number">0</span>&gt;</span>;</div><div class="line"></div><div class="line">    interrupt-parent = <span class="params">&lt;<span class="variable">&amp;gpio0</span>&gt;</span>;</div><div class="line">    interrupts = <span class="params">&lt;<span class="number">12</span> IRQ_TYPE_LEVEL_HIGH&gt;</span>;</div><div class="line">    spi-cpha = <span class="params">&lt;<span class="number">1</span>&gt;</span>;</div><div class="line">    spi-cpol  = <span class="params">&lt;<span class="number">1</span>&gt;</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>AM335X设备树中断的写法有两种，可以参考<code>Documentation/devicetree/bindings/interrupt-controller/interrupts.txt</code>。<br>这里<code>interrupt-parent</code>指定使用那个GPIO中断控制器，<code>interrupts</code>属性第一个值为该组引脚中的引脚号，第二个为中断触发电平。</p></li><li><p>测试程序：<br>有两个开源的程序可用来读取<code>input event</code>事件的值，<code>evtest</code>与<code>getevent</code>(这个是从android中提取的)。<br>如下是<code>evtest</code>源码，前面的ADI官网链接也使用了该测试程序。</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line"> * $Id: evtest.c,v 1.23 2005/02/06 13:51:42 vojtech Exp $</div><div class="line"> *</div><div class="line"> * Copyright (c) 1999-2000 Vojtech Pavlik</div><div class="line"> *</div><div class="line"> * Event device test program</div><div class="line"> */</div><div class="line"></div><div class="line">/*</div><div class="line"> * This program is free software; you can redistribute it and/or modify</div><div class="line"> * it under the terms of the GNU General Public License as published by</div><div class="line"> * the Free Software Foundation; either version 2 of the License, or</div><div class="line"> * (at your option) any later version.</div><div class="line"> *</div><div class="line"> * This program is distributed in the hope that it will be useful,</div><div class="line"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</div><div class="line"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</div><div class="line"> * GNU General Public License for more details.</div><div class="line"> *</div><div class="line"> * You should have received a copy of the GNU General Public License</div><div class="line"> * along with this program; if not, write to the Free Software</div><div class="line"> * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA</div><div class="line"> *</div><div class="line"> * Should you need to contact me, the author, you can do so either by</div><div class="line"> * e-mail - mail your message to &lt;vojtech@ucw.cz&gt;, or by paper mail:</div><div class="line"> * Vojtech Pavlik, Simunkova 1594, Prague 8, 182 00 Czech Republic</div><div class="line"> */</div><div class="line"></div><div class="line">#include &lt;stdint.h&gt;</div><div class="line"></div><div class="line">#include &lt;linux/input.h&gt;</div><div class="line"></div><div class="line">#include &lt;string.h&gt;</div><div class="line">#include &lt;fcntl.h&gt;</div><div class="line">#include &lt;unistd.h&gt;</div><div class="line">#include &lt;stdio.h&gt;</div><div class="line"></div><div class="line">#ifndef EV_SYN</div><div class="line">#define EV_SYN 0</div><div class="line">#endif</div><div class="line"></div><div class="line">char *events[EV_MAX + 1] =</div><div class="line">&#123;</div><div class="line">    [0 ... EV_MAX] = NULL,</div><div class="line">    [EV_SYN] = "Sync",            [EV_KEY] = "Key",</div><div class="line">    [EV_REL] = "Relative",            [EV_ABS] = "Absolute",</div><div class="line">    [EV_MSC] = "Misc",            [EV_LED] = "LED",</div><div class="line">    [EV_SND] = "Sound",            [EV_REP] = "Repeat",</div><div class="line">    [EV_FF] = "ForceFeedback",        [EV_PWR] = "Power",</div><div class="line">    [EV_FF_STATUS] = "ForceFeedbackStatus",</div><div class="line">&#125;;</div><div class="line"></div><div class="line">char *keys[KEY_MAX + 1] =</div><div class="line">&#123;</div><div class="line">    [0 ... KEY_MAX] = NULL,</div><div class="line">    [KEY_RESERVED] = "Reserved",        [KEY_ESC] = "Esc",</div><div class="line">    [KEY_1] = "1",                [KEY_2] = "2",</div><div class="line">    [KEY_3] = "3",                [KEY_4] = "4",</div><div class="line">    [KEY_5] = "5",                [KEY_6] = "6",</div><div class="line">    [KEY_7] = "7",                [KEY_8] = "8",</div><div class="line">    [KEY_9] = "9",                [KEY_0] = "0",</div><div class="line">    [KEY_MINUS] = "Minus",            [KEY_EQUAL] = "Equal",</div><div class="line">    [KEY_BACKSPACE] = "Backspace",        [KEY_TAB] = "Tab",</div><div class="line">    [KEY_Q] = "Q",                [KEY_W] = "W",</div><div class="line">    [KEY_E] = "E",                [KEY_R] = "R",</div><div class="line">    [KEY_T] = "T",                [KEY_Y] = "Y",</div><div class="line">    [KEY_U] = "U",                [KEY_I] = "I",</div><div class="line">    [KEY_O] = "O",                [KEY_P] = "P",</div><div class="line">    [KEY_LEFTBRACE] = "LeftBrace",        [KEY_RIGHTBRACE] = "RightBrace",</div><div class="line">    [KEY_ENTER] = "Enter",            [KEY_LEFTCTRL] = "LeftControl",</div><div class="line">    [KEY_A] = "A",                [KEY_S] = "S",</div><div class="line">    [KEY_D] = "D",                [KEY_F] = "F",</div><div class="line">    [KEY_G] = "G",                [KEY_H] = "H",</div><div class="line">    [KEY_J] = "J",                [KEY_K] = "K",</div><div class="line">    [KEY_L] = "L",                [KEY_SEMICOLON] = "Semicolon",</div><div class="line">    [KEY_APOSTROPHE] = "Apostrophe",    [KEY_GRAVE] = "Grave",</div><div class="line">    [KEY_LEFTSHIFT] = "LeftShift",        [KEY_BACKSLASH] = "BackSlash",</div><div class="line">    [KEY_Z] = "Z",                [KEY_X] = "X",</div><div class="line">    [KEY_C] = "C",                [KEY_V] = "V",</div><div class="line">    [KEY_B] = "B",                [KEY_N] = "N",</div><div class="line">    [KEY_M] = "M",                [KEY_COMMA] = "Comma",</div><div class="line">    [KEY_DOT] = "Dot",            [KEY_SLASH] = "Slash",</div><div class="line">    [KEY_RIGHTSHIFT] = "RightShift",    [KEY_KPASTERISK] = "KPAsterisk",</div><div class="line">    [KEY_LEFTALT] = "LeftAlt",        [KEY_SPACE] = "Space",</div><div class="line">    [KEY_CAPSLOCK] = "CapsLock",        [KEY_F1] = "F1",</div><div class="line">    [KEY_F2] = "F2",            [KEY_F3] = "F3",</div><div class="line">    [KEY_F4] = "F4",            [KEY_F5] = "F5",</div><div class="line">    [KEY_F6] = "F6",            [KEY_F7] = "F7",</div><div class="line">    [KEY_F8] = "F8",            [KEY_F9] = "F9",</div><div class="line">    [KEY_F10] = "F10",            [KEY_NUMLOCK] = "NumLock",</div><div class="line">    [KEY_SCROLLLOCK] = "ScrollLock",    [KEY_KP7] = "KP7",</div><div class="line">    [KEY_KP8] = "KP8",            [KEY_KP9] = "KP9",</div><div class="line">    [KEY_KPMINUS] = "KPMinus",        [KEY_KP4] = "KP4",</div><div class="line">    [KEY_KP5] = "KP5",            [KEY_KP6] = "KP6",</div><div class="line">    [KEY_KPPLUS] = "KPPlus",        [KEY_KP1] = "KP1",</div><div class="line">    [KEY_KP2] = "KP2",            [KEY_KP3] = "KP3",</div><div class="line">    [KEY_KP0] = "KP0",            [KEY_KPDOT] = "KPDot",</div><div class="line">    [KEY_ZENKAKUHANKAKU] = "Zenkaku/Hankaku", [KEY_102ND] = "102nd",</div><div class="line">    [KEY_F11] = "F11",            [KEY_F12] = "F12",</div><div class="line">    [KEY_RO] = "RO",            [KEY_KATAKANA] = "Katakana",</div><div class="line">    [KEY_HIRAGANA] = "HIRAGANA",        [KEY_HENKAN] = "Henkan",</div><div class="line">    [KEY_KATAKANAHIRAGANA] = "Katakana/Hiragana", [KEY_MUHENKAN] = "Muhenkan",</div><div class="line">    [KEY_KPJPCOMMA] = "KPJpComma",        [KEY_KPENTER] = "KPEnter",</div><div class="line">    [KEY_RIGHTCTRL] = "RightCtrl",        [KEY_KPSLASH] = "KPSlash",</div><div class="line">    [KEY_SYSRQ] = "SysRq",            [KEY_RIGHTALT] = "RightAlt",</div><div class="line">    [KEY_LINEFEED] = "LineFeed",        [KEY_HOME] = "Home",</div><div class="line">    [KEY_UP] = "Up",            [KEY_PAGEUP] = "PageUp",</div><div class="line">    [KEY_LEFT] = "Left",            [KEY_RIGHT] = "Right",</div><div class="line">    [KEY_END] = "End",            [KEY_DOWN] = "Down",</div><div class="line">    [KEY_PAGEDOWN] = "PageDown",        [KEY_INSERT] = "Insert",</div><div class="line">    [KEY_DELETE] = "Delete",        [KEY_MACRO] = "Macro",</div><div class="line">    [KEY_MUTE] = "Mute",            [KEY_VOLUMEDOWN] = "VolumeDown",</div><div class="line">    [KEY_VOLUMEUP] = "VolumeUp",        [KEY_POWER] = "Power",</div><div class="line">    [KEY_KPEQUAL] = "KPEqual",        [KEY_KPPLUSMINUS] = "KPPlusMinus",</div><div class="line">    [KEY_PAUSE] = "Pause",            [KEY_KPCOMMA] = "KPComma",</div><div class="line">    [KEY_HANGUEL] = "Hanguel",        [KEY_HANJA] = "Hanja",</div><div class="line">    [KEY_YEN] = "Yen",            [KEY_LEFTMETA] = "LeftMeta",</div><div class="line">    [KEY_RIGHTMETA] = "RightMeta",        [KEY_COMPOSE] = "Compose",</div><div class="line">    [KEY_STOP] = "Stop",            [KEY_AGAIN] = "Again",</div><div class="line">    [KEY_PROPS] = "Props",            [KEY_UNDO] = "Undo",</div><div class="line">    [KEY_FRONT] = "Front",            [KEY_COPY] = "Copy",</div><div class="line">    [KEY_OPEN] = "Open",            [KEY_PASTE] = "Paste",</div><div class="line">    [KEY_FIND] = "Find",            [KEY_CUT] = "Cut",</div><div class="line">    [KEY_HELP] = "Help",            [KEY_MENU] = "Menu",</div><div class="line">    [KEY_CALC] = "Calc",            [KEY_SETUP] = "Setup",</div><div class="line">    [KEY_SLEEP] = "Sleep",            [KEY_WAKEUP] = "WakeUp",</div><div class="line">    [KEY_FILE] = "File",            [KEY_SENDFILE] = "SendFile",</div><div class="line">    [KEY_DELETEFILE] = "DeleteFile",    [KEY_XFER] = "X-fer",</div><div class="line">    [KEY_PROG1] = "Prog1",            [KEY_PROG2] = "Prog2",</div><div class="line">    [KEY_WWW] = "WWW",            [KEY_MSDOS] = "MSDOS",</div><div class="line">    [KEY_COFFEE] = "Coffee",        [KEY_DIRECTION] = "Direction",</div><div class="line">    [KEY_CYCLEWINDOWS] = "CycleWindows",    [KEY_MAIL] = "Mail",</div><div class="line">    [KEY_BOOKMARKS] = "Bookmarks",        [KEY_COMPUTER] = "Computer",</div><div class="line">    [KEY_BACK] = "Back",            [KEY_FORWARD] = "Forward",</div><div class="line">    [KEY_CLOSECD] = "CloseCD",        [KEY_EJECTCD] = "EjectCD",</div><div class="line">    [KEY_EJECTCLOSECD] = "EjectCloseCD",    [KEY_NEXTSONG] = "NextSong",</div><div class="line">    [KEY_PLAYPAUSE] = "PlayPause",        [KEY_PREVIOUSSONG] = "PreviousSong",</div><div class="line">    [KEY_STOPCD] = "StopCD",        [KEY_RECORD] = "Record",</div><div class="line">    [KEY_REWIND] = "Rewind",        [KEY_PHONE] = "Phone",</div><div class="line">    [KEY_ISO] = "ISOKey",            [KEY_CONFIG] = "Config",</div><div class="line">    [KEY_HOMEPAGE] = "HomePage",        [KEY_REFRESH] = "Refresh",</div><div class="line">    [KEY_EXIT] = "Exit",            [KEY_MOVE] = "Move",</div><div class="line">    [KEY_EDIT] = "Edit",            [KEY_SCROLLUP] = "ScrollUp",</div><div class="line">    [KEY_SCROLLDOWN] = "ScrollDown",    [KEY_KPLEFTPAREN] = "KPLeftParenthesis",</div><div class="line">    [KEY_KPRIGHTPAREN] = "KPRightParenthesis", [KEY_F13] = "F13",</div><div class="line">    [KEY_F14] = "F14",            [KEY_F15] = "F15",</div><div class="line">    [KEY_F16] = "F16",            [KEY_F17] = "F17",</div><div class="line">    [KEY_F18] = "F18",            [KEY_F19] = "F19",</div><div class="line">    [KEY_F20] = "F20",            [KEY_F21] = "F21",</div><div class="line">    [KEY_F22] = "F22",            [KEY_F23] = "F23",</div><div class="line">    [KEY_F24] = "F24",            [KEY_PLAYCD] = "PlayCD",</div><div class="line">    [KEY_PAUSECD] = "PauseCD",        [KEY_PROG3] = "Prog3",</div><div class="line">    [KEY_PROG4] = "Prog4",            [KEY_SUSPEND] = "Suspend",</div><div class="line">    [KEY_CLOSE] = "Close",            [KEY_PLAY] = "Play",</div><div class="line">    [KEY_FASTFORWARD] = "Fast Forward",    [KEY_BASSBOOST] = "Bass Boost",</div><div class="line">    [KEY_PRINT] = "Print",            [KEY_HP] = "HP",</div><div class="line">    [KEY_CAMERA] = "Camera",        [KEY_SOUND] = "Sound",</div><div class="line">    [KEY_QUESTION] = "Question",        [KEY_EMAIL] = "Email",</div><div class="line">    [KEY_CHAT] = "Chat",            [KEY_SEARCH] = "Search",</div><div class="line">    [KEY_CONNECT] = "Connect",        [KEY_FINANCE] = "Finance",</div><div class="line">    [KEY_SPORT] = "Sport",            [KEY_SHOP] = "Shop",</div><div class="line">    [KEY_ALTERASE] = "Alternate Erase",    [KEY_CANCEL] = "Cancel",</div><div class="line">    [KEY_BRIGHTNESSDOWN] = "Brightness down", [KEY_BRIGHTNESSUP] = "Brightness up",</div><div class="line">    [KEY_MEDIA] = "Media",            [KEY_UNKNOWN] = "Unknown",</div><div class="line">    [BTN_0] = "Btn0",            [BTN_1] = "Btn1",</div><div class="line">    [BTN_2] = "Btn2",            [BTN_3] = "Btn3",</div><div class="line">    [BTN_4] = "Btn4",            [BTN_5] = "Btn5",</div><div class="line">    [BTN_6] = "Btn6",            [BTN_7] = "Btn7",</div><div class="line">    [BTN_8] = "Btn8",            [BTN_9] = "Btn9",</div><div class="line">    [BTN_LEFT] = "LeftBtn",            [BTN_RIGHT] = "RightBtn",</div><div class="line">    [BTN_MIDDLE] = "MiddleBtn",        [BTN_SIDE] = "SideBtn",</div><div class="line">    [BTN_EXTRA] = "ExtraBtn",        [BTN_FORWARD] = "ForwardBtn",</div><div class="line">    [BTN_BACK] = "BackBtn",            [BTN_TASK] = "TaskBtn",</div><div class="line">    [BTN_TRIGGER] = "Trigger",        [BTN_THUMB] = "ThumbBtn",</div><div class="line">    [BTN_THUMB2] = "ThumbBtn2",        [BTN_TOP] = "TopBtn",</div><div class="line">    [BTN_TOP2] = "TopBtn2",            [BTN_PINKIE] = "PinkieBtn",</div><div class="line">    [BTN_BASE] = "BaseBtn",            [BTN_BASE2] = "BaseBtn2",</div><div class="line">    [BTN_BASE3] = "BaseBtn3",        [BTN_BASE4] = "BaseBtn4",</div><div class="line">    [BTN_BASE5] = "BaseBtn5",        [BTN_BASE6] = "BaseBtn6",</div><div class="line">    [BTN_DEAD] = "BtnDead",            [BTN_A] = "BtnA",</div><div class="line">    [BTN_B] = "BtnB",            [BTN_C] = "BtnC",</div><div class="line">    [BTN_X] = "BtnX",            [BTN_Y] = "BtnY",</div><div class="line">    [BTN_Z] = "BtnZ",            [BTN_TL] = "BtnTL",</div><div class="line">    [BTN_TR] = "BtnTR",            [BTN_TL2] = "BtnTL2",</div><div class="line">    [BTN_TR2] = "BtnTR2",            [BTN_SELECT] = "BtnSelect",</div><div class="line">    [BTN_START] = "BtnStart",        [BTN_MODE] = "BtnMode",</div><div class="line">    [BTN_THUMBL] = "BtnThumbL",        [BTN_THUMBR] = "BtnThumbR",</div><div class="line">    [BTN_TOOL_PEN] = "ToolPen",        [BTN_TOOL_RUBBER] = "ToolRubber",</div><div class="line">    [BTN_TOOL_BRUSH] = "ToolBrush",        [BTN_TOOL_PENCIL] = "ToolPencil",</div><div class="line">    [BTN_TOOL_AIRBRUSH] = "ToolAirbrush",    [BTN_TOOL_FINGER] = "ToolFinger",</div><div class="line">    [BTN_TOOL_MOUSE] = "ToolMouse",        [BTN_TOOL_LENS] = "ToolLens",</div><div class="line">    [BTN_TOUCH] = "Touch",            [BTN_STYLUS] = "Stylus",</div><div class="line">    [BTN_STYLUS2] = "Stylus2",        [BTN_TOOL_DOUBLETAP] = "Tool Doubletap",</div><div class="line">    [BTN_TOOL_TRIPLETAP] = "Tool Tripletap", [BTN_GEAR_DOWN] = "WheelBtn",</div><div class="line">    [BTN_GEAR_UP] = "Gear up",        [KEY_OK] = "Ok",</div><div class="line">    [KEY_SELECT] = "Select",        [KEY_GOTO] = "Goto",</div><div class="line">    [KEY_CLEAR] = "Clear",            [KEY_POWER2] = "Power2",</div><div class="line">    [KEY_OPTION] = "Option",        [KEY_INFO] = "Info",</div><div class="line">    [KEY_TIME] = "Time",            [KEY_VENDOR] = "Vendor",</div><div class="line">    [KEY_ARCHIVE] = "Archive",        [KEY_PROGRAM] = "Program",</div><div class="line">    [KEY_CHANNEL] = "Channel",        [KEY_FAVORITES] = "Favorites",</div><div class="line">    [KEY_EPG] = "EPG",            [KEY_PVR] = "PVR",</div><div class="line">    [KEY_MHP] = "MHP",            [KEY_LANGUAGE] = "Language",</div><div class="line">    [KEY_TITLE] = "Title",            [KEY_SUBTITLE] = "Subtitle",</div><div class="line">    [KEY_ANGLE] = "Angle",            [KEY_ZOOM] = "Zoom",</div><div class="line">    [KEY_MODE] = "Mode",            [KEY_KEYBOARD] = "Keyboard",</div><div class="line">    [KEY_SCREEN] = "Screen",        [KEY_PC] = "PC",</div><div class="line">    [KEY_TV] = "TV",            [KEY_TV2] = "TV2",</div><div class="line">    [KEY_VCR] = "VCR",            [KEY_VCR2] = "VCR2",</div><div class="line">    [KEY_SAT] = "Sat",            [KEY_SAT2] = "Sat2",</div><div class="line">    [KEY_CD] = "CD",            [KEY_TAPE] = "Tape",</div><div class="line">    [KEY_RADIO] = "Radio",            [KEY_TUNER] = "Tuner",</div><div class="line">    [KEY_PLAYER] = "Player",        [KEY_TEXT] = "Text",</div><div class="line">    [KEY_DVD] = "DVD",            [KEY_AUX] = "Aux",</div><div class="line">    [KEY_MP3] = "MP3",            [KEY_AUDIO] = "Audio",</div><div class="line">    [KEY_VIDEO] = "Video",            [KEY_DIRECTORY] = "Directory",</div><div class="line">    [KEY_LIST] = "List",            [KEY_MEMO] = "Memo",</div><div class="line">    [KEY_CALENDAR] = "Calendar",        [KEY_RED] = "Red",</div><div class="line">    [KEY_GREEN] = "Green",            [KEY_YELLOW] = "Yellow",</div><div class="line">    [KEY_BLUE] = "Blue",            [KEY_CHANNELUP] = "ChannelUp",</div><div class="line">    [KEY_CHANNELDOWN] = "ChannelDown",    [KEY_FIRST] = "First",</div><div class="line">    [KEY_LAST] = "Last",            [KEY_AB] = "AB",</div><div class="line">    [KEY_NEXT] = "Next",            [KEY_RESTART] = "Restart",</div><div class="line">    [KEY_SLOW] = "Slow",            [KEY_SHUFFLE] = "Shuffle",</div><div class="line">    [KEY_BREAK] = "Break",            [KEY_PREVIOUS] = "Previous",</div><div class="line">    [KEY_DIGITS] = "Digits",        [KEY_TEEN] = "TEEN",</div><div class="line">    [KEY_TWEN] = "TWEN",            [KEY_DEL_EOL] = "Delete EOL",</div><div class="line">    [KEY_DEL_EOS] = "Delete EOS",        [KEY_INS_LINE] = "Insert line",</div><div class="line">    [KEY_DEL_LINE] = "Delete line",</div><div class="line">&#125;;</div><div class="line"></div><div class="line">char *absval[5] = &#123; "Value", "Min ", "Max ", "Fuzz ", "Flat " &#125;;</div><div class="line"></div><div class="line">char *relatives[REL_MAX + 1] =</div><div class="line">&#123;</div><div class="line">    [0 ... REL_MAX] = NULL,</div><div class="line">    [REL_X] = "X",            [REL_Y] = "Y",</div><div class="line">    [REL_Z] = "Z",            [REL_HWHEEL] = "HWheel",</div><div class="line">    [REL_DIAL] = "Dial",        [REL_WHEEL] = "Wheel",</div><div class="line">    [REL_MISC] = "Misc",</div><div class="line">&#125;;</div><div class="line"></div><div class="line">char *absolutes[ABS_MAX + 1] =</div><div class="line">&#123;</div><div class="line">    [0 ... ABS_MAX] = NULL,</div><div class="line">    [ABS_X] = "X",            [ABS_Y] = "Y",</div><div class="line">    [ABS_Z] = "Z",            [ABS_RX] = "Rx",</div><div class="line">    [ABS_RY] = "Ry",        [ABS_RZ] = "Rz",</div><div class="line">    [ABS_THROTTLE] = "Throttle",    [ABS_RUDDER] = "Rudder",</div><div class="line">    [ABS_WHEEL] = "Wheel",        [ABS_GAS] = "Gas",</div><div class="line">    [ABS_BRAKE] = "Brake",        [ABS_HAT0X] = "Hat0X",</div><div class="line">    [ABS_HAT0Y] = "Hat0Y",        [ABS_HAT1X] = "Hat1X",</div><div class="line">    [ABS_HAT1Y] = "Hat1Y",        [ABS_HAT2X] = "Hat2X",</div><div class="line">    [ABS_HAT2Y] = "Hat2Y",        [ABS_HAT3X] = "Hat3X",</div><div class="line">    [ABS_HAT3Y] = "Hat 3Y",        [ABS_PRESSURE] = "Pressure",</div><div class="line">    [ABS_DISTANCE] = "Distance",    [ABS_TILT_X] = "XTilt",</div><div class="line">    [ABS_TILT_Y] = "YTilt",        [ABS_TOOL_WIDTH] = "Tool Width",</div><div class="line">    [ABS_VOLUME] = "Volume",    [ABS_MISC] = "Misc",</div><div class="line">&#125;;</div><div class="line"></div><div class="line">char *misc[MSC_MAX + 1] =</div><div class="line">&#123;</div><div class="line">    [ 0 ... MSC_MAX] = NULL,</div><div class="line">    [MSC_SERIAL] = "Serial",    [MSC_PULSELED] = "Pulseled",</div><div class="line">    [MSC_GESTURE] = "Gesture",    [MSC_RAW] = "RawData",</div><div class="line">    [MSC_SCAN] = "ScanCode",</div><div class="line">&#125;;</div><div class="line"></div><div class="line">char *leds[LED_MAX + 1] =</div><div class="line">&#123;</div><div class="line">    [0 ... LED_MAX] = NULL,</div><div class="line">    [LED_NUML] = "NumLock",        [LED_CAPSL] = "CapsLock",</div><div class="line">    [LED_SCROLLL] = "ScrollLock",    [LED_COMPOSE] = "Compose",</div><div class="line">    [LED_KANA] = "Kana",        [LED_SLEEP] = "Sleep",</div><div class="line">    [LED_SUSPEND] = "Suspend",    [LED_MUTE] = "Mute",</div><div class="line">    [LED_MISC] = "Misc",</div><div class="line">&#125;;</div><div class="line"></div><div class="line">char *repeats[REP_MAX + 1] =</div><div class="line">&#123;</div><div class="line">    [0 ... REP_MAX] = NULL,</div><div class="line">    [REP_DELAY] = "Delay",        [REP_PERIOD] = "Period"</div><div class="line">&#125;;</div><div class="line"></div><div class="line">char *sounds[SND_MAX + 1] =</div><div class="line">&#123;</div><div class="line">    [0 ... SND_MAX] = NULL,</div><div class="line">    [SND_CLICK] = "Click",        [SND_BELL] = "Bell",</div><div class="line">    [SND_TONE] = "Tone"</div><div class="line">&#125;;</div><div class="line"></div><div class="line">char **names[EV_MAX + 1] =</div><div class="line">&#123;</div><div class="line">    [0 ... EV_MAX] = NULL,</div><div class="line">    [EV_SYN] = events,            [EV_KEY] = keys,</div><div class="line">    [EV_REL] = relatives,            [EV_ABS] = absolutes,</div><div class="line">    [EV_MSC] = misc,            [EV_LED] = leds,</div><div class="line">    [EV_SND] = sounds,            [EV_REP] = repeats,</div><div class="line">&#125;;</div><div class="line"></div><div class="line">#define BITS_PER_LONG (sizeof(long) * 8)</div><div class="line">#define NBITS(x) ((((x)-1)/BITS_PER_LONG)+1)</div><div class="line">#define OFF(x) ((x)%BITS_PER_LONG)</div><div class="line">#define BIT(x) (1UL&lt;&lt;OFF(x))</div><div class="line">#define LONG(x) ((x)/BITS_PER_LONG)</div><div class="line">#define test_bit(bit, array)    ((array[LONG(bit)] &gt;&gt; OFF(bit)) &amp; 1)</div><div class="line"></div><div class="line">int main (int argc, char **argv)</div><div class="line">&#123;</div><div class="line">    int fd, rd, i, j, k;</div><div class="line">    struct input_event ev[64];</div><div class="line">    int version;</div><div class="line">    unsigned short id[4];</div><div class="line">    unsigned long bit[EV_MAX][NBITS(KEY_MAX)];</div><div class="line">    char name[256] = "Unknown";</div><div class="line">    int abs[5];</div><div class="line"></div><div class="line">    if (argc &lt; 2)</div><div class="line">    &#123;</div><div class="line">        printf("Usage: evtest /dev/input/eventX\n");</div><div class="line">        printf("Where X = input device number\n");</div><div class="line">        return 1;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    if ((fd = open(argv[argc - 1], O_RDONLY)) &lt; 0)</div><div class="line">    &#123;</div><div class="line">        perror("evtest");</div><div class="line">        return 1;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    if (ioctl(fd, EVIOCGVERSION, &amp;version))</div><div class="line">    &#123;</div><div class="line">        perror("evtest: can't get version");</div><div class="line">        return 1;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    printf("Input driver version is %d.%d.%d\n",</div><div class="line">           version &gt;&gt; 16, (version &gt;&gt; 8) &amp; 0xff, version &amp; 0xff);</div><div class="line"></div><div class="line">    ioctl(fd, EVIOCGID, id);</div><div class="line">    printf("Input device ID: bus 0x%x vendor 0x%x product 0x%x version 0x%x\n",</div><div class="line">           id[ID_BUS], id[ID_VENDOR], id[ID_PRODUCT], id[ID_VERSION]);</div><div class="line"></div><div class="line">    ioctl(fd, EVIOCGNAME(sizeof(name)), name);</div><div class="line">    printf("Input device name: \"%s\"\n", name);</div><div class="line"></div><div class="line">    memset(bit, 0, sizeof(bit));</div><div class="line">    ioctl(fd, EVIOCGBIT(0, EV_MAX), bit[0]);</div><div class="line">    printf("Supported events:\n");</div><div class="line"></div><div class="line">    for (i = 0; i &lt; EV_MAX; i++)</div><div class="line">        if (test_bit(i, bit[0]))</div><div class="line">        &#123;</div><div class="line">            printf(" Event type %d (%s)\n", i, events[i] ? events[i] : "?");</div><div class="line">            if (!i) continue;</div><div class="line">            ioctl(fd, EVIOCGBIT(i, KEY_MAX), bit[i]);</div><div class="line">            for (j = 0; j &lt; KEY_MAX; j++)</div><div class="line">                if (test_bit(j, bit[i]))</div><div class="line">                &#123;</div><div class="line">                    printf(" Event code %d (%s)\n", j, names[i] ? (names[i][j] ? names[i][j] : "?") : "?");</div><div class="line">                    if (i == EV_ABS)</div><div class="line">                    &#123;</div><div class="line">                        ioctl(fd, EVIOCGABS(j), abs);</div><div class="line">                        for (k = 0; k &lt; 5; k++)</div><div class="line">                            if ((k &lt; 3) || abs[k])</div><div class="line">                                printf(" %s %6d\n", absval[k], abs[k]);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">    printf("Testing ... (interrupt to exit)\n");</div><div class="line"></div><div class="line">    while (1)</div><div class="line">    &#123;</div><div class="line">        rd = read(fd, ev, sizeof(struct input_event) * 64);</div><div class="line"></div><div class="line">        if (rd &lt; (int) sizeof(struct input_event))</div><div class="line">        &#123;</div><div class="line">            printf("yyy\n");</div><div class="line">            perror("\nevtest: error reading");</div><div class="line">            return 1;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        for (i = 0; i &lt; rd / sizeof(struct input_event); i++)</div><div class="line"></div><div class="line">            if (ev[i].type == EV_SYN)</div><div class="line">            &#123;</div><div class="line">                printf("Event: time %ld.%06ld, -------------- %s ------------\n",</div><div class="line">                       ev[i].time.tv_sec, ev[i].time.tv_usec, ev[i].code ? "Config Sync" : "Report Sync" );</div><div class="line">            &#125;</div><div class="line">            else if (ev[i].type == EV_MSC &amp;&amp; (ev[i].code == MSC_RAW || ev[i].code == MSC_SCAN))</div><div class="line">            &#123;</div><div class="line">                printf("Event: time %ld.%06ld, type %d (%s), code %d (%s), value %02x\n",</div><div class="line">                       ev[i].time.tv_sec, ev[i].time.tv_usec, ev[i].type,</div><div class="line">                       events[ev[i].type] ? events[ev[i].type] : "?",</div><div class="line">                       ev[i].code,</div><div class="line">                       names[ev[i].type] ? (names[ev[i].type][ev[i].code] ? names[ev[i].type][ev[i].code] : "?") : "?",</div><div class="line">                       ev[i].value);</div><div class="line">            &#125;</div><div class="line">            else</div><div class="line">            &#123;</div><div class="line">                printf("Event: time %ld.%06ld, type %d (%s), code %d (%s), value %d\n",</div><div class="line">                       ev[i].time.tv_sec, ev[i].time.tv_usec, ev[i].type,</div><div class="line">                       events[ev[i].type] ? events[ev[i].type] : "?",</div><div class="line">                       ev[i].code,</div><div class="line">                       names[ev[i].type] ? (names[ev[i].type][ev[i].code] ? names[ev[i].type][ev[i].code] : "?") : "?",</div><div class="line">                       ev[i].value);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>测试效果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"># ./evtest /dev/input/event2</div><div class="line">Input driver version is 1.0.1</div><div class="line">Input device ID: bus 0x1c vendor 0x0 product 0x159 version 0x0</div><div class="line">Input device name: &quot;ADXL34x accelerometer&quot;</div><div class="line">Supported events:</div><div class="line"> Event type 0 (Sync)</div><div class="line"> Event type 1 (Key)</div><div class="line"> Event code 330 (Touch)</div><div class="line"> Event type 3 (Absolute)</div><div class="line"> Event code 0 (X)</div><div class="line"> Value      0</div><div class="line"> Min   -4096</div><div class="line"> Max    4096</div><div class="line"> Fuzz       3</div><div class="line"> Flat       3</div><div class="line"> Event code 1 (Y)</div><div class="line"> Value      0</div><div class="line"> Min   -4096</div><div class="line"> Max    4096</div><div class="line"> Fuzz       3</div><div class="line"> Flat       3</div><div class="line"> Event code 2 (Z)</div><div class="line"> Value      0</div><div class="line"> Min   -4096</div><div class="line"> Max    4096</div><div class="line"> Fuzz       3</div><div class="line"> Flat       3</div><div class="line">Testing ... (interrupt to exit)</div><div class="line">Event: time 3949236.075868, type 3 (Absolute), code 0 (X), value -223</div><div class="line">Event: time 3949236.075868, type 3 (Absolute), code 1 (Y), value -10</div><div class="line">Event: time 3949236.075868, type 3 (Absolute), code 2 (Z), value -13</div><div class="line">Event: time 3949236.075868, -------------- Report Sync ------------</div><div class="line">Event: time 3949236.115188, type 3 (Absolute), code 0 (X), value -235</div><div class="line">Event: time 3949236.115188, -------------- Report Sync ------------</div><div class="line">Event: time 3949236.154590, type 3 (Absolute), code 0 (X), value -234</div><div class="line">Event: time 3949236.154590, -------------- Report Sync ------------</div><div class="line">Event: time 3949236.824446, type 3 (Absolute), code 2 (Z), value -14</div><div class="line">Event: time 3949236.824446, -------------- Report Sync ------------</div><div class="line">Event: time 3949236.863862, type 3 (Absolute), code 2 (Z), value -13</div><div class="line">Event: time 3949236.863862, -------------- Report Sync ------------</div><div class="line">Event: time 3949236.903264, type 3 (Absolute), code 2 (Z), value -12</div><div class="line">Event: time 3949236.903264, -------------- Report Sync ------------</div><div class="line">Event: time 3949236.942659, type 3 (Absolute), code 2 (Z), value -13</div><div class="line">Event: time 3949236.942659, -------------- Report Sync ------------</div><div class="line">Event: time 3949237.021471, type 3 (Absolute), code 2 (Z), value -12</div><div class="line">Event: time 3949237.021471, -------------- Report Sync ------------</div><div class="line">Event: time 3949237.257883, type 3 (Absolute), code 2 (Z), value -13</div><div class="line">Event: time 3949237.257883, -------------- Report Sync ------------</div><div class="line">Event: time 3949238.006540, type 3 (Absolute), code 0 (X), value -233</div><div class="line">Event: time 3949238.006540, type 3 (Absolute), code 1 (Y), value -11</div><div class="line">Event: time 3949238.006540, -------------- Report Sync ------------</div><div class="line">Event: time 3949238.045949, type 3 (Absolute), code 2 (Z), value -14</div><div class="line">Event: time 3949238.045949, -------------- Report Sync ------------</div><div class="line">Event: time 3949238.085346, type 3 (Absolute), code 2 (Z), value -13</div><div class="line">Event: time 3949238.085346, -------------- Report Sync ------------</div><div class="line">Event: time 3949238.164144, type 3 (Absolute), code 1 (Y), value -10</div><div class="line">Event: time 3949238.164144, -------------- Report Sync ------------</div><div class="line">Event: time 3949238.361159, type 3 (Absolute), code 2 (Z), value -12</div><div class="line">Event: time 3949238.361159, -------------- Report Sync ------------</div><div class="line">Event: time 3949238.400569, type 3 (Absolute), code 0 (X), value -234</div><div class="line">Event: time 3949238.400569, -------------- Report Sync ------------</div><div class="line">Event: time 3949238.676384, type 3 (Absolute), code 2 (Z), value -13</div><div class="line">Event: time 3949238.676384, -------------- Report Sync ------------</div><div class="line">Event: time 3949238.755194, type 3 (Absolute), code 0 (X), value -241</div><div class="line">Event: time 3949238.755194, type 3 (Absolute), code 1 (Y), value -1</div><div class="line">Event: time 3949238.755194, type 3 (Absolute), code 2 (Z), value 19</div><div class="line">Event: time 3949238.755194, -------------- Report Sync ------------</div><div class="line">Event: time 3949238.794592, type 3 (Absolute), code 0 (X), value -298</div><div class="line">Event: time 3949238.794592, type 3 (Absolute), code 1 (Y), value 42</div><div class="line">Event: time 3949238.794592, type 3 (Absolute), code 2 (Z), value -33</div></pre></td></tr></table></figure></li></ul><h2 id="2-4-详细分析"><a href="#2-4-详细分析" class="headerlink" title="2.4 详细分析"></a>2.4 详细分析</h2><h3 id="2-4-1-几个重要结构体"><a href="#2-4-1-几个重要结构体" class="headerlink" title="2.4.1 几个重要结构体"></a>2.4.1 几个重要结构体</h3><p><code>adxl34x.c</code>的<code>probe()</code>一进来就定义了三个结构体：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">struct adxl34x *ac;</div><div class="line">struct input_dev *input_dev;</div><div class="line">const struct adxl34x_platform_data *pdata;</div></pre></td></tr></table></figure></p><p><code>adxl34x</code>就是针对设备量身定制的，包含所有信息，在对其进行一系列的设置后，在<code>adxl34x-spi.c</code>的<code>probe()</code>里，使用<code>spi_set_drvdata()</code>将其保存到<code>spi_device</code>的私有数据里，以后其它函数可以通过<code>spi_get_drvdata()</code>得到该结构体，从而获取设备的所有信息。<br><code>input_dev</code>表示一个输入设备，里面有一个输入设备的属性定义。<br><code>adxl34x_platform_data</code>包含adxl34x设备的属性定义。</p><p>定义完后，进行初始化：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">ac = kzalloc(<span class="keyword">sizeof</span>(*ac), GFP_KERNEL);</div><div class="line">input_dev = input_allocate_device();</div><div class="line"><span class="keyword">if</span> (!ac || !input_dev) &#123;</div><div class="line">err = -ENOMEM;</div><div class="line"><span class="keyword">goto</span> err_free_mem;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ac-&gt;fifo_delay = fifo_delay_default;</div><div class="line"></div><div class="line">pdata = dev_get_platdata(dev);</div><div class="line"><span class="keyword">if</span> (!pdata) &#123;</div><div class="line">dev_dbg(dev,</div><div class="line"><span class="string">"No platform data: Using default initialization\n"</span>);</div><div class="line">pdata = &amp;adxl34x_default_init;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br><code>adxl34x</code>使用<code>kzalloc()</code>分配空间并清零。<br><code>input_dev</code>使用输入子系统提供的<code>input_allocate_device()</code>分配空间。<br><code>adxl34x_platform_data</code>先尝试从<code>device</code>获取，没有的话使用默认的配置，也就是<code>adxl34x_default_init</code>的内容，里面有ADXL34X支持何种输入事件、电源模式等。</p><h3 id="2-4-2-判断中断"><a href="#2-4-2-判断中断" class="headerlink" title="2.4.2 判断中断"></a>2.4.2 判断中断</h3><p>ADXL34X工作时，通过中断引脚通知主机发生了某中断事件，因此中断是必不可少的，这里检测如果没有中断则返回错误。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (!irq) &#123;</div><div class="line">dev_err(dev, <span class="string">"no IRQ?\n"</span>);</div><div class="line">err = -ENODEV;</div><div class="line"><span class="keyword">goto</span> err_out;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure></p><h3 id="2-4-3-设置adxl34x"><a href="#2-4-3-设置adxl34x" class="headerlink" title="2.4.3 设置adxl34x"></a>2.4.3 设置<code>adxl34x</code></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">ac-&gt;fifo_delay = fifo_delay_default;</div><div class="line"></div><div class="line">ac-&gt;pdata = *pdata;</div><div class="line">pdata = &amp;ac-&gt;pdata;</div><div class="line"></div><div class="line">ac-&gt;input = input_dev;</div><div class="line">ac-&gt;dev = dev;</div><div class="line">ac-&gt;irq = irq;</div><div class="line">ac-&gt;bops = bops;</div><div class="line"></div><div class="line">mutex_init(&amp;ac-&gt;mutex);</div><div class="line"></div><div class="line">input_dev-&gt;name = <span class="string">"ADXL34x accelerometer"</span>;</div><div class="line">revid = AC_READ(ac, DEVID);</div><div class="line"></div><div class="line"><span class="keyword">switch</span> (revid) &#123;</div><div class="line"><span class="keyword">case</span> ID_ADXL345:</div><div class="line">ac-&gt;model = <span class="number">345</span>;</div><div class="line"><span class="keyword">break</span>;</div><div class="line"><span class="keyword">case</span> ID_ADXL346:</div><div class="line">ac-&gt;model = <span class="number">346</span>;</div><div class="line"><span class="keyword">break</span>;</div><div class="line"><span class="keyword">default</span>:</div><div class="line">dev_err(dev, <span class="string">"Failed to probe %s\n"</span>, input_dev-&gt;name);</div><div class="line">err = -ENODEV;</div><div class="line"><span class="keyword">goto</span> err_free_mem;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">snprintf</span>(ac-&gt;phys, <span class="keyword">sizeof</span>(ac-&gt;phys), <span class="string">"%s/input0"</span>, dev_name(dev));</div></pre></td></tr></table></figure><p>将<code>input_dev</code>、<code>adxl34x_platform_data</code>指向<code>adxl34x</code>；<br>将传入的参数赋值给<code>adxl34x</code>，初始化部分<code>adxl34x</code>参数；<br>还读取设备ID判断是ADXL345，还是ADXL346。</p><h3 id="2-4-4-设置input-dev"><a href="#2-4-4-设置input-dev" class="headerlink" title="2.4.4 设置input_dev"></a>2.4.4 设置<code>input_dev</code></h3><p>先使用<code>__set_bit(ac-&gt;pdata.ev_type, input_dev-&gt;evbit);</code>设置支持哪一类事件，由前面的<code>adxl34x_default_init</code>可知为<code>EV_ABS</code>。<br>如果为<code>EV_ABS</code>类型，再使用<code>_set_bit()</code>和<code>input_set_abs_params()</code>设置能产生该类的哪些事件。其中<code>input_set_abs_params()</code>也是调用的<code>__set_bit()</code>，参数依次为input设备指针、坐标轴、最小范围、最大范围、过滤值、丢弃范围值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">__set_bit(ac-&gt;pdata.ev_type, input_dev-&gt;evbit);</div><div class="line">……</div><div class="line">__set_bit(ABS_X, input_dev-&gt;absbit);</div><div class="line">__set_bit(ABS_Y, input_dev-&gt;absbit);</div><div class="line">__set_bit(ABS_Z, input_dev-&gt;absbit);</div><div class="line">……</div><div class="line">input_set_abs_params(input_dev, ABS_X, -range, range, 3, 3);</div><div class="line">input_set_abs_params(input_dev, ABS_Y, -range, range, 3, 3);</div><div class="line">input_set_abs_params(input_dev, ABS_Z, -range, range, 3, 3);</div></pre></td></tr></table></figure></p><p>接下来设置支持<code>EV_KEY</code>类事件，再具体设置支持类中的哪些事件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">__set_bit(EV_KEY, input_dev-&gt;evbit);</div><div class="line">__set_bit(pdata-&gt;ev_code_tap[ADXL_X_AXIS], input_dev-&gt;keybit);</div><div class="line">__set_bit(pdata-&gt;ev_code_tap[ADXL_Y_AXIS], input_dev-&gt;keybit);</div><div class="line">__set_bit(pdata-&gt;ev_code_tap[ADXL_Z_AXIS], input_dev-&gt;keybit);</div></pre></td></tr></table></figure></p><p>可以看出，设置<code>input_dev</code>的思路就是<strong>先设置支持哪一类事件，再设置类中的具体事件</strong>。</p><p><code>input</code>子系统中支持的类型含义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">EV_SYN 同步事件 </div><div class="line">EV_KEY 键盘事件 </div><div class="line">EV_REL 相对坐标事件，用于鼠标 </div><div class="line">EV_ABS 绝对坐标事件，用于摇杆 </div><div class="line">EV_MSC 其他事件 </div><div class="line">EV_LED LED灯事件 </div><div class="line">EV_SND 声音事件 </div><div class="line">EV_REP 重复按键事件 </div><div class="line">EV_FF  受力事件 </div><div class="line">EV_PWR 电源事件 </div><div class="line">EV_FF_STATUS 受力状态事件</div></pre></td></tr></table></figure></p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">input_dev-&gt;phys = ac-&gt;phys;</div><div class="line">input_dev-&gt;dev.parent = dev;</div><div class="line">input_dev-&gt;id.product = ac-&gt;model;</div><div class="line">input_dev-&gt;id.bustype = bops-&gt;bustype;</div><div class="line">input_dev-&gt;open = adxl34x_input_open;</div><div class="line">input_dev-&gt;close = adxl34x_input_close;</div><div class="line"></div><div class="line">input_set_drvdata(input_dev, ac);</div><div class="line"></div><div class="line">__set_bit(ac-&gt;pdata.ev_type, input_dev-&gt;evbit);</div><div class="line"></div><div class="line"><span class="keyword">if</span> (ac-&gt;pdata.ev_type == EV_REL) &#123;</div><div class="line">__set_bit(REL_X, input_dev-&gt;relbit);</div><div class="line">__set_bit(REL_Y, input_dev-&gt;relbit);</div><div class="line">__set_bit(REL_Z, input_dev-&gt;relbit);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="comment">/* EV_ABS */</span></div><div class="line">__set_bit(ABS_X, input_dev-&gt;absbit);</div><div class="line">__set_bit(ABS_Y, input_dev-&gt;absbit);</div><div class="line">__set_bit(ABS_Z, input_dev-&gt;absbit);</div><div class="line"></div><div class="line"><span class="keyword">if</span> (pdata-&gt;data_range &amp; FULL_RES)</div><div class="line">range = ADXL_FULLRES_MAX_VAL;<span class="comment">/* Signed 13-bit */</span></div><div class="line"><span class="keyword">else</span></div><div class="line">range = ADXL_FIXEDRES_MAX_VAL;<span class="comment">/* Signed 10-bit */</span></div><div class="line"></div><div class="line">input_set_abs_params(input_dev, ABS_X, -range, range, <span class="number">3</span>, <span class="number">3</span>);</div><div class="line">input_set_abs_params(input_dev, ABS_Y, -range, range, <span class="number">3</span>, <span class="number">3</span>);</div><div class="line">input_set_abs_params(input_dev, ABS_Z, -range, range, <span class="number">3</span>, <span class="number">3</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">__set_bit(EV_KEY, input_dev-&gt;evbit);</div><div class="line">__set_bit(pdata-&gt;ev_code_tap[ADXL_X_AXIS], input_dev-&gt;keybit);</div><div class="line">__set_bit(pdata-&gt;ev_code_tap[ADXL_Y_AXIS], input_dev-&gt;keybit);</div><div class="line">__set_bit(pdata-&gt;ev_code_tap[ADXL_Z_AXIS], input_dev-&gt;keybit);</div><div class="line"></div><div class="line"><span class="keyword">if</span> (pdata-&gt;ev_code_ff) &#123;</div><div class="line">ac-&gt;int_mask = FREE_FALL;</div><div class="line">__set_bit(pdata-&gt;ev_code_ff, input_dev-&gt;keybit);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (pdata-&gt;ev_code_act_inactivity)</div><div class="line">__set_bit(pdata-&gt;ev_code_act_inactivity, input_dev-&gt;keybit);</div></pre></td></tr></table></figure><h3 id="2-4-5-设置中断"><a href="#2-4-5-设置中断" class="headerlink" title="2.4.5 设置中断"></a>2.4.5 设置中断</h3><p>ADXL345的中断引脚默认为高电平有效，也可自行修改寄存器改为低电平有效。<br>所有功能都可以同时使用，但是，一些功能可能需要共享中断引脚。<br>中断功能的详细介绍参考手册，内容有点多，有产生新数据就产生中断，加速度超过某个值产生中断，两次加速度超过某个值产生中断等。</p><p>这里根据<code>adxl34x_platform_data</code>的内容，设置<code>adxl34x</code>的<code>int_mask</code>。<br>再通过<code>request_threaded_irq()</code>申请线程中断，绑定中断处理函数，并把<code>adxl34x</code>传给中断处理函数。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">ac-&gt;int_mask |= ACTIVITY | INACTIVITY;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (pdata-&gt;watermark) &#123;</div><div class="line">ac-&gt;int_mask |= WATERMARK;</div><div class="line"><span class="keyword">if</span> (!FIFO_MODE(pdata-&gt;fifo_mode))</div><div class="line">ac-&gt;pdata.fifo_mode |= FIFO_STREAM;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">ac-&gt;int_mask |= DATA_READY;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (pdata-&gt;tap_axis_control &amp; (TAP_X_EN | TAP_Y_EN | TAP_Z_EN))</div><div class="line">ac-&gt;int_mask |= SINGLE_TAP | DOUBLE_TAP;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (FIFO_MODE(pdata-&gt;fifo_mode) == FIFO_BYPASS)</div><div class="line">ac-&gt;fifo_delay = <span class="literal">false</span>;</div><div class="line"></div><div class="line">AC_WRITE(ac, POWER_CTL, <span class="number">0</span>);</div><div class="line"></div><div class="line">err = request_threaded_irq(ac-&gt;irq, <span class="literal">NULL</span>, adxl34x_irq,</div><div class="line">   IRQF_TRIGGER_HIGH | IRQF_ONESHOT,</div><div class="line">   dev_name(dev), ac);</div><div class="line"><span class="keyword">if</span> (err) &#123;</div><div class="line">dev_err(dev, <span class="string">"irq %d busy?\n"</span>, ac-&gt;irq);</div><div class="line"><span class="keyword">goto</span> err_free_mem;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在产生中断时，进入中断处理函数<code>adxl34x_irq()</code>，读取中断源寄存器，判断产生的何种中断，调用相应的处理函数。<br>调用<code>input_event()</code>设置要上报的数据值，再调用<code>input_sync()</code>上报。</p><h3 id="2-4-6-创建sysfs属性文件"><a href="#2-4-6-创建sysfs属性文件" class="headerlink" title="2.4.6 创建sysfs属性文件"></a>2.4.6 创建sysfs属性文件</h3><p>同前面的AD7705一样，这里也在<code>/sys/class/input/</code>下创建节点，直接可以访问。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">err = sysfs_create_group(&amp;dev-&gt;kobj, &amp;adxl34x_attr_group);</div><div class="line"><span class="keyword">if</span> (err)</div><div class="line"><span class="keyword">goto</span> err_free_irq;</div></pre></td></tr></table></figure></p><p>根据传入的<code>attribute_group</code>结构体可以找到具体实现了哪些功能：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> attribute *adxl34x_attributes[] = &#123;</div><div class="line">&amp;dev_attr_disable.attr,</div><div class="line">&amp;dev_attr_calibrate.attr,</div><div class="line">&amp;dev_attr_rate.attr,</div><div class="line">&amp;dev_attr_autosleep.attr,</div><div class="line">&amp;dev_attr_position.attr,</div><div class="line">#ifdef ADXL_DEBUG</div><div class="line">&amp;dev_attr_write.attr,</div><div class="line">#endif</div><div class="line"><span class="literal">NULL</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">struct</span> attribute_group adxl34x_attr_group = &#123;</div><div class="line">.attrs = adxl34x_attributes,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="title">DEVICE_ATTR</span><span class="params">(position, S_IRUGO, adxl34x_position_show, <span class="literal">NULL</span>)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="title">DEVICE_ATTR</span><span class="params">(autosleep, <span class="number">0664</span>,</span></span></div><div class="line">   adxl34x_autosleep_show, adxl34x_autosleep_store);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="title">DEVICE_ATTR</span><span class="params">(rate, <span class="number">0664</span>, adxl34x_rate_show, adxl34x_rate_store)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="title">DEVICE_ATTR</span><span class="params">(calibrate, <span class="number">0664</span>,</span></span></div><div class="line">   adxl34x_calibrate_show, adxl34x_calibrate_store);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="title">DEVICE_ATTR</span><span class="params">(disable, <span class="number">0664</span>, adxl34x_disable_show, adxl34x_disable_store)</span></span>;</div></pre></td></tr></table></figure></p><p>可以看出提供了<code>position</code>，获取当前三轴状态；<code>autosleep</code>，设置自动休眠；<code>rate</code>，设置输出数据速率；<code>calibrate</code>，设备校准；<code>disable</code>，启用/禁用设备。</p><p>与实测内容吻合。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># ls /sys/class/input/input2</div><div class="line">capabilities  id            name          properties    uniq</div><div class="line">device        modalias      phys          subsystem</div><div class="line">event2        mouse1        power         uevent</div></pre></td></tr></table></figure></p><h3 id="2-4-7-注册输入子系统"><a href="#2-4-7-注册输入子系统" class="headerlink" title="2.4.7 注册输入子系统"></a>2.4.7 注册输入子系统</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">err = input_register_device(input_dev);</div><div class="line"><span class="keyword">if</span> (err)</div><div class="line"><span class="keyword">goto</span> err_remove_attr;</div></pre></td></tr></table></figure><h3 id="2-4-8-硬件操作"><a href="#2-4-8-硬件操作" class="headerlink" title="2.4.8 硬件操作"></a>2.4.8 硬件操作</h3><p>最后，使用<code>adxl34x-spi.c</code>提供的传输函数，根据<code>adxl34x</code>的内容操作ADXL345。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">AC_WRITE(ac, OFSX, pdata-&gt;x_axis_offset);</div><div class="line">ac-&gt;hwcal.x = pdata-&gt;x_axis_offset;</div><div class="line">AC_WRITE(ac, OFSY, pdata-&gt;y_axis_offset);</div><div class="line">ac-&gt;hwcal.y = pdata-&gt;y_axis_offset;</div><div class="line">AC_WRITE(ac, OFSZ, pdata-&gt;z_axis_offset);</div><div class="line">ac-&gt;hwcal.z = pdata-&gt;z_axis_offset;</div><div class="line">AC_WRITE(ac, THRESH_TAP, pdata-&gt;tap_threshold);</div><div class="line">AC_WRITE(ac, DUR, pdata-&gt;tap_duration);</div><div class="line">AC_WRITE(ac, LATENT, pdata-&gt;tap_latency);</div><div class="line">AC_WRITE(ac, WINDOW, pdata-&gt;tap_window);</div><div class="line">AC_WRITE(ac, THRESH_ACT, pdata-&gt;activity_threshold);</div><div class="line">AC_WRITE(ac, THRESH_INACT, pdata-&gt;inactivity_threshold);</div><div class="line">AC_WRITE(ac, TIME_INACT, pdata-&gt;inactivity_time);</div><div class="line">AC_WRITE(ac, THRESH_FF, pdata-&gt;free_fall_threshold);</div><div class="line">AC_WRITE(ac, TIME_FF, pdata-&gt;free_fall_time);</div><div class="line">AC_WRITE(ac, TAP_AXES, pdata-&gt;tap_axis_control);</div><div class="line">AC_WRITE(ac, ACT_INACT_CTL, pdata-&gt;act_axis_control);</div><div class="line">AC_WRITE(ac, BW_RATE, RATE(ac-&gt;pdata.data_rate) |</div><div class="line"> (pdata-&gt;low_power_mode ? LOW_POWER : <span class="number">0</span>));</div><div class="line">AC_WRITE(ac, DATA_FORMAT, pdata-&gt;data_range);</div><div class="line">AC_WRITE(ac, FIFO_CTL, FIFO_MODE(pdata-&gt;fifo_mode) |</div><div class="line">SAMPLES(pdata-&gt;watermark));</div><div class="line"></div><div class="line"><span class="keyword">if</span> (pdata-&gt;use_int2) &#123;</div><div class="line"><span class="comment">/* Map all INTs to INT2 */</span></div><div class="line">AC_WRITE(ac, INT_MAP, ac-&gt;int_mask | OVERRUN);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="comment">/* Map all INTs to INT1 */</span></div><div class="line">AC_WRITE(ac, INT_MAP, <span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (ac-&gt;model == <span class="number">346</span> &amp;&amp; ac-&gt;pdata.orientation_enable) &#123;</div><div class="line">AC_WRITE(ac, ORIENT_CONF,</div><div class="line">ORIENT_DEADZONE(ac-&gt;pdata.deadzone_angle) |</div><div class="line">ORIENT_DIVISOR(ac-&gt;pdata.divisor_length));</div><div class="line"></div><div class="line">ac-&gt;orient2d_saved = <span class="number">1234</span>;</div><div class="line">ac-&gt;orient3d_saved = <span class="number">1234</span>;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (pdata-&gt;orientation_enable &amp; ADXL_EN_ORIENTATION_3D)</div><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; ARRAY_SIZE(pdata-&gt;ev_codes_orient_3d); i++)</div><div class="line">__set_bit(pdata-&gt;ev_codes_orient_3d[i],</div><div class="line">  input_dev-&gt;keybit);</div><div class="line"></div><div class="line"><span class="keyword">if</span> (pdata-&gt;orientation_enable &amp; ADXL_EN_ORIENTATION_2D)</div><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; ARRAY_SIZE(pdata-&gt;ev_codes_orient_2d); i++)</div><div class="line">__set_bit(pdata-&gt;ev_codes_orient_2d[i],</div><div class="line">  input_dev-&gt;keybit);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">ac-&gt;pdata.orientation_enable = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">AC_WRITE(ac, INT_ENABLE, ac-&gt;int_mask | OVERRUN);</div><div class="line"></div><div class="line">ac-&gt;pdata.power_mode &amp;= (PCTL_AUTO_SLEEP | PCTL_LINK);</div></pre></td></tr></table></figure><h1 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h1><p>通过这两个子系统的驱动代码，总结几个之前写驱动没有意识。<br>1、自定义一个结构体，包含<code>device</code>和设备私有属性，其它函数可通过它获取到所有数据；<br>2、使用互斥锁的意识；<br>3、创建sysfs内容，方便应用层直接访问；</p><hr><p><div align="center"><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本文采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href="http://hceng.cn/" target="_blank" rel="external">hceng’s blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录两个SPI设备分别采用hwmon子系统和input子系统。&lt;br&gt;
    
    </summary>
    
    
      <category term="AM335X" scheme="http://yoursite.com/tags/AM335X/"/>
    
      <category term="Linux驱动" scheme="http://yoursite.com/tags/Linux%E9%A9%B1%E5%8A%A8/"/>
    
      <category term="hwmon子系统" scheme="http://yoursite.com/tags/hwmon%E5%AD%90%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="input子系统" scheme="http://yoursite.com/tags/input%E5%AD%90%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="SPI" scheme="http://yoursite.com/tags/SPI/"/>
    
  </entry>
  
  <entry>
    <title>AM335X——SPI设备驱动</title>
    <link href="http://yoursite.com/2019/01/01/AM335X%E2%80%94%E2%80%94SPI%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8/"/>
    <id>http://yoursite.com/2019/01/01/AM335X——SPI设备驱动/</id>
    <published>2019-01-01T07:54:49.000Z</published>
    <updated>2019-01-22T02:55:29.204Z</updated>
    
    <content type="html"><![CDATA[<p>最近在AM335X上写了几个SPI设备驱动，记录一下心得。<br><a id="more"></a></p><h1 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h1><p>与前面写过的I2C驱动一样，SPI驱动也涉及<strong>SPI控制器(适配器)驱动</strong>和<strong>SPI设备驱动</strong>。<br>SPI控制器驱动这里不就写了，直接使用SDK自带的，只写SPI设备的驱动。<br>在写SPI设备驱动之前，需要先验证下SDK提供的SPI驱动是否能用，相关的设置是否正确，因此使用内核自带的一个SPI设备驱动进行测试。</p><h2 id="1-1-驱动"><a href="#1-1-驱动" class="headerlink" title="1.1 驱动"></a>1.1 驱动</h2><p>首先配置内核，执行<code>make menuconfig</code>，勾选上<code>McSPI driver for OMAP</code>和<code>User mode SPI device driver support</code>。</p><div align="center"><img width="500" src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/190101/1.png"></div><h2 id="1-2-设备树"><a href="#1-2-设备树" class="headerlink" title="1.2 设备树"></a>1.2 设备树</h2><p>然后还要向设备树添加如下内容：<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* SPI Busses */</span></div><div class="line"><span class="variable">&amp;spi1</span> &#123;</div><div class="line">    status = <span class="string">"okay"</span>;</div><div class="line">    pinctrl-names = <span class="string">"default"</span>;</div><div class="line">    pinctrl<span class="number">-0</span> = <span class="params">&lt;<span class="variable">&amp;spi1_pins</span>&gt;</span>;</div><div class="line">    ti,pindir-d0-out-d1-in;</div><div class="line">    </div><div class="line">    <span class="class">spidev@0 </span>&#123;</div><div class="line">        spi-max-frequency = <span class="params">&lt;<span class="number">25000000</span>&gt;</span>;</div><div class="line">        reg = <span class="params">&lt;<span class="number">0</span>&gt;</span>;</div><div class="line">        compatible = <span class="string">"rohm,dh2228fv"</span>;</div><div class="line"></div><div class="line">        <span class="comment">/* spi-cpha; sets CPHA=1, default is CPHA=0 */</span></div><div class="line">        <span class="comment">/* spi-cpol; sets CPOL=1, default is CPOL=0 */</span></div><div class="line">        <span class="comment">/* spi-cs-high; default is spi cs low */</span></div><div class="line">    &#125;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="variable">&amp;am33xx_pinmux</span> &#123;</div><div class="line"><span class="symbol">    spi1_pins:</span> <span class="class">pinmux_spi1 </span>&#123;</div><div class="line">        pinctrl-single,pins = <span class="params">&lt;</span></div><div class="line">            <span class="number">0x190</span> (PIN_INPUT_PULLUP | MUX_MODE3) /* spi1_sclk */</div><div class="line">            <span class="number">0x194</span> (PIN_INPUT_PULLUP | MUX_MODE3) /* spi1_d0   */</div><div class="line">            <span class="number">0x198</span> (PIN_INPUT_PULLUP | MUX_MODE3) /* spi1_d1   */</div><div class="line">            <span class="number">0x19c</span> (PIN_INPUT_PULLUP | MUX_MODE3) /* spi1_cs0  */</div><div class="line">        &gt;;</div><div class="line">    &#125;;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><br>这里有几个细节，简单说一下：<br>1.<code>pinctrl-0</code>属性引用的<code>spi1_pins</code>，指定了SPI的几个复用引脚，里面的<code>0x190</code>是真实地址<code>0x990</code>-<code>0x800</code>，也就是说设备树中的地址是相对<code>0x800</code>的偏移；<br>2.注意SPI复用引脚不要在设备树其它节点中使用，不然SPI驱动可能用不了；<br>3.AM335x的MOSI和MISO可以互换，需要加上<code>ti,pindir-d0-out-d1-in;</code>来指定D0是MOSI，D1是MISO；<br>4.<code>reg = &lt;0&gt;;</code>表示硬件片选，这里为硬件片选0；<br>5.内核自带的测试驱动程序的<code>compatible</code>为<code>rohm,dh2228fv</code>；</p><h2 id="1-3-测试程序"><a href="#1-3-测试程序" class="headerlink" title="1.3 测试程序"></a>1.3 测试程序</h2><p>使用内核提供的测试程序，编译，测试。<br>测试文件路径：<code>Documentation/spi/spidev_test.c</code>；<br>交叉编译后执行<code>./spidev_test -D /dev/spidev1.0  -v</code><br>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">spi mode: 0x0</div><div class="line">bits per word: 8</div><div class="line">max speed: 500000 Hz (500 KHz)</div><div class="line">TX | FF FF FF FF FF FF 40 00 00 00 00 95 FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF F0 0D  | ......@....▒..................▒.</div><div class="line">RX | FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  | ................................</div></pre></td></tr></table></figure></p><p>此时可以通过逻辑分析仪或者短接MOSI和MISO，判断发出和接收的数据是否正常，从而验证SPI控制器驱动是否正常。</p><h2 id="1-4-编译脚本"><a href="#1-4-编译脚本" class="headerlink" title="1.4 编译脚本"></a>1.4 编译脚本</h2><p>为了方便后续的编译，写了一个脚本进行操作，这个脚本也相当于操作流程，以供参考：<br><figure class="highlight sh"><figcaption><span>[compiler_kernel.sh]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line"><span class="comment">#step 0:set env</span></div><div class="line"><span class="built_in">export</span> CPUS=`grep -c processor /proc/cpuinfo`</div><div class="line"><span class="built_in">export</span> ARCH=arm</div><div class="line"><span class="built_in">export</span> CROSS_COMPILE=/home/hceng/gcc-linaro-5.3-2016.02-x86_64_arm-linux-gnueabihf/bin/arm-linux-gnueabihf-</div><div class="line"><span class="built_in">export</span> PATH=/home/hceng/gcc-linaro-5.3-2016.02-x86_64_arm-linux-gnueabihf/bin:<span class="variable">$PATH</span></div><div class="line"></div><div class="line"><span class="comment">#step 1:clean kernel</span></div><div class="line"><span class="comment">#make distclean</span></div><div class="line"></div><div class="line"><span class="comment">#step 2:copy kernel config file </span></div><div class="line"><span class="comment">#make tisdk_am335x-evm_defconfig</span></div><div class="line"></div><div class="line"><span class="comment">#step 3:compiler kernel</span></div><div class="line"><span class="comment">#make uImage LOADADDR=0x10008000 -j$&#123;CPUS&#125;</span></div><div class="line">make zImage -j<span class="variable">$&#123;CPUS&#125;</span></div><div class="line"></div><div class="line"><span class="comment">#step 4:compiler device tree</span></div><div class="line"><span class="comment">#make dtbs</span></div><div class="line">make am335x-evm.dtb</div><div class="line"></div><div class="line"><span class="comment">#step 5:compiler driver module file(dynamic loading)</span></div><div class="line"><span class="comment">#make modules</span></div><div class="line"><span class="comment">#make modules_install INSTALL_MOD_PATH=~/rootfs/lib/modules/4.1.18-gbbe8cfc </span></div><div class="line"></div><div class="line"><span class="comment">#step 6:copy zImage and dtb to tftp download</span></div><div class="line">rm /home/hceng/tftp/zImage</div><div class="line">rm /home/hceng/tftp/am335x-evm.dtb</div><div class="line"></div><div class="line">cp  ./arch/arm/boot/zImage  /home/hceng/tftp/</div><div class="line">cp  ./arch/arm/boot/dts/am335x-evm.dtb   /home/hceng/tftp/</div></pre></td></tr></table></figure></p><p>其中第六步，拷贝倒<code>tftp</code>目录下，是为了方便板子启动的时候，通过U-Boot直接tftp下载编译过的内核和设备树，相关命令如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">setenv ipaddr 192.168.1.14; setenv serverip 192.168.1.11; setenv gatewayip 192.168.1.1; setenv netmask 255.255.255.0; setenv fdtfile &apos;am335x-evm.dtb&apos;; setenv rootpath &apos;/home/hceng/rootfs&apos;;</div><div class="line"></div><div class="line">setenv netargs &quot;setenv bootargs console=$&#123;console&#125; $&#123;optargs&#125;  root=/dev/nfs  rootfstype=nfsroot  nfsroot=$&#123;serverip&#125;:$&#123;rootpath&#125;  ip=$&#123;ipaddr&#125;:$&#123;serverip&#125;:$&#123;gatewayip&#125;:$&#123;netmask&#125;::eth0:off&quot;</div><div class="line"></div><div class="line">setenv netboot &quot;echo Booting from network ...; setenv autoload no; tftp $&#123;fdtaddr&#125; $&#123;fdtfile&#125;; tftp $&#123;loadaddr&#125; $&#123;bootfile&#125;; run netargs; bootz $&#123;loadaddr&#125; - $&#123;fdtaddr&#125;&quot;</div><div class="line"></div><div class="line">saveenv</div><div class="line"></div><div class="line">run netboot</div></pre></td></tr></table></figure></p><h1 id="2-SPI设备——tlc5615"><a href="#2-SPI设备——tlc5615" class="headerlink" title="2. SPI设备——tlc5615"></a>2. SPI设备——tlc5615</h1><p><a href="http://www.ti.com/lit/ds/symlink/tlc5615.pdf" target="_blank" rel="external">TLC5615</a>是一个10位的DAC，最大输出电压位基准电压的两倍。<br>这个驱动比较简单，没什么特别的难点，<br>唯一特殊的是TLC5615每次传输是12位数据(10位data+2位extra)，因此在<code>probe()</code>函数里，需要<code>spi-&gt;bits_per_word = 12;</code>；<br>另外，因为每次传输的数据位12位，<code>spi_write()</code>的第三个参数不再是1，而是<code>spi_write(spi_tlc5615_dev, &amp;ker_buf, 2);</code>；</p><h2 id="2-1-设备树"><a href="#2-1-设备树" class="headerlink" title="2.1 设备树"></a>2.1 设备树</h2><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* SPI Busses */</span></div><div class="line"><span class="variable">&amp;spi1</span> &#123;</div><div class="line">    status = <span class="string">"okay"</span>;</div><div class="line">    pinctrl-names = <span class="string">"default"</span>;</div><div class="line">    pinctrl<span class="number">-0</span> = <span class="params">&lt;<span class="variable">&amp;spi1_pins</span>&gt;</span>;</div><div class="line"></div><div class="line">    <span class="class">spidev@0 </span>&#123;</div><div class="line">        spi-max-frequency = <span class="params">&lt;<span class="number">25000000</span>&gt;</span>;</div><div class="line">        reg = <span class="params">&lt;<span class="number">0</span>&gt;</span>;</div><div class="line">        compatible = <span class="string">"rohm,dh2228fv"</span>;</div><div class="line"></div><div class="line">        <span class="comment">/* spi-cpha; sets CPHA=1, default is CPHA=0 */</span></div><div class="line">        <span class="comment">/* spi-cpol; sets CPOL=1, default is CPOL=0 */</span></div><div class="line">        <span class="comment">/* spi-cs-high; default is spi cs low       */</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="class">spidev@1 </span>&#123;</div><div class="line">        spi-max-frequency = <span class="params">&lt;<span class="number">25000000</span>&gt;</span>;</div><div class="line">        reg = <span class="params">&lt;<span class="number">1</span>&gt;</span>;</div><div class="line">        compatible = <span class="string">"ti,tlc5615"</span>;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="variable">&amp;am33xx_pinmux</span> &#123;</div><div class="line"><span class="symbol">    spi1_pins:</span> <span class="class">pinmux_spi1 </span>&#123;</div><div class="line">        pinctrl-single,pins = <span class="params">&lt;</span></div><div class="line">            <span class="number">0x190</span> (PIN_INPUT_PULLUP  | MUX_MODE3) /* spi1_sclk */</div><div class="line">            <span class="number">0x194</span> (PIN_INPUT_PULLUP  | MUX_MODE3) /* spi1_d0   */</div><div class="line">            <span class="number">0x198</span> (PIN_INPUT_PULLUP  | MUX_MODE3) /* spi1_d1   */</div><div class="line">            <span class="number">0x19c</span> (PIN_INPUT_PULLUP  | MUX_MODE3) /* spi1_cs0  */</div><div class="line">        &gt;;</div><div class="line">    &#125;;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h2 id="2-2-驱动程序"><a href="#2-2-驱动程序" class="headerlink" title="2.2 驱动程序"></a>2.2 驱动程序</h2><figure class="highlight c"><figcaption><span>[tl5615.c]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/fs.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/delay.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/uaccess.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/io.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/of.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/of_device.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/of_platform.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/platform_device.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/slab.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/cdev.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/spi/spi.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">int</span> major;</div><div class="line"><span class="keyword">static</span> <span class="keyword">dev_t</span> devid;</div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> <span class="keyword">class</span> *tlc5615_class;</div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> cdev tlc5615_cdev;</div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> spi_device *spi_tlc5615_dev;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">tlc5615_open</span> <span class="params">(<span class="keyword">struct</span> inode *node, <span class="keyword">struct</span> file *filp)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">tlc5615_release</span> <span class="params">(<span class="keyword">struct</span> inode *node, <span class="keyword">struct</span> file *filp)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> ssize_t <span class="title">tlc5615_write</span> <span class="params">(<span class="keyword">struct</span> file *filp, <span class="keyword">const</span> <span class="keyword">char</span> __user *buf, <span class="keyword">size_t</span> size, <span class="keyword">loff_t</span> *off)</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> ret;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> ker_buf;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(copy_from_user(&amp;ker_buf, buf, <span class="number">4</span>))</div><div class="line">       <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (ker_buf &gt; <span class="number">1023</span>)</div><div class="line">        ker_buf = <span class="number">1023</span>;</div><div class="line">    </div><div class="line">    ker_buf = (ker_buf &lt;&lt; <span class="number">2</span>) &amp; (<span class="number">0xFFC</span>);</div><div class="line">   </div><div class="line">    <span class="comment">//printk("ker_buf=%d\n", ker_buf);</span></div><div class="line">    ret = spi_write(spi_tlc5615_dev, &amp;ker_buf, <span class="number">2</span>);</div><div class="line">    <span class="keyword">if</span>(ret != <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        printk(<span class="string">"spi write error\n"</span>);</div><div class="line">        <span class="keyword">return</span> -EINVAL;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">4</span>; </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> file_operations tlc5615_ops = &#123;</div><div class="line">    .owner = THIS_MODULE,</div><div class="line">    .open  = tlc5615_open,</div><div class="line">    .write = tlc5615_write,</div><div class="line">    .release = tlc5615_release,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">tlc5615_probe</span><span class="params">(<span class="keyword">struct</span> spi_device *spi)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> ret;</div><div class="line"></div><div class="line">    spi-&gt;bits_per_word = <span class="number">12</span>; <span class="comment">//tl5615 transmits 12bits(10bits data + 2bit extra)each time.</span></div><div class="line">    <span class="keyword">if</span> (spi_setup(spi) &lt; <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        printk(<span class="string">"spi master doesn't support 12 bits/word \n"</span>);</div><div class="line">        <span class="keyword">return</span> -EINVAL;</div><div class="line">    &#125;   </div><div class="line">        </div><div class="line">    spi_tlc5615_dev = spi;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(alloc_chrdev_region(&amp;devid, <span class="number">0</span>, <span class="number">1</span>, <span class="string">"tlc5615"</span>) &lt; <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        printk(KERN_INFO<span class="string">"Unable to alloc_chrdev_region.\n"</span>);</div><div class="line">        <span class="keyword">return</span> -EINVAL;</div><div class="line">    &#125;   </div><div class="line">        </div><div class="line">    major = MAJOR(devid);</div><div class="line">    cdev_init(&amp;tlc5615_cdev, &amp;tlc5615_ops);        </div><div class="line">    ret = cdev_add(&amp;tlc5615_cdev, devid, <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        printk(KERN_ERR <span class="string">"Unable to cdev_add.\n"</span>);</div><div class="line">        <span class="keyword">goto</span> error;</div><div class="line">    &#125;</div><div class="line">        </div><div class="line">    tlc5615_class = class_create(THIS_MODULE, <span class="string">"tlc5615"</span>); </div><div class="line"></div><div class="line">    device_create(tlc5615_class, <span class="literal">NULL</span>, MKDEV(major, <span class="number">0</span>), <span class="literal">NULL</span>, <span class="string">"tlc5615"</span>); <span class="comment">// /dev/tlc5615</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">error:</div><div class="line">    unregister_chrdev_region(devid, <span class="number">1</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> -EINVAL;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">tlc5615_remove</span><span class="params">(<span class="keyword">struct</span> spi_device *spi)</span></span></div><div class="line">&#123;</div><div class="line">    device_destroy(tlc5615_class,  MKDEV(major, <span class="number">0</span>));</div><div class="line"></div><div class="line">    class_destroy(tlc5615_class);</div><div class="line"> </div><div class="line">    unregister_chrdev_region(devid, <span class="number">1</span>);</div><div class="line">    cdev_del(&amp;tlc5615_cdev);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">struct</span> of_device_id of_match_spi[] = &#123;</div><div class="line">    &#123; .compatible = <span class="string">"ti,tlc5615"</span>, .data = <span class="literal">NULL</span> &#125;,</div><div class="line">    &#123; <span class="comment">/* sentinel */</span> &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> spi_driver tlc5615_driver = &#123;</div><div class="line">    .probe = tlc5615_probe,</div><div class="line">    .remove = tlc5615_remove,</div><div class="line">    .driver = &#123;</div><div class="line">        .name = <span class="string">"tlc5615"</span>,</div><div class="line">        .owner = THIS_MODULE,</div><div class="line">        .of_match_table = of_match_spi,  </div><div class="line">    &#125;,</div><div class="line">&#125;;</div><div class="line"></div><div class="line">module_spi_driver(tlc5615_driver);</div><div class="line"></div><div class="line">MODULE_LICENSE(<span class="string">"GPL"</span>);</div><div class="line">MODULE_AUTHOR(<span class="string">"hceng &lt;huangcheng.job@foxmail.com&gt;"</span>);</div><div class="line">MODULE_DESCRIPTION(<span class="string">"TI am335x board spi device: tl5615 driver."</span>);</div><div class="line">MODULE_VERSION(<span class="string">"v1.0"</span>);</div></pre></td></tr></table></figure><h2 id="2-3-测试程序"><a href="#2-3-测试程序" class="headerlink" title="2.3 测试程序"></a>2.3 测试程序</h2><figure class="highlight c"><figcaption><span>[tl5615_app.c]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">// ./tl5615_app val  </span></div><div class="line"><span class="comment">// val = 0~4.096v (0~1023)</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> fd;</div><div class="line">    <span class="keyword">float</span> f_val = atof(argv[<span class="number">1</span>]);</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> i_val = f_val * <span class="number">1000</span> / <span class="number">4</span>;</div><div class="line">    <span class="keyword">if</span>(i_val &gt; <span class="number">1023</span>)</div><div class="line">        i_val = <span class="number">1023</span>;</div><div class="line"></div><div class="line">    fd = open(<span class="string">"/dev/tlc5615"</span>, O_RDWR);   </div><div class="line">    <span class="keyword">if</span> (fd &lt; <span class="number">0</span>)</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Can't open!\n"</span>);</div><div class="line">   </div><div class="line">    write(fd, &amp;i_val, <span class="number">4</span>);</div><div class="line">    </div><div class="line">    close(fd);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出电压计算公式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">output=2*(Vref)*(val/1024)  //其中val为SPI传输的前10位数据。</div></pre></td></tr></table></figure></p><h1 id="3-SPI设备——ssd1306"><a href="#3-SPI设备——ssd1306" class="headerlink" title="3. SPI设备——ssd1306"></a>3. SPI设备——ssd1306</h1><p><a href="https://cdn-shop.adafruit.com/datasheets/SSD1306.pdf" target="_blank" rel="external">SSD1306</a>是一个分辨率为128*64的OLED显示屏。<br>OLED的驱动稍微麻烦一点，除了对SSD1306的基本操作，还要解决以下两个问题。</p><ul><li><p><strong>1.需要设备树提供DC引脚</strong><br>采用SPI接口的OLED，除了时钟引脚(CLK)、使能引脚(EN)、数据发送引脚(MOSI)外，还需要数据/命令切换引脚(DC)。<br>因为OLED只接收数据的缘故，AM335X的数据接收引脚(MISO)就不需要了。<br>因此需要在设备树中加入DC引脚信息，并在驱动中解析使用。</p></li><li><p><strong>2.需要支持软件片选</strong><br>AM335X的SPI只有两个硬件片选CS0和CS1，现在有了三个设备，两个片选自然是不够的，因此需要添加软件片选，即使用GPIO作为片选引脚。<br>而AM335X的SDK目前是<a href="https://e2e.ti.com/support/processors/f/791/t/425326?AM335x-SPI-with-gpio-as-cs-pins" target="_blank" rel="external">不支持软件片选</a>的，因此需要修改SPI控制器驱动(<code>spi-omap2-mcspi.c</code>)来实现。</p></li></ul><p>修改的思路也比较简单，关注两个变量<strong><code>spi-&gt;chip_select</code></strong>和<strong><code>spi-&gt;cs_gpio</code></strong>。<br><code>spi-&gt;chip_select</code>是设备树中<code>reg</code>的值，为0、1分别表示CS0和CS1，从2开始，就意味着该设备使用GPIO作为片选了；<br><code>spi-&gt;cs_gpio</code>是设备树中<code>cs-gpios</code>的值，如果在设备树中值为<code>&lt;0&gt;</code>，这里将为<code>-2</code>，说明使用的是硬件片选，如果在设备树中值为<code>&lt;&amp;gpio0 13 0&gt;</code>，这里将为<code>13</code>，说明使用的是软件片选。</p><p>因此只需要在<code>omap2_mcspi_setup()</code>函数里，根据<code>spi-&gt;chip_select</code>的值来判断是否使用的是GPIO片选，如果不是，使用原来的函数，如果是，则对GPIO片选引脚进行初始化。<br>然后在<code>omap2_mcspi_force_cs()</code>函数里，根据<code>spi-&gt;chip_select</code>的值来判断是否使用的是GPIO片选，如果不是，使用原来的函数，如果是，则控制GPIO输出电平实现片选。</p><p>修改内容如下：<br><figure class="highlight diff"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--- spi-omap2-mcspi_bak.c2018-12-27 16:06:05.159509054 +0800</span></div><div class="line"><span class="comment">+++ spi-omap2-mcspi.c2018-12-28 11:25:42.242154915 +0800</span></div><div class="line"><span class="meta">@@ -35,7 +35,7 @@</span></div><div class="line"> #include &lt;linux/gcd.h&gt;</div><div class="line"> </div><div class="line"> #include &lt;linux/spi/spi.h&gt;</div><div class="line"><span class="deletion">-</span></div><div class="line"><span class="addition">+#include &lt;linux/gpio.h&gt;</span></div><div class="line"> #include &lt;linux/platform_data/spi-omap2-mcspi.h&gt;</div><div class="line"> </div><div class="line"> #define OMAP2_MCSPI_MAX_FREQ        48000000</div><div class="line"><span class="meta">@@ -245,14 +245,31 @@</span></div><div class="line"> static void omap2_mcspi_force_cs(struct spi_device *spi, int cs_active)</div><div class="line"> &#123; </div><div class="line">     l = mcspi_cached_chconf0(spi);</div><div class="line"><span class="addition">+    if (spi-&gt;cs_gpio &gt;= 0)</span></div><div class="line"><span class="addition">+    &#123;</span></div><div class="line"><span class="addition">+        if (cs_active)</span></div><div class="line"><span class="addition">+        &#123;</span></div><div class="line"><span class="addition">+            l |= OMAP2_MCSPI_CHCONF_FORCE;</span></div><div class="line"><span class="addition">+            mcspi_write_chconf0(spi, l);</span></div><div class="line"><span class="addition">+            gpio_direction_output(spi-&gt;cs_gpio, 0);</span></div><div class="line"><span class="addition">+        &#125;</span></div><div class="line"><span class="addition">+        else</span></div><div class="line"><span class="addition">+        &#123;</span></div><div class="line"><span class="addition">+            l &amp;= ~OMAP2_MCSPI_CHCONF_FORCE;</span></div><div class="line"><span class="addition">+            mcspi_write_chconf0(spi, l);</span></div><div class="line"><span class="addition">+            gpio_direction_output(spi-&gt;cs_gpio, 1);</span></div><div class="line"><span class="addition">+        &#125;</span></div><div class="line"><span class="addition">+    &#125;</span></div><div class="line"><span class="deletion">-</span></div><div class="line"><span class="deletion">-    mcspi_write_chconf0(spi, l);</span></div><div class="line"><span class="addition">+    &#123;</span></div><div class="line"><span class="addition">+        l = mcspi_cached_chconf0(spi);</span></div><div class="line"><span class="addition">+        if (cs_active)</span></div><div class="line"><span class="addition">+            l |= OMAP2_MCSPI_CHCONF_FORCE;</span></div><div class="line"><span class="addition">+        else</span></div><div class="line"><span class="addition">+            l &amp;= ~OMAP2_MCSPI_CHCONF_FORCE;</span></div><div class="line"><span class="addition">+        </span></div><div class="line"><span class="addition">+        mcspi_write_chconf0(spi, l);</span></div><div class="line"><span class="addition">+    &#125;</span></div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> static void omap2_mcspi_set_master_mode(struct spi_master *master)</div><div class="line"><span class="meta">@@ -995,6 +1012,23 @@</span></div><div class="line">     struct omap2_mcspi_dma  *mcspi_dma;</div><div class="line">     struct omap2_mcspi_cs   *cs = spi-&gt;controller_state;</div><div class="line"> </div><div class="line"><span class="addition">+    if (spi-&gt;chip_select &gt; 1)    //using GPIO as a chip select, reg value &gt;1 in the devicetree</span></div><div class="line"><span class="addition">+    &#123; </span></div><div class="line"><span class="addition">+        if (spi-&gt;cs_gpio &lt; 0)</span></div><div class="line"><span class="addition">+            return -EIO;</span></div><div class="line"><span class="addition">+            </span></div><div class="line"><span class="addition">+        if (gpio_is_valid(spi-&gt;cs_gpio)) </span></div><div class="line"><span class="addition">+        &#123;</span></div><div class="line"><span class="addition">+            if ((gpio_request(spi-&gt;cs_gpio, "cs_gpio")) &lt; 0)  </span></div><div class="line"><span class="addition">+            &#123;</span></div><div class="line"><span class="addition">+                printk("Error requesting gpio %d for spi cs pin\n", spi-&gt;cs_gpio);</span></div><div class="line"><span class="addition">+                return -EBUSY;</span></div><div class="line"><span class="addition">+            &#125;</span></div><div class="line"><span class="addition">+            gpio_direction_output(spi-&gt;cs_gpio, 1);</span></div><div class="line"><span class="addition">+        &#125;</span></div><div class="line"><span class="addition">+        spi-&gt;chip_select = 0;   //using GPIO as a chip select, only use DAM0/channel 0 or 1</span></div><div class="line"><span class="addition">+    &#125;</span></div><div class="line"><span class="addition">+    </span></div><div class="line">     mcspi_dma = &amp;mcspi-&gt;dma_channels[spi-&gt;chip_select];</div><div class="line"> </div><div class="line">     if (!cs) &#123;</div><div class="line"><span class="meta">@@ -1056,6 +1090,9 @@</span></div><div class="line">             mcspi_dma-&gt;dma_tx = NULL;</div><div class="line">         &#125;</div><div class="line">     &#125;</div><div class="line"><span class="addition">+    </span></div><div class="line"><span class="addition">+    if (spi-&gt;cs_gpio &gt;= 0)</span></div><div class="line"><span class="addition">+        gpio_free(spi-&gt;cs_gpio);</span></div><div class="line"> &#125;</div></pre></td></tr></table></figure></p><h2 id="3-1-设备树"><a href="#3-1-设备树" class="headerlink" title="3.1 设备树"></a>3.1 设备树</h2><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* SPI Busses */</span></div><div class="line"><span class="variable">&amp;spi1</span> &#123;</div><div class="line">    status = <span class="string">"okay"</span>;</div><div class="line">    pinctrl-names = <span class="string">"default"</span>;</div><div class="line">    pinctrl<span class="number">-0</span> = <span class="params">&lt;<span class="variable">&amp;spi1_pins</span>&gt;</span>;</div><div class="line">    </div><div class="line">    ti,pindir-d0-out-d1-in;</div><div class="line">    ti,spi-num-cs = <span class="params">&lt;<span class="number">3</span>&gt;</span>; </div><div class="line">    cs-gpios = <span class="params">&lt;<span class="number">0</span>&gt;</span>, <span class="params">&lt;<span class="number">0</span>&gt;</span>, <span class="params">&lt;<span class="variable">&amp;gpio0</span> <span class="number">13</span> <span class="number">0</span>&gt;</span>;</div><div class="line">    </div><div class="line">    <span class="class">spidev@0 </span>&#123;</div><div class="line">        compatible = <span class="string">"rohm,dh2228fv"</span>;</div><div class="line">        spi-max-frequency = <span class="params">&lt;<span class="number">25000000</span>&gt;</span>;</div><div class="line">        reg = <span class="params">&lt;<span class="number">0</span>&gt;</span>;</div><div class="line">        </div><div class="line">        <span class="comment">/* spi-cpha; sets CPHA=1, default is CPHA=0 */</span></div><div class="line">        <span class="comment">/* spi-cpol; sets CPOL=1, default is CPOL=0 */</span></div><div class="line">        <span class="comment">/* spi-cs-high; default is spi cs low */</span></div><div class="line">    &#125;;</div><div class="line">    </div><div class="line">    <span class="class">spidev@1 </span>&#123;</div><div class="line">        compatible = <span class="string">"ti,tlc5615"</span>; </div><div class="line">        spi-max-frequency = <span class="params">&lt;<span class="number">25000000</span>&gt;</span>;</div><div class="line">        reg = <span class="params">&lt;<span class="number">1</span>&gt;</span>;</div><div class="line">    &#125;;</div><div class="line">    </div><div class="line">    <span class="class">spidev@2 </span>&#123;</div><div class="line">        compatible = <span class="string">"solomon,ssd1306fb-spi"</span>; <span class="comment">//OLED</span></div><div class="line">        spi-max-frequency = <span class="params">&lt;<span class="number">25000000</span>&gt;</span>;</div><div class="line">        reg = <span class="params">&lt;<span class="number">2</span>&gt;</span>;</div><div class="line">        dc-gpio = <span class="params">&lt;<span class="variable">&amp;gpio0</span> <span class="number">12</span> <span class="number">0</span>&gt;</span>;</div><div class="line">        pinctrl<span class="number">-0</span> = <span class="params">&lt;<span class="variable">&amp;oled_dc_pin</span>&gt;</span>;</div><div class="line">    &#125;;</div><div class="line">    </div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="variable">&amp;am33xx_pinmux</span> &#123;</div><div class="line"><span class="symbol">    spi1_pins:</span> <span class="class">pinmux_spi1 </span>&#123;</div><div class="line">        pinctrl-single,pins = <span class="params">&lt;</span></div><div class="line">            <span class="number">0x190</span> (PIN_INPUT_PULLUP | MUX_MODE3) /* spi1_sclk */</div><div class="line">            <span class="number">0x194</span> (PIN_INPUT_PULLUP | MUX_MODE3) /* spi1_d0   */</div><div class="line">            <span class="number">0x198</span> (PIN_INPUT_PULLUP | MUX_MODE3) /* spi1_d1   */</div><div class="line">            <span class="number">0x19c</span> (PIN_INPUT_PULLUP | MUX_MODE3) /* spi1_cs0  */</div><div class="line">        &gt;;</div><div class="line">    &#125;;</div><div class="line"><span class="symbol">    </span></div><div class="line">    oled_dc_pin: <span class="class">oled_dc_pin0 </span>&#123;</div><div class="line">        pinctrl-single,pins = <span class="params">&lt;</span></div><div class="line">            <span class="number">0x178</span> (PIN_INPUT_PULLDOWN | MUX_MODE7)  /* conf_uart1_ctsn.gpio0_12 */</div><div class="line">        &gt;;</div><div class="line">    &#125;;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>其中<br><code>ti,spi-num-cs</code>指定片选数量；<br><code>cs-gpios</code>列出所有的片选引脚，硬件片选填入0代替，软件片选填入对应的GPIO引脚；<br><code>spidev@2</code>使用软件片选，<code>reg</code>因此要设置为2；<br><code>dc-gpio</code>设置OLED的DC引脚；<br><code>pinctrl-0</code>引用<code>oled_dc_pin</code>，将其设置为GPIO功能；</p><h2 id="3-2-驱动程序"><a href="#3-2-驱动程序" class="headerlink" title="3.2 驱动程序"></a>3.2 驱动程序</h2><figure class="highlight c"><figcaption><span>[fb_ssd1306_drv.c]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/io.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/fs.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/cdev.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/delay.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/uaccess.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/of.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/of_gpio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/of_device.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/of_platform.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/spi/spi.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> OLED_CMD_INIT       0x100001</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> OLED_CMD_CLEAR_ALL  0x100002</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> OLED_CMD_CLEAR_PAGE 0x100003</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> OLED_CMD_SET_POS    0x100004</span></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">int</span> major;</div><div class="line"><span class="keyword">static</span> <span class="keyword">dev_t</span> devid;</div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> <span class="keyword">class</span> *ssd1306_class;</div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> cdev ssd1306_cdev;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> *ker_buf;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">int</span> spi_oled_dc_pin;</div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> spi_device *spi_ssd1306_dev;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ssd1306_set_dc</span><span class="params">(<span class="keyword">char</span> val)</span></span></div><div class="line">&#123;</div><div class="line">   gpio_direction_output(spi_oled_dc_pin, val);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ssd1306_write_cmd</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> cmd)</span></span></div><div class="line">&#123;</div><div class="line">    ssd1306_set_dc(<span class="number">0</span>);  </div><div class="line">    spi_write(spi_ssd1306_dev, &amp;cmd, <span class="number">1</span>);</div><div class="line">    ssd1306_set_dc(<span class="number">1</span>); </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ssd1306_write_data</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> data)</span></span></div><div class="line">&#123;</div><div class="line">    ssd1306_set_dc(<span class="number">1</span>);  </div><div class="line">    spi_write(spi_ssd1306_dev, &amp;data, <span class="number">1</span>);</div><div class="line">    ssd1306_set_dc(<span class="number">1</span>);  </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ssd1306_set_page_addr_mode</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    ssd1306_write_cmd(<span class="number">0x20</span>);</div><div class="line">    ssd1306_write_cmd(<span class="number">0x02</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ssd1306_set_pos</span><span class="params">(<span class="keyword">int</span> page, <span class="keyword">int</span> col)</span></span></div><div class="line">&#123;</div><div class="line">    ssd1306_write_cmd(<span class="number">0xB0</span> + page);        <span class="comment">//page address</span></div><div class="line"></div><div class="line">    ssd1306_write_cmd(col &amp; <span class="number">0xF</span>);          <span class="comment">//Lower Column Start Address </span></div><div class="line">    ssd1306_write_cmd(<span class="number">0x10</span> + (col &gt;&gt; <span class="number">4</span>));  <span class="comment">//Lower Higher Start Address </span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ssd1306_clear</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> page, i;</div><div class="line">    <span class="keyword">for</span> (page = <span class="number">0</span>; page &lt; <span class="number">8</span>; page ++)</div><div class="line">    &#123;</div><div class="line">        ssd1306_set_pos(page, <span class="number">0</span>);</div><div class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">128</span>; i++)</div><div class="line">            ssd1306_write_data(<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ssd1306_clear_page</span><span class="params">(<span class="keyword">int</span> page)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    ssd1306_set_pos(page, <span class="number">0</span>);</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">128</span>; i++)</div><div class="line">        ssd1306_write_data(<span class="number">0</span>);    </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ssd1306_init</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123; </div><div class="line">    ssd1306_write_cmd(<span class="number">0xAE</span>); <span class="comment">/*display off*/</span> </div><div class="line">    ssd1306_write_cmd(<span class="number">0x00</span>); <span class="comment">/*set lower column address*/</span> </div><div class="line">    ssd1306_write_cmd(<span class="number">0x10</span>); <span class="comment">/*set higher column address*/</span> </div><div class="line">    ssd1306_write_cmd(<span class="number">0x40</span>); <span class="comment">/*set display start line*/</span> </div><div class="line">    ssd1306_write_cmd(<span class="number">0xB0</span>); <span class="comment">/*set page address*/</span> </div><div class="line">    ssd1306_write_cmd(<span class="number">0x81</span>); <span class="comment">/*contract control*/</span> </div><div class="line">    ssd1306_write_cmd(<span class="number">0x66</span>); <span class="comment">/*128*/</span> </div><div class="line">    ssd1306_write_cmd(<span class="number">0xA1</span>); <span class="comment">/*set segment remap*/</span> </div><div class="line">    ssd1306_write_cmd(<span class="number">0xA6</span>); <span class="comment">/*normal / reverse*/</span> </div><div class="line">    ssd1306_write_cmd(<span class="number">0xA8</span>); <span class="comment">/*multiplex ratio*/</span> </div><div class="line">    ssd1306_write_cmd(<span class="number">0x3F</span>); <span class="comment">/*duty = 1/64*/</span> </div><div class="line">    ssd1306_write_cmd(<span class="number">0xC8</span>); <span class="comment">/*Com scan direction*/</span> </div><div class="line">    ssd1306_write_cmd(<span class="number">0xD3</span>); <span class="comment">/*set display offset*/</span> </div><div class="line">    ssd1306_write_cmd(<span class="number">0x00</span>); </div><div class="line">    ssd1306_write_cmd(<span class="number">0xD5</span>); <span class="comment">/*set osc division*/</span> </div><div class="line">    ssd1306_write_cmd(<span class="number">0x80</span>); </div><div class="line">    ssd1306_write_cmd(<span class="number">0xD9</span>); <span class="comment">/*set pre-charge period*/</span> </div><div class="line">    ssd1306_write_cmd(<span class="number">0x1f</span>); </div><div class="line">    ssd1306_write_cmd(<span class="number">0xDA</span>); <span class="comment">/*set COM pins*/</span> </div><div class="line">    ssd1306_write_cmd(<span class="number">0x12</span>); </div><div class="line">    ssd1306_write_cmd(<span class="number">0xdb</span>); <span class="comment">/*set vcomh*/</span> </div><div class="line">    ssd1306_write_cmd(<span class="number">0x30</span>); </div><div class="line">    ssd1306_write_cmd(<span class="number">0x8d</span>); <span class="comment">/*set charge pump enable*/</span> </div><div class="line">    ssd1306_write_cmd(<span class="number">0x14</span>); </div><div class="line"></div><div class="line">    ssd1306_set_page_addr_mode();</div><div class="line"></div><div class="line">    ssd1306_clear();</div><div class="line">    </div><div class="line">    ssd1306_write_cmd(<span class="number">0xAF</span>); <span class="comment">/*display ON*/</span>    </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">long</span> <span class="title">ssd1306_ioctl</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="keyword">unsigned</span> <span class="keyword">int</span> cmd, <span class="keyword">unsigned</span> <span class="keyword">long</span> arg)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> page;</div><div class="line">    <span class="keyword">int</span> col;</div><div class="line">    </div><div class="line">    <span class="keyword">switch</span> (cmd)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">case</span> OLED_CMD_INIT:</div><div class="line">        &#123;</div><div class="line">            ssd1306_init();</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">case</span> OLED_CMD_CLEAR_ALL:</div><div class="line">        &#123;</div><div class="line">           ssd1306_clear();</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">case</span> OLED_CMD_CLEAR_PAGE:</div><div class="line">        &#123;</div><div class="line">            page = arg;</div><div class="line">            ssd1306_clear_page(page);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">case</span> OLED_CMD_SET_POS:</div><div class="line">        &#123;</div><div class="line">            page = arg &amp; <span class="number">0xff</span>;</div><div class="line">            col  = (arg &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>;</div><div class="line">            ssd1306_set_pos(page, col);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> ssize_t <span class="title">ssd1306_write</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="keyword">const</span> <span class="keyword">char</span> __user *buf, <span class="keyword">size_t</span> count, <span class="keyword">loff_t</span> *ppos)</span></span></div><div class="line"></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> ret;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (count &gt; <span class="number">4096</span>)</div><div class="line">        <span class="keyword">return</span> -EINVAL;</div><div class="line">    ret = copy_from_user(ker_buf, buf, count);</div><div class="line">    ssd1306_set_dc(<span class="number">1</span>); <span class="comment">/* data */</span></div><div class="line">    spi_write(spi_ssd1306_dev, ker_buf, count);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> file_operations ssd1306_ops = &#123;</div><div class="line">    .owner            = THIS_MODULE,</div><div class="line">    .unlocked_ioctl   = ssd1306_ioctl,</div><div class="line">    .write            = ssd1306_write,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">ssd1306_probe</span><span class="params">(<span class="keyword">struct</span> spi_device *spi)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> ret;</div><div class="line"></div><div class="line">    spi_ssd1306_dev = spi;</div><div class="line">    </div><div class="line">    spi_oled_dc_pin = of_get_named_gpio(spi_ssd1306_dev-&gt;dev.of_node, <span class="string">"dc-gpio"</span>, <span class="number">0</span>); <span class="comment">//dc and uart1 is same pin.</span></div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (gpio_is_valid(spi_oled_dc_pin)) </div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> ((gpio_request(spi_oled_dc_pin, <span class="string">"dc_pin"</span>)) &lt; <span class="number">0</span>)  </div><div class="line">        &#123;</div><div class="line">            printk(KERN_ERR <span class="string">"Error requesting gpio %d for spi oled dc pin\n"</span>, spi_oled_dc_pin);</div><div class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        gpio_direction_output(spi_oled_dc_pin, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ker_buf = kmalloc(<span class="number">4096</span>, GFP_KERNEL);</div><div class="line">    <span class="keyword">if</span> (!ker_buf)</div><div class="line">    &#123;</div><div class="line">        printk(KERN_ERR <span class="string">"kmalloc error\n"</span>);</div><div class="line">        <span class="keyword">goto</span> err1;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(alloc_chrdev_region(&amp;devid, <span class="number">0</span>, <span class="number">1</span>, <span class="string">"ssd1306_dev"</span>) &lt; <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        printk(KERN_INFO<span class="string">"Unable to alloc_chrdev_region.\n"</span>);</div><div class="line">        <span class="keyword">goto</span> err2;</div><div class="line">    &#125;   </div><div class="line"></div><div class="line">    major = MAJOR(devid);</div><div class="line">    cdev_init(&amp;ssd1306_cdev, &amp;ssd1306_ops);        </div><div class="line">    ret = cdev_add(&amp;ssd1306_cdev, devid, <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        printk(KERN_ERR <span class="string">"Unable to cdev_add.\n"</span>);</div><div class="line">        <span class="keyword">goto</span> err3;</div><div class="line">    &#125;</div><div class="line">        </div><div class="line">    ssd1306_class = class_create(THIS_MODULE, <span class="string">"ssd1306_class"</span>); </div><div class="line"></div><div class="line">    device_create(ssd1306_class, <span class="literal">NULL</span>, MKDEV(major, <span class="number">0</span>), <span class="literal">NULL</span>, <span class="string">"ssd1306"</span>); <span class="comment">// /dev/ssd1306</span></div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"> </div><div class="line">err3:</div><div class="line">    unregister_chrdev_region(devid, <span class="number">1</span>);</div><div class="line">    cdev_del(&amp;ssd1306_cdev);</div><div class="line">    </div><div class="line">err2:</div><div class="line">    kfree(ker_buf);</div><div class="line"></div><div class="line">err1:</div><div class="line">    gpio_free(spi_oled_dc_pin);</div><div class="line">        </div><div class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">ssd1306_remove</span><span class="params">(<span class="keyword">struct</span> spi_device *spi)</span></span></div><div class="line">&#123;</div><div class="line">    device_destroy(ssd1306_class,  MKDEV(major, <span class="number">0</span>));</div><div class="line"></div><div class="line">    class_destroy(ssd1306_class);</div><div class="line"> </div><div class="line">    unregister_chrdev_region(devid, <span class="number">1</span>);</div><div class="line">    cdev_del(&amp;ssd1306_cdev);</div><div class="line"></div><div class="line">    kfree(ker_buf);</div><div class="line">    </div><div class="line">    gpio_free(spi_oled_dc_pin);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">struct</span> of_device_id of_match_spi[] = &#123;</div><div class="line">    &#123; .compatible = <span class="string">"solomon,ssd1306fb-spi"</span>, .data = <span class="literal">NULL</span> &#125;,</div><div class="line">    &#123; <span class="comment">/* sentinel */</span> &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> spi_driver ssd1306_driver = &#123;</div><div class="line">    .probe = ssd1306_probe,</div><div class="line">    .remove = ssd1306_remove,</div><div class="line">    .driver = &#123;</div><div class="line">        .name = <span class="string">"ssd1306_drv"</span>,</div><div class="line">        .owner = THIS_MODULE,</div><div class="line">        .of_match_table = of_match_spi,  </div><div class="line">    &#125;,</div><div class="line">&#125;;</div><div class="line"></div><div class="line">module_spi_driver(ssd1306_driver);</div><div class="line"></div><div class="line">MODULE_LICENSE(<span class="string">"GPL"</span>);</div><div class="line">MODULE_AUTHOR(<span class="string">"hceng &lt;huangcheng.job@foxmail.com&gt;"</span>);</div><div class="line">MODULE_DESCRIPTION(<span class="string">"TI am335x board spi device: ssd1306 driver."</span>);</div><div class="line">MODULE_VERSION(<span class="string">"v1.0"</span>);</div></pre></td></tr></table></figure><p>SPI设备驱动程序没什么特别的。</p><h2 id="3-3-测试程序"><a href="#3-3-测试程序" class="headerlink" title="3.3 测试程序"></a>3.3 测试程序</h2><figure class="highlight c"><figcaption><span>[oled_app.c]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ioctl.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">/* oled_test init</span></div><div class="line"> * oled_test clear</div><div class="line"> * oled_test clear &lt;page&gt;</div><div class="line"> * oled_test &lt;page&gt; &lt;col&gt; &lt;string&gt;</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> OLED_CMD_INIT       0x100001</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> OLED_CMD_CLEAR_ALL  0x100002</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> OLED_CMD_CLEAR_PAGE 0x100003</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> OLED_CMD_SET_POS    0x100004</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> oled_asc2_8x16[<span class="number">95</span>][<span class="number">16</span>]=</div><div class="line">&#123;</div><div class="line">    &#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">// 0</span></div><div class="line">    &#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xF8</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x33</span>,<span class="number">0x30</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">//!1</span></div><div class="line">    &#123;<span class="number">0x00</span>,<span class="number">0x10</span>,<span class="number">0x0C</span>,<span class="number">0x06</span>,<span class="number">0x10</span>,<span class="number">0x0C</span>,<span class="number">0x06</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">//"2</span></div><div class="line">    &#123;<span class="number">0x40</span>,<span class="number">0xC0</span>,<span class="number">0x78</span>,<span class="number">0x40</span>,<span class="number">0xC0</span>,<span class="number">0x78</span>,<span class="number">0x40</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x3F</span>,<span class="number">0x04</span>,<span class="number">0x04</span>,<span class="number">0x3F</span>,<span class="number">0x04</span>,<span class="number">0x04</span>,<span class="number">0x00</span>&#125;,<span class="comment">//#3</span></div><div class="line">    &#123;<span class="number">0x00</span>,<span class="number">0x70</span>,<span class="number">0x88</span>,<span class="number">0xFC</span>,<span class="number">0x08</span>,<span class="number">0x30</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x18</span>,<span class="number">0x20</span>,<span class="number">0xFF</span>,<span class="number">0x21</span>,<span class="number">0x1E</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">//$4</span></div><div class="line">    &#123;<span class="number">0xF0</span>,<span class="number">0x08</span>,<span class="number">0xF0</span>,<span class="number">0x00</span>,<span class="number">0xE0</span>,<span class="number">0x18</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x21</span>,<span class="number">0x1C</span>,<span class="number">0x03</span>,<span class="number">0x1E</span>,<span class="number">0x21</span>,<span class="number">0x1E</span>,<span class="number">0x00</span>&#125;,<span class="comment">//%5</span></div><div class="line">    &#123;<span class="number">0x00</span>,<span class="number">0xF0</span>,<span class="number">0x08</span>,<span class="number">0x88</span>,<span class="number">0x70</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x1E</span>,<span class="number">0x21</span>,<span class="number">0x23</span>,<span class="number">0x24</span>,<span class="number">0x19</span>,<span class="number">0x27</span>,<span class="number">0x21</span>,<span class="number">0x10</span>&#125;,<span class="comment">//&amp;6</span></div><div class="line">    &#123;<span class="number">0x10</span>,<span class="number">0x16</span>,<span class="number">0x0E</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">//'7</span></div><div class="line">    &#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xE0</span>,<span class="number">0x18</span>,<span class="number">0x04</span>,<span class="number">0x02</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x07</span>,<span class="number">0x18</span>,<span class="number">0x20</span>,<span class="number">0x40</span>,<span class="number">0x00</span>&#125;,<span class="comment">//(8</span></div><div class="line">    &#123;<span class="number">0x00</span>,<span class="number">0x02</span>,<span class="number">0x04</span>,<span class="number">0x18</span>,<span class="number">0xE0</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x40</span>,<span class="number">0x20</span>,<span class="number">0x18</span>,<span class="number">0x07</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">//)9</span></div><div class="line">    &#123;<span class="number">0x40</span>,<span class="number">0x40</span>,<span class="number">0x80</span>,<span class="number">0xF0</span>,<span class="number">0x80</span>,<span class="number">0x40</span>,<span class="number">0x40</span>,<span class="number">0x00</span>,<span class="number">0x02</span>,<span class="number">0x02</span>,<span class="number">0x01</span>,<span class="number">0x0F</span>,<span class="number">0x01</span>,<span class="number">0x02</span>,<span class="number">0x02</span>,<span class="number">0x00</span>&#125;,<span class="comment">//*10</span></div><div class="line">    &#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xF0</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x01</span>,<span class="number">0x01</span>,<span class="number">0x1F</span>,<span class="number">0x01</span>,<span class="number">0x01</span>,<span class="number">0x01</span>,<span class="number">0x00</span>&#125;,<span class="comment">//+11</span></div><div class="line">    &#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x80</span>,<span class="number">0xB0</span>,<span class="number">0x70</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">//,12</span></div><div class="line">    &#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x01</span>,<span class="number">0x01</span>,<span class="number">0x01</span>,<span class="number">0x01</span>,<span class="number">0x01</span>,<span class="number">0x01</span>&#125;,<span class="comment">//-13</span></div><div class="line">    &#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x30</span>,<span class="number">0x30</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">//.14</span></div><div class="line">    &#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x80</span>,<span class="number">0x60</span>,<span class="number">0x18</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x60</span>,<span class="number">0x18</span>,<span class="number">0x06</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">///15</span></div><div class="line">    &#123;<span class="number">0x00</span>,<span class="number">0xE0</span>,<span class="number">0x10</span>,<span class="number">0x08</span>,<span class="number">0x08</span>,<span class="number">0x10</span>,<span class="number">0xE0</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x0F</span>,<span class="number">0x10</span>,<span class="number">0x20</span>,<span class="number">0x20</span>,<span class="number">0x10</span>,<span class="number">0x0F</span>,<span class="number">0x00</span>&#125;,<span class="comment">//016</span></div><div class="line">    &#123;<span class="number">0x00</span>,<span class="number">0x10</span>,<span class="number">0x10</span>,<span class="number">0xF8</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x20</span>,<span class="number">0x3F</span>,<span class="number">0x20</span>,<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">//117</span></div><div class="line">    &#123;<span class="number">0x00</span>,<span class="number">0x70</span>,<span class="number">0x08</span>,<span class="number">0x08</span>,<span class="number">0x08</span>,<span class="number">0x88</span>,<span class="number">0x70</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x30</span>,<span class="number">0x28</span>,<span class="number">0x24</span>,<span class="number">0x22</span>,<span class="number">0x21</span>,<span class="number">0x30</span>,<span class="number">0x00</span>&#125;,<span class="comment">//218</span></div><div class="line">    &#123;<span class="number">0x00</span>,<span class="number">0x30</span>,<span class="number">0x08</span>,<span class="number">0x88</span>,<span class="number">0x88</span>,<span class="number">0x48</span>,<span class="number">0x30</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x18</span>,<span class="number">0x20</span>,<span class="number">0x20</span>,<span class="number">0x20</span>,<span class="number">0x11</span>,<span class="number">0x0E</span>,<span class="number">0x00</span>&#125;,<span class="comment">//319</span></div><div class="line">    &#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xC0</span>,<span class="number">0x20</span>,<span class="number">0x10</span>,<span class="number">0xF8</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x07</span>,<span class="number">0x04</span>,<span class="number">0x24</span>,<span class="number">0x24</span>,<span class="number">0x3F</span>,<span class="number">0x24</span>,<span class="number">0x00</span>&#125;,<span class="comment">//420</span></div><div class="line">    &#123;<span class="number">0x00</span>,<span class="number">0xF8</span>,<span class="number">0x08</span>,<span class="number">0x88</span>,<span class="number">0x88</span>,<span class="number">0x08</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x19</span>,<span class="number">0x21</span>,<span class="number">0x20</span>,<span class="number">0x20</span>,<span class="number">0x11</span>,<span class="number">0x0E</span>,<span class="number">0x00</span>&#125;,<span class="comment">//521</span></div><div class="line">    &#123;<span class="number">0x00</span>,<span class="number">0xE0</span>,<span class="number">0x10</span>,<span class="number">0x88</span>,<span class="number">0x88</span>,<span class="number">0x18</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x0F</span>,<span class="number">0x11</span>,<span class="number">0x20</span>,<span class="number">0x20</span>,<span class="number">0x11</span>,<span class="number">0x0E</span>,<span class="number">0x00</span>&#125;,<span class="comment">//622</span></div><div class="line">    &#123;<span class="number">0x00</span>,<span class="number">0x38</span>,<span class="number">0x08</span>,<span class="number">0x08</span>,<span class="number">0xC8</span>,<span class="number">0x38</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x3F</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">//723</span></div><div class="line">    &#123;<span class="number">0x00</span>,<span class="number">0x70</span>,<span class="number">0x88</span>,<span class="number">0x08</span>,<span class="number">0x08</span>,<span class="number">0x88</span>,<span class="number">0x70</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x1C</span>,<span class="number">0x22</span>,<span class="number">0x21</span>,<span class="number">0x21</span>,<span class="number">0x22</span>,<span class="number">0x1C</span>,<span class="number">0x00</span>&#125;,<span class="comment">//824</span></div><div class="line">    &#123;<span class="number">0x00</span>,<span class="number">0xE0</span>,<span class="number">0x10</span>,<span class="number">0x08</span>,<span class="number">0x08</span>,<span class="number">0x10</span>,<span class="number">0xE0</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x31</span>,<span class="number">0x22</span>,<span class="number">0x22</span>,<span class="number">0x11</span>,<span class="number">0x0F</span>,<span class="number">0x00</span>&#125;,<span class="comment">//925</span></div><div class="line">    &#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xC0</span>,<span class="number">0xC0</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x30</span>,<span class="number">0x30</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">//:26</span></div><div class="line">    &#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x80</span>,<span class="number">0x60</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">//;27</span></div><div class="line">    &#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x80</span>,<span class="number">0x40</span>,<span class="number">0x20</span>,<span class="number">0x10</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x02</span>,<span class="number">0x04</span>,<span class="number">0x08</span>,<span class="number">0x10</span>,<span class="number">0x20</span>,<span class="number">0x00</span>&#125;,<span class="comment">//&lt;28</span></div><div class="line">    &#123;<span class="number">0x40</span>,<span class="number">0x40</span>,<span class="number">0x40</span>,<span class="number">0x40</span>,<span class="number">0x40</span>,<span class="number">0x40</span>,<span class="number">0x40</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x04</span>,<span class="number">0x04</span>,<span class="number">0x04</span>,<span class="number">0x04</span>,<span class="number">0x04</span>,<span class="number">0x04</span>,<span class="number">0x00</span>&#125;,<span class="comment">//=29</span></div><div class="line">    &#123;<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x10</span>,<span class="number">0x20</span>,<span class="number">0x40</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x10</span>,<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0x02</span>,<span class="number">0x01</span>,<span class="number">0x00</span>&#125;,<span class="comment">//&gt;30</span></div><div class="line">    &#123;<span class="number">0x00</span>,<span class="number">0x70</span>,<span class="number">0x48</span>,<span class="number">0x08</span>,<span class="number">0x08</span>,<span class="number">0x08</span>,<span class="number">0xF0</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x30</span>,<span class="number">0x36</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">//?31</span></div><div class="line">    &#123;<span class="number">0xC0</span>,<span class="number">0x30</span>,<span class="number">0xC8</span>,<span class="number">0x28</span>,<span class="number">0xE8</span>,<span class="number">0x10</span>,<span class="number">0xE0</span>,<span class="number">0x00</span>,<span class="number">0x07</span>,<span class="number">0x18</span>,<span class="number">0x27</span>,<span class="number">0x24</span>,<span class="number">0x23</span>,<span class="number">0x14</span>,<span class="number">0x0B</span>,<span class="number">0x00</span>&#125;,<span class="comment">//@32</span></div><div class="line">    &#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xC0</span>,<span class="number">0x38</span>,<span class="number">0xE0</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x3C</span>,<span class="number">0x23</span>,<span class="number">0x02</span>,<span class="number">0x02</span>,<span class="number">0x27</span>,<span class="number">0x38</span>,<span class="number">0x20</span>&#125;,<span class="comment">//A33</span></div><div class="line">    &#123;<span class="number">0x08</span>,<span class="number">0xF8</span>,<span class="number">0x88</span>,<span class="number">0x88</span>,<span class="number">0x88</span>,<span class="number">0x70</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x3F</span>,<span class="number">0x20</span>,<span class="number">0x20</span>,<span class="number">0x20</span>,<span class="number">0x11</span>,<span class="number">0x0E</span>,<span class="number">0x00</span>&#125;,<span class="comment">//B34</span></div><div class="line">    &#123;<span class="number">0xC0</span>,<span class="number">0x30</span>,<span class="number">0x08</span>,<span class="number">0x08</span>,<span class="number">0x08</span>,<span class="number">0x08</span>,<span class="number">0x38</span>,<span class="number">0x00</span>,<span class="number">0x07</span>,<span class="number">0x18</span>,<span class="number">0x20</span>,<span class="number">0x20</span>,<span class="number">0x20</span>,<span class="number">0x10</span>,<span class="number">0x08</span>,<span class="number">0x00</span>&#125;,<span class="comment">//C35</span></div><div class="line">    &#123;<span class="number">0x08</span>,<span class="number">0xF8</span>,<span class="number">0x08</span>,<span class="number">0x08</span>,<span class="number">0x08</span>,<span class="number">0x10</span>,<span class="number">0xE0</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x3F</span>,<span class="number">0x20</span>,<span class="number">0x20</span>,<span class="number">0x20</span>,<span class="number">0x10</span>,<span class="number">0x0F</span>,<span class="number">0x00</span>&#125;,<span class="comment">//D36</span></div><div class="line">    &#123;<span class="number">0x08</span>,<span class="number">0xF8</span>,<span class="number">0x88</span>,<span class="number">0x88</span>,<span class="number">0xE8</span>,<span class="number">0x08</span>,<span class="number">0x10</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x3F</span>,<span class="number">0x20</span>,<span class="number">0x20</span>,<span class="number">0x23</span>,<span class="number">0x20</span>,<span class="number">0x18</span>,<span class="number">0x00</span>&#125;,<span class="comment">//E37</span></div><div class="line">    &#123;<span class="number">0x08</span>,<span class="number">0xF8</span>,<span class="number">0x88</span>,<span class="number">0x88</span>,<span class="number">0xE8</span>,<span class="number">0x08</span>,<span class="number">0x10</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x3F</span>,<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x03</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">//F38</span></div><div class="line">    &#123;<span class="number">0xC0</span>,<span class="number">0x30</span>,<span class="number">0x08</span>,<span class="number">0x08</span>,<span class="number">0x08</span>,<span class="number">0x38</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x07</span>,<span class="number">0x18</span>,<span class="number">0x20</span>,<span class="number">0x20</span>,<span class="number">0x22</span>,<span class="number">0x1E</span>,<span class="number">0x02</span>,<span class="number">0x00</span>&#125;,<span class="comment">//G39</span></div><div class="line">    &#123;<span class="number">0x08</span>,<span class="number">0xF8</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0xF8</span>,<span class="number">0x08</span>,<span class="number">0x20</span>,<span class="number">0x3F</span>,<span class="number">0x21</span>,<span class="number">0x01</span>,<span class="number">0x01</span>,<span class="number">0x21</span>,<span class="number">0x3F</span>,<span class="number">0x20</span>&#125;,<span class="comment">//H40</span></div><div class="line">    &#123;<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x08</span>,<span class="number">0xF8</span>,<span class="number">0x08</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x20</span>,<span class="number">0x3F</span>,<span class="number">0x20</span>,<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">//I41</span></div><div class="line">    &#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x08</span>,<span class="number">0xF8</span>,<span class="number">0x08</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0xC0</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x7F</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">//J42</span></div><div class="line">    &#123;<span class="number">0x08</span>,<span class="number">0xF8</span>,<span class="number">0x88</span>,<span class="number">0xC0</span>,<span class="number">0x28</span>,<span class="number">0x18</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x3F</span>,<span class="number">0x20</span>,<span class="number">0x01</span>,<span class="number">0x26</span>,<span class="number">0x38</span>,<span class="number">0x20</span>,<span class="number">0x00</span>&#125;,<span class="comment">//K43</span></div><div class="line">    &#123;<span class="number">0x08</span>,<span class="number">0xF8</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x3F</span>,<span class="number">0x20</span>,<span class="number">0x20</span>,<span class="number">0x20</span>,<span class="number">0x20</span>,<span class="number">0x30</span>,<span class="number">0x00</span>&#125;,<span class="comment">//L44</span></div><div class="line">    &#123;<span class="number">0x08</span>,<span class="number">0xF8</span>,<span class="number">0xF8</span>,<span class="number">0x00</span>,<span class="number">0xF8</span>,<span class="number">0xF8</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x3F</span>,<span class="number">0x00</span>,<span class="number">0x3F</span>,<span class="number">0x00</span>,<span class="number">0x3F</span>,<span class="number">0x20</span>,<span class="number">0x00</span>&#125;,<span class="comment">//M45</span></div><div class="line">    &#123;<span class="number">0x08</span>,<span class="number">0xF8</span>,<span class="number">0x30</span>,<span class="number">0xC0</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0xF8</span>,<span class="number">0x08</span>,<span class="number">0x20</span>,<span class="number">0x3F</span>,<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x07</span>,<span class="number">0x18</span>,<span class="number">0x3F</span>,<span class="number">0x00</span>&#125;,<span class="comment">//N46</span></div><div class="line">    &#123;<span class="number">0xE0</span>,<span class="number">0x10</span>,<span class="number">0x08</span>,<span class="number">0x08</span>,<span class="number">0x08</span>,<span class="number">0x10</span>,<span class="number">0xE0</span>,<span class="number">0x00</span>,<span class="number">0x0F</span>,<span class="number">0x10</span>,<span class="number">0x20</span>,<span class="number">0x20</span>,<span class="number">0x20</span>,<span class="number">0x10</span>,<span class="number">0x0F</span>,<span class="number">0x00</span>&#125;,<span class="comment">//O47</span></div><div class="line">    &#123;<span class="number">0x08</span>,<span class="number">0xF8</span>,<span class="number">0x08</span>,<span class="number">0x08</span>,<span class="number">0x08</span>,<span class="number">0x08</span>,<span class="number">0xF0</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x3F</span>,<span class="number">0x21</span>,<span class="number">0x01</span>,<span class="number">0x01</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">//P48</span></div><div class="line">    &#123;<span class="number">0xE0</span>,<span class="number">0x10</span>,<span class="number">0x08</span>,<span class="number">0x08</span>,<span class="number">0x08</span>,<span class="number">0x10</span>,<span class="number">0xE0</span>,<span class="number">0x00</span>,<span class="number">0x0F</span>,<span class="number">0x18</span>,<span class="number">0x24</span>,<span class="number">0x24</span>,<span class="number">0x38</span>,<span class="number">0x50</span>,<span class="number">0x4F</span>,<span class="number">0x00</span>&#125;,<span class="comment">//Q49</span></div><div class="line">    &#123;<span class="number">0x08</span>,<span class="number">0xF8</span>,<span class="number">0x88</span>,<span class="number">0x88</span>,<span class="number">0x88</span>,<span class="number">0x88</span>,<span class="number">0x70</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x3F</span>,<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x03</span>,<span class="number">0x0C</span>,<span class="number">0x30</span>,<span class="number">0x20</span>&#125;,<span class="comment">//R50</span></div><div class="line">    &#123;<span class="number">0x00</span>,<span class="number">0x70</span>,<span class="number">0x88</span>,<span class="number">0x08</span>,<span class="number">0x08</span>,<span class="number">0x08</span>,<span class="number">0x38</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x38</span>,<span class="number">0x20</span>,<span class="number">0x21</span>,<span class="number">0x21</span>,<span class="number">0x22</span>,<span class="number">0x1C</span>,<span class="number">0x00</span>&#125;,<span class="comment">//S51</span></div><div class="line">    &#123;<span class="number">0x18</span>,<span class="number">0x08</span>,<span class="number">0x08</span>,<span class="number">0xF8</span>,<span class="number">0x08</span>,<span class="number">0x08</span>,<span class="number">0x18</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x3F</span>,<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">//T52</span></div><div class="line">    &#123;<span class="number">0x08</span>,<span class="number">0xF8</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0xF8</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x1F</span>,<span class="number">0x20</span>,<span class="number">0x20</span>,<span class="number">0x20</span>,<span class="number">0x20</span>,<span class="number">0x1F</span>,<span class="number">0x00</span>&#125;,<span class="comment">//U53</span></div><div class="line">    &#123;<span class="number">0x08</span>,<span class="number">0x78</span>,<span class="number">0x88</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xC8</span>,<span class="number">0x38</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x07</span>,<span class="number">0x38</span>,<span class="number">0x0E</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">//V54</span></div><div class="line">    &#123;<span class="number">0xF8</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0xF8</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0xF8</span>,<span class="number">0x00</span>,<span class="number">0x03</span>,<span class="number">0x3C</span>,<span class="number">0x07</span>,<span class="number">0x00</span>,<span class="number">0x07</span>,<span class="number">0x3C</span>,<span class="number">0x03</span>,<span class="number">0x00</span>&#125;,<span class="comment">//W55</span></div><div class="line">    &#123;<span class="number">0x08</span>,<span class="number">0x18</span>,<span class="number">0x68</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x68</span>,<span class="number">0x18</span>,<span class="number">0x08</span>,<span class="number">0x20</span>,<span class="number">0x30</span>,<span class="number">0x2C</span>,<span class="number">0x03</span>,<span class="number">0x03</span>,<span class="number">0x2C</span>,<span class="number">0x30</span>,<span class="number">0x20</span>&#125;,<span class="comment">//X56</span></div><div class="line">    &#123;<span class="number">0x08</span>,<span class="number">0x38</span>,<span class="number">0xC8</span>,<span class="number">0x00</span>,<span class="number">0xC8</span>,<span class="number">0x38</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x3F</span>,<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">//Y57</span></div><div class="line">    &#123;<span class="number">0x10</span>,<span class="number">0x08</span>,<span class="number">0x08</span>,<span class="number">0x08</span>,<span class="number">0xC8</span>,<span class="number">0x38</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x38</span>,<span class="number">0x26</span>,<span class="number">0x21</span>,<span class="number">0x20</span>,<span class="number">0x20</span>,<span class="number">0x18</span>,<span class="number">0x00</span>&#125;,<span class="comment">//Z58</span></div><div class="line">    &#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xFE</span>,<span class="number">0x02</span>,<span class="number">0x02</span>,<span class="number">0x02</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x7F</span>,<span class="number">0x40</span>,<span class="number">0x40</span>,<span class="number">0x40</span>,<span class="number">0x00</span>&#125;,<span class="comment">//[59</span></div><div class="line">    &#123;<span class="number">0x00</span>,<span class="number">0x0C</span>,<span class="number">0x30</span>,<span class="number">0xC0</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x06</span>,<span class="number">0x38</span>,<span class="number">0xC0</span>,<span class="number">0x00</span>&#125;,<span class="comment">//\60</span></div><div class="line">    &#123;<span class="number">0x00</span>,<span class="number">0x02</span>,<span class="number">0x02</span>,<span class="number">0x02</span>,<span class="number">0xFE</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x40</span>,<span class="number">0x40</span>,<span class="number">0x40</span>,<span class="number">0x7F</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">//]61</span></div><div class="line">    &#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x02</span>,<span class="number">0x02</span>,<span class="number">0x02</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">//^62</span></div><div class="line">    &#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>&#125;,<span class="comment">//_63</span></div><div class="line">    &#123;<span class="number">0x00</span>,<span class="number">0x02</span>,<span class="number">0x02</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">//`64</span></div><div class="line">    &#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x19</span>,<span class="number">0x24</span>,<span class="number">0x22</span>,<span class="number">0x22</span>,<span class="number">0x22</span>,<span class="number">0x3F</span>,<span class="number">0x20</span>&#125;,<span class="comment">//a65</span></div><div class="line">    &#123;<span class="number">0x08</span>,<span class="number">0xF8</span>,<span class="number">0x00</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x3F</span>,<span class="number">0x11</span>,<span class="number">0x20</span>,<span class="number">0x20</span>,<span class="number">0x11</span>,<span class="number">0x0E</span>,<span class="number">0x00</span>&#125;,<span class="comment">//b66</span></div><div class="line">    &#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x0E</span>,<span class="number">0x11</span>,<span class="number">0x20</span>,<span class="number">0x20</span>,<span class="number">0x20</span>,<span class="number">0x11</span>,<span class="number">0x00</span>&#125;,<span class="comment">//c67</span></div><div class="line">    &#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x88</span>,<span class="number">0xF8</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x0E</span>,<span class="number">0x11</span>,<span class="number">0x20</span>,<span class="number">0x20</span>,<span class="number">0x10</span>,<span class="number">0x3F</span>,<span class="number">0x20</span>&#125;,<span class="comment">//d68</span></div><div class="line">    &#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x1F</span>,<span class="number">0x22</span>,<span class="number">0x22</span>,<span class="number">0x22</span>,<span class="number">0x22</span>,<span class="number">0x13</span>,<span class="number">0x00</span>&#125;,<span class="comment">//e69</span></div><div class="line">    &#123;<span class="number">0x00</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0xF0</span>,<span class="number">0x88</span>,<span class="number">0x88</span>,<span class="number">0x88</span>,<span class="number">0x18</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x20</span>,<span class="number">0x3F</span>,<span class="number">0x20</span>,<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">//f70</span></div><div class="line">    &#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x6B</span>,<span class="number">0x94</span>,<span class="number">0x94</span>,<span class="number">0x94</span>,<span class="number">0x93</span>,<span class="number">0x60</span>,<span class="number">0x00</span>&#125;,<span class="comment">//g71</span></div><div class="line">    &#123;<span class="number">0x08</span>,<span class="number">0xF8</span>,<span class="number">0x00</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x3F</span>,<span class="number">0x21</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x3F</span>,<span class="number">0x20</span>&#125;,<span class="comment">//h72</span></div><div class="line">    &#123;<span class="number">0x00</span>,<span class="number">0x80</span>,<span class="number">0x98</span>,<span class="number">0x98</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x20</span>,<span class="number">0x3F</span>,<span class="number">0x20</span>,<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">//i73</span></div><div class="line">    &#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x80</span>,<span class="number">0x98</span>,<span class="number">0x98</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xC0</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x7F</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">//j74</span></div><div class="line">    &#123;<span class="number">0x08</span>,<span class="number">0xF8</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x3F</span>,<span class="number">0x24</span>,<span class="number">0x02</span>,<span class="number">0x2D</span>,<span class="number">0x30</span>,<span class="number">0x20</span>,<span class="number">0x00</span>&#125;,<span class="comment">//k75</span></div><div class="line">    &#123;<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x08</span>,<span class="number">0xF8</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x20</span>,<span class="number">0x3F</span>,<span class="number">0x20</span>,<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">//l76</span></div><div class="line">    &#123;<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x3F</span>,<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x3F</span>,<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x3F</span>&#125;,<span class="comment">//m77</span></div><div class="line">    &#123;<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x3F</span>,<span class="number">0x21</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x3F</span>,<span class="number">0x20</span>&#125;,<span class="comment">//n78</span></div><div class="line">    &#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x1F</span>,<span class="number">0x20</span>,<span class="number">0x20</span>,<span class="number">0x20</span>,<span class="number">0x20</span>,<span class="number">0x1F</span>,<span class="number">0x00</span>&#125;,<span class="comment">//o79</span></div><div class="line">    &#123;<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x80</span>,<span class="number">0xFF</span>,<span class="number">0xA1</span>,<span class="number">0x20</span>,<span class="number">0x20</span>,<span class="number">0x11</span>,<span class="number">0x0E</span>,<span class="number">0x00</span>&#125;,<span class="comment">//p80</span></div><div class="line">    &#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x0E</span>,<span class="number">0x11</span>,<span class="number">0x20</span>,<span class="number">0x20</span>,<span class="number">0xA0</span>,<span class="number">0xFF</span>,<span class="number">0x80</span>&#125;,<span class="comment">//q81</span></div><div class="line">    &#123;<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x20</span>,<span class="number">0x3F</span>,<span class="number">0x21</span>,<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x00</span>&#125;,<span class="comment">//r82</span></div><div class="line">    &#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x33</span>,<span class="number">0x24</span>,<span class="number">0x24</span>,<span class="number">0x24</span>,<span class="number">0x24</span>,<span class="number">0x19</span>,<span class="number">0x00</span>&#125;,<span class="comment">//s83</span></div><div class="line">    &#123;<span class="number">0x00</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0xE0</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x1F</span>,<span class="number">0x20</span>,<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">//t84</span></div><div class="line">    &#123;<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x1F</span>,<span class="number">0x20</span>,<span class="number">0x20</span>,<span class="number">0x20</span>,<span class="number">0x10</span>,<span class="number">0x3F</span>,<span class="number">0x20</span>&#125;,<span class="comment">//u85</span></div><div class="line">    &#123;<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x0E</span>,<span class="number">0x30</span>,<span class="number">0x08</span>,<span class="number">0x06</span>,<span class="number">0x01</span>,<span class="number">0x00</span>&#125;,<span class="comment">//v86</span></div><div class="line">    &#123;<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x0F</span>,<span class="number">0x30</span>,<span class="number">0x0C</span>,<span class="number">0x03</span>,<span class="number">0x0C</span>,<span class="number">0x30</span>,<span class="number">0x0F</span>,<span class="number">0x00</span>&#125;,<span class="comment">//w87</span></div><div class="line">    &#123;<span class="number">0x00</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x31</span>,<span class="number">0x2E</span>,<span class="number">0x0E</span>,<span class="number">0x31</span>,<span class="number">0x20</span>,<span class="number">0x00</span>&#125;,<span class="comment">//x88</span></div><div class="line">    &#123;<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x81</span>,<span class="number">0x8E</span>,<span class="number">0x70</span>,<span class="number">0x18</span>,<span class="number">0x06</span>,<span class="number">0x01</span>,<span class="number">0x00</span>&#125;,<span class="comment">//y89</span></div><div class="line">    &#123;<span class="number">0x00</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x21</span>,<span class="number">0x30</span>,<span class="number">0x2C</span>,<span class="number">0x22</span>,<span class="number">0x21</span>,<span class="number">0x30</span>,<span class="number">0x00</span>&#125;,<span class="comment">//z90</span></div><div class="line">    &#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x80</span>,<span class="number">0x7C</span>,<span class="number">0x02</span>,<span class="number">0x02</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x3F</span>,<span class="number">0x40</span>,<span class="number">0x40</span>&#125;,<span class="comment">//&#123;91</span></div><div class="line">    &#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xFF</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xFF</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">//|92</span></div><div class="line">    &#123;<span class="number">0x00</span>,<span class="number">0x02</span>,<span class="number">0x02</span>,<span class="number">0x7C</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x40</span>,<span class="number">0x40</span>,<span class="number">0x3F</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">//&#125;93</span></div><div class="line">    &#123;<span class="number">0x00</span>,<span class="number">0x06</span>,<span class="number">0x01</span>,<span class="number">0x01</span>,<span class="number">0x02</span>,<span class="number">0x02</span>,<span class="number">0x04</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">//~94</span></div><div class="line">&#125;; </div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/* page: 0-7</span></div><div class="line"> * col : 0-127</div><div class="line"> * 字符: 8x16象素</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLEDPutChar</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">int</span> page, <span class="keyword">int</span> col, <span class="keyword">char</span> c)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">    <span class="comment">/* 得到字模 */</span></div><div class="line">    <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> *dots = oled_asc2_8x16[c - <span class="string">' '</span>];</div><div class="line"></div><div class="line">    <span class="comment">/* 发给OLED */</span></div><div class="line">    <span class="comment">//OLEDSetPos(page, col);</span></div><div class="line">    <span class="comment">//ioctl(fd, OLED_CMD_CLEAR_PAGE, page);</span></div><div class="line">    ioctl(fd, OLED_CMD_SET_POS, page | (col &lt;&lt; <span class="number">8</span>));</div><div class="line">    <span class="comment">/* 发出8字节数据 */</span></div><div class="line">    <span class="comment">//for (i = 0; i &lt; 8; i++)</span></div><div class="line">    <span class="comment">//    OLEDWriteDat(dots[i]);</span></div><div class="line">    write(fd, &amp;dots[<span class="number">0</span>], <span class="number">8</span>);</div><div class="line"></div><div class="line">    <span class="comment">//OLEDSetPos(page+1, col);</span></div><div class="line">    <span class="comment">//ioctl(fd, OLED_CMD_CLEAR_PAGE, page+1);</span></div><div class="line">    ioctl(fd, OLED_CMD_SET_POS, (page+<span class="number">1</span>) | (col &lt;&lt; <span class="number">8</span>));</div><div class="line">    <span class="comment">/* 发出8字节数据 */</span></div><div class="line">    <span class="comment">//for (i = 0; i &lt; 8; i++)</span></div><div class="line">    <span class="comment">//    OLEDWriteDat(dots[i+8]);</span></div><div class="line">    write(fd, &amp;dots[<span class="number">8</span>], <span class="number">8</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/* page: 0-7</span></div><div class="line"> * col : 0-127</div><div class="line"> * 字符: 8x16象素</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLEDPrint</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">int</span> page, <span class="keyword">int</span> col, <span class="keyword">char</span> *str)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line"></div><div class="line">    ioctl(fd, OLED_CMD_CLEAR_PAGE, page);</div><div class="line">    ioctl(fd, OLED_CMD_CLEAR_PAGE, page+<span class="number">1</span>);</div><div class="line">    <span class="keyword">while</span> (str[i])</div><div class="line">    &#123;</div><div class="line">        OLEDPutChar(fd, page, col, str[i]);</div><div class="line">        col += <span class="number">8</span>;</div><div class="line">        <span class="keyword">if</span> (col &gt; <span class="number">127</span>)</div><div class="line">        &#123;</div><div class="line">            col = <span class="number">0</span>;</div><div class="line">            page += <span class="number">2</span>;</div><div class="line">            ioctl(fd, OLED_CMD_CLEAR_PAGE, page);</div><div class="line">            ioctl(fd, OLED_CMD_CLEAR_PAGE, page+<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        i++;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_usage</span><span class="params">(<span class="keyword">char</span> *cmd)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Usage:\n"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s init\n"</span>, cmd);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s clear\n"</span>, cmd);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s clear &lt;page&gt;\n"</span>, cmd);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s &lt;page&gt; &lt;col&gt; &lt;string&gt;\n"</span>, cmd);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"eg:\n"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s 2 0 100ask.taobao.com\n"</span>, cmd);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"page is 0,1,...,7\n"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"col is 0,1,...,127\n"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> do_init  = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> do_clear = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> do_show  = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> page = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">int</span> col;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> fd;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (argc == <span class="number">2</span> &amp;&amp; !<span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">"init"</span>))</div><div class="line">        do_init = <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> ((argc == <span class="number">2</span>) &amp;&amp; !<span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">"clear"</span>))</div><div class="line">    &#123;</div><div class="line">        do_clear = <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> ((argc == <span class="number">3</span>) &amp;&amp; !<span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">"clear"</span>))</div><div class="line">    &#123;</div><div class="line">        do_clear = <span class="number">1</span>;</div><div class="line">        page = strtoul(argv[<span class="number">2</span>], <span class="literal">NULL</span>, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (argc == <span class="number">4</span>)</div><div class="line">    &#123;</div><div class="line">        do_show = <span class="number">1</span>;</div><div class="line">        page = strtoul(argv[<span class="number">1</span>], <span class="literal">NULL</span>, <span class="number">0</span>);</div><div class="line">        col = strtoul(argv[<span class="number">2</span>], <span class="literal">NULL</span>, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (!do_init &amp;&amp; !do_clear &amp;&amp; !do_show)</div><div class="line">    &#123;</div><div class="line">        print_usage(argv[<span class="number">0</span>]);</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    fd = open(<span class="string">"/dev/ssd1306"</span>, O_RDWR);</div><div class="line">    <span class="keyword">if</span> (fd &lt; <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"can't open /dev/ssd1306\n"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (do_init)</div><div class="line">        ioctl(fd, OLED_CMD_INIT);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (do_clear)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (page == <span class="number">-1</span>)</div><div class="line">            ioctl(fd, OLED_CMD_CLEAR_ALL);</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> (page &lt; <span class="number">0</span> || page &gt; <span class="number">7</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"page is 0,1,...,7\n"</span>);</div><div class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">            &#125;</div><div class="line">            ioctl(fd, OLED_CMD_CLEAR_PAGE, page);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (do_show)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (page &lt; <span class="number">0</span> || page &gt; <span class="number">7</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"page is 0,1,...,7\n"</span>);</div><div class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (col &lt; <span class="number">0</span> || col &gt; <span class="number">127</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"col is 0,1,...,127\n"</span>);</div><div class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        OLEDPrint(fd, page, col, argv[<span class="number">3</span>]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="4-SPI设备——w25q16dv"><a href="#4-SPI设备——w25q16dv" class="headerlink" title="4. SPI设备——w25q16dv"></a>4. SPI设备——w25q16dv</h1><p><a href="https://www.winbond.com/resource-files/w25q16dv_revi_nov1714_web.pdf" target="_blank" rel="external">w25q16dv</a>是一个2M大小的Flash。</p><p>在写驱动之前，需要了解下这几个知识点：</p><ul><li><p><strong>1.<code>w25q16dv</code>的<code>Byte</code>、<code>Page</code>、<code>Sector</code>、<code>Block</code>之间的关系</strong><br><code>Byte</code>(字节)由8个<code>bits</code>(位)组成，是数据的最小存储单位，1024个<code>Byte</code>就是我们常见的1KB；<br><code>Page</code>(页)由256个<code>Byte</code>组成，<code>w25q16dv</code>每次SPI写操作只能是1~256个字节，因此遇到大数据传输时，需要分页写；<br><code>Sector</code>(扇区)由16个<code>Byte</code>组成，也是4K大小，<code>w25q16dv</code>每次SPI擦除操作就是以<code>Sector</code>为最小单位；<br><code>Block</code>(块)由16个<code>Sector</code>组成，为64K大小；<br>它们之间大小关系如下：<br><div align="center"><img width="400" src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/190101/2.jpg"></div><br>另外，Flash的硬件决定了，每个<code>bits</code>只能从1变为0，不能0变成1，因此每次写之前需要先擦除为<code>0xFF</code>，再写入数据。</p></li><li><p><strong>2.DMA与SPI的关系</strong><br>AM335X的SPI控制器的源码里，会根据SPI一次传输的数据长短来决定是否启用DMA传输。<br>当一次传输的数据长度小于<code>DMA_MIN_BYTES</code>，则不会启用DMA，CPU会先读取RAM中的数据，再写到SPI控制器的<code>TX_BUF</code>寄存器里面，如下图路线①；<br>当一次传输的数据长度大于<code>DMA_MIN_BYTES</code>，则会启用DMA，CPU设置好DMA后，DMA自动从RAM搬运数据到SPI控制器的<code>TX_BUF</code>寄存器里面，如下图路线②；</p><div align="center"><img width="500" src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/190101/3.jpg"></div></li><li><p><strong>3.函数调用关系分析</strong><br>在应用层写操作<code>w25q16dv</code>时，会调用到<code>w25q16dv_drv.c</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">w25q16dv_write();</div><div class="line">    spi_flash_program();</div><div class="line">        spi_sync();</div></pre></td></tr></table></figure></li></ul><p>再调用到<code>drivers/spi/spi.c</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">__spi_sync();</div><div class="line">    __spi_pump_messages();</div><div class="line">        master-&gt;transfer_one_message(master, master-&gt;cur_msg);</div></pre></td></tr></table></figure></p><p>再调用到<code>drivers/spi/spi-omap2-mcspi.c</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">omap2_mcspi_transfer_one_message();</div><div class="line">    dma_map_single(); //根据长度是否映射DMA</div><div class="line">    omap2_mcspi_work();</div><div class="line">        omap2_mcspi_txrx_dma(); //使用DMA传输</div><div class="line">        或</div><div class="line">        omap2_mcspi_txrx_pio(); //使用PIO传输</div></pre></td></tr></table></figure></p><h2 id="4-1-设备树"><a href="#4-1-设备树" class="headerlink" title="4.1 设备树"></a>4.1 设备树</h2><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* SPI Busses */</span></div><div class="line"><span class="variable">&amp;spi1</span> &#123;</div><div class="line">    status = <span class="string">"okay"</span>;</div><div class="line">    pinctrl-names = <span class="string">"default"</span>;</div><div class="line">    pinctrl<span class="number">-0</span> = <span class="params">&lt;<span class="variable">&amp;spi1_pins</span>&gt;</span>;</div><div class="line">    </div><div class="line">    ti,pindir-d0-out-d1-in;</div><div class="line">    ti,spi-num-cs = <span class="params">&lt;<span class="number">4</span>&gt;</span>; </div><div class="line">    cs-gpios = <span class="params">&lt;<span class="number">0</span>&gt;</span>, <span class="params">&lt;<span class="number">0</span>&gt;</span>, <span class="params">&lt;<span class="variable">&amp;gpio0</span> <span class="number">13</span> <span class="number">0</span>&gt;</span>, <span class="params">&lt;<span class="variable">&amp;gpio0</span> <span class="number">14</span> <span class="number">0</span>&gt;</span>;</div><div class="line">    </div><div class="line">    <span class="class">spidev@0 </span>&#123;</div><div class="line">        compatible = <span class="string">"rohm,dh2228fv"</span>;</div><div class="line">        spi-max-frequency = <span class="params">&lt;<span class="number">25000000</span>&gt;</span>;</div><div class="line">        reg = <span class="params">&lt;<span class="number">0</span>&gt;</span>;</div><div class="line">        </div><div class="line">        <span class="comment">/* spi-cpha; sets CPHA=1, default is CPHA=0 */</span></div><div class="line">        <span class="comment">/* spi-cpol; sets CPOL=1, default is CPOL=0 */</span></div><div class="line">        <span class="comment">/* spi-cs-high; default is spi cs low */</span></div><div class="line">    &#125;;</div><div class="line">    </div><div class="line">    <span class="class">spidev@1 </span>&#123;</div><div class="line">        compatible = <span class="string">"ti,tlc5615"</span>; </div><div class="line">        spi-max-frequency = <span class="params">&lt;<span class="number">25000000</span>&gt;</span>;</div><div class="line">        reg = <span class="params">&lt;<span class="number">1</span>&gt;</span>;</div><div class="line">    &#125;;</div><div class="line">    </div><div class="line">    <span class="class">spidev@2 </span>&#123;</div><div class="line">        compatible = <span class="string">"solomon,ssd1306fb-spi"</span>; <span class="comment">//OLED</span></div><div class="line">        spi-max-frequency = <span class="params">&lt;<span class="number">25000000</span>&gt;</span>;</div><div class="line">        reg = <span class="params">&lt;<span class="number">2</span>&gt;</span>;</div><div class="line">        dc-gpio = <span class="params">&lt;<span class="variable">&amp;gpio0</span> <span class="number">12</span> <span class="number">0</span>&gt;</span>;</div><div class="line">        pinctrl<span class="number">-0</span> = <span class="params">&lt;<span class="variable">&amp;oled_dc_pin</span>&gt;</span>;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="class">spidev@3 </span>&#123;               </div><div class="line">        spi-max-frequency = <span class="params">&lt;<span class="number">20000000</span>&gt;</span>;</div><div class="line">        reg = <span class="params">&lt;<span class="number">3</span>&gt;</span>;</div><div class="line">        compatible = <span class="string">"winbond,w25q16dv"</span>;</div><div class="line">    &#125;;</div><div class="line">    </div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="variable">&amp;am33xx_pinmux</span> &#123;</div><div class="line"><span class="symbol">    spi1_pins:</span> <span class="class">pinmux_spi1 </span>&#123;</div><div class="line">        pinctrl-single,pins = <span class="params">&lt;</span></div><div class="line">            <span class="number">0x190</span> (PIN_INPUT_PULLUP | MUX_MODE3) /* spi1_sclk */</div><div class="line">            <span class="number">0x194</span> (PIN_INPUT_PULLUP | MUX_MODE3) /* spi1_d0   */</div><div class="line">            <span class="number">0x198</span> (PIN_INPUT_PULLUP | MUX_MODE3) /* spi1_d1   */</div><div class="line">            <span class="number">0x19c</span> (PIN_INPUT_PULLUP | MUX_MODE3) /* spi1_cs0  */</div><div class="line">        &gt;;</div><div class="line">    &#125;;</div><div class="line"><span class="symbol">    </span></div><div class="line">    oled_dc_pin: <span class="class">oled_dc_pin0 </span>&#123;</div><div class="line">        pinctrl-single,pins = <span class="params">&lt;</span></div><div class="line">            <span class="number">0x178</span> (PIN_INPUT_PULLDOWN | MUX_MODE7)  /* conf_uart1_ctsn.gpio0_12 */</div><div class="line">        &gt;;</div><div class="line">    &#125;;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h2 id="4-2-程序驱动"><a href="#4-2-程序驱动" class="headerlink" title="4.2 程序驱动"></a>4.2 程序驱动</h2><figure class="highlight c"><figcaption><span>[w25q16dv_drv.c]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/fs.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/delay.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/uaccess.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/io.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/of.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/of_device.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/of_platform.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/platform_device.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/slab.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/cdev.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/spi/spi.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/mtd/cfi.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/mtd/mtd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/mtd/partitions.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> spi_device *spi_w25q16dv_dev;</div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> mtd_info flash_w25q16dv_dev;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">spi_flash_read_ID</span><span class="params">(<span class="keyword">int</span> *pMID, <span class="keyword">int</span> *pDID)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> tx_buf[<span class="number">4</span>];</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> rx_buf[<span class="number">2</span>];</div><div class="line">    </div><div class="line">    tx_buf[<span class="number">0</span>] = <span class="number">0x90</span>;</div><div class="line">    tx_buf[<span class="number">1</span>] = <span class="number">0</span>;</div><div class="line">    tx_buf[<span class="number">2</span>] = <span class="number">0</span>;</div><div class="line">    tx_buf[<span class="number">3</span>] = <span class="number">0</span>;</div><div class="line"></div><div class="line">    spi_write_then_read(spi_w25q16dv_dev, tx_buf, <span class="number">4</span>, rx_buf, <span class="number">2</span>);</div><div class="line"></div><div class="line">    *pMID = rx_buf[<span class="number">0</span>];</div><div class="line">    *pDID = rx_buf[<span class="number">1</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">spi_flash_write_eable</span><span class="params">(<span class="keyword">int</span> enable)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> val = enable ? <span class="number">0x06</span> : <span class="number">0x04</span>;</div><div class="line">    spi_write(spi_w25q16dv_dev, &amp;val, <span class="number">1</span>);    </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> <span class="title">spi_flash_read_status_reg1</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> val;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> cmd = <span class="number">0x05</span>;</div><div class="line"></div><div class="line">    spi_write_then_read(spi_w25q16dv_dev, &amp;cmd, <span class="number">1</span>, &amp;val, <span class="number">1</span>);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> val;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> <span class="title">spi_flash_read_status_reg2</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> val;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> cmd = <span class="number">0x35</span>;</div><div class="line"></div><div class="line">    spi_write_then_read(spi_w25q16dv_dev, &amp;cmd, <span class="number">1</span>, &amp;val, <span class="number">1</span>);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> val;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">spi_flash_wait_when_busy</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span> (spi_flash_read_status_reg1() &amp; <span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="comment">/* Sector erase time : 60ms</span></div><div class="line">         * Page program time : 0.7ms</div><div class="line">         * Write status reg time : 10ms</div><div class="line">         */</div><div class="line">        set_current_state(TASK_INTERRUPTIBLE); <span class="comment">//Sleep for a while </span></div><div class="line">        schedule_timeout(HZ/<span class="number">100</span>); <span class="comment">//Judging again after sleeping 10MS(1s=1HZ)</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">spi_flash_write_status_reg</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> reg1, <span class="keyword">unsigned</span> <span class="keyword">char</span> reg2)</span></span></div><div class="line">&#123;    </div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> tx_buf[<span class="number">3</span>];</div><div class="line"></div><div class="line">    spi_flash_write_eable(<span class="number">1</span>);  </div><div class="line">    </div><div class="line">    tx_buf[<span class="number">0</span>] = <span class="number">0x01</span>;</div><div class="line">    tx_buf[<span class="number">1</span>] = reg1;</div><div class="line">    tx_buf[<span class="number">2</span>] = reg2;</div><div class="line"></div><div class="line">    spi_write(spi_w25q16dv_dev, tx_buf, <span class="number">3</span>);   </div><div class="line"></div><div class="line">    spi_flash_wait_when_busy();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">spi_flash_clear_protect_for_status_reg</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> reg1, reg2;</div><div class="line"></div><div class="line">    reg1 = spi_flash_read_status_reg1();</div><div class="line">    reg2 = spi_flash_read_status_reg2();</div><div class="line"></div><div class="line">    reg1 &amp;= ~(<span class="number">1</span>&lt;&lt;<span class="number">7</span>);</div><div class="line">    reg2 &amp;= ~(<span class="number">1</span>&lt;&lt;<span class="number">0</span>);</div><div class="line"></div><div class="line">    spi_flash_write_status_reg(reg1, reg2);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">spi_flash_clear_protect_for_data</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">/* cmp=0,bp2,1,0=0b000 */</span></div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> reg1, reg2;</div><div class="line"></div><div class="line">    reg1 = spi_flash_read_status_reg1();</div><div class="line">    reg2 = spi_flash_read_status_reg2();</div><div class="line"></div><div class="line">    reg1 &amp;= ~(<span class="number">7</span>&lt;&lt;<span class="number">2</span>);</div><div class="line">    reg2 &amp;= ~(<span class="number">1</span>&lt;&lt;<span class="number">6</span>);</div><div class="line"></div><div class="line">    spi_flash_write_status_reg(reg1, reg2);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* erase 4K */</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">spi_flash_erase_sector</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> addr)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> tx_buf[<span class="number">4</span>];</div><div class="line">    tx_buf[<span class="number">0</span>] = <span class="number">0x20</span>;</div><div class="line">    tx_buf[<span class="number">1</span>] = addr &gt;&gt; <span class="number">16</span>;</div><div class="line">    tx_buf[<span class="number">2</span>] = addr &gt;&gt; <span class="number">8</span>;</div><div class="line">    tx_buf[<span class="number">3</span>] = addr &amp; <span class="number">0xff</span>;</div><div class="line"></div><div class="line">    spi_flash_write_eable(<span class="number">1</span>);  </div><div class="line"></div><div class="line">    spi_write(spi_w25q16dv_dev, tx_buf, <span class="number">4</span>);</div><div class="line"></div><div class="line">    spi_flash_wait_when_busy();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* program */</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">spi_flash_program</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> addr, <span class="keyword">unsigned</span> <span class="keyword">char</span> *buf, <span class="keyword">int</span> len)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> ret;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> tx_buf[<span class="number">4</span>];   </div><div class="line">    <span class="keyword">struct</span> spi_transfer t[] = &#123;</div><div class="line">            &#123;</div><div class="line">                .tx_buf     = tx_buf,</div><div class="line">                .len        = <span class="number">4</span>,</div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                .tx_buf     = buf,</div><div class="line">                .len        = len,</div><div class="line">            &#125;,</div><div class="line">        &#125;;</div><div class="line">    <span class="keyword">struct</span> spi_message  m;</div><div class="line"></div><div class="line">    tx_buf[<span class="number">0</span>] = <span class="number">0x02</span>;</div><div class="line">    tx_buf[<span class="number">1</span>] = addr &gt;&gt; <span class="number">16</span>;</div><div class="line">    tx_buf[<span class="number">2</span>] = addr &gt;&gt; <span class="number">8</span>;</div><div class="line">    tx_buf[<span class="number">3</span>] = addr &amp; <span class="number">0xff</span>;</div><div class="line"></div><div class="line"></div><div class="line">    spi_flash_write_eable(<span class="number">1</span>);  </div><div class="line"></div><div class="line">    spi_message_init(&amp;m);</div><div class="line">    spi_message_add_tail(&amp;t[<span class="number">0</span>], &amp;m);</div><div class="line">    spi_message_add_tail(&amp;t[<span class="number">1</span>], &amp;m);</div><div class="line">    ret = spi_sync(spi_w25q16dv_dev, &amp;m);</div><div class="line">    <span class="keyword">if</span> (ret)</div><div class="line">    &#123;</div><div class="line">        printk(<span class="string">"spi_flash_program spi_syn err : %d\n"</span>, ret);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    spi_flash_wait_when_busy();    </div><div class="line">    </div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">spi_flash_read</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> addr, <span class="keyword">unsigned</span> <span class="keyword">char</span> *buf, <span class="keyword">int</span> len)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> tx_buf[<span class="number">4</span>];   </div><div class="line">    <span class="keyword">struct</span> spi_transfer t[] = &#123;</div><div class="line">            &#123;</div><div class="line">                .tx_buf     = tx_buf,</div><div class="line">                .len        = <span class="number">4</span>,</div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                .rx_buf     = buf,</div><div class="line">                .len        = len,</div><div class="line">            &#125;,</div><div class="line">        &#125;;</div><div class="line">    <span class="keyword">struct</span> spi_message  m;</div><div class="line"></div><div class="line">    tx_buf[<span class="number">0</span>] = <span class="number">0x03</span>;</div><div class="line">    tx_buf[<span class="number">1</span>] = addr &gt;&gt; <span class="number">16</span>;</div><div class="line">    tx_buf[<span class="number">2</span>] = addr &gt;&gt; <span class="number">8</span>;</div><div class="line">    tx_buf[<span class="number">3</span>] = addr &amp; <span class="number">0xff</span>;</div><div class="line"></div><div class="line">    spi_message_init(&amp;m);</div><div class="line">    spi_message_add_tail(&amp;t[<span class="number">0</span>], &amp;m);</div><div class="line">    spi_message_add_tail(&amp;t[<span class="number">1</span>], &amp;m);</div><div class="line">    spi_sync(spi_w25q16dv_dev, &amp;m); </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">spi_flash_init</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    spi_flash_clear_protect_for_status_reg();</div><div class="line">    spi_flash_clear_protect_for_data();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">w25q16dv_erase</span><span class="params">(<span class="keyword">struct</span> mtd_info *mtd, <span class="keyword">struct</span> erase_info *instr)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> addr = instr-&gt;addr;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> len  = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="comment">//Judgment parameter</span></div><div class="line">    <span class="keyword">if</span> ((addr &amp; (flash_w25q16dv_dev.erasesize - <span class="number">1</span>)) || (instr-&gt;len &amp; (flash_w25q16dv_dev.erasesize - <span class="number">1</span>)))</div><div class="line">    &#123;</div><div class="line">        printk(<span class="string">"w25q16dv_erase:addr/len is not aligned\n"</span>);</div><div class="line">        <span class="keyword">return</span> -EINVAL;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (len = <span class="number">0</span>; len &lt; instr-&gt;len; len += <span class="number">4096</span>)</div><div class="line">    &#123;</div><div class="line">        spi_flash_erase_sector(addr);</div><div class="line">        addr += <span class="number">4096</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    instr-&gt;state = MTD_ERASE_DONE;</div><div class="line">    mtd_erase_callback(instr);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> NUM  256</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span>  <span class="title">w25q16dv_read</span><span class="params">(<span class="keyword">struct</span> mtd_info *mtd, <span class="keyword">loff_t</span> from, <span class="keyword">size_t</span> len, <span class="keyword">size_t</span> *retlen, u_char *buf)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">int</span> left = len;</div><div class="line">    <span class="keyword">int</span> rlen;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></div><div class="line">    spi_flash_read(from, buf, len);</div><div class="line"><span class="meta">#<span class="meta-keyword">else</span>   </span></div><div class="line">    <span class="keyword">while</span> (left &gt; <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (left &lt;= NUM)</div><div class="line">            rlen = left;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            rlen = NUM;</div><div class="line">        spi_flash_read(from, buf, rlen);</div><div class="line">        from += rlen;</div><div class="line">        buf += rlen;</div><div class="line">        left -= rlen;</div><div class="line">    &#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    *retlen = len;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">w25q16dv_write</span><span class="params">(<span class="keyword">struct</span> mtd_info *mtd, <span class="keyword">loff_t</span> to, <span class="keyword">size_t</span> len, <span class="keyword">size_t</span> *retlen, <span class="keyword">const</span> u_char *buf)</span></span></div><div class="line">&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></div><div class="line">    <span class="keyword">int</span> data_addr = to;</div><div class="line">    <span class="keyword">int</span> data_len = len;</div><div class="line">    <span class="keyword">int</span> i=<span class="number">0</span>, left_len=<span class="number">0</span>, right_len=<span class="number">0</span>, page_num=<span class="number">0</span>;</div><div class="line">    </div><div class="line"></div><div class="line"></div><div class="line">    printk(<span class="string">"data_addr=0x%02x, data_len=0x%x\n"</span>, data_addr, data_len);</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">16</span> &amp;&amp; i &lt; data_len; i++)</div><div class="line">    &#123;</div><div class="line">        printk(<span class="string">"%02x "</span>, buf[i]);</div><div class="line">    &#125;</div><div class="line">    printk(<span class="string">"\n"</span>);</div><div class="line">           </div><div class="line">    <span class="keyword">if</span> (data_addr%NUM + data_len &lt;= NUM)</div><div class="line">    &#123;</div><div class="line">        spi_flash_program(data_addr, (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)buf, data_len); </div><div class="line">    &#125;</div><div class="line">        </div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        left_len = NUM - (data_addr%NUM);</div><div class="line">        page_num = (data_len - left_len) / NUM;</div><div class="line">        right_len = len - page_num*NUM - left_len;</div><div class="line"></div><div class="line">        spi_flash_program(data_addr, (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)buf, left_len); </div><div class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;page_num; i++)</div><div class="line">            spi_flash_program(data_addr+NUM*i+left_len, (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)(buf+NUM*i+left_len), NUM);    </div><div class="line">        spi_flash_program(data_addr+NUM*i+left_len, (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)(buf+NUM*i+left_len), right_len);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    *retlen = data_len;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line"></div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> addr = to;</div><div class="line">    <span class="keyword">int</span> unalign = addr &amp; (NUM - <span class="number">1</span>);</div><div class="line">    <span class="keyword">int</span> wlen;</div><div class="line">    <span class="keyword">int</span> left = len;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (unalign)</div><div class="line">    &#123;</div><div class="line">        wlen = NUM - unalign;</div><div class="line">        <span class="keyword">if</span> (wlen &gt;= len) </div><div class="line">            wlen = len;</div><div class="line">        spi_flash_program(addr, (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)buf, wlen); </div><div class="line">        addr += wlen;</div><div class="line">        buf += wlen;</div><div class="line">        left -= wlen;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (left &gt; <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (left &gt;= NUM)</div><div class="line">            wlen = NUM;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            wlen = left;</div><div class="line">        </div><div class="line">        spi_flash_program(addr, (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)buf, wlen);</div><div class="line"></div><div class="line">        addr += wlen;</div><div class="line">        buf += wlen;</div><div class="line">        left -= wlen;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    *retlen = len;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">   </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">w25q16dv_probe</span><span class="params">(<span class="keyword">struct</span> spi_device *spi)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> mid, did;</div><div class="line">    </div><div class="line">    printk(KERN_INFO <span class="string">"run w25q16dv_probe\n"</span>);</div><div class="line"></div><div class="line">    spi_w25q16dv_dev = spi;</div><div class="line"></div><div class="line">    spi_flash_init();</div><div class="line">    spi_flash_read_ID(&amp;mid, &amp;did);</div><div class="line">    printk(<span class="string">"SPI Flash ID: %02x %02x\n"</span>, mid, did);</div><div class="line">    <span class="built_in">memset</span>(&amp;flash_w25q16dv_dev, <span class="number">0</span>, <span class="keyword">sizeof</span>(flash_w25q16dv_dev)); </div><div class="line"></div><div class="line">    <span class="comment">/* Setup the MTD structure */</span></div><div class="line">    flash_w25q16dv_dev.name = <span class="string">"w25q16dv_spi_flash"</span>;</div><div class="line">    flash_w25q16dv_dev.type = MTD_NORFLASH;</div><div class="line">    flash_w25q16dv_dev.flags = MTD_CAP_NORFLASH;</div><div class="line">    flash_w25q16dv_dev.size = <span class="number">0x200000</span>;  <span class="comment">/* 2M */</span></div><div class="line">    flash_w25q16dv_dev.writesize = <span class="number">1</span>; </div><div class="line">    flash_w25q16dv_dev.writebufsize = <span class="number">4096</span>; <span class="comment">/* no use */</span></div><div class="line">    flash_w25q16dv_dev.erasesize = <span class="number">4096</span>;    <span class="comment">/* Minimum unit of erasure */</span></div><div class="line"></div><div class="line">    flash_w25q16dv_dev.owner = THIS_MODULE;</div><div class="line">    flash_w25q16dv_dev._erase = w25q16dv_erase;</div><div class="line">    flash_w25q16dv_dev._read  = w25q16dv_read;</div><div class="line">    flash_w25q16dv_dev._write = w25q16dv_write;</div><div class="line"></div><div class="line">    mtd_device_register(&amp;flash_w25q16dv_dev, <span class="literal">NULL</span>, <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">w25q16dv_remove</span><span class="params">(<span class="keyword">struct</span> spi_device *spi)</span></span></div><div class="line">&#123;</div><div class="line">    printk(KERN_INFO <span class="string">"run w25q16dv_remove\n"</span>);</div><div class="line"></div><div class="line">    mtd_device_unregister(&amp;flash_w25q16dv_dev);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">struct</span> of_device_id of_match_spi[] = &#123;</div><div class="line">    &#123; .compatible = <span class="string">"winbond,w25q16dv"</span>, .data = <span class="literal">NULL</span> &#125;,</div><div class="line">    &#123; <span class="comment">/* sentinel */</span> &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> spi_driver w25q16dv_driver = &#123;</div><div class="line">    .probe = w25q16dv_probe,</div><div class="line">    .remove = w25q16dv_remove,</div><div class="line">    .driver = &#123;</div><div class="line">        .name = <span class="string">"w25q16dv_drv"</span>,</div><div class="line">        .owner = THIS_MODULE,</div><div class="line">        .of_match_table = of_match_spi,  </div><div class="line">    &#125;,</div><div class="line">&#125;;</div><div class="line"></div><div class="line">module_spi_driver(w25q16dv_driver);</div><div class="line"></div><div class="line">MODULE_LICENSE(<span class="string">"GPL"</span>);</div><div class="line">MODULE_AUTHOR(<span class="string">"hceng &lt;huangcheng.job@foxmail.com&gt;"</span>);</div><div class="line">MODULE_DESCRIPTION(<span class="string">"TI am335x board spi device: w25q16dv driver."</span>);</div><div class="line">MODULE_VERSION(<span class="string">"v1.0"</span>);</div></pre></td></tr></table></figure><p>这是遇到过数不多的块设备驱动，块设备驱动的写法都要忘了，以后块设备驱动可以参考这个。</p><h2 id="4-3-测试程序"><a href="#4-3-测试程序" class="headerlink" title="4.3 测试程序"></a>4.3 测试程序</h2><p>在加载<code>w25q16dv.ko</code>驱动后，将会生成两个设备节点：<code>/dev/mtdx</code>和<code>/dev/mtdblockx</code>。<br><code>/dev/mtdx</code>是字符设备的节点，可以像字符设备那样读写；<br><code>/dev/mtdblockx</code>是块设备的节点，可以进行块设备类似的操作；<br>两个节点都是操作的同一设备，而且最后调用的读写函数也是驱动中的同一个；<br>两者差异体现在进行字符设备读写时，可以直接写到某个地址，而对块设备而言，需要先读块的内容，再擦除一个块，再写一个块。</p><p>测试方法有两种，<br>一种是自己写应用程序，通过<code>open()</code>、<code>read()</code>、<code>write()</code>等进行操作；<br>另一种是把整个Flash格式化成各种文件系统格式，然后挂载，拷贝文件，卸载，再次挂载检查之前拷贝的文件是否正常。</p><ul><li>应用程序读写测试：<figure class="highlight c"><figcaption><span>[spi_flash_app.c]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ioctl.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mtd/mtd-user.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;getopt.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">// Data types</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> u8      unsigned char</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> u16     unsigned short</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> u32     unsigned long</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> u64     unsigned long long int</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> s8      char</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> s16     int</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> s32     long int</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> s64     long long int</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> boolean unsigned char</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFFER_SIZE     1024</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> OTP_NUM_WORDS   0x40</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SUCCESS     0</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FAIL        -1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE        1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FALSE       0</span></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span> *<span class="keyword">const</span> short_options = <span class="string">"ho:d:r:w::e"</span>;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">struct</span> option long_options[] =</div><div class="line">&#123;</div><div class="line"></div><div class="line">    &#123;<span class="string">"help"</span>,   no_argument,       <span class="literal">NULL</span>, <span class="string">'h'</span>&#125;,</div><div class="line">    &#123;<span class="string">"device"</span>, required_argument, <span class="literal">NULL</span>, <span class="string">'d'</span>&#125;,</div><div class="line">    &#123;<span class="string">"read"</span>,   required_argument, <span class="literal">NULL</span>, <span class="string">'r'</span>&#125;,</div><div class="line">    &#123;<span class="string">"offset"</span>, required_argument, <span class="literal">NULL</span>, <span class="string">'o'</span>&#125;,</div><div class="line">    &#123;<span class="string">"write"</span>,  optional_argument, <span class="literal">NULL</span>, <span class="string">'w'</span>&#125;,</div><div class="line">    &#123;<span class="string">"erase"</span>,  no_argument,       <span class="literal">NULL</span>, <span class="string">'e'</span>&#125;,</div><div class="line">    &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span></div><div class="line">&#123;</div><div class="line">    RUN_READ,</div><div class="line">    RUN_WRITE,</div><div class="line">    RUN_ERASE,</div><div class="line">    RUN_END</div><div class="line">&#125; run_type;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> mtd_info_user info;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show_usage</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\nUsage: ./spi_flash_app -d &lt;device&gt; &lt;operation&gt;\n"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\nOperation:\n"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\t-e\n"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\t-r\n"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\t-w\n"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\t-o &lt;offset&gt;\n"</span>);</div><div class="line"></div><div class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">mtd_read</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *device, <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> offset, <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> size)</span></span></div><div class="line">&#123;</div><div class="line">    assert(device);</div><div class="line">    assert(size &gt; <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> fd, ret = <span class="number">-1</span>;</div><div class="line">    fd = open(device, O_RDONLY);</div><div class="line">    <span class="keyword">if</span>(fd &lt; <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"(E) Open device %s failed.\n"</span>, device);</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="number">-1</span> == lseek(fd, offset, SEEK_SET))</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"lseek 0x%x error\n"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">char</span> buf[size];</div><div class="line">    <span class="built_in">memset</span>(buf, <span class="number">0</span>, size);</div><div class="line">    ret = read(fd, buf, size);</div><div class="line">    <span class="keyword">if</span>(ret != <span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"buffer_read: \n"</span>);</div><div class="line">        <span class="keyword">int</span> i;</div><div class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; ret; i++)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%02x "</span>, buf[i]);</div><div class="line">            <span class="keyword">if</span>(!((i + <span class="number">1</span>) % <span class="number">10</span>)) <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n Read ok!\n"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"(E) Read error!\n"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    close(fd);</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">mtd_write</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *device, <span class="keyword">const</span> <span class="keyword">void</span> *data, <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> offset, <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> size)</span></span></div><div class="line">&#123;</div><div class="line">    assert(device);</div><div class="line">    assert(data);</div><div class="line">    assert(size &gt; <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> fd, ret = <span class="number">-1</span>;</div><div class="line">    fd = open(device, O_RDWR);</div><div class="line">    <span class="keyword">if</span>(fd &lt; <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"(E) Open device %s failed.\n"</span>, device);</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="number">-1</span> == lseek(fd, offset, SEEK_SET))</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"lseek 0x%x error\n"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ret = write(fd, data, size);</div><div class="line">    <span class="keyword">if</span>(ret != <span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>( ret == <span class="number">0</span>)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"\n Nothing to write!\n"</span>);</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="built_in">printf</span>(<span class="string">"\n Write ok!\n"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"(E) Write error!\n"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    close(fd);</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">non_region_erase</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> fd, <span class="keyword">const</span> <span class="keyword">int</span> start, <span class="keyword">int</span> count, <span class="keyword">const</span> <span class="keyword">int</span> unlock)</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="keyword">mtd_info_t</span> meminfo;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(ioctl(fd, MEMGETINFO, &amp;meminfo) == <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">erase_info_t</span> erase;</div><div class="line">        erase.start = start;</div><div class="line">        erase.length = meminfo.erasesize;</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(; count &gt; <span class="number">0</span>; count--)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"Performing Flash Erase of length %u at offset 0x%x\n"</span>, erase.length, erase.start);</div><div class="line">            fflush(<span class="built_in">stdout</span>);</div><div class="line">            <span class="keyword">if</span>(unlock != <span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"Performing Flash unlock at offset 0x%x\n"</span>, erase.start);</div><div class="line">                <span class="keyword">if</span>(ioctl(fd, MEMUNLOCK, &amp;erase) != <span class="number">0</span>)</div><div class="line">                &#123;</div><div class="line">                    perror(<span class="string">"MTD unlock failure"</span>);</div><div class="line">                    close(fd);</div><div class="line">                    <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(ioctl(fd, MEMERASE, &amp;erase) != <span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">                perror(<span class="string">"MTD erase failure"</span>);</div><div class="line">                close(fd);</div><div class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">            &#125;</div><div class="line">            erase.start += meminfo.erasesize;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"  done\n"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">mtd_erase</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *device, <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> regcount)</span></span></div><div class="line">&#123;</div><div class="line">    assert(device);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> fd, ret = <span class="number">-1</span>;</div><div class="line">    fd = open(device, O_RDWR);</div><div class="line">    <span class="keyword">if</span>(fd &lt; <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"(E) Open device %s failed.\n"</span>, device);</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(regcount == <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        ret = non_region_erase(fd, <span class="number">0</span>, (info.size / info.erasesize), <span class="number">0</span>);</div><div class="line">        <span class="keyword">if</span>(ret == <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"\n Erase ok!\n"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"(E) Erase error!\n"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    close(fd);</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">EeReadLineFromEepFile</span><span class="params">(FILE *DataFile, s8 *Buffer, <span class="keyword">const</span> u32 BufferSize)</span></span></div><div class="line">&#123;</div><div class="line">    u32         Sign            = <span class="number">0</span>;</div><div class="line">    u16         StringIndex     = <span class="number">0</span>;</div><div class="line">    s16       EeStatus        = SUCCESS;</div><div class="line">    boolean     EndOfLine       = FALSE;</div><div class="line">    boolean     Comment         = FALSE;</div><div class="line"></div><div class="line">    <span class="keyword">do</span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">/* Read line from the file. If the line is longer</span></div><div class="line">         * it will be serviced below */</div><div class="line">        <span class="keyword">if</span>(fgets(Buffer, BufferSize, DataFile) == <span class="literal">NULL</span>)</div><div class="line">        &#123;</div><div class="line">            EeStatus = FAIL;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">/* Look for:</span></div><div class="line">         * a semicolon in the string indicating a comment</div><div class="line">         * a EOL just for detection if this is a full line</div><div class="line">         * read to the buffer */</div><div class="line">        <span class="keyword">for</span>(StringIndex = <span class="number">0</span>; StringIndex &lt; BufferSize; StringIndex++)</div><div class="line">        &#123;</div><div class="line">            <span class="comment">/* Break the loop if string has ended */</span></div><div class="line">            <span class="keyword">if</span>(Buffer[StringIndex] == <span class="string">'\0'</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">/* Detect end of line and comments */</span></div><div class="line">            <span class="keyword">if</span>(Buffer[StringIndex] == <span class="string">'\n'</span> ||</div><div class="line">                    Buffer[StringIndex] == <span class="string">'\r'</span> ||</div><div class="line">                    Buffer[StringIndex] == <span class="string">';'</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="comment">/* Determine which we encountered...EOL or</span></div><div class="line">                * comment...add terminating NULL as needed */</div><div class="line">                <span class="keyword">if</span>(Buffer[StringIndex] == <span class="string">';'</span>)</div><div class="line">                &#123;</div><div class="line">                    Comment = TRUE;</div><div class="line">                    Buffer[StringIndex] = <span class="string">'\0'</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                &#123;</div><div class="line">                    EndOfLine = TRUE;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">/* If the end of line was not detected - read the rest of</span></div><div class="line">         * line and omit it if it's a comment */</div><div class="line">        <span class="keyword">if</span>(EndOfLine == FALSE)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(Comment == TRUE)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">while</span>((Sign = getc(DataFile)) != EOF)</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">if</span>(Sign == (u32)<span class="string">'\n'</span> || Sign == (u32)<span class="string">'\r'</span>)</div><div class="line">                    &#123;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">/* If data in buffer does not contain the whole line</span></div><div class="line">             * (it does not contain comment)</div><div class="line">             * then it will be read in next step */</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">/* If this line is empty, clear local flags */</span></div><div class="line">        <span class="keyword">if</span>(*Buffer == <span class="string">'\0'</span>)</div><div class="line">        &#123;</div><div class="line">            EndOfLine =  FALSE;</div><div class="line">            Comment = FALSE;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span>(*Buffer == <span class="string">'\0'</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> EeStatus;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">mtd_write_file</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *device, <span class="keyword">const</span> <span class="keyword">char</span> *filename)</span></span></div><div class="line">&#123;</div><div class="line">    s8  retval = FAIL;</div><div class="line">    u16 i = <span class="number">0</span>;</div><div class="line">    s16 maxlen = <span class="number">8</span> * <span class="number">64</span>;</div><div class="line">    FILE *file = <span class="literal">NULL</span>;</div><div class="line">    u32 b[<span class="number">8</span>];</div><div class="line">    s8 temp[<span class="number">200</span>];</div><div class="line">    u16 buffer[OTP_NUM_WORDS * <span class="number">8</span>];</div><div class="line"></div><div class="line">    file = fopen(filename, <span class="string">"r"</span>);</div><div class="line">    <span class="keyword">if</span>(<span class="literal">NULL</span> == file)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Unable to open specified file: %s\n"</span>, filename);</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">//FILE *file_ro = file; // WTF! (FILE *)0x12008 --&gt; (FILE *)0x10000 by sscanf</span></div><div class="line">        <span class="built_in">memset</span>(b, <span class="number">0x0</span>, <span class="keyword">sizeof</span>(b));</div><div class="line">        <span class="built_in">memset</span>(buffer, <span class="number">0x0</span>, <span class="keyword">sizeof</span>(buffer));</div><div class="line"></div><div class="line">        retval = EeReadLineFromEepFile(file, temp, <span class="number">200</span>);</div><div class="line"></div><div class="line">        <span class="keyword">while</span> ((SUCCESS == retval) &amp;&amp; (i &lt; maxlen))</div><div class="line">        &#123;</div><div class="line">            <span class="comment">// place the hex numbers from the line read in to the temp buffer</span></div><div class="line">            <span class="built_in">sscanf</span>(temp, <span class="string">"%08lx %08lx %08lx %08lx %08lx %08lx %08lx %08lx"</span>, \</div><div class="line">                   &amp; (b[<span class="number">0</span>]), &amp;(b[<span class="number">1</span>]), &amp;(b[<span class="number">2</span>]), &amp;(b[<span class="number">3</span>]), \</div><div class="line">                   &amp; (b[<span class="number">4</span>]), &amp;(b[<span class="number">5</span>]), &amp;(b[<span class="number">6</span>]), &amp;(b[<span class="number">7</span>]));</div><div class="line"></div><div class="line">            <span class="comment">// copy the words to the permanent buffer</span></div><div class="line">            buffer[i + <span class="number">0</span>] = b[<span class="number">0</span>];</div><div class="line">            buffer[i + <span class="number">1</span>] = b[<span class="number">1</span>];</div><div class="line">            buffer[i + <span class="number">2</span>] = b[<span class="number">2</span>];</div><div class="line">            buffer[i + <span class="number">3</span>] = b[<span class="number">3</span>];</div><div class="line">            buffer[i + <span class="number">4</span>] = b[<span class="number">4</span>];</div><div class="line">            buffer[i + <span class="number">5</span>] = b[<span class="number">5</span>];</div><div class="line">            buffer[i + <span class="number">6</span>] = b[<span class="number">6</span>];</div><div class="line">            buffer[i + <span class="number">7</span>] = b[<span class="number">7</span>];</div><div class="line"></div><div class="line">            <span class="comment">// increment i by 8 so we can get the next 8 words</span></div><div class="line">            i += <span class="number">8</span>;</div><div class="line"></div><div class="line">            <span class="comment">// read the next line</span></div><div class="line">            retval = EeReadLineFromEepFile(file, temp, <span class="number">200</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    fclose(file);</div><div class="line">    mtd_write(device, buffer, <span class="number">0</span>, <span class="keyword">sizeof</span>(buffer));</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> fd;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">char</span> *device = <span class="literal">NULL</span>;</div><div class="line">    <span class="keyword">int</span> regcount;</div><div class="line">    run_type mode = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">int</span> read_size = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> write_size = <span class="number">0</span>;</div><div class="line">    <span class="keyword">char</span> *opt_file = <span class="literal">NULL</span>;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> offset = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> c;</div><div class="line">    <span class="keyword">while</span>((c = getopt_long(argc, argv, short_options, long_options, <span class="literal">NULL</span>)) != <span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line"></div><div class="line">        <span class="keyword">switch</span>(c)</div><div class="line">        &#123;</div><div class="line"></div><div class="line">        <span class="keyword">case</span> <span class="string">'h'</span>:</div><div class="line">            show_usage();</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">'d'</span>:</div><div class="line">            device = optarg;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">'r'</span>:</div><div class="line">        &#123;</div><div class="line">            mode = RUN_READ;</div><div class="line">            read_size = atoi(optarg);</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"read_size=%d\n"</span>, read_size);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">'o'</span>:</div><div class="line">        &#123;</div><div class="line">            offset = strtoul(optarg, <span class="literal">NULL</span>, <span class="number">0</span>);</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"offset= 0x%x\n"</span>, offset);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">'w'</span>:</div><div class="line">        &#123;</div><div class="line">            mode = RUN_WRITE;</div><div class="line">            opt_file = optarg;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"opt_file : %s\n"</span>, opt_file);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">'e'</span>:</div><div class="line">            mode = RUN_ERASE;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(device == <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"(E) Device is required, please check it.\n"</span>);</div><div class="line">        show_usage();</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"device = %s\n"</span>, device);</div><div class="line"></div><div class="line">    fd = open(device, O_RDWR);</div><div class="line">    <span class="keyword">if</span>(fd &lt; <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"open device %s error\n"</span>, device);</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(ioctl(fd, MEMGETINFO, &amp;info) == <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"info.size=%d\n"</span>, info.size);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"info.erasesize=%d\n"</span>, info.erasesize);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"info.writesize=%d\n"</span>, info.writesize);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"info.oobsize=%d\n"</span>, info.oobsize);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(ioctl(fd, MEMGETREGIONCOUNT, &amp;regcount) == <span class="number">0</span>)</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"regcount = %d\n"</span>, regcount);</div><div class="line"></div><div class="line">    close(fd);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(RUN_READ == mode)</div><div class="line">        mtd_read(device, offset, read_size);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(RUN_WRITE == mode)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(opt_file)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"Write opt_file to device %s\n"</span>, device);</div><div class="line">            mtd_write_file(device, opt_file);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"Write buf[10] to device %s\n"</span>, device);</div><div class="line">            <span class="keyword">char</span> buf[<span class="number">10</span>] =</div><div class="line">            &#123;</div><div class="line">                <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x04</span>, <span class="number">0x05</span>, <span class="number">0x06</span>, <span class="number">0x07</span>, <span class="number">0x08</span>, <span class="number">0x09</span>, <span class="number">0x10</span>,</div><div class="line">            &#125;;</div><div class="line">            mtd_write(device, buf, offset, <span class="keyword">sizeof</span>(buf));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(RUN_ERASE == mode)</div><div class="line">        mtd_erase(device, regcount);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><p>使用方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">./flash_test -d /dev/mtd10 -e //擦除</div><div class="line">./flash_test -d /dev/mtd10 -r 10 -o 0  //从地址偏移0读出10字节</div><div class="line">./flash_test -d /dev/mtd10 -w -o 0     //从地址偏移0写10字节</div><div class="line">./flash_test -d /dev/mtd10 -r 10 -o 0</div><div class="line"></div><div class="line">./flash_test -d /dev/mtd10 -e  </div><div class="line">./flash_test -d /dev/mtdblock10 -r 10 -o 0   </div><div class="line">./flash_test -d /dev/mtdblock10 -w -o 0  </div><div class="line">./flash_test -d /dev/mtdblock10 -r 10 -o 0</div></pre></td></tr></table></figure></p><p>另外，部分根文件系统集成了flash测试工具，但只能擦除操作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">flash_eraseall /dev/mtd10</div></pre></td></tr></table></figure></p><ul><li>当作文件系统测试：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">mkfs.vfat -I /dev/mtdblock10</div><div class="line">mount -t vfat /dev/mtdblock10 /hceng</div><div class="line"></div><div class="line">cp /etc/init.d/rcS /hceng</div><div class="line">sync</div><div class="line"></div><div class="line">umount /hceng</div><div class="line">mount -t vfat /dev/mtdblock10 /hceng</div><div class="line"></div><div class="line">cat /hceng/rcS</div><div class="line">diff /hceng/rcS /etc/init.d/rcS</div></pre></td></tr></table></figure></li></ul><h1 id="5-补充"><a href="#5-补充" class="headerlink" title="5. 补充"></a>5. 补充</h1><p>想到几个补充。</p><p>1.内核自带SPI设备驱动<br>在最开始的准备工作里，加入了<code>User mode SPI device driver support</code>。<br>起初想的是一个SPI设备驱动用于测试，后来发现并不是简单的用于测试SPI，它还有更重要的作用，就如它的名字一样，”用户模式SPI设备驱动支持”，可以通过它，<br>在Linux应用层直接操作SPI设备。<br>参考自带的应用测试文件<code>Documentation/spi/spidev_test.c</code>，可以通过访问<code>/dev/spidev1.0</code>来控制SPI控制器，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">ioctl(fd, SPI_IOC_WR_MODE, mode); //修改SPI模式</div><div class="line">ioctl(fd, SPI_IOC_RD_MODE, mode);</div><div class="line"></div><div class="line">ioctl(fd, SPI_IOC_WR_MAX_SPEED_HZ, speed); //修改SPI传输速度</div><div class="line">ioctl(fd, SPI_IOC_RD_MAX_SPEED_HZ, speed);</div><div class="line"></div><div class="line">ioctl(fd, SPI_IOC_WR_BITS_PER_WORD, bits); //修改SPI每次传输数据长度</div><div class="line">ioctl(fd, SPI_IOC_RD_BITS_PER_WORD, bits);</div><div class="line"></div><div class="line">ioctl(fd, SPI_IOC_MESSAGE(1), &amp;transfer); //控制SPI发送/接收数据</div><div class="line">ioctl(fd, SPI_IOC_MESSAGE(1), &amp;transfer);</div></pre></td></tr></table></figure></p><p>通过该驱动的<code>ioctl()</code>，可以实现对SPI控制器的控制，也就可以通过它在用户层控制SPI设备，而不再需要单独为SPI设备写对应的驱动。<br>当然，它也有一些限制，比如这里的片选默认就是设备树指定的CS0，如果要使用其它片选，只能是在应用层操作<code>/sys/class/gpio/x</code>来模拟片选。它适用前面的DAC和OLED等字符设备，不适用于Flash等块设备。</p><p>2.w25q16dv驱动的一个Bug<br>使用前面编写的驱动，在将其作为字符设备操作是没有问题的，但作为块设备，先格式化，挂载的时候就会报参数错误。<br>通过排查，发现挂载的时候是要向Flash写入指定数据的，然而并没有写成功，因此挂载失败。<br>把前面每次传输的数据长度<code>NUM</code>由256改为8，可以减缓问题，可以挂载，也可以拷贝小文件，读取正常，但拷贝大文件后，重新挂载读取文件失败。<br>然后发现是DMA传输导致的错误，再往里检查发现是DMA和Cache的数据不一致导致的，这就比较深了，搞不定。<br>初步解决思路是在<code>spi-omap2-mcspi.c</code>中，先使用<code>dma_alloc_coheren</code>t分配一个<code>DMA Buffer</code>，大小为4096，在SPI每次使用DMA方式的传输时：<br>①对于DMA写：<br>先把<code>spi_transfer.tx_buf</code>中的数据复制到事先分配的<code>DMA Buffe</code>r，并把<code>spi_transfer.tx_dma</code>设置为该<code>Buffer</code>的DMA地址，最后再启动DMA传输；<br>②对于DMA读：<br>把<code>spi_transfer.rx_dma</code>设置为事先分配的<code>DMA Buffer</code>的DMA地址，然后启动DMA传输；当传输完毕，把<code>DMA Buffer中</code>的数据复制到<code>spi_transfer.rx_buf</code>；</p><hr><p><div align="center"><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本文采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href="http://hceng.cn/" target="_blank" rel="external">hceng’s blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在AM335X上写了几个SPI设备驱动，记录一下心得。&lt;br&gt;
    
    </summary>
    
    
      <category term="AM335X" scheme="http://yoursite.com/tags/AM335X/"/>
    
      <category term="Linux驱动" scheme="http://yoursite.com/tags/Linux%E9%A9%B1%E5%8A%A8/"/>
    
      <category term="SPI" scheme="http://yoursite.com/tags/SPI/"/>
    
  </entry>
  
  <entry>
    <title>C++学习笔记</title>
    <link href="http://yoursite.com/2018/09/24/C++%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/09/24/C++学习笔记/</id>
    <published>2018-09-24T12:46:52.000Z</published>
    <updated>2019-01-23T03:29:22.634Z</updated>
    
    <content type="html"><![CDATA[<p>学习完了Java，继续C++的学习，C++还有点印象，之前用Qt的时候还写过。<br><a id="more"></a></p><h1 id="1-C-基础知识"><a href="#1-C-基础知识" class="headerlink" title="1. C++基础知识"></a>1. C++基础知识</h1><h2 id="1-1-类的引入"><a href="#1-1-类的引入" class="headerlink" title="1.1 类的引入"></a>1.1 类的引入</h2><p>在C语言中，使用<code>struct</code>将多个数据组成一个新的数据结构，这一思维方式在C++里得到了扩展，变成了类<code>class</code>的概念，既包含多个数据，也可包含函数。</p><ul><li>示例：<figure class="highlight c"><figcaption><span>[person1.c]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">struct</span> person &#123;</div><div class="line">    <span class="keyword">char</span> *name;</div><div class="line">    <span class="keyword">int</span> age;</div><div class="line">    <span class="keyword">char</span> *work;</div><div class="line">    </div><div class="line">    <span class="keyword">void</span> (*printf_info)(<span class="keyword">struct</span> person *per); <span class="comment">//函数指针</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">printf_info</span><span class="params">(<span class="keyword">struct</span> person *per)</span> </span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"name = %6s, age = %2d, work = %s\n"</span>, per-&gt;name, per-&gt;age, per-&gt;work);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> person person[] = &#123;</div><div class="line">        &#123;<span class="string">"hceng"</span>, <span class="number">23</span>, <span class="string">"Embedded engineer"</span>, printf_info&#125;,</div><div class="line">        &#123;<span class="string">"jack"</span>, <span class="number">21</span>, <span class="string">"Graphic Designer"</span>, printf_info&#125;</div><div class="line">    &#125;;</div><div class="line">    </div><div class="line">    person[<span class="number">0</span>].printf_info(&amp;person[<span class="number">0</span>]);</div><div class="line">    person[<span class="number">1</span>].printf_info(&amp;person[<span class="number">1</span>]);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><figure class="highlight cpp"><figcaption><span>[person2.cpp]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">//struct person &#123;</span></div><div class="line"><span class="keyword">class</span> person &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">char</span> <span class="keyword">const</span> *name; <span class="comment">//warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]</span></div><div class="line">    <span class="keyword">int</span> age;</div><div class="line">    <span class="keyword">char</span> <span class="keyword">const</span> *work;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printf_info</span><span class="params">(<span class="keyword">void</span>)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"name = %6s, age = %2d, work = %s\n"</span>, name, age, work); <span class="comment">//函数实现直接写在了里面,且可访问数据</span></div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> person person[] = &#123;</div><div class="line">        &#123;<span class="string">"hceng"</span>, <span class="number">23</span>, <span class="string">"Embedded engineer"</span>&#125;,</div><div class="line">        &#123;<span class="string">"jack"</span>, <span class="number">21</span>, <span class="string">"Graphic Designer"</span>&#125;</div><div class="line">    &#125;;</div><div class="line">    </div><div class="line">    person[<span class="number">0</span>].printf_info();</div><div class="line">    person[<span class="number">1</span>].printf_info();</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>编译：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">gcc -o person1 person1.c</div><div class="line">g++ -o person2 person2.cpp</div></pre></td></tr></table></figure></p><ul><li>结果：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">name =  hceng, age = 23, work = Embedded engineer</div><div class="line">name =   jack, age = 21, work = Graphic Designer</div></pre></td></tr></table></figure></li></ul><p>对该示例进行分析：</p><blockquote><p>1.1 C语言里，使用<code>struct</code>将多个变量组合在了一起，由于C语言的<code>struct</code>里不能有函数，因此使用函数指针来指向函数；<br>1.2 <code>main</code>里，使用<code>struct person</code>这一新数据类型，定义了数组变量<code>person[]</code>，并对每个成员初始化；<br>1.3 通过调用结构体里的函数指针，来调用函数，函数要访问结构体里的数据，因此还需要将结构体作为参数传入；<br>　<br>2.1 同样的功能，在C++里面，该示例做了如下改变：<br>2.2 因为扩充了<code>strcut</code>的功能，使用新的关键字<code>class</code>来表示集合；<br>2.3 加上了权限管理，比如这里的<code>public</code>；<br>2.4 集合可以包含函数，同时也可以访问该集合的变量，无需传入参数；<br>2.5 初始化和调用，也精简了一点；</p></blockquote><h2 id="1-2-访问控制"><a href="#1-2-访问控制" class="headerlink" title="1.2 访问控制"></a>1.2 访问控制</h2><p>C++通过<code>public</code>、<code>protected</code>、<code>private</code>三个关键字来控制成员变量和成员函数的访问权限，它们分别表示公有的、受保护的、私有的，被称为成员访问限定符。<br>与Java不同的是C++中的<code>public</code>、<code>private</code>、<code>protected</code>只能修饰类的成员，不能修饰类，C++中的类没有共有私有之分。</p><p>在类的内部(定义类的代码内部)，无论成员被声明为<code>public</code>、<code>protected</code>还是<code>private</code>，都是可以互相访问的，没有访问权限的限制。<br>在类的外部(定义类的代码之外)，只能通过对象访问成员，并且通过对象只能访问<code>public</code>属性的成员，不能访问<code>private</code>、<code>protected</code>属性的成员。</p><ul><li><p>示例：</p><figure class="highlight cpp"><figcaption><span>[person.cpp]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">class</span> Person &#123;</div><div class="line"><span class="keyword">private</span>: <span class="comment">//默认权限</span></div><div class="line">    <span class="keyword">char</span> <span class="keyword">const</span> *name; </div><div class="line">    <span class="keyword">int</span> age;</div><div class="line">    <span class="keyword">char</span> <span class="keyword">const</span> *work;</div><div class="line"></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">char</span> <span class="keyword">const</span> *name)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">this</span>-&gt;name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(age &lt; <span class="number">0</span> || age &gt; <span class="number">150</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">this</span>-&gt;age = <span class="number">0</span>;</div><div class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>-&gt;age = age;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setWork</span><span class="params">(<span class="keyword">char</span> <span class="keyword">const</span> *work)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">this</span>-&gt;work = work;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printInfo</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"name = %6s, age = %2d, work = %s\n"</span>, name, age, work); <span class="comment">//函数实现直接写在了里面,且可访问数据</span></div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">    Person per;</div><div class="line">    <span class="comment">//per.name = "hceng"; //因为是private属性,无法直接访问</span></div><div class="line">    </div><div class="line">    per.setName(<span class="string">"hceng"</span>); <span class="comment">//通过类里的函数间接访问</span></div><div class="line">    ret = per.setAge(<span class="number">-23</span>); <span class="comment">//间接访问,可以实现对传入参数的控制</span></div><div class="line">    per.setWork(<span class="string">"Embedded engineer"</span>); </div><div class="line">    per.printInfo();</div><div class="line"></div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">name =  hceng, age =  0, work = Embedded engineer</div></pre></td></tr></table></figure></li></ul><p>对该示例进行分析：</p><blockquote><ol><li>定义了一个<code>class</code>类<code>Person</code>，有三个私有的成员变量，四个公共的成员函数；<br>　<br>2.1 <code>main</code>里，先创建了一个<code>Person</code>类的对象<code>per</code>；<br>2.2 通过对象<code>per</code>不能直接访问私有属性，可以通过公有属性的函数进行间接访问；<br>2.3 将成员变量设置为私有，有利于对传入参数的控制；</li></ol></blockquote><h2 id="1-3-程序结构"><a href="#1-3-程序结构" class="headerlink" title="1.3 程序结构"></a>1.3 程序结构</h2><p>为了让代码结构更有层次感，类似C语言那种使用<code>.h</code>头文件和<code>.c</code>文件分离的方式。<br>示例程序结构如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── dog.cpp</div><div class="line">├── dog.h</div><div class="line">├── main.cpp</div><div class="line">├── Makefile</div><div class="line">├── person.cpp</div><div class="line">└── person.h</div></pre></td></tr></table></figure></p><p><code>person.h</code>和<code>dog.h</code>里面是类的定义；<br><code>person.cpp</code>和<code>dog.cpp</code>里面是类的实现；<br><code>main.cpp</code>里面是函数的调用，<code>Makefile</code>里面是整个工程代码的组织编译、清理；</p><p>文件比较多，就不贴代码了，示例代码见文末的Github链接。</p><p>在<code>person.cpp</code>和<code>dog.cpp</code>都定义了同名的<code>printVersion()</code>函数，为了区分这两个函数，加入了命名空间<code>namespace</code>这一关键词，将代码放在不同名字的命名空间里，调用的时候就有了区分。</p><p>调用也有三种方式：<br>1.直接使用，比如创建<code>Person</code>对象:<code>P::Person per;</code>；调用同名的函数:<code>P::printVersion();</code>；<br>2.使用<code>using</code>关键词声明，在主函数里或者外面，使用<code>using D::Dog</code>声明，后面可以使用<code>Dog</code>来表示<code>D:Dog</code>；<br>3.使用<code>using namespace D;</code>，将整个命名空间导入，后面可以使用<code>Dog</code>来表示<code>D:Dog</code>；</p><h2 id="1-4-重载"><a href="#1-4-重载" class="headerlink" title="1.4 重载"></a>1.4 重载</h2><p>与Java类似，如果函数名相同，函数的参数不同(类型、数量、顺序任一不同)，同名不同参数的函数之间，互相称之为重载函数。调用时，根据传入的参数，自动选择对应的函数。</p><ul><li><p>示例：</p><figure class="highlight cpp"><figcaption><span>[main.cpp]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"add int+int = "</span>&lt;&lt;a+b&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> a+b;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">double</span> b)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"add int+double = "</span>&lt;&lt;a+b&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> (<span class="keyword">double</span>)a+b;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">add</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">int</span> b)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"add double+int = "</span>&lt;&lt;a+b&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> (<span class="keyword">double</span>)a+b;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"add int+int+int = "</span>&lt;&lt;a+b+c&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> a+b+c;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></div><div class="line">&#123;</div><div class="line">    add(<span class="number">1</span>, <span class="number">1</span>);</div><div class="line">    add(<span class="number">1</span>, <span class="number">1.5</span>);</div><div class="line">    add(<span class="number">1.5</span>, <span class="number">1</span>);</div><div class="line">    add(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">add int+int = 2</div><div class="line">add int+double = 2.5</div><div class="line">add double+int = 2.5</div><div class="line">add int+int+int = 3</div></pre></td></tr></table></figure></li></ul><p>对该示例进行分析：</p><blockquote><ol><li>四个同名函数，第一个和第二个参数类型不同，第二个和第三个参数类型位置不同，第一个和第三个参数数量不同，传入不同类型的参数，调用对应的函数；</li></ol></blockquote><h2 id="1-5-指针与引用"><a href="#1-5-指针与引用" class="headerlink" title="1.5 指针与引用"></a>1.5 指针与引用</h2><p>C++和C语言中的指针是一样，可以通过指针来实现修改传入函数的参数。<br>在C++里新引入了引用的概念，<strong>就是某一个变量或对象的别名，对引用的操作与对其所绑定的变量或对象的操作完全等价</strong>。<br>语法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">类型 &amp;引用名=目标变量名</div><div class="line">int &amp;e = d; //使用e代替d</div></pre></td></tr></table></figure></p><p>C语言中<code>&amp;</code>是取址，C++中表示引用，C语言中没有引用。</p><ul><li><p>示例：</p><figure class="highlight cpp"><figcaption><span>[main.cpp]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add1</span><span class="params">(<span class="keyword">int</span> a)</span></span></div><div class="line">&#123;</div><div class="line">    a = a + <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add2</span><span class="params">(<span class="keyword">int</span> *b)</span> </span></div><div class="line">&#123;</div><div class="line">    *b = *b + <span class="number">1</span>; <span class="comment">//指针操作</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add3</span><span class="params">(<span class="keyword">int</span> &amp;c)</span> <span class="comment">//引用</span></span></div><div class="line">&#123;</div><div class="line">    c = c + <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> a = <span class="number">99</span>;</div><div class="line">    <span class="keyword">int</span> b = <span class="number">99</span>;</div><div class="line">    <span class="keyword">int</span> c = <span class="number">99</span>;</div><div class="line">    <span class="keyword">int</span> d = <span class="number">99</span>;</div><div class="line">    <span class="keyword">int</span> &amp;e = d; <span class="comment">//使用e代替d</span></div><div class="line">    </div><div class="line">    add1(a);</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"a = "</span>&lt;&lt;a&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    </div><div class="line">    add2(&amp;b);</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"b = "</span>&lt;&lt;b&lt;&lt;<span class="built_in">endl</span>; </div><div class="line"></div><div class="line">    add3(c);</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"c = "</span>&lt;&lt;c&lt;&lt;<span class="built_in">endl</span>;   </div><div class="line">    </div><div class="line">    e++;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"d = "</span>&lt;&lt;d&lt;&lt;<span class="built_in">endl</span>;  </div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a = 99</div><div class="line">b = 100</div><div class="line">c = 100</div><div class="line">d = 100</div></pre></td></tr></table></figure></li></ul><p>对该示例进行分析：</p><blockquote><p>1.1 函数<code>add1()</code>传入形参，在函数里面修改值，并不改变实参；<br>1.2 函数<code>add2()</code>传入的是指针，在函数里修改该指针，改变了实参；<br>1.3 函数<code>add3()</code>传入的是引用，在函数里修改该引用，改变了实参；<br>1.4 <strong>使用指针作为函数的形参达到的效果虽然和使用引用一样，但当调用函数时仍需要为形参指针变量在内存中分配空间，而引用则不需要这样，故在C++中推荐使用引用而非指针作为函数的参数</strong>；<br>　<br>2.1 使用e引用d，对e进行操作，实际就是对d进行操作，修改了d；</p></blockquote><p>引用参考博客：<a href="https://www.cnblogs.com/duwenxing/p/7421100.html" target="_blank" rel="external">C++：引用的简单理解</a></p><h2 id="1-5-构造函数-析构函数-拷贝构造函数"><a href="#1-5-构造函数-析构函数-拷贝构造函数" class="headerlink" title="1.5 构造函数/析构函数/拷贝构造函数"></a>1.5 构造函数/析构函数/拷贝构造函数</h2><blockquote><p><strong>构造函数</strong>：与Java里面的构造函数类似，用于实例化对象时，对其初始化；<br><strong>析构函数</strong>：C++独有的，在对象销毁前瞬间，由系统自动调用析构函数；<br><strong>拷贝构造函数</strong>：C++独有的，只有一个形参，且该形参是对本类类型对象的引用；</p></blockquote><ul><li><p>示例：</p><figure class="highlight"><figcaption><span>[Person.cpp]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div></pre></td><td class="code"><pre><div class="line">#include &lt;iostream&gt;</div><div class="line">#include &lt;unistd.h&gt;</div><div class="line">#include &lt;string.h&gt;</div><div class="line"></div><div class="line">using namespace std;</div><div class="line"></div><div class="line">class Person &#123;</div><div class="line">private: </div><div class="line">    char *name; </div><div class="line">    int age;</div><div class="line">    char *work;</div><div class="line"></div><div class="line">public:</div><div class="line">    void setName(char *name)</div><div class="line">    &#123;</div><div class="line">        this-&gt;name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    int setAge(int age)</div><div class="line">    &#123;</div><div class="line">        if(age &lt; 0 || age &gt; 150)</div><div class="line">        &#123;</div><div class="line">            this-&gt;age = 0;</div><div class="line">            return -1;</div><div class="line">        &#125;</div><div class="line">        this-&gt;age = age;</div><div class="line">        return 0;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    void setWork(char *work)</div><div class="line">    &#123;</div><div class="line">        this-&gt;work = work;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    void printInfo(void)</div><div class="line">    &#123;</div><div class="line">        if (this-&gt;name &amp;&amp; this-&gt;work) </div><div class="line">            cout&lt;&lt;"name = "&lt;&lt;name&lt;&lt;", age = "&lt;&lt;age&lt;&lt;", work = "&lt;&lt;work&lt;&lt;endl;</div><div class="line">        else</div><div class="line">            cout&lt;&lt;"name = NULL"&lt;&lt;", age = "&lt;&lt;age&lt;&lt;", work = NULL"&lt;&lt;endl;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    //构造函数:和类名相同,无返回值,可以设置默认值</div><div class="line">    Person()  //一但有了其它构造函数,默认的就必须写出来才能使用</div><div class="line">    &#123;</div><div class="line">        this-&gt;name = NULL;</div><div class="line">        this-&gt;age = 0;</div><div class="line">        this-&gt;work = NULL;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    Person(char *name, int age = 0, char *work = (char *)"none") //age和work设置有默认值</div><div class="line">    &#123;</div><div class="line">        //this-&gt;name = name;</div><div class="line">        this-&gt;name = new char[strlen(name) + 1]; //为了测试析构函数的自动调用,这里使用开辟堆空间存放数据</div><div class="line">        strcpy(this-&gt;name, name);</div><div class="line"></div><div class="line">        //this-&gt;work = work;</div><div class="line">        this-&gt;work = new char[strlen(work) + 1];</div><div class="line">        strcpy(this-&gt;work, work);</div><div class="line">        </div><div class="line">        if(age &lt; 0 || age &gt; 150)</div><div class="line">            this-&gt;age = 0;</div><div class="line">        else</div><div class="line">            this-&gt;age = age;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    ~Person()</div><div class="line">    &#123;</div><div class="line">        cout &lt;&lt; "~Person()"&lt;&lt;endl;</div><div class="line">        if (this-&gt;name) &#123;</div><div class="line">            cout&lt;&lt;"name = "&lt;&lt;name&lt;&lt;endl;</div><div class="line">            delete this-&gt;name;</div><div class="line">        &#125;</div><div class="line">        if (this-&gt;work) &#123;</div><div class="line">            cout&lt;&lt;"work = "&lt;&lt;work&lt;&lt;endl;</div><div class="line">            delete this-&gt;work;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    //拷贝构造函数</div><div class="line">    Person(Person &amp;per)</div><div class="line">    &#123;       </div><div class="line">        cout &lt;&lt; "Person(Person &amp;per)"&lt;&lt;endl;</div><div class="line">        </div><div class="line">        this-&gt;name = new char[strlen(per.name) + 1]; </div><div class="line">        strcpy(this-&gt;name, per.name);</div><div class="line"></div><div class="line">        this-&gt;work = new char[strlen(per.work) + 1];</div><div class="line">        strcpy(this-&gt;work, per.work);</div><div class="line">        </div><div class="line">        if(age &lt; 0 || age &gt; 150)</div><div class="line">            this-&gt;age = 0;</div><div class="line">        else</div><div class="line">            this-&gt;age = per.age;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">void test_object()</div><div class="line">&#123;</div><div class="line">    Person per0; //调用无参构造函数(后面无括号,有括号相当于声明)</div><div class="line">    Person per1((char *)"jack"); //调用带参构造函数,未传入的未默认值</div><div class="line">    Person *per2 = new Person((char *)"hceng", 23, (char *)"Embedded engineer"); //这种方式需要使用delete手动清除</div><div class="line">    </div><div class="line">    per0.printInfo();</div><div class="line">    per1.printInfo();</div><div class="line">    per2-&gt;printInfo();</div><div class="line">    </div><div class="line">    delete per2; //如果不手动删除,在调用完test_object()后,分配的堆空间不会被释放</div><div class="line">    cout &lt;&lt; "delete per2 end"&lt;&lt;endl;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">int main(int argc, char **argv)</div><div class="line">&#123;</div><div class="line">    test_object();</div><div class="line">    cout &lt;&lt; "run test_object end"&lt;&lt;endl;</div><div class="line">    </div><div class="line">    </div><div class="line">    Person per1((char *)"hceng", 23, (char *)"Embedded engineer");</div><div class="line">    Person per2(per1); </div><div class="line">    per2.printInfo();</div><div class="line">    </div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">name = NULL, age = 0, work = NULL</div><div class="line">name = jack, age = 0, work = none</div><div class="line">name = hceng, age = 23, work = Embedded engineer</div><div class="line">~Person()</div><div class="line">name = hceng</div><div class="line">work = Embedded engineer</div><div class="line">delete per2 end</div><div class="line">~Person()</div><div class="line">name = jack</div><div class="line">work = none</div><div class="line">~Person()</div><div class="line">run test_object end</div><div class="line">Person(Person &amp;per)</div><div class="line">name = hceng, age = 23, work = Embedded engineer</div><div class="line">~Person()</div><div class="line">name = hceng</div><div class="line">work = Embedded engineer</div><div class="line">~Person()</div><div class="line">name = hceng</div><div class="line">work = Embedded engineer</div></pre></td></tr></table></figure></li></ul><p>对该示例进行分析：</p><blockquote><p>1.1 定义了一个Person类，里面有三个私有的成员变量，四个公共的成员函数，两个构造函数，一个析构函数，一个拷贝构造函数；<br>1.2 外部两个函数，一个主函数，一个被主函数调用的<code>test_object()</code>；</p><p>2.1 主函数首先调用<code>test_object()</code>；<br>2.2 <code>test_object()</code>里使用三种方式实例化对象：调用无参构造函数，调用带参构造函数，<code>new</code>创建一个对象，调用带参的构造函数；<br>2.3 带参的构造函数，参数可以指定默认值；<br>2.4 一但有了带参的构造函数，就必须写出无参的构造函数才能调用无参的构造函数；<br>2.5 前两种实例化方式，在对象销毁前瞬间，由系统自动调用析构函数；而第三种方式必须手动使用<code>delete</code>删除；<br>　<br>3.1 将<code>Person</code>类的实例化对象<code>per1</code>作为参数传给<code>Person per2()</code>，就是拷贝构造函数，将调用<code>Person(Person &amp;per)</code>；<br>3.2 在拷贝构造函数里，将传入的<code>per</code>赋值给自己；<br>　<br>4.1 从打印结果分析，先调用<code>test_object()</code>，实例化了三个对象，然后对应的打印出他们信息；<br>4.2 接着<code>delete per2</code>，调用析构函数清理了<code>per2</code>；<br>4.3 结束<code>test_object()</code>的调用，释放<code>per0</code>和<code>per1</code>，自动调用析构函数清理；<br>4.4 接着实例化<code>per1</code>，再将其作为参数传给<code>per2</code>，此时调用拷贝构造函数，将<code>per1</code>的内容拷贝给<code>per2</code>；<br>4.5 结束时，自动调用析构函数，依次清理<code>per0</code>和<code>per2</code>；</p></blockquote><h2 id="1-6-静态成员"><a href="#1-6-静态成员" class="headerlink" title="1.6 静态成员"></a>1.6 静态成员</h2><p>静态成员的提出是为了解决数据共享的问题。<br>在类中，静态成员可以实现多个对象之间的数据共享，并且使用静态数据成员还不会破坏隐藏的原则，即保证了安全性。<br>因此，静态成员是类的所有对象中共享的成员，而不是某个对象的成员。</p><p>如下例子，需要统计总共生成了多少个类。</p><ul><li><p>示例：</p><figure class="highlight"><figcaption><span>[person.cpp]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line">#include &lt;iostream&gt;</div><div class="line">#include &lt;unistd.h&gt;</div><div class="line">#include &lt;string.h&gt;</div><div class="line"></div><div class="line">using namespace std;</div><div class="line"></div><div class="line">class Person &#123;</div><div class="line">private: </div><div class="line">    char *name; </div><div class="line">    int age;</div><div class="line">    char *work;</div><div class="line">    static int cnt;</div><div class="line"></div><div class="line">public:</div><div class="line">    static int getCount1(void)</div><div class="line">    &#123;</div><div class="line">        return cnt;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    static int getCount2(void); </div><div class="line">    </div><div class="line">    Person()  </div><div class="line">    &#123;</div><div class="line">        this-&gt;name = NULL;</div><div class="line">        this-&gt;age = 0;</div><div class="line">        this-&gt;work = NULL;</div><div class="line">        cnt++;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    Person(char *name, int age = 0, char *work = (char *)"none")  </div><div class="line">    &#123;</div><div class="line">        //this-&gt;name = name;</div><div class="line">        this-&gt;name = new char[strlen(name) + 1];  </div><div class="line">        strcpy(this-&gt;name, name);</div><div class="line"></div><div class="line">        //this-&gt;work = work;</div><div class="line">        this-&gt;work = new char[strlen(work) + 1];</div><div class="line">        strcpy(this-&gt;work, work);</div><div class="line">        </div><div class="line">        if(age &lt; 0 || age &gt; 150)</div><div class="line">            this-&gt;age = 0;</div><div class="line">        else</div><div class="line">            this-&gt;age = age;</div><div class="line">        </div><div class="line">        cnt++;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //析构函数</div><div class="line">    ~Person()</div><div class="line">    &#123;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //拷贝构造函数</div><div class="line">    Person(Person &amp;per)</div><div class="line">    &#123;       </div><div class="line">        cnt++;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">int Person::cnt = 0; //cnt定义和初始化</div><div class="line"></div><div class="line">int Person::getCount2(void) </div><div class="line">&#123; </div><div class="line">    return cnt; </div><div class="line">&#125;</div><div class="line"></div><div class="line">int main(int argc, char **argv)</div><div class="line">&#123;</div><div class="line">    Person per0;  </div><div class="line">    Person per1((char *)"jack");  </div><div class="line">    Person *per2 = new Person((char *)"hceng", 23, (char *)"Embedded engineer");  </div><div class="line">    Person per3(per1); </div><div class="line"></div><div class="line">    Person per4[10];</div><div class="line">    Person *per5 = new Person[10];</div><div class="line">    </div><div class="line">    cout &lt;&lt; "person number = "&lt;&lt;Person::getCount1()&lt;&lt;endl;</div><div class="line">    cout &lt;&lt; "person number = "&lt;&lt;per1.getCount1()&lt;&lt;endl;</div><div class="line">    cout &lt;&lt; "person number = "&lt;&lt;per5-&gt;getCount1()&lt;&lt;endl;</div><div class="line">    cout &lt;&lt; "person number = "&lt;&lt;per5-&gt;getCount2()&lt;&lt;endl;</div><div class="line">    </div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">person number = 24</div><div class="line">person number = 24</div><div class="line">person number = 24</div><div class="line">person number = 24</div></pre></td></tr></table></figure></li></ul><p>对该示例进行分析：</p><blockquote><p>1.1 定义了一个<code>Person</code>类，包含四个成员变量，其中<code>cnt</code>是静态成员变量；<br>1.2 接下来是两个静态方法，只有静态方法才能访问静态成员变量。两个静态方法前者实现了具体的内容，后者只是声明；<br>1.3 再是两个构造函数，在每个构造函数里添加<code>cnt++</code>，实现每次实例化对象时调用计数；<br>1.4 最后是析构函数和拷贝构造函数，拷贝构造函数也会实例化对象，也要<code>cnt++</code>；<br>　<br>2.1 前面的<code>Person</code>类里，只是声明了<code>cnt</code>，还需要定义和初始化；<br>2.2 函数<code>getCount2()</code>也需要定义实现具体的内容；　</p><ol><li>之后就可通过<code>Person</code>或者任何其中一个对象访问<code>cnt</code>；</li></ol></blockquote><h2 id="1-7-友员函数"><a href="#1-7-友员函数" class="headerlink" title="1.7 友员函数"></a>1.7 友员函数</h2><p>友元函数是可以直接访问类的私有成员的非成员函数。<br>它是定义在类外的普通函数，它不属于任何类，但需要在类的定义中加以声明，声明时只需在友元的名称前加上关键字<code>friend</code>。</p><p>比如下面的例子，<code>add()</code>函数想访问<code>Friend</code>类的私有成员。</p><ul><li><p>示例：</p><figure class="highlight cpp"><figcaption><span>[point.cpp]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">class</span> Point &#123;</div><div class="line"><span class="keyword">private</span>: </div><div class="line">    <span class="keyword">int</span> x;</div><div class="line">    <span class="keyword">int</span> y;</div><div class="line">    </div><div class="line"><span class="keyword">public</span>:</div><div class="line">    Point()</div><div class="line">    &#123;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    Point(<span class="keyword">int</span> a, <span class="keyword">int</span> b) : x(a+<span class="number">1</span>), y(b)</div><div class="line">    &#123;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getX</span><span class="params">()</span></span></div><div class="line">    &#123; </div><div class="line">        <span class="keyword">return</span> x; </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getY</span><span class="params">()</span></span></div><div class="line">    &#123; </div><div class="line">        <span class="keyword">return</span> y; </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printInfo</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"sum: ("</span>&lt;&lt;x&lt;&lt;<span class="string">", "</span>&lt;&lt;y&lt;&lt;<span class="string">")"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">friend</span> Point <span class="title">add</span><span class="params">(Point &amp;p1, Point &amp;p2)</span></span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function">Point <span class="title">add</span><span class="params">(Point &amp;p1, Point &amp;p2)</span></span></div><div class="line">&#123;</div><div class="line">    Point p;</div><div class="line">    </div><div class="line">    p.x = p1.x + p2.x;</div><div class="line">    p.y = p1.y + p2.y;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> p;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="function">Point <span class="title">p1</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"p1: ("</span>&lt;&lt;p1.getX()&lt;&lt;<span class="string">", "</span>&lt;&lt;p1.getY()&lt;&lt;<span class="string">")"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    </div><div class="line">    <span class="function">Point <span class="title">p2</span><span class="params">(<span class="number">2</span>, <span class="number">3</span>)</span></span>;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"p2: ("</span>&lt;&lt;p2.getX()&lt;&lt;<span class="string">", "</span>&lt;&lt;p2.getY()&lt;&lt;<span class="string">")"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    Point sum = add(p1, p2);</div><div class="line">    sum.printInfo();</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">p1: (2, 2)</div><div class="line">p2: (3, 3)</div><div class="line">sum: (5, 5)</div></pre></td></tr></table></figure></li></ul><p>对该示例进行分析：</p><blockquote><p>1 定义了类<code>Point</code>，包含两个私有成员变量，两个构造函数，三个成员函数，以及一个友员函数的声明；<br>　<br>2.1 第二个带参数的构造函数，有一个构造函数初始化列表；<br>2.2 它以一个冒号开始，接着是以逗号分隔的数据成员列表，每个数据成员后面跟一个放在括号中的初始化式；<br>2.3 在进行带参数的实例化对象时，成员<code>x</code>就等于传入的参数<code>a</code>加1；<br>　<br>3.1 在主函数里，先实例化<code>p1</code>和<code>p2</code>；<br>3.2 友员函数<code>add()</code>可以直接访问<code>f1</code>和<code>f2</code>的私有成员变量，不再通过调用其成员函数进行访问，提高了效率；</p></blockquote><h2 id="1-8-运算符的重载"><a href="#1-8-运算符的重载" class="headerlink" title="1.8 运算符的重载"></a>1.8 运算符的重载</h2><p>运算符的重载顾名思义就是对运算符进行重载，比如原来的加号<code>+</code>，只能实现基本数据类型的相加，现在对其扩展功能，实现对类的相加。<br>在使用运算符重载前，必须先定义一个运算符重载函数，其名字为<code>operator</code>，后随一个要重载的运算符。例如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">operator+ 加法</div><div class="line">operator* 乘法</div></pre></td></tr></table></figure></p><p>下例实现了对加法<code>+0</code>，自增运算<code>++</code>、打印输出<code>&lt;&lt;</code>进行重载。</p><ul><li><p>示例：</p><figure class="highlight cpp"><figcaption><span>[point.cpp]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">class</span> Point &#123;</div><div class="line"><span class="keyword">private</span>: </div><div class="line">    <span class="keyword">int</span> x;</div><div class="line">    <span class="keyword">int</span> y;</div><div class="line">    </div><div class="line"><span class="keyword">public</span>:</div><div class="line">    Point()</div><div class="line">    &#123;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    Point(<span class="keyword">int</span> a, <span class="keyword">int</span> b) : x(a), y(b)</div><div class="line">    &#123;</div><div class="line">        <span class="comment">//x = a;</span></div><div class="line">        <span class="comment">//y = b;</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printInfo</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"printInfo: ("</span>&lt;&lt;x&lt;&lt;<span class="string">", "</span>&lt;&lt;y&lt;&lt;<span class="string">")"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="keyword">friend</span> Point <span class="keyword">operator</span>+(Point &amp;p1, Point &amp;p2);</div><div class="line">    <span class="keyword">friend</span> Point&amp; <span class="keyword">operator</span>++(Point &amp;p);</div><div class="line">    <span class="keyword">friend</span> Point <span class="keyword">operator</span>++(Point &amp;p, <span class="keyword">int</span> a);</div><div class="line">    <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp;o, Point p);</div><div class="line">    </div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> 0   </span></div><div class="line">    <span class="comment">//a+b</span></div><div class="line">    Point <span class="keyword">operator</span>+(Point &amp;p)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"operator+(Point &amp;p)"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">        Point r;</div><div class="line">        r.x = <span class="keyword">this</span>-&gt;x + p.x;</div><div class="line">        r.y = <span class="keyword">this</span>-&gt;y + p.y;</div><div class="line">        <span class="keyword">return</span> r;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//++a</span></div><div class="line">    Point&amp; <span class="keyword">operator</span>++(<span class="keyword">void</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"operator++(void)"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">        <span class="keyword">this</span>-&gt;x += <span class="number">1</span>;</div><div class="line">        <span class="keyword">this</span>-&gt;y += <span class="number">1</span>;</div><div class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//a++</span></div><div class="line">    Point <span class="keyword">operator</span>++(<span class="keyword">int</span> a)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"operator++(int a)"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">        Point r;</div><div class="line">        r = *<span class="keyword">this</span>;</div><div class="line">        <span class="keyword">this</span>-&gt;x += <span class="number">1</span>;</div><div class="line">        <span class="keyword">this</span>-&gt;y += <span class="number">1</span>;</div><div class="line">        <span class="keyword">return</span> r;   </div><div class="line">    &#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">//a+b</span></div><div class="line">Point <span class="keyword">operator</span>+(Point &amp;p1, Point &amp;p2)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"operator+(Point &amp;p1, Point &amp;p2)"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    </div><div class="line">    Point r;</div><div class="line">    </div><div class="line">    r.x = p1.x + p2.x;</div><div class="line">    r.y = p1.y + p2.y;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> r;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//++a</span></div><div class="line">Point&amp; <span class="keyword">operator</span>++(Point &amp;p)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"operator++(Point &amp;p)"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    </div><div class="line">    p.x += <span class="number">1</span>;</div><div class="line">    p.y += <span class="number">1</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> p;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//a++</span></div><div class="line">Point <span class="keyword">operator</span>++(Point &amp;p, <span class="keyword">int</span> a)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"operator++(Point &amp;p, int a)"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    </div><div class="line">    Point r;</div><div class="line">    r = p;</div><div class="line">    </div><div class="line">    p.x += <span class="number">1</span>;</div><div class="line">    p.y += <span class="number">1</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> r;</div><div class="line">&#125;</div><div class="line">    </div><div class="line"><span class="comment">//&lt;&lt;</span></div><div class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp;o, Point p) <span class="comment">//第一个参数不是Point类型,不能写到成员函数里</span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"("</span>&lt;&lt;p.x&lt;&lt;<span class="string">", "</span>&lt;&lt;p.y&lt;&lt;<span class="string">")"</span>;</div><div class="line">    <span class="keyword">return</span> o;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="function">Point <span class="title">p1</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</div><div class="line">    <span class="function">Point <span class="title">p2</span><span class="params">(<span class="number">4</span>, <span class="number">5</span>)</span></span>;</div><div class="line">    Point p;</div><div class="line"></div><div class="line">    p = p1 + p2;</div><div class="line">    p.printInfo();</div><div class="line">    </div><div class="line">    p = ++p1;</div><div class="line">    p.printInfo();</div><div class="line">    p1.printInfo();</div><div class="line">    </div><div class="line">    p = p2++;</div><div class="line">    p.printInfo();</div><div class="line">    p2.printInfo();</div><div class="line">    </div><div class="line">    <span class="built_in">cout</span>&lt;&lt;p&lt;&lt;p1&lt;&lt;p2&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">operator+(Point &amp;p1, Point &amp;p2)</div><div class="line">printInfo: (5, 7)</div><div class="line">operator++(Point &amp;p)</div><div class="line">printInfo: (2, 3)</div><div class="line">printInfo: (2, 3)</div><div class="line">operator++(Point &amp;p, int a)</div><div class="line">printInfo: (4, 5)</div><div class="line">printInfo: (5, 6)</div><div class="line">(4, 5)(2, 3)(5, 6)</div></pre></td></tr></table></figure></li></ul><p>对该示例进行分析：</p><blockquote><p>1.1 定义了类<code>Point</code>，包含两个私有变量，两个构造函数，一个成员函数，四个重载函数；<br>1.2 这四个重载函数，可以作为成员函数，在类里面实现，也可作为类外函数，在类外实现，只在类里面声明；<br>1.3 重载函数作为成员函数时，可以直接访问类的私有属性；重载函数作为类外函数时，通过友员的声明，访问类的私有属性；<br>1.4 同名的<code>operator++()</code>，不含参数<code>int a</code>表示前缀<code>++</code>，带参数<code>int a</code>的表示后缀<code>++</code>；<br>1.5 <code>operator&lt;&lt;</code>因为第一个参数不是<code>Point</code>类型，不能作为成员函数；<br>　<br>2.主函数里，使用重载后的<code>+</code>可以实现<code>Point</code>类的相加，以及<code>Point</code>类的<code>++</code>和<code>&lt;&lt;</code>；</p></blockquote><h1 id="2-C-面向对象编程"><a href="#2-C-面向对象编程" class="headerlink" title="2. C++面向对象编程"></a>2. C++面向对象编程</h1><p>如同Java面向对象编程一样，C++面向对象编程也有三大特性：封装性、继承性、多态性。</p><h2 id="2-1-访问扩展和继承"><a href="#2-1-访问扩展和继承" class="headerlink" title="2.1 访问扩展和继承"></a>2.1 访问扩展和继承</h2><p>这里定义一个基类<code>Father</code>，两个继承于<code>Father</code>的派生类<code>Son</code>和<code>Daughter</code>。</p><ul><li><p>示例：</p><figure class="highlight cpp"><figcaption><span>[person.cpp]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">class</span> Father &#123;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="keyword">int</span> money;</div><div class="line">    </div><div class="line"><span class="keyword">protected</span>:</div><div class="line">    <span class="keyword">int</span> room_key;</div><div class="line">    <span class="keyword">int</span> room_car;</div><div class="line">    </div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">int</span> phone;</div><div class="line">    <span class="keyword">int</span> address;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">working</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"father working"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getMoney</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> money;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setMoeny</span><span class="params">(<span class="keyword">int</span> money)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">this</span>-&gt;money = money;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">class</span> Son : <span class="keyword">public</span> Father &#123;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="keyword">int</span> book;</div><div class="line">    <span class="keyword">using</span> Father::phone;</div><div class="line">    </div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">using</span> Father::room_car;</div><div class="line">    <span class="comment">//using Father::money; //无法改变父类private类型的属性</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">learning</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"son learning"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getKey</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">//s.money = 10; //private属性,子类也无法访问</span></div><div class="line">        room_key = <span class="number">1</span>;   <span class="comment">//protected属性,子类可以访问</span></div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">class</span> Daughter : <span class="keyword">protected</span> Father &#123;</div><div class="line"><span class="keyword">private</span>:</div><div class="line"></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dancing</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"daughter dancing"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">        room_key = <span class="number">1</span>; <span class="comment">//不管何种继承,在派生类内部使用父类时无差别</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">working</span><span class="params">(<span class="keyword">void</span>)</span> <span class="comment">//覆写</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"daughter working"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></div><div class="line">&#123;</div><div class="line">    Son s;</div><div class="line">    Daughter d;</div><div class="line">    </div><div class="line">    <span class="comment">//s.money = 10; //private属性,外部无法访问</span></div><div class="line">    s.setMoeny(<span class="number">10</span>);</div><div class="line">    </div><div class="line">    <span class="comment">//s.room_key = 1; //protected属性,外部无法访问</span></div><div class="line">    s.getKey();</div><div class="line">    </div><div class="line">    s.working(); <span class="comment">//public,外部可以直接访问</span></div><div class="line">    s.learning();</div><div class="line">    </div><div class="line">    s.room_car = <span class="number">1</span>; <span class="comment">//子类将其变为了public,使得可以访问</span></div><div class="line">    <span class="comment">//s.phone = 1; //子类将其变为了private,使得不能访问</span></div><div class="line">    </div><div class="line">    d.dancing(); <span class="comment">//自己的属性没有</span></div><div class="line">    <span class="comment">//d.working(); //protected继承,父类方法变为protected,外部无法访问</span></div><div class="line">    d.working();</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">father working</div><div class="line">son learning</div><div class="line">daughter dancing</div><div class="line">daughter working</div></pre></td></tr></table></figure></li></ul><p>对该示例进行分析：</p><blockquote><p>1.1 定义一个类<code>Father</code>，有一个私有属性<code>money</code>，两个保护属性<code>room_key</code>和<code>room_car</code>，两个公共属性<code>phone</code>和<code>address</code>，以及三个共有的方法<code>working()</code>、<code>getMoney()</code>，<code>setMoeny()</code>；<br>1.2 定义一个类<code>Son</code>，公共继承于<code>Father</code>。有一个私有属性<code>book</code>，以及将父类的<code>phone</code>属性变成了私有属性。将父类的保护属性<code>room_car</code>变成了公共属性，父类的私有属性无法改变。有两个公有方法<code>learning()</code>、<code>getKey()</code>。其中<code>getKey()</code>能访问了父类的保护属性，但不能访问私有属性；<br>1.3 定义一个类<code>Daughter</code>，保护继承于<code>Father</code>。有一个公共方法<code>dancing()</code>，访问了父类的保护属性。覆写了父类的<code>working()</code>方法；<br>　<br>2.1 主函数先实例化了<code>Son</code>和<code>Daughter</code>；<br>2.2 外部无法直接访问类中的私有属性<code>money</code>，只能通过父类提供的公共函数<code>setMoney()</code>进行访问；<br>2.3 外部无法直接访问父类的保护属性<code>room_key</code>，只能通过父类提供的公共函数<code>setKey()</code>进行访问；<br>2.4 函数<code>working()</code>来自基类<code>Father</code>，函数<code>learning()</code>来自派生类<code>Son</code>；<br>2.5 <code>room_car</code>在基类中原为保护属性，在派生类里被改为了公共属性，因此可被外界访问；<br>2.6 同理将原公共属性<code>phone</code>改为了私有属性，外部无法访问；另外，派生类无法修改基类的私有属性；<br>2.7 类<code>Daughter</code>，保护继承于<code>Father</code>，父类的所有属性、函数，外部都无法直接访问；<br>2.8 派生类<code>Daughter</code>覆写了基类的<code>working()</code>，且为公共的，因此外部可以直接访问；<br>　<br>3.基类成员在派生类中的访问控制属性如下：</p></blockquote><table><thead><tr><th style="text-align:center">继承类型 \ 基类访问属性</th><th style="text-align:center">public</th><th style="text-align:center">protected</th><th style="text-align:center">private</th></tr></thead><tbody><tr><td style="text-align:center">public</td><td style="text-align:center">public</td><td style="text-align:center">public</td><td style="text-align:center">隔离</td></tr><tr><td style="text-align:center">protected</td><td style="text-align:center">protected</td><td style="text-align:center">protected</td><td style="text-align:center">隔离</td></tr><tr><td style="text-align:center">private</td><td style="text-align:center">private</td><td style="text-align:center">private</td><td style="text-align:center">隔离</td></tr></tbody></table><h2 id="2-2-多重继承"><a href="#2-2-多重继承" class="headerlink" title="2.2 多重继承"></a>2.2 多重继承</h2><p>大多数程序使用单个基类的公用继承，但是在某些情况下，单继承是不够的，必须使用多继承。<br>比如，对于沙发床，既继承于沙发，也继承于床。</p><p>C++允许为一个派生类指定多个基类，这样的继承结构被称做<strong>多重继承</strong>。<br>因为不同的基类，可能有相同的属性，导致派生类出现<strong>二义性</strong>。<br>出现二义性，要么显示的指出要调用的是哪个类中的成员，要么就使用<strong>虚基类</strong>。<br>C++提供虚基类(virtual base class)的方法，使得在继承共同基类时只保留一份成员。</p><ul><li><p>示例：</p><figure class="highlight cpp"><figcaption><span>[person.cpp]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="comment">//method 1</span></div><div class="line"><span class="keyword">class</span> Sofa &#123;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="keyword">int</span> weight;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">watchTV</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Sofa: watch TV"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setWeight</span><span class="params">(<span class="keyword">int</span> weight)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">this</span>-&gt;weight = weight;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getWeight</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> weight;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">class</span> Bed &#123;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="keyword">int</span> weight;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sleep</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Bed: sleep"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setWeight</span><span class="params">(<span class="keyword">int</span> weight)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">this</span>-&gt;weight = weight;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getWeight</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> weight;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">class</span> Sofabed : <span class="keyword">public</span> Sofa , <span class="keyword">public</span> Bed &#123;</div><div class="line">    </div><div class="line">&#125;; </div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//method 2</span></div><div class="line"><span class="keyword">class</span> Furniture &#123;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="keyword">int</span> weight;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setWeight</span><span class="params">(<span class="keyword">int</span> weight)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">this</span>-&gt;weight = weight;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getWeight</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> weight;</div><div class="line">    &#125;   </div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">class</span> Sofa1 : <span class="keyword">virtual</span> <span class="keyword">public</span> Furniture &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">watchTV</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Sofa1: watch TV"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">class</span> Bed1 : <span class="keyword">virtual</span> <span class="keyword">public</span> Furniture &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sleep</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Bed1: sleep"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">class</span> Sofabed1 : <span class="keyword">public</span> Sofa1 , <span class="keyword">public</span> Bed1 &#123;</div><div class="line">    </div><div class="line">&#125;; </div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></div><div class="line">&#123;</div><div class="line">    Sofabed s;</div><div class="line">    Sofabed1 s1;</div><div class="line">    </div><div class="line">    s.watchTV();</div><div class="line">    s.sleep();</div><div class="line">    <span class="comment">//s.setWeight(100); //无法确定是哪一个基类的方法</span></div><div class="line">    s.Sofa::setWeight(<span class="number">100</span>);</div><div class="line">    </div><div class="line">    s1.watchTV();</div><div class="line">    s1.sleep();</div><div class="line">    s1.setWeight(<span class="number">100</span>);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Sofa: watch TV</div><div class="line">Bed: sleep</div><div class="line">Sofa1: watch TV</div><div class="line">Bed1: sleep</div></pre></td></tr></table></figure></li></ul><p>对该示例进行分析：</p><blockquote><p>1.1 定义了一个类<code>Sofa</code>，包含一个私有属性<code>weight</code>，三个公共的方法<code>watchTV()</code>、<code>setWeight()</code>、<code>getWeight()</code>；<br>1.2 定义了一个类<code>Bed</code>，包含一个私有属性<code>weight</code>，三个公共的方法<code>sleep()</code>、<code>setWeight()</code>、<code>getWeight()</code>；<br>1.3 定义了一个类<code>Sofabed</code>，继承于<code>Sofa</code>和<code>Bed</code>；<br>　<br>2.1 定义了一个类<code>Furniture</code>，包含一个私有属性<code>weight</code>，两个公共的方法<code>setWeight()</code>、<code>getWeight()</code>；<br>2.2 定义了一个类<code>Sofa1</code>，虚拟继承于<code>Furniture</code>，有一个公共方法<code>watchTV()</code>；<br>2.3 定义了一个类<code>Bed1</code>，虚拟继承于<code>Furniture</code>，有一个公共方法<code>sleep()</code>；<br>2.4 定义了一个类<code>Sofabed1</code>，继承于<code>Sofa1</code>和<code>Bed1</code>；<br>　<br>3.1 实例化了<code>Sofabed</code>，可以直接访问各基类中的方法，但遇到了同名的方法，需要指定是哪一个类的方法；<br>3.2 实例化了<code>Sofabed1</code>，可以直接访问各基类中的方法，因为其基类都继承于虚基类<code>Furniture</code>，因此<code>setWeight()</code>方法只存在一份，不会出现二义性；</p></blockquote><h2 id="2-3-构造顺序"><a href="#2-3-构造顺序" class="headerlink" title="2.3 构造顺序"></a>2.3 构造顺序</h2><p>我们构造的类开始越来越复杂，一个类可能含有一个或多个基类，基类有可能是虚拟基类，另外类本身也可能有对象成员，这里就理一下它们的构造顺序。</p><p>这里构造的类比较多，它们的关系如下：</p><div align="center"><img width="800" src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180924/1.jpg"></div><p>其中虚线表示虚拟继承。</p><ul><li><p>示例：</p><figure class="highlight"><figcaption><span>[CompanySofabed.cpp]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div></pre></td><td class="code"><pre><div class="line">#include &lt;iostream&gt;</div><div class="line">#include &lt;string.h&gt;</div><div class="line">#include &lt;unistd.h&gt;</div><div class="line"></div><div class="line">using namespace std;</div><div class="line"></div><div class="line">class Furniture &#123;</div><div class="line">public:</div><div class="line">    Furniture(void)</div><div class="line">    &#123;</div><div class="line">        cout &lt;&lt; "Furniture(void)" &lt;&lt; endl;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">class Verification &#123;</div><div class="line">public:</div><div class="line">    Verification(void)</div><div class="line">    &#123;</div><div class="line">        cout &lt;&lt; "Verification(void)" &lt;&lt; endl;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">class Sofa : virtual public Furniture, virtual public Verification &#123;</div><div class="line">public:</div><div class="line">    Sofa(void)</div><div class="line">    &#123;</div><div class="line">        cout &lt;&lt; "Sofa(void)" &lt;&lt; endl;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">class Bed : virtual public Furniture, virtual public Verification &#123;</div><div class="line">public:</div><div class="line">    Bed(void)</div><div class="line">    &#123;</div><div class="line">        cout &lt;&lt; "Bed(void)" &lt;&lt; endl;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">class Sofabed : public Sofa , public Bed &#123;</div><div class="line">public:</div><div class="line">    Sofabed(void)</div><div class="line">    &#123;</div><div class="line">        cout &lt;&lt; "Sofabed(void)" &lt;&lt; endl;</div><div class="line">    &#125;  </div><div class="line"></div><div class="line">    Sofabed(char *s)</div><div class="line">    &#123;</div><div class="line">        cout &lt;&lt; "Sofabed(char *s)" &lt;&lt; endl;</div><div class="line">    &#125;       </div><div class="line">&#125;; </div><div class="line"></div><div class="line">class Company &#123;</div><div class="line">public:</div><div class="line">    Company(void)</div><div class="line">    &#123;</div><div class="line">        cout &lt;&lt; "Company(void)" &lt;&lt; endl;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Company(char *s)</div><div class="line">    &#123;</div><div class="line">        cout &lt;&lt; "Company(char *s)" &lt;&lt; endl;</div><div class="line">    &#125;   </div><div class="line">&#125;;</div><div class="line"></div><div class="line">class Type &#123;</div><div class="line">public:</div><div class="line">    Type(void)</div><div class="line">    &#123;</div><div class="line">        cout &lt;&lt; "Type(void)" &lt;&lt; endl;</div><div class="line">    &#125;   </div><div class="line">&#125;;</div><div class="line"></div><div class="line">class Date &#123;</div><div class="line">public:</div><div class="line">    Date(void)</div><div class="line">    &#123;</div><div class="line">        cout &lt;&lt; "Date(void)" &lt;&lt; endl;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    Date(char *s)</div><div class="line">    &#123;</div><div class="line">        cout &lt;&lt; "Date(char *s)" &lt;&lt; endl;</div><div class="line">    &#125;       </div><div class="line">&#125;;</div><div class="line"></div><div class="line">class CompanySofabed : public Sofabed, virtual public Company &#123;</div><div class="line">private:</div><div class="line">    Type type;</div><div class="line">    Date date;</div><div class="line">    </div><div class="line">public:</div><div class="line">    CompanySofabed(void)</div><div class="line">    &#123;</div><div class="line">        cout &lt;&lt; "CompanySofabed(void)" &lt;&lt; endl;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    CompanySofabed(char *s1, char *s2, char *s3): Sofabed(s1), Company(s2), date(s3)</div><div class="line">    &#123;</div><div class="line">        cout &lt;&lt; "CompanySofabed(char *s)" &lt;&lt; endl;</div><div class="line">    &#125;   </div><div class="line">&#125;;</div><div class="line"></div><div class="line">int main(int argc, char **argv)</div><div class="line">&#123;</div><div class="line">    CompanySofabed c((char *)"good", (char *)"xxx", (char *)"2018");</div><div class="line">    </div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Furniture(void)</div><div class="line">Verification(void)</div><div class="line">Company(char *s)</div><div class="line">Sofa(void)</div><div class="line">Bed(void)</div><div class="line">Sofabed(char *s)</div><div class="line">Type(void)</div><div class="line">Date(char *s)</div><div class="line">CompanySofabed(char *s)</div></pre></td></tr></table></figure></li></ul><p>对该示例进行分析：</p><blockquote><p>1.1 基类与衍生类的关系如前面的图，这里就不复述了；<br>1.2 为每个类创建个构造函数，以便打印观察构造顺序；<br>　<br>2.1 从结果可以看出，虚拟基类最先执行构造，且构造一次；<br>2.2 然后再是非虚拟基类，依次按顺序构造；<br>2.3 再是类自己的对象成员，按声明的顺序构造；<br>2.4 最后是类自己构造；<br>　<br>3.1 注意对类自己对象成员的赋值，是使用的对象的名字；<br>3.2 析构顺序，与构造顺序相反；</p></blockquote><h2 id="2-4-多态"><a href="#2-4-多态" class="headerlink" title="2.4 多态"></a>2.4 多态</h2><p>前面的封装可以使得代码模块化，继承可以扩展已存在的代码，他们的目的都是为了<strong>代码重用</strong>。<br>而多态的目的则是为了<strong>接口重用</strong>。<br>也就是说，不论传递过来的究竟是那个类的对象，函数都能够通过同一个接口调用到适应各自对象的实现方法。</p><p>C++支持两种多态性：编译时多态性，运行时多态性；<br>a、编译时多态性(静态多态)：通过<strong>重载</strong>函数实现；<br>b、运行时多态性(动态多态)：通过<strong>虚函数</strong>实现；</p><p>利用重载前面已经介绍过了，就是传入的参数不一样，从而调用对应的同名函数。<br>这里主要分析动态多态，即利用虚函数实现。</p><p>对于虚函数，采用动态联编，对象里有一个指针，指向虚函数表，调用虚函数时，会根据对象里的指针找到表，从表中取出函数来执行<br>对于非虚函数，采用静态联编，编译时就确定调用哪个函数；</p><div align="center"><img width="600" src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180924/2.jpg"></div><p>差别：静态联编效率高，动态联编支持多态；</p><ul><li><p>示例：</p><figure class="highlight cpp"><figcaption><span>[human.cpp]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">class</span> Human &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">eating</span><span class="params">(<span class="keyword">void</span>)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"use hand to eat"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">virtual</span> Human* <span class="title">test</span><span class="params">(<span class="keyword">void</span>)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Human test"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">virtual</span> ~Human() </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"~Human"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">class</span> American : <span class="keyword">public</span> Human &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eating</span><span class="params">(<span class="keyword">void</span>)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"use knife to eat"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">virtual</span> American* <span class="title">test</span><span class="params">(<span class="keyword">void</span>)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"American test"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">virtual</span> ~American() </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"~American"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">class</span> Chinese : <span class="keyword">public</span> Human &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eating</span><span class="params">(<span class="keyword">void</span>)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"use chopsticks to eat"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">virtual</span> Chinese* <span class="title">test</span><span class="params">(<span class="keyword">void</span>)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Chinese test"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">virtual</span> ~Chinese() </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"~Chinese"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_eating</span><span class="params">(Human&amp; h)</span></span></div><div class="line">&#123;</div><div class="line">    h.eating();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_return</span><span class="params">(Human&amp; h)</span></span></div><div class="line">&#123;</div><div class="line">    h.test();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></div><div class="line">&#123;</div><div class="line">    Human h;</div><div class="line">    American a;</div><div class="line">    Chinese c;</div><div class="line">    </div><div class="line">    test_eating(h);</div><div class="line">    test_eating(a);</div><div class="line">    test_eating(c);</div><div class="line">    </div><div class="line">    test_return(h);</div><div class="line">    test_return(a);</div><div class="line">    test_return(c);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">use hand to eat</div><div class="line">use knife to eat</div><div class="line">use chopsticks to eat</div><div class="line">Human test</div><div class="line">American test</div><div class="line">Chinese test</div><div class="line">~Chinese</div><div class="line">~Human</div><div class="line">~American</div><div class="line">~Human</div><div class="line">~Human</div></pre></td></tr></table></figure></li></ul><p>对该示例进行分析：</p><blockquote><p>1.1 定义了三个类，<code>Human</code>是基类，<code>American</code>和<code>Chinese</code>是其派生类；<br>1.2 <code>Human</code>里有一个<code>virtual</code>修饰的<code>eating()</code>虚函数，两个派生类同名的函数也自动是虚函数；<br>1.3 一般只有函数名、参数和返回值都相同的才能设为虚函数，但当返回值为当前对象的指针或引用时，也可以设为虚函数，这里每个类都有一个<code>test()</code>函数，函数名、参数都一样，只是返回类型是对象的指针，因此可以被设置为虚函数；<br>1.4 析构函数一般都声明为虚函数，不然可能都释放的都是基类；<br>　<br>2.1 主函数里，分别实例化三个类，分别调用<code>test_eating()</code>，因为<code>eating()</code>是虚函数，编译时对象生成一个指针指向虚函数表，调用虚函数时，会根据对象里的指针找到表，从而找到对应的函数执行；<br>2.2 <code>test()</code>在每个类中的名字、参数相同，返回值为该对象的指针，因此可以设置为虚函数，从而实现调用各自类中对应函数；<br>　<br>3.1 只有类的成员函数才能声明为虚函数；<br>3.2 静态成员函数、内联函数、构造函数不能是虚函数；<br>3.3 对于重载(函数参数不同)，也不可设为虚函数；<br>3.4 对于覆盖(函数参数、返回值相同)，才可以设为虚函数；<br>3.5 函数参数相同，但是返回值是当前对象的指针或引用时，也可以设为虚函数；</p></blockquote><h2 id="2-5-类型转换"><a href="#2-5-类型转换" class="headerlink" title="2.5 类型转换"></a>2.5 类型转换</h2><p>对比C语言，C++的类型转换也分<strong>显式转换</strong>和<strong>隐式转换</strong>。</p><p>在C语言中，隐式转换，类似将<code>short</code>类型变量直接赋值给<code>int</code>类型变量，就会自动隐式转换；<br>在C语言中，显式转换，通过<code>(int)</code>修饰<code>short</code>，就是指定转换类型的显示转换；<br>在C++中，隐式转换和C语言差不多，这里重点记录下C++的显式转换。</p><p>C++有四种强制类型转换操作符：<code>static_cast</code>、<code>dynamic_cast</code>、<code>const_cast</code>、<code>reinterpret_cast</code>。<br>格式为：<code>强制类型转换操作符&lt;type&gt;(expression)</code></p><ul><li><p><strong>static_cast：</strong>最常用的类型转换符，比如基本数据类型之间的转换。<br>也可用于基类和子类之间指针或引用的转换，进行<strong>上行转换</strong>(把子类的指针或引用转换成基类表示)是安全的；进行<strong>下行转换</strong>(把基类指针或引用转换成子类指针或引用)时，由于没有动态类型检查，所以是不安全的。<br>注意：<code>static_cast</code>不能转换掉<code>const</code>、<code>volital</code>e、或者<code>__unaligned</code>属性。</p></li><li><p><strong>dynamic_cast：</strong>用于<strong>运行时检查</strong>该转换是否类型安全，但只在多态场合时合法，即该类至少具有一个<strong>虚函数</strong>。<br>主要用于类层次间的上行转换和下行转换，还可以用于类之间的交叉转换。在类层次间进行上行转换时，<code>dynamic_cas</code>t和<code>static_cast</code>的效果是一样的；在进行下行转换时，<code>dynamic_cast</code>具有类型检查的功能，比<code>static_cast</code>更安全。<br><code>Type</code>必须是类的指针、类的引用或者<code>void *</code>，且<code>type</code>类型要和<code>expression</code>一致。</p></li><li><p><strong>const_cast：</strong>该操作符用于去除原来类型的<code>const</code>或<code>volatile</code>属性，<code>type</code>和<code>expression</code>的类型是一样的。</p></li><li><p><strong>reinterpret_cast：</strong><code>reinterpret</code>的意思就是重新解释，此操作符的意思即为数据的二进制形式重新解释，但是不改变其值。<br><code>type</code>必须是一个指针、引用、算术类型、函数指针或者成员指针，它可以把一个指针转换成一个整数，也可以把一个整数转换成一个指针。<br>如果<code>type</code>是类指针类型，那么<code>expression</code>也必须是一个指针；如果<code>type</code>是一个引用，那么<code>expression</code>也必须是一个引用。<br>和C语言的强制转换类似，没有安全性检查。</p></li></ul><p>下面举个例子，对其具体分析。</p><ul><li><p>示例：</p><figure class="highlight cpp"><figcaption><span>[human.cpp]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">class</span> Human &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">eating</span><span class="params">(<span class="keyword">void</span>)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"use hand to eat"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">class</span> American : <span class="keyword">public</span> Human &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eating</span><span class="params">(<span class="keyword">void</span>)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"use knife to eat"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">class</span> Chinese : <span class="keyword">public</span> Human &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eating</span><span class="params">(<span class="keyword">void</span>)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"use chopsticks to eat"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">class</span> Chongqing : <span class="keyword">public</span> Chinese &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eating</span><span class="params">(<span class="keyword">void</span>)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"use chopsticks to eat Chongqing"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">show_type</span><span class="params">(Human&amp; h)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">//Pointer </span></div><div class="line">    American *a;</div><div class="line">    Chinese *c;</div><div class="line">    Chongqing *cq;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (a = <span class="keyword">dynamic_cast</span>&lt;American *&gt;(&amp;h))</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"this human is American"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">if</span> (c = <span class="keyword">dynamic_cast</span>&lt;Chinese *&gt;(&amp;h))</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"this human is Chinese"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">if</span> (cq = <span class="keyword">dynamic_cast</span>&lt;Chongqing *&gt;(&amp;h))</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"this human is Chongqing"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    </div><div class="line">    <span class="comment">//Reference</span></div><div class="line">    <span class="keyword">if</span> (cq = <span class="keyword">dynamic_cast</span>&lt;Chongqing *&gt;(&amp;h))</div><div class="line">    &#123;</div><div class="line">        <span class="comment">//American&amp; am = dynamic_cast&lt;American&amp;&gt;(h); //unable convert, generate aborted</span></div><div class="line">        Chinese&amp; ch = <span class="keyword">dynamic_cast</span>&lt;Chinese&amp;&gt;(h);    </div><div class="line">        Chongqing&amp; cqr = <span class="keyword">dynamic_cast</span>&lt;Chongqing&amp;&gt;(h);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">double</span> a = <span class="number">4.44</span>;</div><div class="line">    <span class="keyword">int</span> b = a; <span class="comment">//double to int</span></div><div class="line"><span class="keyword">int</span> c = (<span class="keyword">int</span>)a;</div><div class="line">    <span class="keyword">int</span> d = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(a);</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"b = "</span>&lt;&lt;b&lt;&lt;<span class="string">"  "</span>&lt;&lt;<span class="string">"c = "</span>&lt;&lt;c&lt;&lt;<span class="string">"  "</span>&lt;&lt;<span class="string">"d = "</span>&lt;&lt;d&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *e = <span class="string">"www.hceng.cn"</span>;</div><div class="line">    <span class="keyword">char</span> *f = <span class="keyword">const_cast</span>&lt;<span class="keyword">char</span> *&gt;(e); <span class="comment">//clear const attribute</span></div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"e = "</span>&lt;&lt;e&lt;&lt;<span class="string">"  "</span>&lt;&lt;<span class="string">"f = "</span>&lt;&lt;f&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> *g =<span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">int</span> *&gt;(f); <span class="comment">//char * to unsigned int * </span></div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"g = "</span>&lt;&lt;g&lt;&lt;<span class="built_in">endl</span>; </div><div class="line">    </div><div class="line">    </div><div class="line">    Human hu;</div><div class="line">    American am;</div><div class="line">    Chinese ch;</div><div class="line">    Chongqing cq;</div><div class="line">    </div><div class="line">    show_type(hu);</div><div class="line">    show_type(am);</div><div class="line">    show_type(ch);</div><div class="line">    show_type(cq);</div><div class="line">    </div><div class="line">    American *h1 =<span class="keyword">static_cast</span>&lt;American *&gt;(&amp;hu);</div><div class="line">    <span class="comment">//American *h2 = static_cast&lt;American *&gt;(&amp;cq);</span></div><div class="line">    Chinese *h3 = <span class="keyword">static_cast</span>&lt;Chinese *&gt;(&amp;cq);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">b = 4  c = 4  d = 4</div><div class="line">e = www.hceng.cn  f = www.hceng.cn</div><div class="line">g = 0x55be4eac1347</div><div class="line">this human is American</div><div class="line">this human is Chinese</div><div class="line">this human is Chinese</div><div class="line">this human is Chongqing</div></pre></td></tr></table></figure></li></ul><p>对该示例进行分析：</p><blockquote><p>1.1 定义了四个类，<code>Human</code>是<code>American</code>和<code>Chinese</code>的基类，<code>Chinese</code>是<code>Chongqing</code>的基类；<br>1.2 基类<code>Human</code>有个虚函数<code>eating()</code>，其它三个类都直接或间接从它继承过来，因此也各种有该虚函数；<br>　<br>2.1 主函数里，首先是将一个<code>double</code>转换成<code>int</code>，<code>b</code>是通过隐式转换得到，<code>c</code>是通过C语言风格的强制转换得到，<code>d</code>是通过C++的<code>static_cast</code>强制类型转换操作符得到；<br>2.2 字符串指针<code>e</code>，定义时被<code>const</code>修饰，通过<code>const_cast</code>强制类型转换操作符，可以去掉<code>const</code>得到<code>f</code>，注意两者的数据类型要一致；<br>2.3 接着通过<code>reinterpret_cast</code>强制类型转换操作符，将字符串指针<code>char *</code>转换成了<code>unsigned int *</code>类型的指针，从而直接打印<code>g</code>就是<code>f</code>的地址。另外因为前面去掉了<code>const</code>，这里才能对<code>f</code>操作；这里<code>f</code>是指针，因此<code>g</code>也必须是指针；<br>2.4 分别实例化四个类，调用<code>show_type()</code>。在<code>show_type()</code>里，先通过<code>dynamic_cast</code>尝试类的平行转换，如果转换成功，说明传入的参数就是该类，两个无关联的类是不能直接转换的。在传入的是<code>Chongqing</code>类时，即可向上转换成<code>Chinese</code>，也可平行转换成<code>Chongqing</code>，因此打印了两次。<code>dynamic_cast</code>必须用于多态场合，因此各个类里面需要有虚函数；<br>2.5 在<code>show_type()</code>里，前面<code>dynamic_cast</code>的<code>type</code>是指针，后面使用的<code>type</code>是引用。使用引用的缺点是转换失败是产生异常，中断程序，因此最好使用<code>type</code>是指针。<br>2.6 继续看主函数，使用<code>static_cast</code>进行类的转换，将<code>Human</code>向下转换成<code>American</code>，<code>static_cast</code>不会检查是否能转换，因此是不安全的；再将<code>Chongqing</code>转换成<code>American</code>，两个无关联的类之间转换，编译器检查到了就无法编译通过；最后尝试将<code>Chongqing</code>向上转换成<code>Chinese</code>，效果和<code>dynamic_cast</code>是一样的；</p></blockquote><h1 id="3-C-高级编程"><a href="#3-C-高级编程" class="headerlink" title="3. C++高级编程"></a>3. C++高级编程</h1><h2 id="3-1-抽象类"><a href="#3-1-抽象类" class="headerlink" title="3.1 抽象类"></a>3.1 抽象类</h2><p>前面介绍了虚函数，这里再衍生出纯虚函数，实现抽象类。</p><ul><li>纯虚函数：在声明虚函数时被“初始化”为0的函数，形式如：<code>virtual void eating(void) = 0;</code>；</li><li>抽象类：凡是有纯虚函数的类，都是抽象类，抽象类不能实例化，其派生的子类需覆写所有纯虚函数才能实例化，否则子类还是抽象类；</li></ul><p>引入抽象类的意义：<br>1.为了实现运行时多态性，需要在基类中定义虚函数；<br>2.在很多情况下，基类本身生成对象是不合情理的。<br>例如，动物作为基类可以派生出小猫、小狗等实例化，但对动物进行实例化就明显是不合理的。</p><p>将函数定义为虚函数，则编译器要求在派生类中必须予以重写以实现多态性。<br>同时含有纯虚拟函数的类称为抽象类，它不能生成对象，这样就很好地解决了上述两个问题。</p><p>本次示例将各个类的代码分离成独自的文件，更贴近实际工作。</p><ul><li>示例：<figure class="highlight makefile"><figcaption><span>[Makefile]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Human: main.o libHuman.so</div><div class="line">g++ -o $@ $&lt; -L. -lHuman</div><div class="line"></div><div class="line">%.o : %.cpp</div><div class="line">g++ -fPIC -c -o $@ $&lt;</div><div class="line"></div><div class="line">libHuman.so: Chinese.o American.o Human.o</div><div class="line">g++ -shared -o $@ $^</div><div class="line"></div><div class="line"><span class="section">clean:</span></div><div class="line">rm -f *.o *.so Human</div></pre></td></tr></table></figure></li></ul><p>分析：</p><blockquote><ol><li>这里使用了分层的思想，将<strong>提供类</strong>(各个类的声明和定义)和<strong>使用类</strong>(主函数里使用类)分开；</li><li><code>libHuman.so</code>包含了所有类，当对类做了修改时，只需要<code>make libHuman.so</code>即可；</li><li>之后<code>libHuman.so</code>和<code>main.o</code>合并，当在主函数对类的使用做了修改时，只需要<code>make</code>，不会重新编译各个类；</li><li>执行时候，需要先指定库的路径，即<code>LD_LIBRARY_PATH=. ./Human</code>；</li></ol></blockquote><figure class="highlight cpp"><figcaption><span>[human.h]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _HUMAN_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> _HUMAN_H</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">class</span> Human &#123;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="keyword">char</span> *name;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">char</span> *name)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">char</span> *<span class="title">getName</span><span class="params">(<span class="keyword">void</span>)</span></span>;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">eating</span><span class="params">(<span class="keyword">void</span>)</span> </span>= <span class="number">0</span>; <span class="comment">//纯虚函数,提供模板</span></div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">wearing</span><span class="params">(<span class="keyword">void</span>)</span> </span>= <span class="number">0</span>;</div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">driving</span><span class="params">(<span class="keyword">void</span>)</span> </span>= <span class="number">0</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">virtual</span> ~Human();</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function">Human&amp; <span class="title">CreateAmerican</span><span class="params">(<span class="keyword">char</span> *name, <span class="keyword">int</span> age, <span class="keyword">char</span> *addr)</span></span>;</div><div class="line"><span class="function">Human&amp; <span class="title">CreateChinese</span><span class="params">(<span class="keyword">char</span> *name, <span class="keyword">int</span> age, <span class="keyword">char</span> *addr)</span></span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure><figure class="highlight cpp"><figcaption><span>[human.cpp]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Human.h"</span></span></div><div class="line"></div><div class="line"><span class="keyword">void</span> Human::setName(<span class="keyword">char</span> *name)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">this</span>-&gt;name = name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">char</span> *Human::getName(<span class="keyword">void</span>)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>-&gt;name;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Human::~Human()</div><div class="line">&#123;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"~Human()"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>分析：</p><blockquote><ol><li>定义类<code>Human</code>，其中有三个纯虚函数；　</li><li>在类外，声明了两个函数，用于创建两个类。</li><li>把两个函数声明放在这是因为，减少主函数包含类的头文件，这样主函数只包含<code>Human.h</code>，其它类做了修改时，不再编译主函数；</li></ol></blockquote><figure class="highlight cpp"><figcaption><span>[American.h]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _AMERICAN_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> _AMERICAN_H</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Human.h"</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">class</span> American : <span class="keyword">public</span> Human&#123;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="keyword">char</span> addr[<span class="number">100</span>];</div><div class="line">    <span class="keyword">int</span> age;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eating</span><span class="params">(<span class="keyword">void</span>)</span></span>;  </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">wearing</span><span class="params">(<span class="keyword">void</span>)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">driving</span><span class="params">(<span class="keyword">void</span>)</span></span>;</div><div class="line">    American();</div><div class="line">    American(<span class="keyword">char</span> *name, <span class="keyword">int</span> age, <span class="keyword">char</span> *addr);</div><div class="line">    <span class="keyword">virtual</span> ~American();</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure><figure class="highlight cpp"><figcaption><span>[American.cpp]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"American.h"</span></span></div><div class="line"></div><div class="line"><span class="keyword">void</span> American::eating(<span class="keyword">void</span>) </div><div class="line">&#123;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Eating American food"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> American::wearing(<span class="keyword">void</span>)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Wearing American clothes"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> American::driving(<span class="keyword">void</span>)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Driving American car"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">American::American()</div><div class="line">&#123;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">American::American(<span class="keyword">char</span> *name, <span class="keyword">int</span> age, <span class="keyword">char</span> *addr)</div><div class="line">&#123;</div><div class="line">    setName(name);</div><div class="line">    <span class="keyword">this</span>-&gt;age = age;</div><div class="line">    <span class="built_in">memset</span>(<span class="keyword">this</span>-&gt;addr, <span class="number">0</span>, <span class="number">100</span>);</div><div class="line">    <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;addr, addr);</div><div class="line">&#125;</div><div class="line"></div><div class="line">American::~American()</div><div class="line">&#123;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"~American()"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">Human&amp; <span class="title">CreateAmerican</span><span class="params">(<span class="keyword">char</span> *name, <span class="keyword">int</span> age, <span class="keyword">char</span> *addr)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> *(<span class="keyword">new</span> American(name, age, addr));</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>分析：</p><blockquote><ol><li>类<code>American</code>继承于抽象类<code>Human</code>，必须实现抽象类的所有纯虚函数；</li><li>函数<code>CreateAmerican()</code>实现<code>American</code>类的创建；</li></ol></blockquote><figure class="highlight cpp"><figcaption><span>[Chinese.h]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _CHINESE_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> _CHINESE_H</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Human.h"</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">class</span> Chinese : <span class="keyword">public</span> Human&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eating</span><span class="params">(<span class="keyword">void</span>)</span></span>;  </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">wearing</span><span class="params">(<span class="keyword">void</span>)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">driving</span><span class="params">(<span class="keyword">void</span>)</span></span>;</div><div class="line">    <span class="keyword">virtual</span> ~Chinese();</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure><figure class="highlight cpp"><figcaption><span>[Chinese.cpp]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Chinese.h"</span></span></div><div class="line"></div><div class="line"><span class="keyword">void</span> Chinese::eating(<span class="keyword">void</span>)  </div><div class="line">&#123;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Eating Chinese food"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> Chinese::wearing(<span class="keyword">void</span>)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Wearing Chinese clothes"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> Chinese::driving(<span class="keyword">void</span>)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Driving Chinese car"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Chinese::~Chinese()</div><div class="line">&#123;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"~Chinese()"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"><span class="function">Human&amp; <span class="title">CreateChinese</span><span class="params">(<span class="keyword">char</span> *name, <span class="keyword">int</span> age, <span class="keyword">char</span> *addr)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> *(<span class="keyword">new</span> Chinese());</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>分析：</p><blockquote><ol><li>类<code>Chinese</code>继承于抽象类<code>Human</code>，必须实现抽象类的所有纯虚函数；</li><li>函数<code>CreateChinese()</code>实现<code>Chinese</code>类的创建；</li></ol></blockquote><figure class="highlight cpp"><figcaption><span>[main.cpp]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Human.h"</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_eating</span><span class="params">(Human *h)</span></span></div><div class="line">&#123;</div><div class="line">    h-&gt;eating();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></div><div class="line">&#123;</div><div class="line">    Human&amp; a = CreateAmerican((<span class="keyword">char</span> *)<span class="string">"jk"</span>, <span class="number">22</span>, (<span class="keyword">char</span> *)<span class="string">"America"</span>);</div><div class="line">    Human&amp; c = CreateChinese((<span class="keyword">char</span> *)<span class="string">"hceng"</span>, <span class="number">23</span>, (<span class="keyword">char</span> *)<span class="string">"Chine"</span>);</div><div class="line">    </div><div class="line">    Human* h[<span class="number">2</span>] = &#123;&amp;a, &amp;c&#125;;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">2</span>; i++)</div><div class="line">        test_eating(h[i]);</div><div class="line">    <span class="keyword">delete</span> &amp;a;</div><div class="line">    <span class="keyword">delete</span> &amp;c;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>分析：</p><blockquote><ol><li>通过函数间接创建两个子类，利用虚函数的特性调用各自的函数；</li><li>删除各自实例化的类，前提是类的析构函数是<code>virtual</code>修饰的；</li></ol></blockquote><ul><li>结果：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Eating American food</div><div class="line">Eating Chinese food</div><div class="line">~American()</div><div class="line">~Human()</div><div class="line">~Chinese()</div><div class="line">~Human()</div></pre></td></tr></table></figure></li></ul><h2 id="3-2-函数模板"><a href="#3-2-函数模板" class="headerlink" title="3.2 函数模板"></a>3.2 函数模板</h2><p>C++是一门强类型语言，所以无法做到像动态语言(python javascript)那样子，编写一段通用的逻辑，可以把任意类型的变量传进去处理。<br>泛型编程弥补了这个缺点，通过把通用逻辑设计为模板，摆脱了数据类型的限制，提供了继承机制以外的另一种抽象机制，极大地提升了代码的可重用性。</p><p>模板又分为<strong>函数模板</strong>和<strong>类模板</strong>，这里先分析函数模板。<br>函数模板只是编译指令，一般写在头文件中。编译程序时，编译器根据函数的参数来“推导”模板的参数，然后生成具体的模板函数。</p><p>函数模板只支持两种隐式转换：<strong>const转换</strong>和<strong>数组/函数指针转换</strong>。<br>const转换：函数参数为非const引用/指针, 它可以隐式转换为const引用/指针；<br>数组/函数指针转换：数组可以隐式转换为“指向第1个元素的指针”(a[0]);参数为“函数的名字”时，它隐式转换为“函数指针”；<br>其他隐式转换都不支持，比如：算术转换、派生类对象向上转换等；</p><p>函数模板支持<strong>重载</strong>，注意函数的选择规则：<br>1.先列出候选函数，包括普通函数、参数推导成功的模板函数；<br>2.这些候选函数，根据“类型转换”来排序(其中模板函数只支持前面介绍的两种隐式转换)；<br>3.如果某个候选函数的参数，和调用时传入的参数更匹配，则选择该候选函数；<br>4.如果这些候选函数参数匹配度相同，如果只要一个非模板函数，就选它；如果只有模板函数，就选“更特化”的模板函数；否则导致“二义性”；</p><p>举个例子，需要实现一个比较两个数大小的函数，<br>在原来C语言中，需要定义多个功能一样，但参数不一样，函数名也不一样的函数，然后根据不同的参数，调用对应的函数。<br>在现在的C++中，利用模板函数和模板函数的重载，可以极大的精简该过程。</p><ul><li>示例：<figure class="highlight cpp"><figcaption><span>[compare.cpp]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line">int&amp; compare_max1(int&amp; a, int&amp; b)</div><div class="line">&#123;</div><div class="line">    return (a &lt; b) ? b : a;</div><div class="line">&#125;</div><div class="line"></div><div class="line">double&amp; compare_max2(double&amp; a, double&amp; b)</div><div class="line">&#123;</div><div class="line">    return (a &lt; b) ? b : a;</div><div class="line">&#125;</div><div class="line">*/</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="function">T&amp; <span class="title">compare_max1</span><span class="params">(T&amp; a, T&amp; b)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;__PRETTY_FUNCTION__&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> (a &lt; b) ? b : a;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="function"><span class="keyword">const</span> T&amp; <span class="title">compare_max2</span><span class="params">(<span class="keyword">const</span> T&amp; a, <span class="keyword">const</span> T&amp; b)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;__PRETTY_FUNCTION__&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> (a &lt; b) ? b : a;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="function">T* <span class="title">compare_max3</span><span class="params">(T* a, T* b)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;__PRETTY_FUNCTION__&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> (a &lt; b) ? b : a;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_func</span><span class="params">(T f)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;__PRETTY_FUNCTION__&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">float</span> <span class="title">f1</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></div><div class="line">&#123;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*******************************/</span></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> 1</span></div><div class="line"><span class="function"><span class="keyword">int</span>&amp; <span class="title">overload_template</span><span class="params">(<span class="keyword">int</span>&amp; a, <span class="keyword">int</span>&amp; b)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"1 "</span>&lt;&lt;__PRETTY_FUNCTION__&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> 1</span></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="function">T&amp; <span class="title">overload_template</span><span class="params">(T&amp; a, T&amp; b)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"2 "</span>&lt;&lt;__PRETTY_FUNCTION__&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="function">T <span class="title">overload_template</span><span class="params">(T a, T b)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"3 "</span>&lt;&lt;__PRETTY_FUNCTION__&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> 1</span></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="function"><span class="keyword">const</span> T&amp; <span class="title">overload_template</span><span class="params">(<span class="keyword">const</span> T&amp; a, <span class="keyword">const</span> T&amp; b)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"4 "</span>&lt;&lt;__PRETTY_FUNCTION__&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> ia = <span class="number">2</span>, ib = <span class="number">3</span>;</div><div class="line">    <span class="keyword">float</span> fa = <span class="number">2</span>, fb = <span class="number">3</span>;</div><div class="line">    </div><div class="line">    compare_max1(ia,ib);</div><div class="line">    compare_max1(fa,fb);</div><div class="line"></div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"-------------------------"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    </div><div class="line">    compare_max2(ia,ib);</div><div class="line">    </div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"-------------------------"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">char</span> ca[] = <span class="string">"ca"</span>;</div><div class="line">    <span class="keyword">char</span> cb[] = <span class="string">"cb"</span>;</div><div class="line">    <span class="keyword">char</span> cc[]  = <span class="string">"cc123"</span>;</div><div class="line">    </div><div class="line">    compare_max1(ca, cb);</div><div class="line">    <span class="comment">//compare_max1(ca, cc);</span></div><div class="line">    compare_max3(ca, cc);</div><div class="line">    </div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"-------------------------"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    </div><div class="line">    test_func(f1);</div><div class="line">    test_func(*f1);</div><div class="line">    </div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"-------------------------"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    </div><div class="line">    overload_template(ia,ib);</div><div class="line">    </div><div class="line">    <span class="keyword">int</span> *pa = &amp;ia;</div><div class="line">    <span class="keyword">int</span> *pb = &amp;ib;</div><div class="line">    overload_template(pa, pb);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><ul><li>结果：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">T&amp; compare_max1(T&amp;, T&amp;) [with T = int]</div><div class="line">T&amp; compare_max1(T&amp;, T&amp;) [with T = float]</div><div class="line">-------------------------</div><div class="line">const T&amp; compare_max2(const T&amp;, const T&amp;) [with T = int]</div><div class="line">-------------------------</div><div class="line">T&amp; compare_max1(T&amp;, T&amp;) [with T = char [3]]</div><div class="line">T* compare_max3(T*, T*) [with T = char]</div><div class="line">-------------------------</div><div class="line">void test_func(T) [with T = float (*)(int, int)]</div><div class="line">void test_func(T) [with T = float (*)(int, int)]</div><div class="line">-------------------------</div><div class="line">1 int&amp; overload_template(int&amp;, int&amp;)</div><div class="line">2 T&amp; overload_template(T&amp;, T&amp;) [with T = int*]</div></pre></td></tr></table></figure></li></ul><p>对该示例进行分析：</p><blockquote><p>1.1 首先定义了三个模板函数：<code>compare_max1()</code>(参数为引用)、<code>compare_max2()</code>(参数为const修饰的引用)、<code>compare_max3()</code>(参数为指针)；<br>1.2 再定义了一个模板函数<code>test_func()</code>，和一个普通函数<code>f1()</code>；<br>1.3 又定义四个名字一样的函数<code>overload_template()</code>，第一个是普通函数，第二个是参数为引用的模板函数，第三个是参数为普通的模板函数，第四个是参数为<code>const</code>修饰的引用模板函数；<br>1.4 宏<code>__PRETTY_FUNCTION__</code>可以打印带参数类型的函数，便于分析；<br>2.1 主函数里，首先定义了两组不同类型的数据，都可以调用<code>compare_max1()</code>，从打印结果可以看到，函数的参数类型都转换为传入的参数类型；<br>2.2 再调用<code>compare_max2()</code>，从打印结果可以看到参数类型自动转换成了<code>const</code>类型，该隐式转换是支持的；<br>2.3 再定义了三个数据，<code>cc</code>的长度和<code>ca</code>、<code>cb</code>不一样。使用<code>compare_max1()</code>传入<code>ca</code>和<code>cb</code>，可以看到数据类型都是<code>char [3]</code>.<br>2.4 而如果使用<code>compare_max1()</code>传入<code>ca</code>和<code>cc</code>，它们一个数据类型为<code>char [3]</code>，一个为<code>char [6]</code>，和模板函数的定义(两个参数类型一样)不一致，无法编译通过。<br>2.5 使用<code>compare_max3()</code>传入<code>ca</code>和<code>cc</code>却有可以，因为函数模板定义的是指针类型，传入数组可以隐式转换为“指向第1个元素的指针”(a[0])，它们的数据类型就是一致的了；<br>2.6 使用<code>test_func()</code>分别传入函数名字<code>f1</code>和函数指针<code>*f1</code>，其效果是一样的，因为传入参数为“函数的名字”时，它隐式转换为“函数指针”；<br>2.7 向函数<code>overload_template()</code>传入两个<code>int</code>类型数据，最优调用的是参数吻合的非模板函数；<br>2.8 向函数<code>overload_template()</code>传入两个指针类型数据，非模板函数的参数类型为<code>int</code>肯定不用调用了，就去看模板函数，模板函数的2、3都是最优吻合的，存在“二义性”，需要屏蔽一个。模板函数4因为有<code>const</code>修饰，优先级稍微靠后一点，除非前面的都屏蔽，才会调用他它；<br>　<br>3.模板函数重载后，注意函数的选择规则；</p></blockquote><h2 id="3-3-类模板"><a href="#3-3-类模板" class="headerlink" title="3.3 类模板"></a>3.3 类模板</h2><p>C++除了支持函数模板，还支持类模板(Class Template)。<br>函数模板中定义的参数类型可以用在函数声明和函数定义中，类模板中定义的参数类型可以用在类声明和类实现中。<br>类模板的目的同样是为了摆脱了数据类型的限制，提升了代码的可重用性</p><p>声明类模板的语法为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">template&lt;typename 参数类型1, typename 参数类型2, … &gt; </div><div class="line">class 类名&#123;</div><div class="line">    //TODO:</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><p>类型参数不能为空，多个类型参数用逗号隔开。<br>一但声明了类模板，就可以将参数类型用于类的成员函数和成员变量了。<br>换句话说，原来使用<code>int</code>、<code>float</code>、<code>char</code>等内置类型的地方，都可以用类型参数来代替。</p><ul><li><p>示例：</p><figure class="highlight cpp"><figcaption><span>[car.cpp]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="keyword">class</span> Car &#123;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    T t;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">car_weight</span><span class="params">(<span class="keyword">const</span> T &amp;t)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printInfo</span><span class="params">(<span class="keyword">void</span>)</span></span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="keyword">void</span> Car&lt;T&gt;::car_weight(<span class="keyword">const</span> T &amp;t)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">this</span>-&gt;t = t;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="keyword">void</span> Car&lt;T&gt;::printInfo(<span class="keyword">void</span>)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Car weight is:"</span>&lt;&lt;t&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> 1</span></div><div class="line"><span class="comment">//定做(重载)</span></div><div class="line"><span class="keyword">template</span>&lt;&gt;</div><div class="line"><span class="keyword">class</span> Car&lt;<span class="keyword">char</span> *&gt; &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">car_weight</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *t)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printInfo</span><span class="params">(<span class="keyword">void</span>)</span></span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">void</span> Car&lt;<span class="keyword">char</span> *&gt;::car_weight(<span class="keyword">const</span> <span class="keyword">char</span> *t)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Car weight is:"</span>&lt;&lt;t&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> Car&lt;<span class="keyword">char</span> *&gt;::printInfo(<span class="keyword">void</span>)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Car&lt;char *&gt;"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></div><div class="line">&#123;</div><div class="line">    Car&lt;<span class="keyword">int</span>&gt; ic;</div><div class="line">    ic.car_weight(<span class="number">1000</span>);</div><div class="line">    ic.printInfo();</div><div class="line">    </div><div class="line">    Car&lt;<span class="keyword">double</span>&gt; dc;</div><div class="line">    dc.car_weight(<span class="number">999.99</span>);</div><div class="line">    dc.printInfo();</div><div class="line">    </div><div class="line">    Car&lt;<span class="keyword">char</span> *&gt; cc;</div><div class="line">    cc.car_weight((<span class="keyword">char</span> *)<span class="string">"1000kg"</span>);</div><div class="line">    cc.printInfo();</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Car weight is:1000</div><div class="line">Car weight is:999.99</div><div class="line">Car weight is:1000kg</div><div class="line">Car&lt;char *&gt;</div></pre></td></tr></table></figure></li></ul><p>对该示例进行分析：</p><blockquote><p>1.1 先定义了一个类模板<code>Car</code>，它的私有成员变量<code>t</code>和公共函数<code>car_weight()</code>的参数都用<code>T</code>代替，表示一个任意的数据类型；<br>1.2 然后实现成员函数<code>car_weight()</code>和<code>printInfo()</code>，注意格式；<br>1.3 然后定做了一个类，类似重载，它的类名和前面的类模板一样，但数据类型是确定了的，成员函数的内容也可以重新定义。<br>1.4 在实例化的时候，如果传入的数据类型刚好是<code>char *</code>就会优先调用这个类；<br>　<br>2.1 主函数分别示例化了三个不同数据类型的对象，<code>int</code>和<code>double</code>类型都会调用前面的类模板<code>Car</code>的成员函数；<br>2.2 <code>char *</code>类型的则会调用类<code>Car&lt;char *&gt;</code>的成员函数；</p></blockquote><h2 id="3-4-异常"><a href="#3-4-异常" class="headerlink" title="3.4 异常"></a>3.4 异常</h2><p>与Java类似，C++也有异常机制，关键字也差不多。</p><p>异常是程序在执行期间产生的问题。<br>C++异常是指在程序运行时发生的特殊情况，比如尝试除以零的操作。<br>异常提供了一种转移程序控制权的方式。</p><p>C++异常处理涉及到三个关键字：<code>try</code>、<code>catch</code>、<code>throw</code>。</p><ul><li><code>throw</code>: 当问题出现时，程序会抛出一个异常，这是通过使用<code>throw</code>关键字来完成；</li><li><code>try</code>: <code>try</code>块中的代码标识将被激活的特定异常，它后面通常跟着一个或多个<code>catch</code>块；</li><li><p><code>catch</code>: 在想要处理问题的地方，通过异常处理程序捕获异常，<code>catch</code>关键字用于捕获异常；</p></li><li><p>示例：</p><figure class="highlight cpp"><figcaption><span>[exception.cpp]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">class</span> MyException &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">printInfo</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"This is MyException"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">class</span> MySubException : <span class="keyword">public</span> MyException &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printInfo</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"This is MySubException"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//A-&gt;B-&gt;C</span></div><div class="line"><span class="comment">//void C(int in) throw(int, double) //C++11中丢弃</span></div><div class="line"><span class="comment">//noexcept(false)可能抛出异常;noexcept(true)/noexcept不会抛出异常;</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> in)</span> <span class="title">noexcept</span><span class="params">(<span class="literal">false</span>)</span> </span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</div><div class="line">    <span class="keyword">double</span> d = <span class="number">1.1</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (<span class="number">0</span> == in)</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"No Exception"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">1</span> == in)</div><div class="line">        <span class="keyword">throw</span> i;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">2</span> == in)</div><div class="line">        <span class="keyword">throw</span> d;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">3</span> == in)</div><div class="line">        <span class="keyword">throw</span> MyException();</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">4</span> == in)</div><div class="line">        <span class="keyword">throw</span> MySubException();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">B</span><span class="params">(<span class="keyword">int</span> i)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"run B start"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    C(i);</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"run B end"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">A</span><span class="params">(<span class="keyword">int</span> i)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">try</span>&#123;</div><div class="line">        B(i);</div><div class="line">    &#125; <span class="keyword">catch</span> (<span class="keyword">int</span> j) &#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"catch int style exception"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125; <span class="keyword">catch</span> (MyException &amp;e) &#123;</div><div class="line">        e.printInfo();</div><div class="line">    &#125;<span class="comment">//catch (...) &#123;</span></div><div class="line">        <span class="comment">//cout&lt;&lt;"catch other style exception"&lt;&lt;endl;</span></div><div class="line">    <span class="comment">//&#125;</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">my_terminate_func</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"run my_terminate_func"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i ;</div><div class="line">    </div><div class="line">    set_terminate(my_terminate_func);</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (argc != <span class="number">2</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Usage: "</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;argv[<span class="number">0</span>]&lt;&lt;<span class="string">" &lt;0|1|2|3|4&gt;"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    i = strtoul(argv[<span class="number">1</span>], <span class="literal">NULL</span>, <span class="number">0</span>);</div><div class="line">    </div><div class="line">    A(i);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">hceng@android:/work/c++_learn/18th_exception$ ./exception 0</div><div class="line">run B start</div><div class="line">No Exception</div><div class="line">run B end</div><div class="line">hceng@android:/work/c++_learn/18th_exception$ ./exception 1</div><div class="line">run B start</div><div class="line">catch int style exception</div><div class="line">hceng@android:/work/c++_learn/18th_exception$ ./exception 2</div><div class="line">run B start</div><div class="line">run my_terminate_func</div><div class="line">Aborted (core dumped)</div><div class="line">hceng@android:/work/c++_learn/18th_exception$ ./exception 3</div><div class="line">run B start</div><div class="line">This is MyException</div><div class="line">hceng@android:/work/c++_learn/18th_exception$ ./exception 4</div><div class="line">run B start</div><div class="line">This is MySubException</div></pre></td></tr></table></figure></li></ul><p>对该示例进行分析：</p><blockquote><p>1.1 定义了一个基类<code>MyException</code>，再派生出它的一个子类<code>MySubException</code>；<br>1.2 基类<code>MyException</code>有一个被<code>virtual</code>修饰的虚函数<code>printInfo</code>，其子类的<code>printInfo</code>也自动为虚函数；<br>　<br>2.1 定义了三个函数，函数<code>A</code>调用<code>B</code>、函数<code>B</code>调用函数<code>C</code>；<br>2.2 函数<code>A</code>将调用函数<code>B</code>放在了<code>try</code>块中，后面使用多个<code>catch</code>捕获不同的异常；<br>2.3 <code>catch</code>后面指定想要捕捉的异常类型，这里为<code>int</code>数据类型和<code>MyException</code>类；<br>2.4 使用<code>catch (...)</code>可以表示捕获其它未指定的异常类型；<br>2.5 函数<code>B</code>调用函数<code>C</code>；<br>2.6 函数<code>C</code>有一个<code>noexcept</code>修饰符，它是C++11新提供的异常说明符，用于声明一个函数不会抛出异常。使用<code>noexcept</code>设置为不抛出异常，能阻止异常的传播；这里使用<code>noexcept(false)</code>表示可能抛出异常；<br>2.7 函数<code>C</code>抛出的异常有<code>int</code>、<code>double</code>、<code>MyException</code>和<code>MySubException</code>；<br>　<br>3.1 定义了函数<code>my_terminate_func()</code>；<br>3.2 使用<code>set_terminate()</code>将前面自己定义的函数作为异常处理函数；<br>　<br>4.1 主函数根据传入的不同参数，是函数<code>C</code>抛出对应的异常。<br>4.2 当参数为<code>0</code>时，函数<code>C</code>没有抛出异常；<br>4.3 当参数为<code>1</code>时，函数<code>C</code>抛出<code>int</code>异常，被函数<code>A</code>捕获处理；<br>4.4 当参数为<code>2</code>时，函数<code>C</code>抛出<code>double</code>异常，没有被任何函数捕获，最后调用<code>terminate()</code>处理；<br>4.5 当参数为<code>3</code>时，函数<code>C</code>抛出<code>MyException</code>异常，被函数<code>A</code>捕获处理；<br>4.6 当参数为<code>4</code>时，函数<code>C</code>抛出<code>MySubException</code>异常，因为是虚函数的缘故，这里调用子类的打印函数；</p></blockquote><h2 id="3-5-智能指针"><a href="#3-5-智能指针" class="headerlink" title="3.5 智能指针"></a>3.5 智能指针</h2><p>在C++中，可以直接操作内存，给编程增加了不少的灵活性。<br>但是灵活性是有代价的，程序员必须负责自己负责释放自己申请的内存，否则就会出现内存泄露。<br>智能指针就是为了解决这个问题而存在的。它和其他指针没有本质的区别，主要的目的就是为了<strong>解决悬挂指针、内存泄露的问题</strong>。<br>其原理就是使用智能指针类<code>SmartPointer</code>，将一个计数器<code>RefBase</code>与类指向的对象相关联，当对象还有引用的时候，就不执行释放内存的操作，当引用计数为0时，就执行内存释放操作，并且将指针重置为NULL。</p><p>这里先尝试自己实现一个智能指针，理解其实现原理，然后再使用Android自带的智能指针重新测试。</p><ul><li><p>示例：</p><figure class="highlight cpp"><figcaption><span>[smartpointer.cpp]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">class</span> RefBase &#123;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="keyword">int</span> count;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    RefBase() : count(<span class="number">0</span>) &#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">incStrong</span><span class="params">()</span> </span>&#123; count++; &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">decStrong</span><span class="params">()</span> </span>&#123; count--; &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getStrongCount</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> count; &#125;  </div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">class</span> Person : <span class="keyword">public</span> RefBase &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    Person() &#123; <span class="built_in">cout</span>&lt;&lt;<span class="string">"Person()"</span>&lt;&lt;<span class="built_in">endl</span>; &#125;</div><div class="line">    ~Person() &#123; <span class="built_in">cout</span>&lt;&lt;<span class="string">"~Person()"</span>&lt;&lt;<span class="built_in">endl</span>; &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printInfo</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123; <span class="built_in">cout</span>&lt;&lt;<span class="string">"This is Person"</span>&lt;&lt;<span class="built_in">endl</span>; &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="keyword">class</span> SmartPointer &#123;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    T *sp;</div><div class="line">    </div><div class="line"><span class="keyword">public</span>:</div><div class="line">    SmartPointer() : sp(<span class="number">0</span>) &#123;&#125;</div><div class="line">    </div><div class="line">    SmartPointer(T *pt)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"SmartPointer(T *pt)"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">        sp = pt;</div><div class="line">        sp-&gt;incStrong();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    SmartPointer(<span class="keyword">const</span> SmartPointer &amp;pt)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"SmartPointer(T &amp;pt)"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">        sp = pt.sp;</div><div class="line">        sp-&gt;incStrong();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    ~SmartPointer()</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"~SmartPointer()"</span>&lt;&lt;<span class="built_in">endl</span>;  </div><div class="line">        <span class="keyword">if</span> (sp)</div><div class="line">        &#123;</div><div class="line">            sp-&gt;decStrong();</div><div class="line">            <span class="keyword">if</span> (sp-&gt;getStrongCount() == <span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">delete</span> sp;</div><div class="line">                sp = <span class="literal">NULL</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;   </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    T *<span class="keyword">operator</span>-&gt;() &#123; <span class="keyword">return</span> sp; &#125;</div><div class="line">    T&amp; <span class="keyword">operator</span>*() &#123; <span class="keyword">return</span> *sp; &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_func</span><span class="params">(SmartPointer&lt;T&gt; &amp;pt)</span></span></div><div class="line">&#123;</div><div class="line">    SmartPointer&lt;T&gt; sp = pt;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"In test_func:"</span>&lt;&lt;sp-&gt;getStrongCount()&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    sp-&gt;printInfo(); <span class="comment">//(*sp).printInfo();</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    </div><div class="line">    SmartPointer&lt;Person&gt; sp = <span class="keyword">new</span> Person();</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Before call test_func:"</span>&lt;&lt;sp-&gt;getStrongCount()&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">2</span>; i++)</div><div class="line">    &#123;</div><div class="line">        test_func(sp);</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"After call test_func:"</span>&lt;&lt;sp-&gt;getStrongCount()&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Person()</div><div class="line">SmartPointer(T *pt)</div><div class="line">Before call test_func:1</div><div class="line">SmartPointer(T &amp;pt)</div><div class="line">In test_func:2</div><div class="line">This is Person</div><div class="line">~SmartPointer()</div><div class="line">After call test_func:1</div><div class="line">SmartPointer(T &amp;pt)</div><div class="line">In test_func:2</div><div class="line">This is Person</div><div class="line">~SmartPointer()</div><div class="line">After call test_func:1</div><div class="line">~SmartPointer()</div><div class="line">~Person()</div></pre></td></tr></table></figure></li></ul><p>对该示例进行分析：</p><blockquote><p>1.1 定义了类<code>RefBase</code>用于引用计数，在构造的时候就赋初值为0，提供三个函数进行加、减、查询计数；<br>1.2 定义了类<code>Person</code>用于测试，继承于<code>RefBase</code>；<br>1.3 定义了类模板<code>SmartPointer</code>用于指针管理，包含指针类成员、三个构造函数、一个析构函数、两个运算符重载函数；<br>1.4 创建了模板函数<code>test_func()</code>用于测试；<br>　<br>2.1 主函数里，首先<code>new Person()</code>，传给<code>sp</code>会调用到<code>SmartPointer(T *pt)</code>，此时<code>count</code>引用加1；<br>2.2 然后调用<code>test_func()</code>，会调用到<code>SmartPointer(const SmartPointer &amp;pt)</code>，传给<code>sp</code>，<code>count</code>引用再加1；<br>2.3 <code>sp</code>作为局部变量在使用完后，自动释放，调用析构函数<code>~SmartPointer()</code>，<code>count</code>减1；<br>2.4 主函数循环，再次调用<code>test_func()</code>，重复2.2、2.3的步骤；<br>2.5 主函数执行完，释放主函数的<code>sp</code>，再次调用<code>~SmartPointer()</code>，<code>count</code>变为0，将会执行<code>delete sp;</code>，最终调用<code>~Person()</code>；<br>　<br>3.以后创建指针类，不需要<code>Person *p = new Person();</code>，而使用<code>SmartPointer&lt;Person&gt; p = new Person();</code>，就不需要自己手动<code>delete p;</code>了。</p></blockquote><ul><li><p>示例：</p><figure class="highlight cpp"><figcaption><span>[androidsmartpointer.cpp]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"RefBase.h"</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> android::RSC;</div><div class="line"></div><div class="line"><span class="keyword">class</span> Person : <span class="keyword">public</span> LightRefBase&lt;Person&gt; &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    Person() &#123; <span class="built_in">cout</span>&lt;&lt;<span class="string">"Person()"</span>&lt;&lt;<span class="built_in">endl</span>; &#125;</div><div class="line">    ~Person() &#123; <span class="built_in">cout</span>&lt;&lt;<span class="string">"~Person()"</span>&lt;&lt;<span class="built_in">endl</span>; &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printInfo</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123; <span class="built_in">cout</span>&lt;&lt;<span class="string">"This is Person"</span>&lt;&lt;<span class="built_in">endl</span>; &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_func</span><span class="params">(sp&lt;T&gt; &amp;pt)</span></span></div><div class="line">&#123;</div><div class="line">    sp&lt;T&gt; sp = pt;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"In test_func:"</span>&lt;&lt;sp-&gt;getStrongCount()&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    sp-&gt;printInfo(); <span class="comment">//(*sp).printInfo();</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    </div><div class="line">    sp&lt;Person&gt; sp = <span class="keyword">new</span> Person();</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Before call test_func:"</span>&lt;&lt;sp-&gt;getStrongCount()&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">2</span>; i++)</div><div class="line">    &#123;</div><div class="line">        test_func(sp);</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"After call test_func:"</span>&lt;&lt;sp-&gt;getStrongCount()&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Person()</div><div class="line">Before call test_func:1</div><div class="line">In test_func:2</div><div class="line">This is Person</div><div class="line">After call test_func:1</div><div class="line">In test_func:2</div><div class="line">This is Person</div><div class="line">After call test_func:1</div><div class="line">~Person()</div></pre></td></tr></table></figure></li></ul><p>对该示例进行分析：</p><blockquote><p>1.1 使用Android源码中自带的引用计数类和智能指针类，也就是<strong>Android轻量级指针</strong>；<br>1.2 相比自己实现的智能指针，Android源码提供的轻量级指针对引用计数有了原子操作，计数时避免了被其它相关的线程打断；<br>1.3 效果和前面自己写的智能指针基本一致；</p></blockquote><h2 id="3-7-Android强-弱指针"><a href="#3-7-Android强-弱指针" class="headerlink" title="3.7 Android强/弱指针"></a>3.7 Android强/弱指针</h2><p>Android中定义了两种智能指针类型：<strong>强指针sp(strong pointer)</strong>、<strong>弱指针(weak pointer)</strong><br>强指针与一般意义的智能指针概念相同，通过引用计数来记录有多少使用者在使用一个对象，如果所有使用者都放弃了对该对象的引用，则该对象将被自动销毁。<br>弱指针也指向一个对象，但是弱指针仅仅记录该对象的地址，不能通过弱指针来访问该对象，也就是说不能通过弱指针来调用对象的成员函数或访问对象的成员变量。</p><p>要想访问弱指针所指向的对象，需首先将弱指针升级为强指针(通过wp类所提供的<code>promote()</code>方法)。<br>弱指针所指向的对象是有可能在其它地方被销毁的，如果对象已经被销毁，wp的<code>promote()</code>方法将返回空指针，这样就能避免出现地址访问错的情况。</p><p>为什么引入弱指针呢?<br>如下例中的这种情况，<code>father</code>和<code>son</code>相互引用，会导致释放时两者都没法释放，造成内存泄露。<br>因此引入弱指针来解决这种情况。</p><ul><li><p>示例：</p><figure class="highlight cpp"><figcaption><span>[pointer.cpp]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utils/RefBase.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;LightPointeRefBase.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LIGHTPOINT 1 </span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> LIGHTPOINT</span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> android::RSC;</div><div class="line"></div><div class="line"><span class="keyword">class</span> Person : <span class="keyword">public</span> LightRefBase&lt;Person&gt; &#123;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    sp&lt;Person&gt; father;</div><div class="line">    sp&lt;Person&gt; son;</div><div class="line">    </div><div class="line"><span class="keyword">public</span>:</div><div class="line">    Person() &#123; <span class="built_in">cout</span>&lt;&lt;<span class="string">"Person()"</span>&lt;&lt;<span class="built_in">endl</span>; &#125;</div><div class="line">    ~Person() &#123; <span class="built_in">cout</span>&lt;&lt;<span class="string">"~Person()"</span>&lt;&lt;<span class="built_in">endl</span>; &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printInfo</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123; <span class="built_in">cout</span>&lt;&lt;<span class="string">"This is Person"</span>&lt;&lt;<span class="built_in">endl</span>; &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setFather</span><span class="params">(sp&lt;Person&gt; &amp;father)</span> </span>&#123; <span class="keyword">this</span>-&gt;father = father; &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setSon</span><span class="params">(sp&lt;Person&gt; &amp;son)</span> </span>&#123; <span class="keyword">this</span>-&gt;son = son; &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> android;</div><div class="line"></div><div class="line"><span class="keyword">class</span> Person : <span class="keyword">public</span> RefBase &#123;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    wp&lt;Person&gt; father;</div><div class="line">    wp&lt;Person&gt; son;</div><div class="line">    </div><div class="line"><span class="keyword">public</span>:</div><div class="line">    Person() &#123; <span class="built_in">cout</span>&lt;&lt;<span class="string">"Person()"</span>&lt;&lt;<span class="built_in">endl</span>; &#125;</div><div class="line">    ~Person() &#123; <span class="built_in">cout</span>&lt;&lt;<span class="string">"~Person()"</span>&lt;&lt;<span class="built_in">endl</span>; &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printInfo</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123; <span class="built_in">cout</span>&lt;&lt;<span class="string">"This is Person"</span>&lt;&lt;<span class="built_in">endl</span>; &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setFather</span><span class="params">(sp&lt;Person&gt; &amp;father)</span> </span>&#123; <span class="keyword">this</span>-&gt;father = father; &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setSon</span><span class="params">(sp&lt;Person&gt; &amp;son)</span> </span>&#123; <span class="keyword">this</span>-&gt;son = son; &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_func</span><span class="params">(<span class="keyword">int</span> mode)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(mode)</div><div class="line">    &#123;</div><div class="line">        sp&lt;Person&gt; father = <span class="keyword">new</span> Person();</div><div class="line">        sp&lt;Person&gt; son = <span class="keyword">new</span> Person();</div><div class="line">        father-&gt;setSon(son);    </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        sp&lt;Person&gt; father = <span class="keyword">new</span> Person();</div><div class="line">        sp&lt;Person&gt; son = <span class="keyword">new</span> Person();</div><div class="line">        father-&gt;setSon(son);</div><div class="line">        son-&gt;setFather(father);     </div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> mode = atoi(argv[<span class="number">1</span>]);</div><div class="line">    <span class="keyword">if</span> (mode &lt; <span class="number">2</span>)</div><div class="line">        test_func(mode);</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">#<span class="keyword">if</span> LIGHTPOINT  </div><div class="line">#<span class="keyword">else</span></div><div class="line">        wp&lt;Person&gt; s1 = <span class="keyword">new</span> Person();</div><div class="line">        <span class="comment">//s1-&gt;printInfo(); //ERROR, "wp" no override "-&gt;"</span></div><div class="line">        <span class="comment">//(*s1).printInfo(); //ERROR, "wp" no override "*"</span></div><div class="line"></div><div class="line">        sp&lt;Person&gt; s2 = s1.promote();</div><div class="line">        <span class="keyword">if</span> (s2 != <span class="number">0</span>)</div><div class="line">            s2-&gt;printInfo();</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>结果：</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">//#define LIGHTPOINT 1</div><div class="line">hceng@android:/work/c++_learn/20th_strongpointer_weekpointer$ ./pointer 0</div><div class="line">Person()</div><div class="line">Person()</div><div class="line">hceng@android:/work/c++_learn/20th_strongpointer_weekpointer$ ./pointer 1</div><div class="line">Person()</div><div class="line">Person()</div><div class="line">~Person()</div><div class="line">~Person()</div><div class="line"></div><div class="line">//#define LIGHTPOINT 0</div><div class="line">hceng@android:/work/c++_learn/20th_strongpointer_weekpointer$ ./pointer 0</div><div class="line">Person()</div><div class="line">Person()</div><div class="line">~Person()</div><div class="line">~Person()</div><div class="line">hceng@android:/work/c++_learn/20th_strongpointer_weekpointer$ ./pointer 1</div><div class="line">Person()</div><div class="line">Person()</div><div class="line">~Person()</div><div class="line">~Person()</div><div class="line">hceng@android:/work/c++_learn/20th_strongpointer_weekpointer$ ./pointer 2</div><div class="line">Person()</div><div class="line">This is Person</div><div class="line">~Person()</div></pre></td></tr></table></figure><p>对该示例进行分析：</p><blockquote><p>1.1 条件编译，假设<code>#define LIGHTPOINT 1</code>，此时使用强指针，主函数根据传入参数调用<code>test_func()</code>；<br>1.2 <code>mode = 0</code>时，<code>father</code>和<code>son</code>相互引用，使用完后，并没有调用析构函数释放；<br>1.3 <code>mode = 1</code>时，<code>father</code>和<code>son</code>没有相互引用，使用完后，调用析构函数进行了释放；<br>　<br>2.1 条件编译，假设<code>#define LIGHTPOINT 0</code>，此时使用弱指针，主函数根据传入参数调用<code>test_func()</code>；<br>2.2 可以看到无论<code>father</code>和<code>son</code>有无相互引用，结果都调用析构函数正常释放了；<br>　<br>3.1 在使用弱指针时，实例化<code>s1</code>，无法通过<code>s1</code>访问<code>Person</code>类成员函数，只能先通过<code>promote()</code>转化，才能访问<code>Person</code>类成员函数；</p></blockquote><h1 id="4-设计模式"><a href="#4-设计模式" class="headerlink" title="4. 设计模式"></a>4. 设计模式</h1><h2 id="4-1-单例模式"><a href="#4-1-单例模式" class="headerlink" title="4.1 单例模式"></a>4.1 单例模式</h2><p>在Android源码中有许多的设计模式，其中单例模式就是最常见的一个。</p><p>单例模式就是一个类只能被实例化一次，即<strong>只能有一个实例化的对象的类</strong>。</p><p>像Windows系统的任务管理器一样，你无论打开多少次，始终显示的一个窗口。<br>定义一个统一的全局变量可以确保对象随时可以被访问，但不能防止创建多个对象。<br>一个最好的办法就是让类自身负责创建和保存它的唯一实例，并保证不创建其他实例，它还提供了一个访问该实例的方法，这就是单例模式的应用场景。</p><ul><li><p>示例：</p><figure class="highlight cpp"><figcaption><span>[singleton.cpp]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></div><div class="line"></div><div class="line"><span class="comment">//hungry mode</span></div><div class="line"><span class="keyword">class</span> Singleton &#123;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="keyword">static</span> Singleton *gInstance;</div><div class="line"></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    Singleton() &#123; <span class="built_in">cout</span>&lt;&lt;<span class="string">"Singleton()"</span>&lt;&lt;<span class="built_in">endl</span>; &#125;</div><div class="line">    </div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">static</span> Singleton *<span class="title">getInstance</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> gInstance; &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printInfo</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span>&lt;&lt;<span class="string">"This is Singleton"</span>&lt;&lt;<span class="built_in">endl</span>; &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Singleton *Singleton::gInstance = <span class="keyword">new</span> Singleton;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">    </div><div class="line"><span class="comment">//Lazy mode </span></div><div class="line"><span class="keyword">class</span> Singleton &#123;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="keyword">static</span> Singleton *gInstance;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">pthread_mutex_t</span> g_tMutex;</div><div class="line"></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    Singleton() &#123; <span class="built_in">cout</span>&lt;&lt;<span class="string">"Singleton()"</span>&lt;&lt;<span class="built_in">endl</span>; &#125;</div><div class="line">    </div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">static</span> Singleton *<span class="title">getInstance</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">    <span class="meta">#<span class="meta-keyword">if</span> 0</span></div><div class="line">        <span class="keyword">if</span> (<span class="literal">NULL</span> == gInstance)</div><div class="line">        &#123;</div><div class="line">            pthread_mutex_lock(&amp;g_tMutex);</div><div class="line">            <span class="keyword">if</span> (<span class="literal">NULL</span> == gInstance)</div><div class="line">                gInstance = <span class="keyword">new</span> Singleton;</div><div class="line">            pthread_mutex_unlock(&amp;g_tMutex);</div><div class="line">        &#125;</div><div class="line">    <span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">        pthread_mutex_lock(&amp;g_tMutex);</div><div class="line">        <span class="keyword">static</span> Singleton *gInstance;</div><div class="line">        pthread_mutex_unlock(&amp;g_tMutex);</div><div class="line">    <span class="meta">#<span class="meta-keyword">endif</span>  </span></div><div class="line">        <span class="keyword">return</span> gInstance;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printInfo</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span>&lt;&lt;<span class="string">"This is Singleton"</span>&lt;&lt;<span class="built_in">endl</span>; &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Singleton *Singleton::gInstance = <span class="literal">NULL</span>;</div><div class="line"><span class="keyword">pthread_mutex_t</span> Singleton::g_tMutex = PTHREAD_MUTEX_INITIALIZER;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> *<span class="title">start_routine_thread1</span><span class="params">(<span class="keyword">void</span> *arg)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"this is thread 1 ……"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    Singleton *s = Singleton::getInstance();</div><div class="line">    s-&gt;printInfo();</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> *<span class="title">start_routine_thread2</span><span class="params">(<span class="keyword">void</span> *arg)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"this is thread 2 ……"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    Singleton *s = Singleton::getInstance();</div><div class="line">    s-&gt;printInfo();</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></div><div class="line">&#123;</div><div class="line">    Singleton *s1 = Singleton::getInstance();</div><div class="line">    s1-&gt;printInfo();</div><div class="line">    </div><div class="line">    Singleton *s2 = Singleton::getInstance();</div><div class="line">    s2-&gt;printInfo();</div><div class="line">    </div><div class="line">    <span class="comment">//Singleton *s3 = new getInstance();</span></div><div class="line">    <span class="comment">//Singleton s4;</span></div><div class="line">    </div><div class="line">    <span class="keyword">pthread_t</span> threadID1;</div><div class="line">    <span class="keyword">pthread_t</span> threadID2;</div><div class="line">    </div><div class="line">    pthread_create(&amp;threadID1, <span class="literal">NULL</span>, start_routine_thread1, <span class="literal">NULL</span>);</div><div class="line">    pthread_create(&amp;threadID2, <span class="literal">NULL</span>, start_routine_thread2, <span class="literal">NULL</span>);</div><div class="line">    </div><div class="line">    sleep(<span class="number">2</span>);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">hceng@android:/work/c++_learn/21th_singleton$ g++ -o singleton singleton.cpp -lpthread</div><div class="line">hceng@android:/work/c++_learn/21th_singleton$ ./singleton </div><div class="line">This is Singleton</div><div class="line">This is Singleton</div><div class="line">this is thread 1 ……</div><div class="line">This is Singleton</div><div class="line">this is thread 2 ……</div><div class="line">This is Singleton</div></pre></td></tr></table></figure></li></ul><p>对该示例进行分析：</p><blockquote><p>1.1 示例中有两种实现方法：饿汉模式(<code>hungry mode</code>)和懒汉模式(<code>Lazy mode</code>)；<br>1.2 饿汉就是第一时间需要食物，即类在定义的时候就进行实例化<code>Singleton *Singleton::gInstance = new Singleton;</code>；<br>1.3 懒汉就是不到万不得已，是不会要食物的，即类在第一次用到类实例的时候才会去实例化<code>Singleton *Singleton::gInstance = NULL; Singleton *s = Singleton::getInstance();</code>；<br>1.4 在访问量较小时，采用懒汉实现，以牺牲时间换空间；在访问量比较大，访问的线程比较多时，采用饿汉会有更好的性能，以空间换时间；<br>　<br>2.1 <code>Singleton</code>类里，有一个<code>private</code>、<code>static</code>的类指针<code>gInstance</code>，保存唯一的实例；<br>2.2 构造函数为<code>private</code>或<code>protect</code>防止被外部函数调用，进行实例化；<br>2.3 实例的动作由一个<code>public</code>的类方法<code>getInstance()</code>代劳，该方法返回类唯一的实例；<br>2.4 懒汉模式因为在使用<code>getInstance()</code>实例化时，可能发生冲突，因此需要加锁控制；<br>　<br>3.1 从示例结果可以看到，无论是主函数实例化类，还是在其它线程实例化类，结果都没有创建新的实例化对象，达到了目的；<br>3.2 构造函数变成了私有函数，只向外提供了<code>getInstance()</code>接口，防止了通过其它途径实例化对象；</p></blockquote><h2 id="4-2-桥接模式"><a href="#4-2-桥接模式" class="headerlink" title="4.2 桥接模式"></a>4.2 桥接模式</h2><p><code>Bridge</code>桥接模式将抽象(<code>Abstraction</code>)与实现(<code>Implementation</code>)分离，使得二者可以独立地变化。<br>软件设计中，如果只有一维在变化，那么用继承就可以圆满的解决问题，如果有超过一维的变化，就最好用桥接模式。</p><p>举例一个操作系统和电脑公司的例子。</p><ul><li><p>示例：</p><figure class="highlight cpp"><figcaption><span>[install1.cpp]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">class</span> OS &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Install</span><span class="params">()</span> </span>= <span class="number">0</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">class</span> LinuxOS : <span class="keyword">public</span> OS &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Install</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span>&lt;&lt;<span class="string">"Install Linux OS"</span>&lt;&lt;<span class="built_in">endl</span>; &#125;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">class</span> WindowsOS : <span class="keyword">public</span> OS &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Install</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span>&lt;&lt;<span class="string">"Install Windows OS"</span>&lt;&lt;<span class="built_in">endl</span>; &#125;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">class</span> Company &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Use</span><span class="params">()</span> </span>= <span class="number">0</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">class</span> Msi : <span class="keyword">public</span> Company &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Use</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span>&lt;&lt;<span class="string">"Msi computer "</span>; &#125;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">class</span> Dell : <span class="keyword">public</span> Company &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Use</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span>&lt;&lt;<span class="string">"Dell computer "</span>; &#125;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">class</span> MsiUseLinuxOS : <span class="keyword">public</span> LinuxOS, <span class="keyword">public</span> Msi &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">InstallOS</span><span class="params">()</span> </span>&#123; Use(); Install(); &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">class</span> DellUseWindowsOS : <span class="keyword">public</span> WindowsOS, <span class="keyword">public</span> Dell &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">InstallOS</span><span class="params">()</span> </span>&#123; Use(); Install(); &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">class</span> MsiUseWindowsOS : <span class="keyword">public</span> WindowsOS, <span class="keyword">public</span> Msi &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">InstallOS</span><span class="params">()</span> </span>&#123; Use(); Install(); &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">class</span> DellUseLinuxOS : <span class="keyword">public</span> LinuxOS, <span class="keyword">public</span> Dell &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">InstallOS</span><span class="params">()</span> </span>&#123; Use(); Install(); &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></div><div class="line">&#123;</div><div class="line">    MsiUseLinuxOS a;</div><div class="line">    a.InstallOS();</div><div class="line">    </div><div class="line">    DellUseWindowsOS b;</div><div class="line">    b.InstallOS();</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Msi computer Install Linux OS</div><div class="line">Dell computer Install Windows OS</div></pre></td></tr></table></figure></li></ul><p>对该示例进行分析：</p><blockquote><p>1.1 定义了类<code>OS</code>，有一个方法<code>Install()</code>，生成两个派生类<code>LinuxOS</code>和<code>WindowsOS</code>；<br>1.2 定义了类<code>Company</code>，有一个方法<code>Use()</code>，生成两个派生类<code>Msi</code>和<code>Dell</code>；<br>1.3 不同的电脑公司可能装不同的操作系统，就可能生成四个新类<code>MsiUseLinuxOS</code>、<code>DellUseWindowsOS</code>、<code>MsiUseWindowsOS</code>、<code>DellUseLinuxOS</code>；<br>　<br>2.1 主函数实例化了安装操作系统的电脑；<br>2.2 可见生成的类数量很多，为两个维度的乘积，且某一方发生了增添，最后生成的类也要有很大的改动，关系如下图：</p></blockquote><div align="center"><img width="800" src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180924/3.jpg"></div><ul><li><p>示例：</p><figure class="highlight cpp"><figcaption><span>[install2.cpp]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">class</span> OS &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Install</span><span class="params">()</span> </span>= <span class="number">0</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">class</span> LinuxOS : <span class="keyword">public</span> OS &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Install</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span>&lt;&lt;<span class="string">"Install Linux OS"</span>&lt;&lt;<span class="built_in">endl</span>; &#125;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">class</span> WindowsOS : <span class="keyword">public</span> OS &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Install</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span>&lt;&lt;<span class="string">"Install Windows OS"</span>&lt;&lt;<span class="built_in">endl</span>; &#125;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">class</span> Company &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Use</span><span class="params">()</span> </span>= <span class="number">0</span>;</div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">InstallOS</span><span class="params">()</span> </span>= <span class="number">0</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">class</span> Msi : <span class="keyword">public</span> Company &#123;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    OS *impl;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    Msi(OS *impl) &#123; <span class="keyword">this</span>-&gt;impl = impl; &#125;;</div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Use</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span>&lt;&lt;<span class="string">"Msi computer "</span>; &#125;;</div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">InstallOS</span><span class="params">()</span> </span>&#123; Use(); impl-&gt;Install(); &#125;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">class</span> Dell : <span class="keyword">public</span> Company &#123;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    OS *impl;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    Dell(OS *impl) &#123; <span class="keyword">this</span>-&gt;impl = impl; &#125;;</div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Use</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span>&lt;&lt;<span class="string">"Dell computer "</span>; &#125;;</div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">InstallOS</span><span class="params">()</span> </span>&#123; Use(); impl-&gt;Install(); &#125;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></div><div class="line">&#123;</div><div class="line">    OS *lin = <span class="keyword">new</span> LinuxOS();</div><div class="line">    OS *win = <span class="keyword">new</span> WindowsOS();</div><div class="line">    </div><div class="line">    Company *a = <span class="keyword">new</span> Msi(lin);</div><div class="line">    Company *b = <span class="keyword">new</span> Dell(win);</div><div class="line">    </div><div class="line">    a-&gt;InstallOS();</div><div class="line">    b-&gt;InstallOS();</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Msi computer Install Linux OS</div><div class="line">Dell computer Install Windows OS</div></pre></td></tr></table></figure></li></ul><p>对该示例进行分析：</p><blockquote><p>1.1 定义了类<code>OS</code>，有一个方法<code>Install()</code>，生成两个派生类<code>LinuxOS</code>和<code>WindowsOS</code>；<br>1.2 定义了类<code>Company</code>，有一个方法<code>Use()</code>，生成两个派生类<code>Msi</code>和<code>Dell</code>；<br>1.3 <code>Msi</code>和<code>Dell</code>有一个<code>InstallOS()</code>方法，它并不是直接实现的，而是调用传入的<code>OS</code>类的<code>Install()</code>方法，即将抽象和实现分开；<br>　<br>2.1 主函数实例化了安装操作系统的电脑；<br>2.2 可见并没有生成各个厂家安装操作系统的类，且某一方发生了增添，都对对方没有任何影响，关系如下图：</p></blockquote><div align="center"><img width="800" src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180924/4.jpg"></div><h1 id="5-其它"><a href="#5-其它" class="headerlink" title="5. 其它"></a>5. 其它</h1><p>所有示例源码:<br><a href="https://github.com/hceng/learn/tree/master/c++_learn" target="_blank" rel="external">Github</a></p><p>参考资料:<br><a href="http://www.100ask.org/index.html" target="_blank" rel="external">韦东山第四期Android驱动_C++快速入门</a></p><hr><p><div align="center"><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本文采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href="http://hceng.cn/" target="_blank" rel="external">hceng’s blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习完了Java，继续C++的学习，C++还有点印象，之前用Qt的时候还写过。&lt;br&gt;
    
    </summary>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="Android基础" scheme="http://yoursite.com/tags/Android%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>JAVA学习笔记</title>
    <link href="http://yoursite.com/2018/09/12/JAVA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/09/12/JAVA学习笔记/</id>
    <published>2018-09-12T14:48:34.000Z</published>
    <updated>2018-11-04T09:56:06.468Z</updated>
    
    <content type="html"><![CDATA[<p>毕业后就没怎么碰Java了，为了后面Android的学习，将Java的基础知识整理一下。<br><a id="more"></a></p><h1 id="0-开发环境的搭建"><a href="#0-开发环境的搭建" class="headerlink" title="0. 开发环境的搭建"></a>0. 开发环境的搭建</h1><p>在后面Java学习的过程中，要敲写示例代码在Linux上测试，因此需要先用虚拟机安装一个Linux发行版和Java。<br>准备使用的Linux发行版为<code>Ubuntu18.04.1</code>，考虑到后期Android学习也会在该虚拟机上，因此在安装过程就得先设置好硬盘大小和交换分区，感觉还是有必要记录一下。</p><h2 id="0-1-为Ubuntu设置两个分区"><a href="#0-1-为Ubuntu设置两个分区" class="headerlink" title="0.1 为Ubuntu设置两个分区"></a>0.1 为Ubuntu设置两个分区</h2><p>首先是安装虚拟机<code>VMware Workstation Pro</code>和下载<a href="https://www.ubuntu.com/download/desktop" target="_blank" rel="external"><code>Ubuntu 18.04.1 LTS</code></a>就不废话了。<br>然后新建虚拟机，选择“自定义(高级)”，再默认“下一步”，然后选择下载好的Ubuntu镜像文件<code>ubuntu-18.04.1-desktop-amd64.iso</code>，设置名字、密码等，再设置虚拟机文件放置位置(选择一个剩余空间大于100G的盘)，选择核心数，设置内存，设置为“使用桥接网络”，默认IO控制器类型，默认磁盘类型，再选择“创建新虚拟磁盘”，磁盘大小为20G(作为root分区，存放Ubuntu自身系统等)，磁盘文件名也改为“root.vmdk”，然后取消“创建后开启虚拟机”再点击“完成”，此时再选择“编辑虚拟机设置”，选中“CD/DVD (SATA) 正在使用文件autoinst.iso”，将其移除，再点击“添加”，选择“硬盘”，再一直点默认“下一步”，直到设置磁盘大小界面，设置为100G(作为work分区，存放后面的Android源码等)，名字也改为“work.vmdk”，完成后，即可“开启此虚拟机”。</p><ul><li>这里解释下为什么这样繁琐的设置两个分区。<br>假如只有一个分区，在以后的使用中，假如Ubuntu不小心被损坏，不能进入系统，那么系统里保存的数据就无法获取，资料也就没了。<br>假如分成了两个分区，一个作为系统分区，一个作为工作数据分区，即使Ubuntu系统崩溃，只需重新安装一个Ubuntu，挂接原来的工作数据分区即可，所有的文件仍然会保留。此外，扩展分区大小，也相对比较方便。</li></ul><h2 id="0-2-为Ubuntu设置交换分区"><a href="#0-2-为Ubuntu设置交换分区" class="headerlink" title="0.2 为Ubuntu设置交换分区"></a>0.2 为Ubuntu设置交换分区</h2><p>首次启动虚拟机后，进入系统配置界面，选择默认语言“English”，点击“Install Ubuntu”，选择默认键盘布局，选择最小安装“Minimal installation”，去掉“Download update while installing Ubuntu”，不然要安装很久，然后点击“Continue”，选择“Someting else”，选中“/dev/sda”(20G的root分区)，右键点击“New Partition Table……”，在弹出的窗口选择“Continue”，再选中新出现的“free space”，右键点击“Add……”，在“Use as:”选项卡里选择“swap area”，大小改为10240(Android编译要求16G的内存+交换分区，内存不够交换分区凑)，完成后再点击该“free space”，把剩下的大小作为“Ext4 journaling file system”，“Mount point:”设置为根目录“/”，然后以类似的方式设置“/dev/sdb”，全部空间作为“Ext4 journaling file system”，“Mount point:”设置为手动编辑的“/work”，分区完成效果如下：</p><div align="center"><img width="500" src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180912/1.png"></div><p>最后点击“Install Now”，选择时区为“Shanghai”，设置主机名字、密码等，再根据提示重启。</p><h2 id="0-3-为Ubuntu安装基本软件"><a href="#0-3-为Ubuntu安装基本软件" class="headerlink" title="0.3 为Ubuntu安装基本软件"></a>0.3 为Ubuntu安装基本软件</h2><p>前面的博客<a href="http://localhost:4000/2017/08/05/Linux%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%8F%8Ashell-script/#more" target="_blank" rel="external">Linux开发环境配置及shell script</a>对嵌入式开发所需使用到的软件有过一次分析，另外博客<a href="http://localhost:4000/2017/03/23/%E6%90%AD%E5%BB%BA%E5%B5%8C%E5%85%A5%E5%BC%8FLinux%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/#2-3%E5%AE%89%E8%A3%85%E3%80%81-%E9%85%8D%E7%BD%AE%E7%BD%91%E7%BB%9C%E6%9C%8D%E5%8A%A1" target="_blank" rel="external">搭建嵌入式Linux开发环境</a>有如何安装和配置，参考博客，完成对ftp、ssh、nfs、smaba、vim的安装和配置，这些就不废话了，目前只是学习Java，至于其它的软件，后面需要再安装。</p><p>接下来就是安装本次的最主要的Java：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install openjdk-8-jdk</div></pre></td></tr></table></figure></p><blockquote><p>这里只安装了JDK，因为JDK包含了JRE:</p><ul><li>JDK (Java Development Kit)：JAVA开发环境，包含JRE；</li><li>JRE (Java Runtime Environment)：JAVA运行环境，包含虚拟机但不包含编译器；</li></ul></blockquote><p>以上就完成了Java学习环境的准备。</p><h1 id="1-Java基础"><a href="#1-Java基础" class="headerlink" title="1. Java基础"></a>1. Java基础</h1><h2 id="1-1-第一个Java程序"><a href="#1-1-第一个Java程序" class="headerlink" title="1.1 第一个Java程序"></a>1.1 第一个Java程序</h2><figure class="highlight java"><figcaption><span>[Hello.java]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Hello world!"</span>);</div><div class="line">&#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>编译、执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">javac Hello.java  //编译</div><div class="line">java Hello        //执行</div></pre></td></tr></table></figure></p><blockquote><p>这里Java文件名首字母大写是因为:<br>在Java编程规范里，类的首字母要大写，而类的名字要和文件名一致；</p></blockquote><h2 id="1-2-数据类型"><a href="#1-2-数据类型" class="headerlink" title="1.2 数据类型"></a>1.2 数据类型</h2><p>Java的数据类型分为<strong>8个基本数据类型</strong>和<strong>3个引用数据类型</strong>。</p><h3 id="1-2-1-基本数据类型"><a href="#1-2-1-基本数据类型" class="headerlink" title="1.2.1 基本数据类型"></a>1.2.1 基本数据类型</h3><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:center">数据类型</th><th style="text-align:center">关键字</th><th style="text-align:center">占用比特数/字节数</th><th style="text-align:center">取值范围</th><th style="text-align:center">缺省数值</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">布尔型</td><td style="text-align:center">boolean</td><td style="text-align:center">8/1</td><td style="text-align:center">true,false</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">字节型</td><td style="text-align:center">byte</td><td style="text-align:center">8/1</td><td style="text-align:center">-128~127</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">字符型</td><td style="text-align:center">char</td><td style="text-align:center">16/2</td><td style="text-align:center">0~65535</td><td style="text-align:center">‘\u0’</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">短整数</td><td style="text-align:center">short</td><td style="text-align:center">16/2</td><td style="text-align:center">-32768~32767</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">整型</td><td style="text-align:center">int</td><td style="text-align:center">32/4</td><td style="text-align:center">-2147483648~2147483647</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">长整型</td><td style="text-align:center">long</td><td style="text-align:center">64/8</td><td style="text-align:center">-9.22E-45~9.22E+18</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">单精度浮点型</td><td style="text-align:center">float</td><td style="text-align:center">32/4</td><td style="text-align:center">1.4013E-45~3.4028E+38</td><td style="text-align:center">0.0F</td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">双精度浮点型</td><td style="text-align:center">double</td><td style="text-align:center">64/8</td><td style="text-align:center">2.22551E-208~1.7977E+308</td><td style="text-align:center">0.0D</td></tr></tbody></table><p>Java中所有的基本数据类型都有固定的存储范围和所占内存空间的大小，而不受具体操作系统的影响，来保证Java程序的可移植性。<br><strong>整形数据默认为int数据类型，浮点型默认为double数据类型</strong>，如果要表示long型数据或float型数据，要在相应的数值后面加上l、L或f、F，否则会出现编译问题。</p><h3 id="1-2-2-引用数据类型"><a href="#1-2-2-引用数据类型" class="headerlink" title="1.2.2 引用数据类型"></a>1.2.2 引用数据类型</h3><p>Java的引用数据类型包括：数组(array)、类(class)、接口(interface)，其缺省值都为null。<br><strong>基本数据类型的变量名指向具体的数值，而引用数据类型的变量名指向存数据对象的内存地址</strong>，有点类型C语言的指针。<br>当引用指向null时，Java会自动释放对应的空间。</p><h3 id="1-2-3-数据转换"><a href="#1-2-3-数据转换" class="headerlink" title="1.2.3 数据转换"></a>1.2.3 数据转换</h3><p>Java在不丢失数据的前提下，可以实现自动转换，比如int型转换为long型，即<strong>由小范围变大范围可以，大范围变小范围不行</strong>。</p><ul><li>示例：<figure class="highlight java"><figcaption><span>[Var.java]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Var</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">    <span class="comment">//基本数据类型:变量名指向具体的数值(数据在栈)</span></div><div class="line">        <span class="keyword">boolean</span> a = <span class="keyword">true</span>;  <span class="comment">//布尔型</span></div><div class="line">        <span class="keyword">byte</span>    b = <span class="number">1</span>;     <span class="comment">//字节型</span></div><div class="line">        <span class="keyword">char</span>    c = <span class="string">'h'</span>;   <span class="comment">//字符型</span></div><div class="line">        <span class="keyword">short</span>   d = <span class="number">2</span>;     <span class="comment">//短整数</span></div><div class="line">        <span class="keyword">int</span>     e = <span class="number">3</span>;     <span class="comment">//整型</span></div><div class="line">        <span class="keyword">long</span>    f = <span class="number">4L</span>;    <span class="comment">//长整型</span></div><div class="line">        <span class="keyword">float</span>   g = <span class="number">3.14F</span>; <span class="comment">//单精度浮点型</span></div><div class="line">        <span class="keyword">double</span>  h = <span class="number">3.14</span>D; <span class="comment">//双精度浮点型</span></div><div class="line">        </div><div class="line">    <span class="comment">//引用数据类型:变量名指向存数据对象的内存地址(引用在栈,数据在堆)</span></div><div class="line">        <span class="keyword">int</span> p1[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>]; <span class="comment">//分配整数数组,类似C语言int p1[10];或int* p1 = malloc(10*sizeof(int));</span></div><div class="line">        <span class="keyword">int</span> p2[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;   <span class="comment">//分配并定义,类似C语言int p2[10] = &#123;1, 2, 3&#125;;</span></div><div class="line">                </div><div class="line">        String str = <span class="string">"hceng"</span>;  <span class="comment">//类引用,分配并定义,类似C语言char str[] = "hceng";</span></div><div class="line">        </div><div class="line">        p1  = <span class="keyword">null</span>; <span class="comment">//自动释放</span></div><div class="line">        p2  = <span class="keyword">null</span>;</div><div class="line">        str = <span class="keyword">null</span>;</div><div class="line">        </div><div class="line">    <span class="comment">//数据转换</span></div><div class="line">        <span class="keyword">int</span>  a1 = <span class="number">30</span>;</div><div class="line">        <span class="keyword">long</span> b1 = a1;       <span class="comment">//自动转换,因为long的表示范围比int大</span></div><div class="line">        <span class="keyword">float</span> c1 = <span class="number">3.1f</span>;</div><div class="line">        <span class="keyword">int</span>   d1 = (<span class="keyword">int</span>)c1; <span class="comment">//必须使用强制转换,因为数据会丢失</span></div><div class="line">        </div><div class="line">        <span class="keyword">short</span> s = <span class="number">1</span>;</div><div class="line">        <span class="comment">//s = s + 1;  //出错,因为s+1自动将s变成了int型与1相加,再赋值给short型的s,大范围变小范围不行</span></div><div class="line">        <span class="comment">//s = s + s;  //出错,因为s+s也会自动变成int型赋值给short型的s,大范围变小范围不行</span></div><div class="line">        s = (<span class="keyword">short</span>)(s + <span class="number">1</span>);</div><div class="line">        s = (<span class="keyword">short</span>)(s + s);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h2 id="1-3-运算符、表达式、语句"><a href="#1-3-运算符、表达式、语句" class="headerlink" title="1.3 运算符、表达式、语句"></a>1.3 运算符、表达式、语句</h2><p>Java的分支<code>if, if...else, if...else if...else, switch</code>和循环<code>while, do...while, for; break, continue</code>都和C语言是一样的。</p><h2 id="1-4-方法"><a href="#1-4-方法" class="headerlink" title="1.4 方法"></a>1.4 方法</h2><p>在C语言里函数的的叫法，在Java中没有了，类似的东西叫方法，所谓的方法就是用来解决一类问题的代码的有序组合，是一个功能模块。</p><h3 id="1-4-1-方法的格式"><a href="#1-4-1-方法的格式" class="headerlink" title="1.4.1 方法的格式"></a>1.4.1 方法的格式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public static 返回值类型 方法名称 (类型 参数1, 类型 参数2, ...) ｛</div><div class="line">程序语句;</div><div class="line">   [return 表达式];</div><div class="line">｝</div></pre></td></tr></table></figure><ul><li>示例：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">     <span class="keyword">int</span> sum;</div><div class="line">     sum = x + y;</div><div class="line">     <span class="keyword">return</span> sum;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h3 id="1-4-2-方法的重载"><a href="#1-4-2-方法的重载" class="headerlink" title="1.4.2 方法的重载"></a>1.4.2 方法的重载</h3><p><strong>即方法名相同，参数类型或个数不同，返回值也可相同也可以不同，就会调用到不同的方法。</strong></p><ul><li><p>示例：</p><figure class="highlight java"><figcaption><span>[Method.java]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Method</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">        System.out.println(add(<span class="number">1</span>, <span class="number">2</span>));</div><div class="line">        System.out.println(add(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>));</div><div class="line">        System.out.println(add(<span class="number">1.0f</span>, <span class="number">2.0f</span>));</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span> <span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> x + y;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span> <span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> x + y + z;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">float</span> <span class="title">add</span> <span class="params">(<span class="keyword">float</span> x, <span class="keyword">float</span> y)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> x + y;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">3</div><div class="line">6</div><div class="line">3.0</div></pre></td></tr></table></figure></li></ul><p>三个方法名字都一样，第一个和第二个参数个数不同，第一个和第三个参数类型不同，在调用方法时，传入的参数和哪一个匹配，就会调用到哪一个方法。</p><h3 id="1-4-3-方法的参数"><a href="#1-4-3-方法的参数" class="headerlink" title="1.4.3 方法的参数"></a>1.4.3 方法的参数</h3><ul><li><p>示例：</p><figure class="highlight java"><figcaption><span>[Param.java]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Param</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> x = <span class="number">1</span>;</div><div class="line">        System.out.println(<span class="string">"Before x="</span> + x);</div><div class="line">        fun(x);</div><div class="line">        System.out.println(<span class="string">"After  x="</span> + x);</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> p[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1</span>];</div><div class="line">        p[<span class="number">0</span>] = <span class="number">2</span>;</div><div class="line">        System.out.println(<span class="string">"Before p="</span> + p[<span class="number">0</span>]);</div><div class="line">        fun(p);</div><div class="line">        System.out.println(<span class="string">"After  p="</span> + p[<span class="number">0</span>]);</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        x = <span class="number">100</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span>[] p)</span> </span>&#123;</div><div class="line">        p[<span class="number">0</span>] = <span class="number">200</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Before x=1</div><div class="line">After  x=1</div><div class="line">Before p=2</div><div class="line">After  p=200</div></pre></td></tr></table></figure></li></ul><p>与C语言类型，如果传入的为形参，在方法里修改变量值，外部的方法的参数不会被改变，可以通过引用数组(类型C语言的指针)的方式，实现对传入参数的修改。<br><strong>基本数据作为参数，方法内部对参数的修改不影响调用者；</strong><br><strong>引用数据作为参数，方法内部修改了堆，结果会保留下来；</strong></p><h1 id="2-Java面向对象编程"><a href="#2-Java面向对象编程" class="headerlink" title="2. Java面向对象编程"></a>2. Java面向对象编程</h1><p>在Java中，<strong>方法</strong>类似C语言中函数，<strong>类</strong>类似C语言中结构体。<br>Java面向对象编程有三大特性：<strong>封装性、继承性、多态性</strong>。</p><h2 id="2-1-类的引入"><a href="#2-1-类的引入" class="headerlink" title="2.1 类的引入"></a>2.1 类的引入</h2><p><strong>在Java面向对象的思维里，把拥有共同特征的事物抽象出来叫做类，把符合这个类特征的个体叫做对象。</strong>比如“人”就是类，具体的某个人“张三”就是对象，类的共同特征包含“人的名字”、“人的年龄”等。</p><p>如下面例子，定义了一个类<code>Person</code>，在<code>main</code>里，通过<code>new</code>创建具体的对象，再通过对象调用成员方法，或者直接访问类方法或类变量。</p><ul><li><p>示例：</p><figure class="highlight java"><figcaption><span>[Oop.java]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//类的定义(类是创建对象的模板,创建对象也叫类的实例化)</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">    <span class="comment">//类变量(调用不需要实例化对象)</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> count; </div><div class="line">    </div><div class="line">    <span class="comment">//类方法(调用不需要实例化对象)</span></div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printPerson</span> <span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"This is a class of Person"</span>);</div><div class="line">    &#125; </div><div class="line">    </div><div class="line">    <span class="comment">//静态代码块(只会被调用一次,且先于构造代码块、构造方法执行)</span></div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        System.out.println(<span class="string">"Execute only once"</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//构造代码块(每次创建对象时都会被调用,且先于构造方法执行) </span></div><div class="line">    &#123;</div><div class="line">        System.out.println(<span class="string">"Every call is executed"</span>);</div><div class="line">        count ++;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//类的成员</span></div><div class="line">    String name; <span class="comment">//成员变量</span></div><div class="line">    <span class="keyword">int</span> age;     <span class="comment">//成员变量</span></div><div class="line">    <span class="comment">//成员方法</span></div><div class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span> </span>&#123; </div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    </div><div class="line">    <span class="comment">//构造方法(没有返回值，方法名必须和类名一样)</span></div><div class="line">    <span class="comment">//实现new时传入参数,重载实现传入的参数多样化</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span> <span class="params">()</span> </span>&#123;</div><div class="line">        name = <span class="string">"null"</span>;</div><div class="line">        age  = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span> <span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name; <span class="comment">//name是局部变量</span></div><div class="line">        age  = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span> <span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.age  = age;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//一个源文件中只能有一个public类,且与文件名相同</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Oop</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">        Person p0 = <span class="keyword">new</span> Person();         <span class="comment">//创建对象,即类的实例化</span></div><div class="line">        Person p1 = <span class="keyword">new</span> Person(<span class="string">"hceng"</span>);</div><div class="line">        Person p2 = <span class="keyword">new</span> Person(<span class="string">"hceng, 23"</span>);</div><div class="line">        </div><div class="line">        System.out.println(p0.getName()); <span class="comment">//调用成员方法</span></div><div class="line">        System.out.println(p1.getName());</div><div class="line">        System.out.println(p2.getName());</div><div class="line">        </div><div class="line">        Person.printPerson();             <span class="comment">//访问类方法</span></div><div class="line">        System.out.println(<span class="string">"Person number is "</span> + Person.count); <span class="comment">//访问类变量</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Execute only once</div><div class="line">Every call is executed</div><div class="line">Every call is executed</div><div class="line">Every call is executed</div><div class="line">null</div><div class="line">hceng</div><div class="line">hceng, 23</div><div class="line">This is a class of Person</div><div class="line">Person number is 3</div></pre></td></tr></table></figure></li></ul><p>对该示例进行分析，涉及了好几个知识点。</p><blockquote><ol><li><code>Person</code>通过<code>class</code>关键词定义为类；<br>　<br>2.1 通过<code>static</code>修饰的变量叫<strong>类变量</strong>，可以不通过<code>new</code>创建对象进行访问；<br>2.2 通过<code>static</code>修饰的方法叫<strong>类方法</strong>，可以不通过<code>new</code>创建对象进行访问；<br>　<br>3.1 通过<code>static { }</code>修饰的代码块叫<strong>静态代码块</strong>，在类被创建的时候调用，且<strong>只会被调用一次</strong>，先于构造代码块、构造方法执行；<br>3.2 通过<code>{ }</code>修饰的代码块叫<strong>构造代码块</strong>，在<strong>每次类被创建的时候</strong>调用，先于构造方法执行；<br>　<br>4.1 接下来是<strong>类的成员</strong>，包含<strong>成员变量</strong>和<strong>成员方法</strong>；<br>4.2 <strong>成员方法:</strong>实现对类中成员变量的操作，提供某些功能，成员方法通过对象调用；<br>　<br>5.1 接下来是<strong>构造方法</strong>，没有返回值，方法名必须和类名一样，如果没实现构造方法，编译器自动加上一个无参数的空构造方法；<br>5.2 <strong>构造方法:</strong>用于创建类的实例并对实例的成员变量进行初始化，构造方法通过new运算符调用；<br>5.3 这里利用重载实现了传入参数的多样化，<code>this</code>关键字表示当前类；<br>　<br>6.1 接下来是<code>public</code>修饰的类，也是唯一的一个，和文件名相同，里面有<code>main</code>成员方法；<br>6.2 在<code>main</code>里，首先创建了三个对象，每个对象传入的参数不同，调用的构造方法也会不同；<br>6.3 然后调用对象的成员方法；<br>6.4 最后直接对类变量、类方法进行访问；</li></ol></blockquote><h2 id="2-2-封装性"><a href="#2-2-封装性" class="headerlink" title="2.2 封装性"></a>2.2 封装性</h2><p>在Java中，将属性(变量)和方法封装成一个整体(也就是类)，就是封装性的体现。</p><p>对于这个整体，里面有些属性外部可以直接访问，有些可能期望按要求访问，对于特殊的属性，可以先设置为私有的权限，再通过属性的方法进行访问，就属性的方法里就是我们期望访问的方式。</p><p>就比如下例中的年龄，我们期望年龄为非负的值，假如外部直接修改年龄就有被设置为负的风险。现在将年龄私有化，使外部无法访问，只能通过公共的类的方法进行访问，这个方法里就对传入的参数进行判断纠正，从而满足年龄非负的要求。</p><ul><li><p>示例：</p><figure class="highlight java"><figcaption><span>[Enc.java]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">    <span class="comment">/* 成员变量(属性) */</span></div><div class="line">    <span class="comment">//int age;       //default</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age; <span class="comment">//私有,只能供类内部访问</span></div><div class="line">    </div><div class="line">    <span class="comment">/* 成员方法 */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (age &lt; <span class="number">0</span> || age &gt; <span class="number">200</span>)</div><div class="line">            age = <span class="number">0</span>;</div><div class="line">        <span class="keyword">else</span> </div><div class="line">            <span class="keyword">this</span>.age = age;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> age;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Enc</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">        Person per = <span class="keyword">new</span> Person();</div><div class="line">        <span class="comment">//per.age = -1; //外部直接访问,不好控制</span></div><div class="line">        per.setAge(-<span class="number">1</span>);</div><div class="line">        </div><div class="line">        System.out.println(per.getAge());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">0</div></pre></td></tr></table></figure></li></ul><blockquote><p>Java中四种权限：<br><strong>private:</strong> 被其修饰的属性以及方法只能被该类的对象访问，其子类不能访问，更不能允许跨包访问；<br><strong>default:</strong>默认访问权限，只允许在同一个包中进行访问；<br><strong>protected:</strong>被其修饰的属性以及方法只能被类本身的方法及子类访问，即使子类在不同的包中也可以访问；<br><strong>public:</strong> 被其修饰的类、属性以及方法不仅可以跨类访问，而且允许跨包访问；</p></blockquote><table><thead><tr><th style="text-align:center">权限</th><th style="text-align:center">类内</th><th style="text-align:center">同包</th><th style="text-align:center">不同包子类</th><th style="text-align:center">不同包非子类</th></tr></thead><tbody><tr><td style="text-align:center">private</td><td style="text-align:center">√</td><td style="text-align:center">×</td><td style="text-align:center">×</td><td style="text-align:center">×</td></tr><tr><td style="text-align:center">default</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">×</td><td style="text-align:center">×</td></tr><tr><td style="text-align:center">protected</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">×</td></tr><tr><td style="text-align:center">public</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td></tr></tbody></table><h2 id="2-3-继承性"><a href="#2-3-继承性" class="headerlink" title="2.3 继承性"></a>2.3 继承性</h2><h3 id="2-3-1-引入"><a href="#2-3-1-引入" class="headerlink" title="2.3.1 引入"></a>2.3.1 引入</h3><p>为了实现代码的复用，Java中引入了继承性。<br>如下例子，子类<code>Student</code>继承了父类<code>Person</code>，就可以访问父类的属性(非私有)和方法(非私有)。</p><ul><li><p>示例：</p><figure class="highlight java"><figcaption><span>[Ext.java]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">    <span class="comment">//变量/属性</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age; </div><div class="line">    </div><div class="line">    <span class="comment">//方法</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (age &lt; <span class="number">0</span> || age &gt; <span class="number">200</span>)</div><div class="line">            age = <span class="number">0</span>;</div><div class="line">        <span class="keyword">else</span> </div><div class="line">            <span class="keyword">this</span>.age = age;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> age;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printfInfo</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"age = "</span> + age);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFinal</span><span class="params">()</span> </span>&#123;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//构造方法</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123; <span class="comment">//系统默认的构造函数,如果没有,编译器会自动生成</span></div><div class="line">        System.out.println(<span class="string">"for test Person() call"</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">        System.out.println(<span class="string">"for test Person(int age) call"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//Student从父类(Person)继承</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String school; </div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSchool</span><span class="params">(String school)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.school = school; </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSchool</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.school;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//覆写(方法名在父类中有同名方法)</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printfInfo</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"school = "</span> + school);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//父类方法用了final修饰,子类无法覆写</span></div><div class="line">    <span class="comment">//public void testFinal() &#123;</span></div><div class="line">    <span class="comment">//  </span></div><div class="line">    <span class="comment">//&#125;</span></div><div class="line">    </div><div class="line">    <span class="comment">//构造方法</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123; <span class="comment">//系统默认的构造函数,如果没有,编译器会自动生成</span></div><div class="line">        <span class="comment">//super(); //调用父类的构造函数(无参数),默认调用,可不写</span></div><div class="line">        <span class="keyword">super</span>(<span class="number">15</span>); <span class="comment">//调用父类的构造函数(有参数)</span></div><div class="line">        <span class="keyword">super</span>.printfInfo(); <span class="comment">//super就指代的父类</span></div><div class="line">        System.out.println(<span class="string">"for test Student() call"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ext</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">        Student per = <span class="keyword">new</span> Student();</div><div class="line">        </div><div class="line">        per.setAge(<span class="number">10</span>); <span class="comment">//方法来源于父类</span></div><div class="line">        System.out.println(per.getAge());</div><div class="line">        </div><div class="line">        per.setSchool(<span class="string">"ShenZhen"</span>); <span class="comment">//方法来源于自己扩展</span></div><div class="line">        System.out.println(per.getSchool());</div><div class="line">        </div><div class="line">        per.printfInfo(); <span class="comment">//覆写的父类方法</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">for test Person(int age) call</div><div class="line">age = 15</div><div class="line">for test Student() call</div><div class="line">10</div><div class="line">ShenZhen</div><div class="line">school = ShenZhen</div></pre></td></tr></table></figure></li></ul><p>对该示例进行分析：</p><blockquote><p>1.1 定义了一个类<code>Person</code>，包含一个变量(私有)、四个方法、两个构造方法；<br>1.2 第四个构造方法使用了<code>final</code>修饰，后面子类将不能对其覆写；<br>1.3 两个构造方法，一个不带参数，一个带参数；<br>　<br>2.1 子类<code>Student</code>从父类<code>Person</code>通过关键词<code>extends</code>继承，包含一个新变量(私有)、三个方法、一个构造方法；；<br>2.2 方法<code>printfInfo</code>和父类的方法<code>printfInfo</code>名字一样，父类被覆写，调用<code>printfInfo</code>会调用子类的<code>printfInfo</code>；<br>2.3 方法<code>testFinal</code>被注释，因为父类使用<code>final</code>修饰了同名的方法，子类不能再覆写；<br>2.4 子类的构造方法被调用时，会先默认调用父类的构造方法，即用<code>super</code>表示，如果<code>super</code>带参数，表示调用父类带参数的构造方法，同时还可以通过<code>super</code>访问父类的属性(非私有)和方法(非私有)；<br>　<br>3.1 在<code>main</code>里，首先<code>new</code>实例化了一个<code>Student</code>类；<br>3.2 调用<code>Student</code>类的<code>setAge</code>方法，这个方法是从父类继承过来的；<br>3.3 调用<code>Student</code>类的<code>setSchool</code>方法，这个方法是子类自己扩展的；<br>3.4 调用<code>Student</code>类的<code>printfInfo</code>方法，这个方法父类和子类都有，子类覆写父类的方法；</p></blockquote><h3 id="2-3-2-继承的限制"><a href="#2-3-2-继承的限制" class="headerlink" title="2.3.2 继承的限制"></a>2.3.2 继承的限制</h3><p>前面引入了继承，子类从父类继承过来，也就拥有了父类的一些特性，但继承也是有限制的：</p><ul><li>父类的私有属性不能被子类访问；</li><li>父类的私有方法不能被子类访问；</li><li><p>子类覆写的方法不能缩小权限，即父类<code>public</code>，子类不能<code>private</code>；</p></li><li><p>示例：</p><figure class="highlight java"><figcaption><span>[Limit.java]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> money;</div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMoney</span><span class="params">(<span class="keyword">int</span> money)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.money = money;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printfInfo1</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"This is Father printfInfo1()"</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">printfInfo2</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"This is Father printfInfo2()"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;</div><div class="line">    <span class="comment">//private void printfInfo1() &#123;</span></div><div class="line">        <span class="comment">//System.out.println("This is Son printfInfo1()");</span></div><div class="line">    <span class="comment">//&#125;</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printfInfo2</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"This is Son printfInfo2()"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Limit</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">        Son son = <span class="keyword">new</span> Son();</div><div class="line">        </div><div class="line">        <span class="comment">//son.money = 100;</span></div><div class="line">        son.setMoney(<span class="number">100</span>);</div><div class="line">        </div><div class="line">        son.printfInfo1();</div><div class="line">        son.printfInfo2();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">This is Father printfInfo1()</div><div class="line">This is Son printfInfo2()</div></pre></td></tr></table></figure></li></ul><p>对该示例进行分析：</p><blockquote><p>1 定义了一个类<code>Father</code>，包含一个变量(私有)、三个方法(其中一个私有)；<br>　<br>2.1 子类<code>Son</code>从父类<code>Father</code>继承，只有一个方法；<br>2.2 方法<code>printfInfo1</code>被<code>private</code>修饰，表示私有，而父类同名方法是公共的，不能覆写，无法编译通过；<br>2.3 方法<code>printfInfo2</code>被<code>public</code>修饰，表示公共，父类也有个同名方法，但却是私有的，因此这里不是覆写，而是定义的新方法；<br>　<br>3.1 <code>main</code>里面实例化了一个类<code>Son</code>；<br>3.2 <code>Son</code>从父类<code>Father</code>继承过来，父类的私有变量不能直接访问，只能通过父类提供的公共方法来访问；<br>3.3 父类的<code>printfInfo1</code>是公共的，子类的<code>printfInfo1</code>也只能是公共的；<br>3.4 父类的<code>printfInfo2</code>是私有的，子类无法访问，子类的<code>printfInfo2</code>是新定义的；</p></blockquote><h3 id="2-3-3-抽象类"><a href="#2-3-3-抽象类" class="headerlink" title="2.3.3 抽象类"></a>2.3.3 抽象类</h3><p><strong>抽象类作用:</strong>规定子类必须实现的方法，起“模板”作用；</p><ul><li><p>示例：</p><figure class="highlight java"><figcaption><span>[Abstract.java]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//抽象类</span></div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span></span>; <span class="comment">//规定了子类必须实现的方法</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//子类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span> </span>&#123; <span class="comment">//实现抽象类定义的方法</span></div><div class="line">        System.out.println(<span class="string">"Son study"</span>); </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Abstract</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">        <span class="comment">//Father father = new Father(); //抽象类不能实例化对象</span></div><div class="line">        Son son = <span class="keyword">new</span> Son();</div><div class="line">        </div><div class="line">        son.study();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Son study</div></pre></td></tr></table></figure></li></ul><p>对该示例进行分析：</p><blockquote><p>1 通过<code>abstract</code>关键字定义了一个抽象类<code>Father</code>，里面有一个<code>abstract</code>修饰的方法，但没有具体的实现内容；<br>　<br>2 子类<code>Son</code>从父类<code>Father</code>继承，实现了父类的方法；<br>　<br>3 <code>main</code>里不能对抽象类进行实例化，只能对抽象类的子类进行实例化，访问其方法</p></blockquote><h3 id="2-3-4-接口"><a href="#2-3-4-接口" class="headerlink" title="2.3.4 接口"></a>2.3.4 接口</h3><p><strong>接口作用:</strong>跟抽象类相似，起“模板”作用；子类可以继承多个接口，突破“单继承”的限制；</p><ul><li><p>示例：</p><figure class="highlight java"><figcaption><span>[Interface.java]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//接口</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">A</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> i = <span class="number">10</span>; <span class="comment">//接口只能定义常量</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">printNum</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">B</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String name = <span class="string">"hceng"</span>; </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">printString</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//子类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">implements</span> <span class="title">A</span>,<span class="title">B</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printNum</span><span class="params">()</span> </span>&#123; <span class="comment">//实现接口定义的方法</span></div><div class="line">        System.out.println(<span class="string">"Num = "</span> + i); </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printString</span><span class="params">()</span> </span>&#123; </div><div class="line">        System.out.println(<span class="string">"String = "</span> + name); </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Interface</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">       </div><div class="line">        Son son = <span class="keyword">new</span> Son();</div><div class="line">        </div><div class="line">        son.printNum();</div><div class="line">        son.printString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Num = 10</div><div class="line">String = hceng</div></pre></td></tr></table></figure></li></ul><p>对该示例进行分析：</p><blockquote><p>1.1 通过<code>interface</code>关键字定义两个接口<code>A</code>和<code>B</code>，里面定义了常量和抽象方法；<br>1.2 接口里面只能定义常量，抽象类可以定义常量和变量；<br>　<br>2.1 子类<code>Son</code>同时从接口<code>A</code>和<code>B</code>继承，突破了抽象类突破“单继承”的限制；<br>2.2 子类<code>Son</code>依旧得实现接口里面所有的抽象方法；<br>　<br>3 <code>main</code>实例化<code>Son</code>，访问实现的方法；</p></blockquote><h2 id="2-4-多态性"><a href="#2-4-多态性" class="headerlink" title="2.4 多态性"></a>2.4 多态性</h2><p><strong>多态性体现在方法和对象上。</strong></p><p>在前面的例子中，方法的多态性已经接触过了，体现在<strong>方法的重载与覆写</strong>。</p><ul><li><strong>方法的重载(overload):</strong>定义多个同名方法，其参数类型、个数不同；</li><li><strong>方法的覆写(override):</strong>子类里实现跟父类同样的方法，覆盖掉父类；</li></ul><hr><p>对象的多态性就是<strong>父对象和子对象之前的转换</strong>，转换分为向上转换和向下转换。</p><ul><li><strong>向上转型</strong>:子对象向父对象转型的过程，例如猫类转换为动物类(小范围转大范围自动)，子对象独有的成员将不可访问(只能识别父对象中的内容)；</li><li><strong>向下转型</strong>:父对象强制转换为子对象的过程，例如动物类强制转换为猫类(大范围转小范围强制)，；</li></ul><p>另外，可以通过<code>引用变量 instanceof 类名</code>的方式来判断引用变量所指向的对象是否属于某个类；</p><ul><li><p>示例：</p><figure class="highlight java"><figcaption><span>[Limit.java]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printfInfo</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"This is Father"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Father is working……"</span>);</div><div class="line">    &#125; </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printfInfo</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"This is Son"</span>);</div><div class="line">    &#125; </div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">palyGame</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Son is playing games……"</span>);</div><div class="line">    &#125; </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Daughter</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printfInfo</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"This is Daughter"</span>);</div><div class="line">    &#125; </div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dance</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Daughter is dancing……"</span>);</div><div class="line">    &#125; </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cnv</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">        Father father1 = <span class="keyword">new</span> Father();</div><div class="line">        Son son = <span class="keyword">new</span> Son();</div><div class="line">        father1 = son; <span class="comment">//向上转换</span></div><div class="line">        father1.printfInfo();</div><div class="line">        <span class="comment">//father1.palyGame(); //只能调用被子类覆写的方法，不能调用只在子类中定义的方法</span></div><div class="line">        </div><div class="line">        Father father2  = <span class="keyword">new</span> Daughter(); <span class="comment">//创建子类的实例化对象(先向上转换)</span></div><div class="line">        Daughter daughter = (Daughter)father2; <span class="comment">//向下转换 (Daughter daughter = new Daughter();)</span></div><div class="line">        daughter.printfInfo();  </div><div class="line">        </div><div class="line">        System.out.println(<span class="string">"--------------------"</span>);</div><div class="line">        </div><div class="line">        Father f = <span class="keyword">new</span> Father();</div><div class="line">        Son s = <span class="keyword">new</span> Son();</div><div class="line">        Daughter d = <span class="keyword">new</span> Daughter();</div><div class="line">        <span class="comment">//向上转换 示例</span></div><div class="line">        printf(f);</div><div class="line">        printf(s);</div><div class="line">        printf(d);      </div><div class="line">        <span class="comment">//向下转换 示例       </span></div><div class="line">        printAction(f);</div><div class="line">        printAction(s);</div><div class="line">        printAction(d); </div><div class="line">    &#125; </div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printf</span><span class="params">(Father f)</span> </span>&#123;</div><div class="line">        f.printfInfo();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printAction</span><span class="params">(Father f)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (f <span class="keyword">instanceof</span> Son) &#123;</div><div class="line">            Son s = (Son)f;</div><div class="line">            s.palyGame();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> Daughter) &#123;</div><div class="line">            Daughter d = (Daughter)f;</div><div class="line">            d.dance();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> Father) &#123; <span class="comment">//Father要在最后,每个对象都属于Father</span></div><div class="line">            f.work();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">This is Son</div><div class="line">This is Daughter</div><div class="line">--------------------</div><div class="line">This is Father</div><div class="line">This is Son</div><div class="line">This is Daughter</div><div class="line">Father is working……</div><div class="line">Son is playing games……</div><div class="line">Daughter is dancing……</div></pre></td></tr></table></figure></li></ul><p>对该示例进行分析：</p><blockquote><p>1.1 首先定义了三个类，其中<code>Son</code>和<code>Daughter</code>继承于<code>Father</code>；<br>1.2 每个类里面都有一个同名的<code>printfInfo</code>方法和各自的独有的方法；<br>　<br>2.1 <code>main</code>方法里，首先创建了<code>father1</code>和<code>son</code>这两个对象，然后将子类赋值给父类，进行向上转换，父类只能调用被子类覆写的方法<code>printfInfo</code>，最后结果也是调用的子类覆写的方法；<br>2.2 首先创建子类的实例化对象<code>father2</code>(即先向上转换，不然后面无法向下转换)，此时<code>father2</code>的类型是<code>Father</code>，再用<code>Daughter</code>强制向下转换，得到<code>daughter</code>，此时可以调用子类的所有方法；<br>　<br>3.1 先分别实例化了三个类对应的对象；<br>3.2 调用方法<code>printf</code>，传入不同类的对象，自动向上转换，调用各自同名的方法；<br>3.3 调用方法<code>printAction</code>，传入不同类的对象，自动向上转换，再判断是对象是否属于对应类，再进行向下强制转换，从而调用其私有的方法(因为<code>s</code>和<code>d</code>都属于<code>f</code>，所以对<code>f</code>的判断要放在最后)；</p></blockquote><h2 id="2-5-异常"><a href="#2-5-异常" class="headerlink" title="2.5 异常"></a>2.5 异常</h2><p>程序运行时，发生的不被期望的事件，它阻止了程序按照程序员的预期正常执行，这就是异常。<br>异常发生时，是任程序自生自灭，立刻退出终止，还是输出错误给用户？或者用C语言风格：用函数返回值作为执行状态？。<br>Java提供了更加优秀的解决办法：<strong>异常处理机制</strong>。<br>异常处理机制能让程序在异常发生时，按照代码的预先设定的异常处理逻辑，针对性地处理异常，让程序尽最大可能恢复正常并继续执行，且保持代码的清晰。</p><p>Java标准库内建了一些通用的异常，这些类以<code>Throwable</code>为顶层父类，<code>Throwable</code>又派生出<code>Error</code>类和<code>Exception</code>类。</p><ul><li><strong>Error(错误)</strong>：<code>Error</code>类以及他的子类的实例，代表了JVM本身的错误，不能被程序员通过代码处理，所以不用管；</li><li><strong>Exception(异常)</strong>：<code>Exception</code>以及他的子类，代表程序运行时发送的各种不期望发生的事件，可以被Java异常处理机制使用；</li></ul><div align="center"><img width="900" src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180912/2.jpg"></div><blockquote><p>针对Javac对异常的处理要求，将异常类分为2类:</p><ul><li><strong>checked exception(可查异常)</strong>:<code>IOException</code>以及它子类的异常，这些异常必须处理，否则编译不会通过；</li><li><strong>unckecked exception(不可查异常)</strong>:<code>RuntimeException</code>以及它的子类，不要求必须处理，发生异常时程序退出；</li></ul></blockquote><p>针对要处理的异常，可以自己处理，也可也通过<code>throws</code>抛出异常，让别人处理：</p><div align="center"><img width="500" src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180912/3.jpg"></div><ul><li><p>示例：</p><figure class="highlight java"><figcaption><span>[Div.java]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 除法运算: java Div 6 2   -&gt;  6/2=3*/</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Div</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> m, n, r;</div><div class="line">        m=n=r=<span class="number">0</span>; <span class="comment">//初始化</span></div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            m = Integer.parseInt(args[<span class="number">0</span>]);</div><div class="line">            n = Integer.parseInt(args[<span class="number">1</span>]);</div><div class="line">            r = div(m, n);</div><div class="line">            craetException();</div><div class="line">        &#125; <span class="keyword">catch</span> (NumberFormatException exception1) &#123; <span class="comment">//自己处理:数字格式异常(java Div 6 a)</span></div><div class="line">            System.out.println(<span class="string">"====An exception occurs1:"</span>+exception1+<span class="string">"====="</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (ArithmeticException exception2) &#123; <span class="comment">//处理扔过来的异常:除零错误异常(java Div 6 0)</span></div><div class="line">            System.out.println(<span class="string">"====An exception occurs2:"</span>+exception2+<span class="string">"====="</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (RuntimeException runtimeexception) &#123; <span class="comment">//处理所有不可查异常,比如位数不够(java Div 6)</span></div><div class="line">            System.out.println(<span class="string">"====An exception occurs:"</span>+runtimeexception+<span class="string">"====="</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception exception) &#123; <span class="comment">//处理自己通过throw创建的可查异常</span></div><div class="line">            System.out.println(<span class="string">"====An exception occurs:"</span>+exception+<span class="string">"====="</span>);</div><div class="line">        &#125; </div><div class="line">        <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="comment">//无论是否发生异常,finally代码块中的代码总会被执行,完成清理类型等收尾善后性质的功能</span></div><div class="line">            System.out.println(<span class="string">"finally"</span>); <span class="comment">//finally中不要包含return</span></div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        System.out.println(m+<span class="string">"/"</span>+n+<span class="string">"="</span>+r);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//扔给调用者处理:除零错误异常(java Div 6 0)</span></div><div class="line">    <span class="comment">//public static int div(int m, int n) throws ArithmeticException &#123;</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;  <span class="comment">//ArithmeticException是不可查异常,出现后会自动抛出,可以不要throws</span></div><div class="line">        <span class="keyword">int</span> r;</div><div class="line">        r = m / n;</div><div class="line">        <span class="keyword">return</span> r;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//自己创建的可查异常NullPointerException,必须处理,这里将其抛出,因此必须要throws</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">craetException</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"My Craeted Exception"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">hceng@android:/work/java_learn/09th_exception$ java Div 6 3</div><div class="line">====An exception occurs:java.lang.Exception: My Craeted Exception=====</div><div class="line">finally</div><div class="line">6/3=2</div><div class="line">hceng@android:/work/java_learn/09th_exception$ java Div 6 a</div><div class="line">====An exception occurs1:java.lang.NumberFormatException: For input string: &quot;a&quot;=====</div><div class="line">finally</div><div class="line">6/0=0</div><div class="line">hceng@android:/work/java_learn/09th_exception$ java Div 6 0</div><div class="line">====An exception occurs2:java.lang.ArithmeticException: / by zero=====</div><div class="line">finally</div><div class="line">6/0=0</div><div class="line">hceng@android:/work/java_learn/09th_exception$ java Div 6 </div><div class="line">====An exception occurs:java.lang.ArrayIndexOutOfBoundsException: 1=====</div><div class="line">finally</div><div class="line">6/0=0</div></pre></td></tr></table></figure></li></ul><p>对该示例进行分析：</p><blockquote><p>1 该示例实现了一个整数除法运算，同时对输入参数的合法性进行了异常处理；<br>　<br>2.1 <code>main</code>方法里，首先定义了三个变量并初始化；<br>2.2 <code>try { }</code>代码块包含了可能出现异常的代码；<br>2.3 通过<code>Integer.parseInt</code>方法将字符<code>args[0]</code>和<code>args[1]</code>转换成了整型，这里可能出现<code>NumberFormatException</code>和<code>ArrayIndexOutOfBoundsException</code>异常，比如传入<code>a</code>就无法转换成对应数字，传入的参数少一个也会转换出错；<br>2.4 方法<code>div</code>的定义在后面，可能出现<code>ArithmeticException</code>异常，即初始不能为零；<br>2.5 方法<code>craetException</code>的定义在后面，在里面自己产生了一个可查异常，必须处理的异常；<br>2.6 接下来的<code>catch (异常类 异常变量名) { }</code>代码块，捕获到对应异常，即进行代码块代码；<br>2.7 无论是否发生异常，<code>finally { }</code>代码块的内容总会被执行，一般在里面做一些清理类型的善后收尾工作，注意不要在里面写<code>return</code>代码，因为如果前面的<code>try</code>或<code>catch</code>块中有<code>return</code>或<code>throw</code>语句，会先执行<code>finally</code>块，此时<code>finally</code>中有<code>return</code>就直接返回了，无法再返回来执行<code>try</code>或<code>catch</code>块中<code>return</code>或<code>throw</code>语句里面的内容；<br>2.8 接下来是打印出结果；<br>　<br>3.1 定义了<code>Div</code>方法，因为可能发生<code>ArithmeticException</code>异常，该异常是不可查异常，出现后可以自动抛出，所以在方法名定义那可以不加<code>throws ArithmeticException</code>；<br>3.2 定义了<code>craetException</code>方法，该方法是通过<code>new</code>建立，<code>throw</code>抛出，从前面的图中可以知道<code>Exception</code>类异常包含<code>IOException</code>可查异常和<code>RuntimeException</code>不可查异常，因为是可查异常的关系，要么自己处理，要么手动抛出，这里抛出的话，方法名定义得加上<code>throws Exception</code>，否则编译都无法通过；<br>3.3 这里的两个方法，都是抛出异常，也可以自己通过<code>try {} catch {}</code>处理掉；在选择抛出时，前者因为是不可查异常，在方法名定义时可以不加<code>throws 异常类型</code>，后者反之得加上；<br>　<br>4 运行代码时，分别列举了正常运行、传入参数为字母错误、传入参数除数为零、传入参数少一个的情况，异常都被捕获到，程序没有当时直接退出，而是执行了异常处理代码块的内容，继续执行；</p></blockquote><h2 id="2-6-包及访问权限"><a href="#2-6-包及访问权限" class="headerlink" title="2.6 包及访问权限"></a>2.6 包及访问权限</h2><p>为了更好地组织类，Java提供了包机制，解决类的同名冲突问题；<br>如同<strong>文件夹</strong>一样，包也采用了树形目录的存储方式。同一个包中的类名字是不同的，不同的包中的类的名字是可以相同的，当同时调用两个不同包中相同类名的类时，应该加上包名加以区别。因此，包可以避免名字冲突。</p><p>假设有如下情况，hceng和jack两个程序员，实现了同一个<code>Math.java</code>类，实现了同名方法<code>add</code>，但内容不同，源码组织情况如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">├── hceng</div><div class="line">│   ├── Math.java</div><div class="line">│   └── Permission.java</div><div class="line">├── jack</div><div class="line">│   ├── Math.java</div><div class="line">│   └── TestAccess.java</div><div class="line">└── Pack.java</div></pre></td></tr></table></figure></p><p>使用如下命令编译：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">javac -d . hceng/*.java jack/*.java *.java</div></pre></td></tr></table></figure></p><p>编译后文件组织如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">├── hceng</div><div class="line">│   ├── Math.java</div><div class="line">│   └── Permission.java</div><div class="line">├── jack</div><div class="line">│   ├── Math.java</div><div class="line">│   └── TestAccess.java</div><div class="line">├── pack</div><div class="line">│   ├── hceng</div><div class="line">│   │   ├── Math.class</div><div class="line">│   │   ├── packagePermission.class</div><div class="line">│   │   └── Permission.class</div><div class="line">│   └── jack</div><div class="line">│       ├── Math.class</div><div class="line">│       └── TestAccess.class</div><div class="line">├── Pack.class</div><div class="line">└── Pack.java</div></pre></td></tr></table></figure></p><p>执行<code>java Pack</code>效果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">add1:3</div><div class="line">add2:4</div><div class="line">add2:-1</div><div class="line">Can only be accessed by this class: a = 1</div><div class="line">Access in the same package: b = 2</div><div class="line">Access in different packages: c = 3</div><div class="line">Accessible anywhere: d = 4</div></pre></td></tr></table></figure></p><p>源码见文末的Github链接，在<code>10th_package</code>里面。</p><p>先从<strong>文件组织的角度</strong>进行分析：</p><blockquote><p>1.1 <code>hceng</code>路径下有个<code>Math.java</code>，里面有个<code>Math</code>方法和<code>sub</code>方法，通过<code>package</code>关键字指定了打包的路径为<code>pack/hceng</code>；<br>1.2 <code>jack</code>路径下有个<code>Math.java</code>，里面有个<code>Math</code>方法，通过<code>package</code>关键字指定了打包的路径为<code>pack/jack</code>；<br>　<br>2.1 编译时加入了<code>-d</code>参数，表示指定生成的包文件路径；<br>2.2 根据编译参数和类文件<code>package</code>的定义，就在当前路径在生成了<code>pack/hceng</code>和<code>pack/jack</code>存放了对应的<code>class</code>；<br>　<br>3.1 当前路径下有个<code>Pack.java</code>，通过<code>import</code>关键字将前面两个包导入了该类里面；<br>3.2 <code>main</code>里面，通过指定包的路径调用对应的方法，比如<code>pack.jack.Math.add</code>和<code>pack.hceng.Math.add</code>，解决调用同名类的冲突；</p></blockquote><p>再从<strong>访问权限的角度</strong>进行分析：</p><blockquote><p>1.1 <code>hceng</code>路径下有个<code>Permission.java</code>，里面有个公共的<code>Permission</code>类和非公共的<code>packagePermission</code>类，外部只能访问公共的<code>Permission</code>类；<br>1.2 从<strong>类的权限角度</strong>可知:<code>public</code>类可以被外包访问，非<code>public</code>类只能在本包访问，另外，一个文件只能有一个<code>public</code>类；<br>　<br>2.1 <code>hceng</code>路径下有个<code>Permission.java</code>，在类<code>Permission</code>里定义了四种权限的属性(属性加static是因为可以不通过new创建，直接访问)；<br>2.2 针对<code>private</code>的属性，只能在本类里访问，因此在本类的方法可以直接调用(方法加static是因为可以不通过new创建，直接访问)；<br>2.3 针对<code>default</code>的属性，只能在同包里访问，因此在同包的另一个方法里实现了访问；<br>2.4 针对<code>protected</code>的属性，只能在不同包子类里访问，因此在<code>jack/</code>路径下创建了<code>TestAccess.java</code>，它属于<code>pack.jack</code>包，里面通过继承类访问了该属性；<br>2.5 针对<code>public</code>的属性，在任何地方都可以访问，因此在<code>Pack</code>里直接进行了访问；<br>2.6 从<strong>属性权限角度</strong>可知:类成员的访问权限如下：</p><table><thead><tr><th style="text-align:center">权限</th><th style="text-align:center">类内</th><th style="text-align:center">同包</th><th style="text-align:center">不同包子类</th><th style="text-align:center">不同包非子类</th></tr></thead><tbody><tr><td style="text-align:center">private</td><td style="text-align:center">√</td><td style="text-align:center">×</td><td style="text-align:center">×</td><td style="text-align:center">×</td></tr><tr><td style="text-align:center">default</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">×</td><td style="text-align:center">×</td></tr><tr><td style="text-align:center">protected</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">×</td></tr><tr><td style="text-align:center">public</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td></tr></tbody></table></blockquote><p>最后再补充一下<code>jar</code>，对于前面生成的<code>pack</code>目录，我们可以将其压缩打包，相关命令如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">jar -cvf pack.jar ./pack   //打包</div><div class="line">jar -tvf pack.jar          //查看包内容</div><div class="line">jar -xvf pack.jar          //解包</div></pre></td></tr></table></figure></p><p>操作逻辑和<code>tar</code>压缩一样的，很好记。</p><p>此时在当前目录生成<code>pack.jar</code>，删除<code>pack</code>文件夹，执行<code>export CLASSPATH=.:pack.jar</code>指定运行查找包的路径，执行<code>java Pack</code>仍可正常运行。</p><h2 id="2-7-内部类"><a href="#2-7-内部类" class="headerlink" title="2.7 内部类"></a>2.7 内部类</h2><p>内部类，在类的内部定义一个类，通过内部这个类，可以访问到该类的私有属性。<br>内部类又分一般内部类、静态内部类、匿名内部类。</p><ul><li><p>示例：</p><figure class="highlight java"><figcaption><span>[Inner.java]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">OutClass</span> </span>&#123;</div><div class="line">    <span class="comment">//一般内部类</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> a = <span class="number">1</span>;</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">InnerClass1</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printInfo</span><span class="params">()</span> </span>&#123;</div><div class="line">            System.out.println(<span class="string">"a = "</span> + a);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//静态内部类</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> b = <span class="number">2</span>;</div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClass2</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printInfo</span><span class="params">()</span> </span>&#123;</div><div class="line">            System.out.println(<span class="string">"b = "</span> + b);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">PrintInterface</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printInfo</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyInterface</span> <span class="keyword">implements</span> <span class="title">PrintInterface</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printInfo</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"MyInterface"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">        OutClass o = <span class="keyword">new</span> OutClass(); <span class="comment">//依次定义外部类</span></div><div class="line">        OutClass.InnerClass1 i1 = o.new InnerClass1(); <span class="comment">//内部类</span></div><div class="line">        i1.printInfo();</div><div class="line">        </div><div class="line">        OutClass.InnerClass2 i2 = <span class="keyword">new</span> OutClass.InnerClass2(); <span class="comment">//直接定义内部类</span></div><div class="line">        i2.printInfo();</div><div class="line">        </div><div class="line">        <span class="comment">//正常调用继承于接口的类</span></div><div class="line">        MyInterface m = <span class="keyword">new</span> MyInterface();</div><div class="line">        m.printInfo();</div><div class="line">        </div><div class="line">        <span class="comment">//匿名内部类(没有名字的内部类,必须继承一个父类或实现一个接口)</span></div><div class="line">        PrintInterface p = <span class="keyword">new</span> PrintInterface() &#123; </div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printInfo</span><span class="params">()</span> </span>&#123;</div><div class="line">                System.out.println(<span class="string">"PrintInterface"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        p.printInfo();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure></li><li><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a = 1</div><div class="line">b = 2</div><div class="line">hello MyInterface</div><div class="line">hello PrintInterface</div></pre></td></tr></table></figure></li></ul><p>对该示例进行分析：</p><blockquote><p>1.1 定义了一个<code>OutClass</code>类，里面包含两个私有变量和两个内部类，再通过内部类的方法访问私有变量；<br>1.2 两者区别是后者使用<code>static</code>修饰变量和类，使得可以不通过<code>new</code>直接访问类方法；<br>　<br>2.1 定义了一个接口<code>PrintInterface</code>，接口里定义了一个<code>printInfo</code>方法；<br>2.2 定义了类<code>MyInterface</code>继承于接口<code>PrintInterface</code>，并实现了<code>printInfo</code>方法；<br>　<br>3.1 在<code>main</code>里，先实例化外部类，再实例化内部类，才能方法问一般内部类的方法；<br>3.2 针对静态内部类，可以直接定义内部类，再访问其方法；<br>　<br>4.1 针对继承于接口/父类的子类，一般先实例化，再访问其方法；<br>4.2 也可以在使用时，再定义方法内容，再访问其方法，这就是匿名内部类，一个没有名字的内部类；</p></blockquote><h1 id="3-JNI"><a href="#3-JNI" class="headerlink" title="3. JNI"></a>3. JNI</h1><p>JNI(Java Native Interface)就是JAVA本地接口，它允许Java代码和Native代码进行交互，这里的Native代码指C、C++语言等编程语言。<br>无论是Android还是Linux，其底层都是用C语言编写的，因此很多程序和库都也是用C、C++来写的，重复利用这些Native语言编写的库是十分有必要的，而且一般Native语言编写的库具有更好的性能。<br>这样就产生了一个问题，Java世界的代码要怎么使用Native世界的代码呢，这就需要一个桥梁来将它们连接在一起，而JNI就是这个桥梁。 </p><h2 id="3-1-JAVA调用C"><a href="#3-1-JAVA调用C" class="headerlink" title="3.1 JAVA调用C"></a>3.1 JAVA调用C</h2><h3 id="3-1-1-Java访问C库的方法"><a href="#3-1-1-Java访问C库的方法" class="headerlink" title="3.1.1 Java访问C库的方法"></a>3.1.1 Java访问C库的方法</h3><p>Java访问C库的的步骤有三步：<br>1.Java中加载C库(System.loadLibrary)；<br>2.建立Java函数名与C库函数名的映射关系；<br>3.在Java程序里调用C库的函数；</p><p>其中，建立Java函数名与C库函数名映射关系的方法有两种：<strong>隐式建立</strong>和<strong>显式建立</strong>；</p><ul><li>示例：<figure class="highlight java"><figcaption><span>[Jni.java]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Jni</span> </span>&#123;</div><div class="line">    <span class="comment">/* 1.加载 */</span></div><div class="line">    <span class="keyword">static</span> &#123; <span class="comment">//静态代码块(只会被调用一次)</span></div><div class="line">        System.loadLibrary(<span class="string">"native"</span>); <span class="comment">//C语言会编译生成libnative.so,这里加载它</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">/* 2.声明 */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hello_implicit</span><span class="params">()</span></span>; <span class="comment">//声明(static静态方法,可直接调用)</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hello_explicit</span><span class="params">()</span></span>; </div><div class="line">    <span class="comment">/* 3.调用 */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">        hello_implicit();</div><div class="line">        hello_explicit();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><figure class="highlight c"><figcaption><span>[native.c]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Jni.h"</span></span></div><div class="line"></div><div class="line"><span class="comment">//隐式建立:函数名必须固定格式,参考生成的Jni.h</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Java_Jni_hello_1implicit</span><span class="params">(JNIEnv *env, jobject cls)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"hello java, I am from C language(implicit)\n"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//显式建立,函数名自定义</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">c_hello</span><span class="params">(JNIEnv *env, jobject cls)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"hello java, I am from C language(explicit)\n"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> JNINativeMethod methods[] = &#123;</div><div class="line">    &#123;<span class="string">"hello_explicit"</span>, <span class="string">"()V"</span>, (<span class="keyword">void</span> *)c_hello&#125;,  <span class="comment">//Java里调用的函数名;JNI字段描述符(参数、返回值);C语言实现的本地函数</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">//一旦Java调用System.loadLibrary,就会先调用JNI_OnLoad</span></div><div class="line"><span class="function">JNIEXPORT jint JNICALL</span></div><div class="line"><span class="title">JNI_OnLoad</span><span class="params">(JavaVM *jvm, <span class="keyword">void</span> *reserved)</span></div><div class="line">&#123;</div><div class="line">    JNIEnv *env;</div><div class="line">    jclass cls;</div><div class="line">    </div><div class="line">    <span class="comment">//根据版本获得env,为后面提供函数</span></div><div class="line">    <span class="keyword">if</span> ((*jvm)-&gt;GetEnv(jvm, (<span class="keyword">void</span> **)&amp;env, JNI_VERSION_1_4)) </div><div class="line">        <span class="keyword">return</span> JNI_ERR; </div><div class="line">    </div><div class="line">    <span class="comment">//查获取调用本程序的类</span></div><div class="line">    cls = (*env)-&gt;FindClass(env, <span class="string">"Jni"</span>); </div><div class="line">    <span class="keyword">if</span> (cls == <span class="literal">NULL</span>) </div><div class="line">        <span class="keyword">return</span> JNI_ERR;</div><div class="line"></div><div class="line">    <span class="comment">//使用RegisterNatives将C和Java建立联系</span></div><div class="line">    <span class="keyword">if</span> ((*env)-&gt;RegisterNatives(env, cls, methods, <span class="keyword">sizeof</span>(methods)/<span class="keyword">sizeof</span>(methods[<span class="number">0</span>])) &lt; <span class="number">0</span>)</div><div class="line">        <span class="keyword">return</span> JNI_ERR;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> JNI_VERSION_1_4;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>编译及设置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">javac Jni.java</div><div class="line">javah -jni Jni</div><div class="line"></div><div class="line">gcc -I /usr/lib/jvm/java-1.8.0-openjdk-amd64/include/ -I /usr/lib/jvm/java-1.8.0-openjdk-amd64/include/linux -fPIC -shared -o libnative.so native.c</div><div class="line"></div><div class="line">export LD_LIBRARY_PATH=.</div><div class="line"></div><div class="line">java Jni</div></pre></td></tr></table></figure></p><ul><li>结果：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hello java, I am from C language(implicit)</div><div class="line">hello java, I am from C language(explicit)</div></pre></td></tr></table></figure></li></ul><p>对该示例进行分析：</p><blockquote><p>1.1 在Java里，先在静态代码块里加载对应的库；<br>1.2 然后声明要使用的方法，使用<code>static</code>修饰的方法不用实例化；<br>1.3 <code>main</code>里调用方法；<br>　<br>2.1 在C语言里，先包含一个头文件，这个头文件通过<code>javac Jni.java</code>、<code>javah -jni Jni</code>生成，里面有根据Java声明的方法自动生成的C语言函数定义；<br>2.2 <strong>隐式建立</strong>:只需函数名和生成的<code>Jni.h</code>一致就行，Java执行方法时就自动调用函数；<br>2.3 <strong>显式建立</strong>:函数名自定义，但需要创建<code>JNI_OnLoad</code>方法将Java和C建立联系；</p></blockquote><h3 id="3-1-2-Java和C库传递数据"><a href="#3-1-2-Java和C库传递数据" class="headerlink" title="3.1.2 Java和C库传递数据"></a>3.1.2 Java和C库传递数据</h3><p>Java调用C语言，一般都要进行数据的传递，包括Java传入数据，C语言返回数据，这里对基本数据类、字符串、数据进行传递示例。</p><ul><li>示例：<figure class="highlight java"><figcaption><span>[Jni.java]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Jni</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> &#123; </div><div class="line">        System.loadLibrary(<span class="string">"native"</span>); </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//基本类型数据</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">static</span> <span class="keyword">float</span> <span class="title">typeData1</span><span class="params">(<span class="keyword">int</span> a)</span></span>; </div><div class="line">    </div><div class="line">    <span class="comment">//字符串 </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">static</span> String <span class="title">typeData2</span><span class="params">(String str)</span></span>; </div><div class="line">    </div><div class="line">    <span class="comment">//数组</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">static</span> <span class="keyword">int</span>[] typeData3(<span class="keyword">int</span>[] a); </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> [] a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;; </div><div class="line">        <span class="keyword">int</span> [] b = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">int</span> i;</div><div class="line">        </div><div class="line">        System.out.println(typeData1(<span class="number">4</span>));</div><div class="line">        System.out.println(typeData2(<span class="string">"hceng"</span>));</div><div class="line">        </div><div class="line">        b = typeData3(a);</div><div class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; b.length; i++)      </div><div class="line">            System.out.print(b[i]+<span class="string">" "</span>);</div><div class="line">        System.out.println();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><figure class="highlight c"><figcaption><span>[native.c]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Jni.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></div><div class="line"><span class="comment">//隐式建立</span></div><div class="line"><span class="function">jfloat <span class="title">Java_Jni_typeData1</span><span class="params">(JNIEnv *env, jclass cls, jint a)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"C: get val: %d, will return (float)%d \n"</span>, a, a);</div><div class="line">    <span class="keyword">return</span> (<span class="keyword">float</span>)a;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">jstring <span class="title">Java_Jni_typeData2</span><span class="params">(JNIEnv *env, jclass cls, jstring str)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">const</span> jbyte *cstr;</div><div class="line">    cstr = (*env)-&gt;GetStringUTFChars(env, str, <span class="literal">NULL</span>);</div><div class="line">    <span class="keyword">if</span> (cstr == <span class="literal">NULL</span>) </div><div class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>; </div><div class="line">    </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"C: get str: %s, will return jack \n"</span>, cstr);</div><div class="line">    (*env)-&gt;ReleaseStringUTFChars(env, str, cstr);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> (*env)-&gt;NewStringUTF(env, <span class="string">"jack"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">jintArray JNICALL <span class="title">Java_Jni_typeData3</span><span class="params">(JNIEnv *env, jclass cls, jintArray arr)</span></span></div><div class="line">&#123;</div><div class="line">    jint *carr;</div><div class="line">    jint *oarr;</div><div class="line">    jintArray rarr;</div><div class="line">    jint i, n = <span class="number">0</span>;</div><div class="line">    </div><div class="line">    carr = (*env)-&gt;GetIntArrayElements(env, arr, <span class="literal">NULL</span>);</div><div class="line">    <span class="keyword">if</span> (carr == <span class="literal">NULL</span>) </div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>; </div><div class="line"></div><div class="line">    n = (*env)-&gt;GetArrayLength(env, arr);</div><div class="line">    </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"C: get number: "</span>);</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)     </div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, carr[i]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">", will return opposite number\n"</span>);</div><div class="line">    </div><div class="line">    </div><div class="line">    oarr = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(jint) * n);</div><div class="line">    <span class="keyword">if</span> (oarr == <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        (*env)-&gt;ReleaseIntArrayElements(env, arr, carr, <span class="number">0</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">        oarr[i] = carr[n<span class="number">-1</span>-i];</div><div class="line">    </div><div class="line">    (*env)-&gt;ReleaseIntArrayElements(env, arr, carr, <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="comment">/* create jintArray */</span></div><div class="line">    rarr = (*env)-&gt;NewIntArray(env, n);</div><div class="line">    <span class="keyword">if</span> (rarr == <span class="literal">NULL</span>)</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">    (*env)-&gt;SetIntArrayRegion(env, rarr, <span class="number">0</span>, n, oarr);</div><div class="line">    <span class="built_in">free</span>(oarr);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> rarr;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">    </div><div class="line"></div><div class="line"><span class="comment">//显式建立</span></div><div class="line"><span class="function">jfloat JNICALL <span class="title">c_typeData1</span><span class="params">(JNIEnv *env, jclass cls, jint a)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"C: get val = %d, will return (float)%d \n"</span>, a, a);</div><div class="line">    <span class="keyword">return</span> (<span class="keyword">float</span>)a;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">jstring JNICALL <span class="title">c_typeData2</span><span class="params">(JNIEnv *env, jclass cls, jstring str)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">const</span> jbyte *cstr;</div><div class="line">    cstr = (*env)-&gt;GetStringUTFChars(env, str, <span class="literal">NULL</span>);</div><div class="line">    <span class="keyword">if</span> (cstr == <span class="literal">NULL</span>) </div><div class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>; </div><div class="line">    </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"C: get str = %s, will return jack \n"</span>, cstr);</div><div class="line">    (*env)-&gt;ReleaseStringUTFChars(env, str, cstr);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> (*env)-&gt;NewStringUTF(env, <span class="string">"jack"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">jintArray JNICALL <span class="title">c_typeData3</span><span class="params">(JNIEnv *env, jclass cls, jintArray arr)</span></span></div><div class="line">&#123;</div><div class="line">    jint *carr;</div><div class="line">    jint *oarr;</div><div class="line">    jintArray rarr;</div><div class="line">    jint i, n = <span class="number">0</span>;</div><div class="line">    </div><div class="line">    carr = (*env)-&gt;GetIntArrayElements(env, arr, <span class="literal">NULL</span>);</div><div class="line">    <span class="keyword">if</span> (carr == <span class="literal">NULL</span>) </div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>; </div><div class="line"></div><div class="line">    n = (*env)-&gt;GetArrayLength(env, arr);</div><div class="line">    </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"C: get number: "</span>);</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)     </div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, carr[i]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">", will return opposite number\n"</span>);</div><div class="line">    </div><div class="line">    </div><div class="line">    oarr = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(jint) * n);</div><div class="line">    <span class="keyword">if</span> (oarr == <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        (*env)-&gt;ReleaseIntArrayElements(env, arr, carr, <span class="number">0</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">        oarr[i] = carr[n<span class="number">-1</span>-i];</div><div class="line">    </div><div class="line">    (*env)-&gt;ReleaseIntArrayElements(env, arr, carr, <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="comment">/* create jintArray */</span></div><div class="line">    rarr = (*env)-&gt;NewIntArray(env, n);</div><div class="line">    <span class="keyword">if</span> (rarr == <span class="literal">NULL</span>)</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">    (*env)-&gt;SetIntArrayRegion(env, rarr, <span class="number">0</span>, n, oarr);</div><div class="line">    <span class="built_in">free</span>(oarr);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> rarr;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> JNINativeMethod methods[] = &#123;</div><div class="line">    &#123;<span class="string">"typeData1"</span>, <span class="string">"(I)F"</span>, (<span class="keyword">void</span> *)c_typeData1&#125;,  </div><div class="line">    &#123;<span class="string">"typeData2"</span>, <span class="string">"(Ljava/lang/String;)Ljava/lang/String;"</span>, (<span class="keyword">void</span> *)c_typeData2&#125;, </div><div class="line">    &#123;<span class="string">"typeData3"</span>, <span class="string">"([I)[I"</span>, (<span class="keyword">void</span> *)c_typeData3&#125;, </div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function">JNIEXPORT jint JNICALL</span></div><div class="line"><span class="title">JNI_OnLoad</span><span class="params">(JavaVM *jvm, <span class="keyword">void</span> *reserved)</span></div><div class="line">&#123;</div><div class="line">    JNIEnv *env;</div><div class="line">    jclass cls;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ((*jvm)-&gt;GetEnv(jvm, (<span class="keyword">void</span> **)&amp;env, JNI_VERSION_1_4)) </div><div class="line">        <span class="keyword">return</span> JNI_ERR; </div><div class="line">    </div><div class="line">    cls = (*env)-&gt;FindClass(env, <span class="string">"Jni"</span>); </div><div class="line">    <span class="keyword">if</span> (cls == <span class="literal">NULL</span>) </div><div class="line">        <span class="keyword">return</span> JNI_ERR;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ((*env)-&gt;RegisterNatives(env, cls, methods, <span class="keyword">sizeof</span>(methods)/<span class="keyword">sizeof</span>(methods[<span class="number">0</span>])) &lt; <span class="number">0</span>)</div><div class="line">        <span class="keyword">return</span> JNI_ERR;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> JNI_VERSION_1_4;</div><div class="line">&#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure><ul><li>结果：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">C: get val: 4, will return (float)4 </div><div class="line">4.0</div><div class="line">C: get str: hceng, will return jack </div><div class="line">jack</div><div class="line">C: get number: 1 2 3 4 , will return opposite number</div><div class="line">4 3 2 1</div></pre></td></tr></table></figure></li></ul><p>对该示例进行分析：</p><blockquote><p>1.1 在Java中，依次声明了以基本数据类型、字符串、数组为参数和返回值的方法；<br>1.2 然后调用方法，传入参数，打印返回结果；<br>　<br>2.1 C语言里，分别隐式建立和显式建立编写了函数，两者主要区别在函数名和关系的建立上；<br>2.2 以显式建立为例，函数<code>c_typeData1</code>接收Java传入的基本数据类型，直接处理，返回相应数据；<br>2.3 函数<code>c_typeData2</code>接收Java传入的字符串，不能直接处理，使用<code>GetStringUTFChars()</code>获取字符串指针，用完后使用<code>ReleaseStringUTFChars()</code>释放，使用<code>NewStringUTF()</code>返回字符串；<br>2.4 函数<code>c_typeData3</code>接收Java传入的数据，不能直接处理，使用<code>GetIntArrayElements()</code>获取数据，<code>GetArrayLength()</code>获得数组长度，用完后使用<code>ReleaseIntArrayElements()</code>释放，使用<code>NewIntArray()</code>创建JNI数组，通过<code>SetIntArrayRegion()</code>将数组保存到JNI数组；<br>2.5 修改<code>methods[]</code>，使Java的方法和C语言的函数对应，以及输入输出参数(参考生成的Jni.h)；</p></blockquote><h2 id="3-2-C调用JAVA"><a href="#3-2-C调用JAVA" class="headerlink" title="3.2 C调用JAVA"></a>3.2 C调用JAVA</h2><p>C语言调用Java相对简单一点，流程大致如下：</p><blockquote><p>1.创建一个Java虚拟机<br>2.找到要调用的类；<br>3.获取/设置属性(非必须):<br>　3.1获取属性ID；<br>　3.2获取/设置属性；<br>4.对于<strong>静态方法</strong>不需要示例化对象：<br>　4.1获取方法ID；<br>　4.2准备传入参数(非必需)；<br>　4.3调用方法；<br>5.对于<strong>非静态方法</strong>需要实例化对象：<br>　5.1获取构造方法(<init>)ID；<br>　5.2创建对象；<br>　5.3获取方法ID；<br>　5.4准备传入参数(非必需)；<br>　5.5调用方法；<br>6.销毁创建的Java虚拟机：</init></p></blockquote><ul><li>示例：<figure class="highlight java"><figcaption><span>[Hello.java]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String name;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> age;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123; <span class="comment">//静态方法</span></div><div class="line">        System.out.println(<span class="string">"java: name: "</span>+ name + <span class="string">", age: "</span> + age);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">typeData</span><span class="params">(String str)</span> </span>&#123; <span class="comment">//非静态方法</span></div><div class="line">        System.out.println(<span class="string">"java: get str: "</span>+ str + <span class="string">" ,will return 100"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">100</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><figure class="highlight c"><figcaption><span>[caller.c]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span> </span></div><div class="line"></div><div class="line"><span class="comment">/* create java virtual machine*/</span></div><div class="line"><span class="function">jint <span class="title">create_vm</span><span class="params">(JavaVM** jvm, JNIEnv** env)</span> </span></div><div class="line">&#123;  </div><div class="line">    JavaVMInitArgs args;  </div><div class="line">    JavaVMOption options[<span class="number">1</span>];  </div><div class="line">    args.version = JNI_VERSION_1_6;  </div><div class="line">    args.nOptions = <span class="number">1</span>;  </div><div class="line">    options[<span class="number">0</span>].optionString = <span class="string">"-Djava.class.path=./"</span>;  </div><div class="line">    args.options = options;  </div><div class="line">    args.ignoreUnrecognized = JNI_FALSE;  </div><div class="line">    <span class="keyword">return</span> JNI_CreateJavaVM(jvm, (<span class="keyword">void</span> **)env, &amp;args);  </div><div class="line">&#125;  </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> r;</div><div class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">    </div><div class="line">    JavaVM* jvm;</div><div class="line">    JNIEnv* env;</div><div class="line">    jclass cls;</div><div class="line">    </div><div class="line">    jfieldID nameID, ageID;</div><div class="line">    jmethodID mid, cid;</div><div class="line">    </div><div class="line">    jobject jobj;</div><div class="line">    jstring jstr;</div><div class="line">    </div><div class="line">    <span class="comment">/* 1. create java virtual machine */</span></div><div class="line">    <span class="keyword">if</span> (create_vm(&amp;jvm, &amp;env)) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"can not create jvm\n"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/* 2. get class */</span></div><div class="line">    cls = (*env)-&gt;FindClass(env, <span class="string">"Hello"</span>);</div><div class="line">    <span class="keyword">if</span> (cls == <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"can not find hello class\n"</span>);</div><div class="line">        ret = <span class="number">-1</span>;</div><div class="line">        <span class="keyword">goto</span> destroy;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line"><span class="comment">/*----------------Non-generic part------------------*/</span></div><div class="line">    </div><div class="line">    <span class="comment">/* 3.get/set field */</span></div><div class="line">    <span class="comment">// 3.1 get field id (GetFieldID, GetStaticFieldID)</span></div><div class="line">    <span class="comment">// 3.2 get/set field (Get&lt;Type&gt;Field,GetStatic&lt;Type&gt;Field / Set&lt;Type&gt;Field,SetStatic&lt;Type&gt;Field)</span></div><div class="line"></div><div class="line">    <span class="comment">//java: private static String name;</span></div><div class="line">    nameID = (*env)-&gt;GetStaticFieldID(env, cls, <span class="string">"name"</span>, <span class="string">"Ljava/lang/String;"</span>); <span class="comment">//3.1</span></div><div class="line">    <span class="keyword">if</span> (nameID == <span class="literal">NULL</span>) &#123;</div><div class="line">        ret = <span class="number">-1</span>;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"can not get field name\n"</span>); <span class="comment">//3.2</span></div><div class="line">        <span class="keyword">goto</span> destroy;</div><div class="line">    &#125;</div><div class="line">    jstr = (*env)-&gt;NewStringUTF(env, <span class="string">"hceng"</span>);</div><div class="line">    (*env)-&gt;SetStaticObjectField(env, jobj, nameID, jstr);</div><div class="line"></div><div class="line">    <span class="comment">//java: private static int age;</span></div><div class="line">    ageID = (*env)-&gt;GetStaticFieldID(env, cls, <span class="string">"age"</span>, <span class="string">"I"</span>); <span class="comment">//3.1</span></div><div class="line">    <span class="keyword">if</span> (ageID == <span class="literal">NULL</span>) &#123;</div><div class="line">        ret = <span class="number">-1</span>;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"can not get field age\n"</span>);</div><div class="line">        <span class="keyword">goto</span> destroy;</div><div class="line">    &#125;</div><div class="line">    (*env)-&gt;SetStaticIntField(env, jobj, ageID, <span class="number">23</span>); <span class="comment">//3.2</span></div><div class="line">    </div><div class="line">    </div><div class="line"><span class="comment">/*Branch1:------for static method, No need create object-------*/</span></div><div class="line">    <span class="comment">/* 4. call method */</span></div><div class="line">    <span class="comment">// 4.1 get method id (GetMethodID, GetStaticMethodID)</span></div><div class="line">    <span class="comment">// 4.2 Preparation parameter</span></div><div class="line">    <span class="comment">// 4.3 call method (CallVoidMethod, CallStaticVoidMethod)</span></div><div class="line">    mid = (*env)-&gt;GetStaticMethodID(env, cls, <span class="string">"main"</span>,<span class="string">"([Ljava/lang/String;)V"</span>); <span class="comment">//4.1</span></div><div class="line">    <span class="keyword">if</span> (mid == <span class="literal">NULL</span>) &#123;</div><div class="line">        ret = <span class="number">-1</span>;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"can not get method\n"</span>);</div><div class="line">        <span class="keyword">goto</span> destroy;</div><div class="line">    &#125;</div><div class="line">    (*env)-&gt;CallStaticVoidMethod(env, cls, mid, <span class="literal">NULL</span>); <span class="comment">//4.3</span></div><div class="line">    </div><div class="line"><span class="comment">/*Branch2:------for no static method, Need create object-------*/</span></div><div class="line">    <span class="comment">/* 4. create object  */</span></div><div class="line">    <span class="comment">// 4.1 get constructor method id (GetMethodID)</span></div><div class="line">    <span class="comment">// 4.2 create new object (NewObject)</span></div><div class="line">    cid = (*env)-&gt;GetMethodID(env, cls, <span class="string">"&lt;init&gt;"</span>, <span class="string">"()V"</span>); <span class="comment">//4.1</span></div><div class="line">    <span class="keyword">if</span> (cid == <span class="literal">NULL</span>) &#123;</div><div class="line">        ret = <span class="number">-1</span>;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"can not get constructor method\n"</span>);</div><div class="line">        <span class="keyword">goto</span> destroy;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    jobj = (*env)-&gt;NewObject(env, cls, cid); <span class="comment">//4.2</span></div><div class="line">    <span class="keyword">if</span> (jobj == <span class="literal">NULL</span>) &#123;</div><div class="line">        ret = <span class="number">-1</span>;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"can not create object\n"</span>);</div><div class="line">        <span class="keyword">goto</span> destroy;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/* 5. call method */</span></div><div class="line">    <span class="comment">// 5.1 get method id (GetMethodID, GetStaticMethodID)</span></div><div class="line">    <span class="comment">// 5.2 Preparation parameter</span></div><div class="line">    <span class="comment">// 5.2 call method (CallVoidMethod, CallStaticVoidMethod)</span></div><div class="line">    mid = (*env)-&gt;GetMethodID(env, cls, <span class="string">"typeData"</span>,<span class="string">"(Ljava/lang/String;)I"</span>); <span class="comment">//5.1</span></div><div class="line">    <span class="keyword">if</span> (mid == <span class="literal">NULL</span>) &#123;</div><div class="line">        ret = <span class="number">-1</span>;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"can not get method\n"</span>);</div><div class="line">        <span class="keyword">goto</span> destroy;</div><div class="line">    &#125;</div><div class="line">    jstr = (*env)-&gt;NewStringUTF(env, <span class="string">"www.hceng.cn"</span>); <span class="comment">//5.2</span></div><div class="line">    r = (*env)-&gt;CallIntMethod(env, jobj, mid, jstr);  <span class="comment">//5.3</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, r);</div><div class="line"></div><div class="line">    </div><div class="line">destroy:</div><div class="line">    (*jvm)-&gt;DestroyJavaVM(jvm);</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure><ul><li><p>编译、设置环境变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">javac Hello.java</div><div class="line">javap -p -s Hello.class // get Signature</div><div class="line"></div><div class="line">gcc -I /usr/lib/jvm/java-1.8.0-openjdk-amd64/include/ -I /usr/lib/jvm/java-1.8.0-openjdk-amd64/include/linux -o caller caller.c -L /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/server/ -ljvm</div><div class="line"></div><div class="line">LD_LIBRARY_PATH=/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/server/ </div><div class="line"></div><div class="line">./caller</div></pre></td></tr></table></figure></li><li><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">java: name: hceng, age: 23</div><div class="line">java: get str: www.hceng.cn ,will return 100</div><div class="line">100</div></pre></td></tr></table></figure></li></ul><p>对该示例进行分析：</p><blockquote><p>1.1 Java文件里有个<code>Hello</code>类，里面有两个静态变量、一个静态方法、一个非静态方法；<br>1.2 非静态方法<code>typeData</code> 需要传入一个参数和会返回一个整型；<br>　<br>2.1 将创建Java虚拟机封装成函数<code>create_vm()</code>，以后有需要直接调用；<br>2.2 调用<code>FindClass()</code>找到Java中要调用的类；<br>　<br>3.1 假如要修改属性，需要先得到属性的ID，针对静态和非静态属性，分别调用<code>GetStaticFieldID()</code>、<code>GetFieldID()</code>；<br>3.2 通过<code>NewStringUTF()</code>得到可以在Java中使用的字符串；<br>3.3 通过<code>SetStaticObjectField()</code>或<code>SetObjectField()</code>设置Java中的字符串；<br>3.4 通过<code>SetStaticIntField</code>或<code>SetIntField()</code>设置Java中的整型；<br>　<br>4.1 如果要调用静态方法，就需要实例化对象；<br>4.2 通过<code>GetStaticMethodID()</code>获得静态方法的ID；<br>4.3 通过<code>CallStaticVoidMethod()</code>调用静态无返回值方法，最后一个参数是需要传入的参数；<br>　<br>5.1 如果要调用非静态方法，就需要先实例化对象；<br>5.2 通过<code>GetMethodID()</code>获得构造方法的ID，对于构造方法，参数名字始终为<code>&lt;init&gt;</code>；<br>5.3 通过<code>NewObject()</code>实例化对象；<br>5.4 通过<code>GetMethodID()</code>获得非静态方法ID；<br>5.5 通过<code>CallIntMethod()</code>调用非静态方法，返回值就是Java方法的返回值；<br>　<br>6.销毁创建的Java虚拟机；</p></blockquote><p>可以发现，要操作/调用Java中的属性或方法，都需要通过函数得到其ID，获取的函数又分为静态和非静态，然后再设置/调用等；<br>另外，获取ID的函数需要传入<code>Signature</code>(JNI字段描述符)，可通过<code>javap -p -s Hello.class</code>命令，可以打印出对应类的<code>Signature</code>；</p><h1 id="4-Java的高级应用"><a href="#4-Java的高级应用" class="headerlink" title="4. Java的高级应用"></a>4. Java的高级应用</h1><h2 id="4-1-泛型"><a href="#4-1-泛型" class="headerlink" title="4.1 泛型"></a>4.1 泛型</h2><p>泛型(Generics)是Java SE 1.5的新特性，泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。<br>这种参数类型可以用在类、接口和方法的创建中，分别称为泛型类、泛型接口、泛型方法。<br>通俗的讲，泛型就是操作类型的占位符，即：假设占位符为T，那么此次声明的数据结构操作的数据类型为T类型。<br>比如下面的例子，在实例化对象时，可以指定不同数据类型，既可以是整型，也可以是字符串类型，从而打印的结果就完全不同。</p><ul><li><p>示例：</p><figure class="highlight java"><figcaption><span>[Generics.java]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//普通类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person1</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//泛型</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person2</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> T age;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(T age)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//泛型接口</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Person3</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(T age)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getAge</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//一般继承</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student1</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Person2</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student2</span> <span class="keyword">extends</span> <span class="title">Person2</span>&lt;<span class="title">String</span>&gt; </span>&#123;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//接口继承</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student3</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Person3</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    T age;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(T age)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age;</div><div class="line">    &#125; </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student4</span> <span class="keyword">implements</span> <span class="title">Person3</span>&lt;<span class="title">String</span>&gt; </span>&#123;</div><div class="line">    String age;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(String age)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age;</div><div class="line">    &#125; </div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Generics</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">        <span class="comment">//常规方法,传入参数数据类型固定</span></div><div class="line">        Person1 p1 = <span class="keyword">new</span> Person1();</div><div class="line">        p1.setAge(<span class="number">23</span>);</div><div class="line">        System.out.println(p1.getAge());</div><div class="line">        System.out.println(<span class="string">"--------------------------"</span>);</div><div class="line">        </div><div class="line">        <span class="comment">//泛型,传入参数数据类型可以不固定</span></div><div class="line">        Person2&lt;Integer&gt; p2 = <span class="keyword">new</span> Person2&lt;Integer&gt;();</div><div class="line">        p2.setAge(<span class="number">24</span>);</div><div class="line">        printInfo(p2);</div><div class="line">        genericsMethod(p2);</div><div class="line">        </div><div class="line">        Person2&lt;String&gt; p3 = <span class="keyword">new</span> Person2&lt;String&gt;();</div><div class="line">        p3.setAge(<span class="string">"24 years old"</span>);</div><div class="line">        printInfo(p3);</div><div class="line">        genericsMethod(p3);</div><div class="line">        System.out.println(<span class="string">"--------------------------"</span>);</div><div class="line">        </div><div class="line">        <span class="comment">//定义数据类型通用的对象</span></div><div class="line">        Person2&lt;?&gt; p4;</div><div class="line">        p4 = p2; </div><div class="line">        printInfo(p4); <span class="comment">//无法 p4.setAge();</span></div><div class="line">        p4 = p3; </div><div class="line">        printInfo(p4);</div><div class="line">        System.out.println(<span class="string">"--------------------------"</span>);</div><div class="line">        </div><div class="line">        <span class="comment">//子类继承:子类也泛型</span></div><div class="line">        Student1&lt;Integer&gt; s1 = <span class="keyword">new</span> Student1&lt;Integer&gt;();</div><div class="line">        s1.setAge(<span class="number">10</span>);</div><div class="line">        printInfo(s1);</div><div class="line">        genericsMethod(s1);</div><div class="line">        </div><div class="line">        <span class="comment">//子类继承:子类不泛型</span></div><div class="line">        Student2 s2 = <span class="keyword">new</span> Student2();</div><div class="line">        s2.setAge(<span class="string">"10 years old"</span>);</div><div class="line">        printInfo(s2);</div><div class="line">        genericsMethod(s2);</div><div class="line">        System.out.println(<span class="string">"--------------------------"</span>);</div><div class="line">        </div><div class="line">        <span class="comment">//接口子类继承:子类也泛型</span></div><div class="line">        Student3&lt;Integer&gt; s3 = <span class="keyword">new</span> Student3&lt;Integer&gt;();</div><div class="line">        s3.setAge(<span class="number">10</span>);</div><div class="line">        System.out.println(<span class="string">"interface:"</span> + s3.getAge());</div><div class="line">        </div><div class="line">        <span class="comment">//子类继承:子类不泛型</span></div><div class="line">        Student4 s4 = <span class="keyword">new</span> Student4();</div><div class="line">        s4.setAge(<span class="string">"10 years old"</span>);</div><div class="line">        System.out.println(<span class="string">"interface:"</span> + s4.getAge());</div><div class="line">        System.out.println(<span class="string">"--------------------------"</span>);</div><div class="line">        </div><div class="line">        <span class="comment">//受限泛型</span></div><div class="line">        printInfo1(s1); <span class="comment">//参数限制了只能是Number类或其子类</span></div><div class="line">        <span class="comment">//printInfo1(s2);</span></div><div class="line">        <span class="comment">//printInfo2(s1);</span></div><div class="line">        printInfo2(s2); <span class="comment">//参数限制了只能是String类或其父类</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//方法参数通用</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printInfo</span><span class="params">(Person2&lt;?&gt; p)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"printInfo:"</span> + p.getAge());</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//方法的参数泛型</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">genericsMethod</span><span class="params">(Person2&lt;T&gt; p)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"genericsMethod:"</span> + p.getAge());</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//受限泛型</span></div><div class="line">    <span class="comment">//上限:参数只能是Number类或其子类</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printInfo1</span><span class="params">(Person2&lt;? extends Number&gt; p)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"extends:"</span> + p.getAge());</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//下限:参数只能是String类或其父类</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printInfo2</span><span class="params">(Person2&lt;? <span class="keyword">super</span> String&gt; p)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"extends:"</span> + p.getAge());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">23</div><div class="line">--------------------------</div><div class="line">printInfo:24</div><div class="line">genericsMethod:24</div><div class="line">printInfo:24 years old</div><div class="line">genericsMethod:24 years old</div><div class="line">--------------------------</div><div class="line">printInfo:24</div><div class="line">printInfo:24 years old</div><div class="line">--------------------------</div><div class="line">printInfo:10</div><div class="line">genericsMethod:10</div><div class="line">printInfo:10 years old</div><div class="line">genericsMethod:10 years old</div><div class="line">--------------------------</div><div class="line">interface:10</div><div class="line">interface:10 years old</div><div class="line">--------------------------</div><div class="line">extends:10</div><div class="line">extends:10 years old</div></pre></td></tr></table></figure></li></ul><p>对该示例进行分析：</p><blockquote><p>1.1 首先是一个普通类<code>Person1</code>，包含一个私有<code>int</code>类型数据，两个方法；<br>1.2 然后是一个泛型类<code>Person2</code>，包含的元素同上，把<code>int</code>换成了<code>T</code>；<br>1.3 之后是一个泛型接口<code>Person3</code>，也是使用<code>T</code>代替数据类型，里面有两个方法模板；<br>1.4 接下来是两个类<code>Student1</code>和<code>Student2</code>继承于<code>Person2</code>，前者数据类型是<code>T</code>，后者是<code>String</code>；<br>1.5 最后是两个类<code>Student3</code>和<code>Student4</code>继承于接口<code>Person3</code>，前者数据类型是<code>T</code>，后者是<code>String</code>；<br>1.6 从这几个例子中，可以看到<strong>泛型可以用在类、接口和方法的创建中，称之为泛型类、泛型接口、泛型方法</strong>；<br>　<br>2.1 <code>main</code>里，首先是普通的类的实例化，传入<code>int</code>类型数据，再打印；<br>2.2 接着是泛型的实例化，实例化时可以指定类里面的数据类型，这里的例子前者是<code>int</code>类型数据，后者是<code>String</code>类型数据；<br>2.3 接下来实例化对象<code>p4</code>，使用通配符<code>?</code>来代替数据类型，可以被其它数据类型赋值，但只能读取，不能设置；<br>2.4 然后是子类继承的实例化，前者定义类的时候类型是<code>T</code>，仍有泛型的特性，实例化的时候指定为<code>int</code>类型，后者定义类的时候类型是<code>String</code>，为普通的类型，只能为字符串；<br>2.5 接口的继承也是，前面定义的时候，可以选择子类继续保持类泛型，或者变成普通类；<br>2.6 受限泛型，方法<code>printInfo1</code>参数里有<code>? extends Number</code>，表示上限，参数限制了只能是Number类或其子类；方法<code>printInfo2</code>参数里有<code>? super String</code>，表示下限，参数限制了只能是String类或其父类；<br>2.7 从这几个例子中，可以看到<strong>子类从父类继承，或者从接口继承，仍可以保持泛型的特性，也可以设置为普通类；此外还有受限泛型，限制泛型支持的数据类型范围</strong>；</p></blockquote><h2 id="4-2-反射"><a href="#4-2-反射" class="headerlink" title="4.2 反射"></a>4.2 反射</h2><p>JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；<br>这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。</p><p>反射就是把java类中的各种成分映射成一个个的Java对象，例如：一个类有：成员变量、方法、构造方法、包等等信息，利用反射技术可以对一个类进行解剖，把个个组成部分映射成一个个对象。</p><ul><li>示例：<figure class="highlight java"><figcaption><span>[Reflect.java]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> hceng;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.Field;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Reflect</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        </div><div class="line">        <span class="comment">//获得class的方法一</span></div><div class="line">        Class&lt;?&gt; c1 = Class.forName(<span class="string">"hceng.Person"</span>);  <span class="comment">//must be caught or declared to be thrown</span></div><div class="line"></div><div class="line">        <span class="comment">//获得class的方法二</span></div><div class="line">        Person p = <span class="keyword">new</span> Person();</div><div class="line">        Class&lt;?&gt; c2 = p.getClass();</div><div class="line"></div><div class="line">        <span class="comment">//获得class的方法三</span></div><div class="line">        Class&lt;?&gt; c3 = Person.class;</div><div class="line">        </div><div class="line">        System.out.println(c1.getName());</div><div class="line">        System.out.println(c2.getName());</div><div class="line">        System.out.println(c3.getName());</div><div class="line">        </div><div class="line">        System.out.println(<span class="string">"--------------------------"</span>);       </div><div class="line"> </div><div class="line">        <span class="keyword">int</span> arr1[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</div><div class="line">        <span class="keyword">int</span> arr2[][] = &#123; &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">1</span>,<span class="number">2</span>&#125; &#125;;</div><div class="line">        </div><div class="line">        Class&lt;?&gt; a1 = arr1.getClass();</div><div class="line">        Class&lt;?&gt; a2 = arr2.getClass();</div><div class="line">        Class&lt;?&gt; a3 = <span class="keyword">int</span>.class;</div><div class="line">        </div><div class="line">        System.out.println(a1.getName());</div><div class="line">        System.out.println(a2.getName());</div><div class="line">        System.out.println(a3.getName());</div><div class="line">        </div><div class="line">        System.out.println(<span class="string">"--------------------------"</span>);   </div><div class="line">        <span class="comment">//类的实例化</span></div><div class="line">        Class&lt;?&gt; j = Class.forName(<span class="string">"jack.Person"</span>); </div><div class="line">        </div><div class="line">        Object p1 = j.newInstance(); <span class="comment">//无参构造方法</span></div><div class="line">        </div><div class="line">        Constructor&lt;?&gt; con = j.getConstructor(String.class); <span class="comment">//有参构造方法</span></div><div class="line">        Object p2 =  con.newInstance(<span class="string">"hceng"</span>);</div><div class="line">        </div><div class="line">        System.out.println(<span class="string">"--------------------------"</span>);   </div><div class="line">        </div><div class="line">        <span class="comment">//通过反射调用方法</span></div><div class="line">        Method set =  j.getMethod(<span class="string">"setName"</span>, String.class);</div><div class="line">        set.invoke(p1, <span class="string">"jack1"</span>);</div><div class="line">        set.invoke(p2, <span class="string">"jack2"</span>);</div><div class="line"></div><div class="line">        Method get = j.getMethod(<span class="string">"getName"</span>);</div><div class="line">        System.out.println(get.invoke(p1));</div><div class="line">        System.out.println(get.invoke(p2)); </div><div class="line">        </div><div class="line">        System.out.println(<span class="string">"--------------------------"</span>);   </div><div class="line">        </div><div class="line">        <span class="comment">//通过修改属性</span></div><div class="line">        Field name = j.getDeclaredField(<span class="string">"name"</span>); <span class="comment">//公共、私有的都可以访问</span></div><div class="line">        name.setAccessible(<span class="keyword">true</span>); <span class="comment">//因为name是私有的,需要先修改访问权限</span></div><div class="line">        name.set(p1, <span class="string">"hello, hceng"</span>);</div><div class="line">        name.set(p2, <span class="string">"hello, jack"</span>);</div><div class="line">        System.out.println(name.get(p1));</div><div class="line">        System.out.println(name.get(p2));</div><div class="line">        </div><div class="line">        System.out.println(<span class="string">"--------------------------"</span>);   </div><div class="line">        <span class="comment">//通过传入参数,灵活调用不同的包</span></div><div class="line">        Class&lt;?&gt; h = Class.forName(args[<span class="number">0</span>]); </div><div class="line">        Constructor&lt;?&gt; c = h.getConstructor(String.class);</div><div class="line">        Object o =  c.newInstance(<span class="string">"hceng"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><figure class="highlight java"><figcaption><span>[Person.java]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> jack;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//构造方法</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Constructor1 of Person"</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        System.out.println(<span class="string">"Constructor2 of Person, name is "</span>+<span class="keyword">this</span>.name);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>[Student.java]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> jack;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> String name;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//构造方法</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Constructor1 of Student"</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        System.out.println(<span class="string">"Constructor2 of Student, name is "</span>+<span class="keyword">this</span>.name);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>编译：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">javac -d . *.java</div></pre></td></tr></table></figure></p><ul><li>结果：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">hceng@android:/work/java_learn/14th_reflect$ java hceng.Reflect jack.Person</div><div class="line">hceng.Person</div><div class="line">hceng.Person</div><div class="line">hceng.Person</div><div class="line">--------------------------</div><div class="line">[I</div><div class="line">[[I</div><div class="line">int</div><div class="line">--------------------------</div><div class="line">Constructor1 of Person</div><div class="line">Constructor2 of Person, name is hceng</div><div class="line">--------------------------</div><div class="line">jack1</div><div class="line">jack2</div><div class="line">--------------------------</div><div class="line">hello, hceng</div><div class="line">hello, jack</div><div class="line">--------------------------</div><div class="line">Constructor2 of Person, name is hceng</div><div class="line">hceng@android:/work/java_learn/14th_reflect$ java hceng.Reflect jack.Student</div><div class="line">hceng.Person</div><div class="line">hceng.Person</div><div class="line">hceng.Person</div><div class="line">--------------------------</div><div class="line">[I</div><div class="line">[[I</div><div class="line">int</div><div class="line">--------------------------</div><div class="line">Constructor1 of Person</div><div class="line">Constructor2 of Person, name is hceng</div><div class="line">--------------------------</div><div class="line">jack1</div><div class="line">jack2</div><div class="line">--------------------------</div><div class="line">hello, hceng</div><div class="line">hello, jack</div><div class="line">--------------------------</div><div class="line">Constructor2 of Student, name is hceng</div></pre></td></tr></table></figure></li></ul><p>对该示例进行分析：</p><blockquote><p>1.1 整个示例有三个文件<code>Reflect.java</code>、<code>Person.java</code>、<code>Student.java</code>，其中<code>Reflect.java</code>在包<code>hceng</code>里，其余两个在包<code>jack</code>里；<br>1.2 在<code>Person.java</code>里，定义了一个类<code>Person</code>，包含一个私有变量、两个公共方法、两个构造方法(一个含参，一个不含)；<br>1.3  在<code>Student.java</code>里，定义了一个类<code>Student</code>，包含一个私有变量、两个公共方法、两个构造方法(一个含参，一个不含)；<br>　<br>2.1 在<code>main</code>里，示例了三种获取类的方法：通过包名字、通过实例化的对象、直接通过类名字，注意每种方法都会产生异常，这里为了简洁，直接将异常抛出；<br>2.2 得到了类，可以通过<code>getName</code>方法得到类完整名字；<br>　<br>3.1 定义一个一维数组，一个二维数组，一个整型数据类，得到其类名；<br>3.2 可以看到每种数据类型的类名都不一样；<br>　<br>4.1 通过包名，得到包<code>jack.Person</code>里类；<br>4.2 对于无参的构造方法，直接调用<code>newInstance</code>进行实例化；<br>4.3 有参的构造方法，先<code>getConstructor</code>得到构造函数，再调用<code>newInstance</code>传入参数实例化；<br>　<br>5.1 先通过<code>getMethod</code>，传入参数为方法名和数据类型，得到类里面的方法；<br>5.2 再通过<code>invoke</code>调用该方法，传入参数为实例化的对象和调用方法的参数；<br>　<br>6.1 通过<code>getDeclaredField</code>得到类属性；<br>6.2 如果属性是私有属性，需要使用<code>setAccessible</code>修改访问权限；<br>6.3 通过<code>set</code>修改属性内容，通过<code>get</code>获取属性内容；<br>　<br>7.1 之前通过<code>import</code>导入需要的包，从而调用不同的类，在程序中固定了，现在可以将包名作为参数传入，实现灵活的调用；， </p></blockquote><p>在Java运行中，可以通过三种方式得到运行期间的类：通过包名、通过实例化的对象、通过类名字；<br>通过这个类再实例化对象，修改属性或者调用方法等操作；</p><h1 id="5-其它"><a href="#5-其它" class="headerlink" title="5. 其它"></a>5. 其它</h1><p>所有示例源码:<br><a href="https://github.com/hceng/learn/tree/master/java_learn" target="_blank" rel="external">Github</a></p><p>参考资料:<br><a href="http://www.100ask.org/index.html" target="_blank" rel="external">韦东山第四期Android驱动_Java快速入门</a></p><hr><p><div align="center"><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本文采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href="http://hceng.cn/" target="_blank" rel="external">hceng’s blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;毕业后就没怎么碰Java了，为了后面Android的学习，将Java的基础知识整理一下。&lt;br&gt;
    
    </summary>
    
    
      <category term="Android基础" scheme="http://yoursite.com/tags/Android%E5%9F%BA%E7%A1%80/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>RK3399——裸机大全</title>
    <link href="http://yoursite.com/2018/08/16/RK3399%E2%80%94%E2%80%94%E8%A3%B8%E6%9C%BA%E5%A4%A7%E5%85%A8/"/>
    <id>http://yoursite.com/2018/08/16/RK3399——裸机大全/</id>
    <published>2018-08-16T09:40:06.000Z</published>
    <updated>2019-01-03T08:52:58.753Z</updated>
    
    <content type="html"><![CDATA[<p>以64位的RK3399为例，实现裸机的启动、中断、串口(printf移植)、定时器、ADC、PWM、I2C、SPI、LCD(MIPI)等；<br><a id="more"></a><br>这应该是最后一次写裸机代码了，老是写裸机，都要写吐了。<br>这次选的是64位平台(ARMv8架构)的Firefly-RK3399，注定坑多，也更有挑战性一点。</p><h1 id="1-ARMv8基础"><a href="#1-ARMv8基础" class="headerlink" title="1.ARMv8基础"></a>1.ARMv8基础</h1><h2 id="1-1-基本概念"><a href="#1-1-基本概念" class="headerlink" title="1.1 基本概念"></a>1.1 基本概念</h2><p><strong> 1.架构和内核型号 </strong></p><ul><li><strong>架构(Architecture)</strong>:就是常说的ARMv5(32bits)、ARMv6(32bits)、ARMv7(32bits)、ARMv8(32/64bits)；</li><li><strong>内核型号</strong>:就是常说的ARM7、ARM9、Cortex-A系列(Aplication)、Cortex-R系列(Runtime)、Cortex-M系列(MCU)；</li><li><strong>举例</strong>:单片机STM32F103C8T6采用Cortex-M3内核，采用ARMv7-M架构；<br>　　　　瑞芯微RK3288采用4个Cortex-A17，采用ARMv7-A架构；<br>　　　　瑞芯微RK3399采用2个Cortex-A72和4个Cortex-A53组成，Cortex-A72和Cortex-A53都是ARMv8-A架构。<br>　　　　高通骁龙845处理器由4个Cortex-A75和4个Cortex-A55组成，Cortex-A75和Cortex-A55都是ARMv8-A架构。</li><li><strong>发展迭代</strong>：<div align="center"><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180816/1.jpg"></div></li></ul><p><strong> 2.AArch64/AArch32/A64/A32/T32 </strong></p><table><thead><tr><th style="text-align:center">名字</th><th style="text-align:center">类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center">AArch64</td><td style="text-align:center">架构</td><td>指基于64bits运作的ARMv8架构（通用寄存器X0-X30）</td></tr><tr><td style="text-align:center">AArch32</td><td style="text-align:center">架构</td><td>指基于32bits运作的ARMv8架构，并且兼容之前的ARMv7架构（通用寄存器R0-R15）</td></tr><tr><td style="text-align:center">A64</td><td style="text-align:center">指令集</td><td>指在AArch64模式下支持的ARM 64bits指令集</td></tr><tr><td style="text-align:center">A32</td><td style="text-align:center">指令集</td><td>指ARMv7架构下支持的ARM 32bits指令集，在ARMv8中也有新加入的A32指令集</td></tr><tr><td style="text-align:center">T32</td><td style="text-align:center">指令集</td><td>指ARMv7架构下支持的Thumb2 16/32bits指定集，在ARMv8中也有新加入的T32指令集。</td></tr></tbody></table><h2 id="1-2-AArch64-32寄存器"><a href="#1-2-AArch64-32寄存器" class="headerlink" title="1.2 AArch64/32寄存器"></a>1.2 AArch64/32寄存器</h2><table><thead><tr><th style="text-align:center">AArch64</th><th style="text-align:center">Special</th><th>Role in the procedure call standard</th></tr></thead><tbody><tr><td style="text-align:center">x0…x7</td><td style="text-align:center"></td><td>Parameter/result registers(参数传入/返回结果）</td></tr><tr><td style="text-align:center">x8</td><td style="text-align:center"></td><td>Indirect result location register</td></tr><tr><td style="text-align:center">x9…x15</td><td style="text-align:center"></td><td>Temporary registers(临时寄存器)</td></tr><tr><td style="text-align:center">x16</td><td style="text-align:center">IP0</td><td>The first intra-procedure-call scratch register (can be used by call veneers and PLT code); at other times may be used as a temporary register.</td></tr><tr><td style="text-align:center">x17</td><td style="text-align:center">IP1</td><td>The second intra-procedure-call temporary register (can be used by call veneers and PLT code); at other times may be used as a temporary register.</td></tr><tr><td style="text-align:center">x18</td><td style="text-align:center"></td><td>The Platform Register, if needed; otherwise a temporary register.</td></tr><tr><td style="text-align:center">x19…x28</td><td style="text-align:center"></td><td>Callee-saved registers(由被调用者保存的寄存器)</td></tr><tr><td style="text-align:center">x29</td><td style="text-align:center">FP</td><td>The Frame Pointer(栈帧指针)</td></tr><tr><td style="text-align:center">x30</td><td style="text-align:center">LR</td><td>The Link Register(链接寄存器)</td></tr><tr><td style="text-align:center">SP</td><td style="text-align:center"></td><td>The Stack Pointer(栈指针)</td></tr></tbody></table><table><thead><tr><th style="text-align:center">AArch32</th><th style="text-align:center">Special</th><th>Role in the procedure call standard</th></tr></thead><tbody><tr><td style="text-align:center">r0…r3</td><td style="text-align:center"></td><td>Parameter/result registers</td></tr><tr><td style="text-align:center">r4…r11</td><td style="text-align:center"></td><td>Temporary registers (r9 also as platform register)</td></tr><tr><td style="text-align:center">r12</td><td style="text-align:center">IP</td><td>The Intra-Procedure-call scratch register.</td></tr><tr><td style="text-align:center">r13</td><td style="text-align:center">SP</td><td>The second intra-procedure-call temporary register (can be used by call veneers and PLT code); at other times may be used as a temporary register.</td></tr><tr><td style="text-align:center">r14</td><td style="text-align:center">LR</td><td>The Platform Register, if needed; otherwise a temporary register.</td></tr><tr><td style="text-align:center">r15</td><td style="text-align:center">PC</td><td>Callee-saved registers</td></tr></tbody></table><p>两者区别：</p><table><tr><th>Execution State</th><th>Note</th></tr><tr><td>AArch64</td><td>1. 提供<span style="font-weight:bold">31个64bits</span>的通用寄存器(x0~x30，其中x30可作为LR)<br>2. 提供64bits程序计数器(PC)、栈指针(SP)、异常链接寄存器(ELR)<br>3. 提供<span style="font-weight:bold">32个128bits</span> 的SIMD Vector与Scalar Floating-Point寄存器<br>4. 定义ARMv8 EL0~EL3共4个执行权限(Execution Privilege)<br>5. 支持<span style="font-weight:bold">64bits Virtual-Addressing</span><br>6. 定义一组PSTATE用以保存PE(Processing Element)状态</td></tr><tr><td>AArch32</td><td>1. 提供<span style="font-weight:bold">16个32bits</span>的通用寄存器(r0~r12，其中r13=SP、r14=LR、r15=PC，且r14需要同时供ELR与LR之用）<br>2. 提供一个ELR，用以作为从Hyp-Mode的Exception返回之用<br>3. 提供<span style="font-weight:bold">32个64bits</span>的Advanced SIMD Vector与Scalar Floating-Point寄存器<br>4. 提供A32与T32两种指令集的组合<br>5. 使用<span style="font-weight:bold">32bits Virtual-Addressing</span><br>6. 只使用CPSR(当前程序状态寄存器)保存PE(Processing Element)状态。</td></tr></table><h2 id="1-3-ARMv8-Exception-Level"><a href="#1-3-ARMv8-Exception-Level" class="headerlink" title="1.3 ARMv8 Exception Level"></a>1.3 ARMv8 Exception Level</h2><p>针对Security的需求，ARMv8的系统软件设计可以提供安全模式与非安全模式的状态。<br>ARMv8规定了CPU有4种运行级别。每种运行级别下标的数字越大，其权力级别越高。其中EL0为非特权等级，即平时应用程序运行时的级别；EL1为特权等级，即操作系统运行时的级别；EL2为虚拟机监视器运行级别，即虚拟机的控制层运行的级别；EL3为切换EL1和EL2级别时需要进入的一个级别，为CPU的最高级别。</p><p>若底层EL(Exception Level)为32bits，则上层EL的软件就只能是32位。</p><div align="center"><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180816/2.png"></div><p>若底层的EL为64bits，则上层EL就可以依据需求选择为32bits或是64bits。</p><div align="center"><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180816/3.png"></div><h1 id="2-RK3399启动"><a href="#2-RK3399启动" class="headerlink" title="2.RK3399启动"></a>2.RK3399启动</h1><p>先看一下RK3399的启动流程图<sup>[1]</sup>：</p><div align="center"><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180816/4.png"></div><p>从图中可以得到以下几个结论：</p><ul><li>1.RK3399上电后，会从<code>0xffff0000</code>获取<code>romcode</code>并运行；</li><li>2.然后依次从Nor Flash、Nand Flash、eMMC、SD/MMC获取<code>ID BLOCK</code>，<code>ID BLOCK</code>正确则启动，都不正确则从USB端口下载；</li><li>3.如果emmc启动，则先读取SDRAM(DDR)初始化代码到内部SRAM，然后初始化DDR，再将emmc上的代码(剩下的用户代码)复制到DDR运行；</li><li>4.如果从USB下载，则先获取DDR初始化代码，下载到内部SRAM中，然后运行代码初始化DDR，再获取loader代码(用户代码)，放到DDR中并运行；</li><li>5.无论是何种方式，都需要DDR的初始化代码，结合前面RK3288的经验，就是向自己写的代码加上”头部信息”，这个”头部信息”就包含DDR初始化操作；</li></ul><h2 id="2-1-官方启动分析"><a href="#2-1-官方启动分析" class="headerlink" title="2.1 官方启动分析"></a>2.1 官方启动分析</h2><p>如何分析一款芯片的启动方式？<br>前面的一篇博客<a href="https://hceng.cn/2018/03/28/iMX6ULL%E4%B8%8A%E6%89%8B%E4%BD%93%E9%AA%8C/#more" target="_blank" rel="external">iMX6ULL上手体验</a>，里面已经分析过了，大致就是先用厂家提供的资料，配置相关环境、编译、烧写，运行起来。然后就有了U-boot源码，从U-boot就可以几乎提取出所有的裸机代码，本文也是这样做的。</p><p>分析U-Boot的编译流程，可以看到如下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">./tools/boot_merger ./tools/rk_tools/RKBOOT/RK3399MINIALL.ini</div><div class="line">out:rk3399_loader_v1.09.109.bin</div><div class="line">fix opt:rk3399_loader_v1.09.109.bin</div><div class="line">merge success(rk3399_loader_v1.09.109.bin)</div><div class="line">./tools/trust_merger  ./tools/rk_tools/RKTRUST/RK3399TRUST.ini</div><div class="line">out:trust.img</div><div class="line">merge success(trust.img)</div><div class="line">./tools/loaderimage --pack --uboot u-boot.bin uboot.img</div><div class="line">pack input u-boot.bin </div><div class="line">pack file size: 315128 </div><div class="line">crc = 0xb4d13cd6</div><div class="line">uboot version: U-Boot 2014.10-RK3399-06 (Aug 16 2018 - 04:00:27)</div><div class="line">pack uboot.img success! </div><div class="line">/work/firefly-rk3399</div><div class="line">Firefly-RK3399 make images finish!</div></pre></td></tr></table></figure></p><p>可以看出这里使用了三个工具，产生了三个文件：<br>①:使用<code>boot_merger</code>，参数为<code>RK3399MINIALL.ini</code>，得到loader文件<code>rk3399_loader_v1.09.109.bin</code>，打开<code>RK3399MINIALL.ini</code>内容为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">[CHIP_NAME]</div><div class="line">NAME=RK330C</div><div class="line">[VERSION]</div><div class="line">MAJOR=1</div><div class="line">MINOR=09</div><div class="line">[CODE471_OPTION]</div><div class="line">NUM=1</div><div class="line">Path1=tools/rk_tools/bin/rk33/rk3399_ddr_800MHz_v1.09.bin</div><div class="line">Sleep=1</div><div class="line">[CODE472_OPTION]</div><div class="line">NUM=1</div><div class="line">Path1=tools/rk_tools/bin/rk33/rk3399_usbplug_v1.09.bin</div><div class="line">[LOADER_OPTION]</div><div class="line">NUM=2</div><div class="line">LOADER1=FlashData</div><div class="line">LOADER2=FlashBoot</div><div class="line">FlashData=tools/rk_tools/bin/rk33/rk3399_ddr_800MHz_v1.09.bin</div><div class="line">FlashBoot=tools/rk_tools/bin/rk33/rk3399_miniloader_v1.09.bin</div><div class="line">[OUTPUT]</div><div class="line">PATH=rk3399_loader_v1.09.109.bin</div></pre></td></tr></table></figure></p><p>得知依赖的文件有:DDR相关的<code>rk3399_ddr_800MHz_v1.09.bin</code>、USB相关的<code>rk3399_usbplug_v1.09.bin</code>、miniloader(瑞芯微修改的一个bootloader)相关的<code>rk3399_miniloader_v1.09.bin</code>。<br><code>boot_merger</code>将这三个bin文件最后合并成<code>rk3399_loader_v1.09.109.bin</code>。</p><p>②:使用<code>trust_merger</code>，参数为<code>RK3399TRUST.ini</code>，生成<code>trust.img</code>；</p><p>③:使用<code>loaderimage</code>将<code>u-boot.bin</code>变成<code>uboot.img</code>；</p><p>最后使用Android Tools，烧写<code>rk3399_loader_v1.09.109.bin</code>、<code>trust.img</code>和<code>uboot.img</code>即可启动U-Boot。</p><p>对以上过程进行分析，再加上实验测试和结合RK3288的经验，得出裸机启动文件的制作结论如下：<br><strong>使用<code>boot_merger</code>将<code>rk3399_ddr_800MHz_v1.09.bin</code>、<code>rk3399_usbplug_v1.09.bin</code>和自己的裸机文件<code>rk3399.bin</code>合并出新文件即可。</strong></p><h2 id="2-2-制作裸机启动文件"><a href="#2-2-制作裸机启动文件" class="headerlink" title="2.2 制作裸机启动文件"></a>2.2 制作裸机启动文件</h2><p>经过分析和测试，现实现了emmc和TF卡启动裸机程序，并把整个过程整理了一个工程模板。<br>工程模板见<a href="https://github.com/hceng/RK3399/tree/master/hardware/1_template" target="_blank" rel="external">GitHub</a>，里面包含两个文件夹和两个文件。</p><blockquote><p><code>code</code>文件夹存放裸机源码；<br><code>tools</code>存放制作“头部”的工具和配置文件；<br><code>rk3399_hardware_tool.sh</code>是一个shell脚本，用于自动生成加“头部”后的裸机文件；<br><code>README.txt</code>是操作说明；</p></blockquote><p>以后只需要先进入<code>code</code>文件夹修改裸机源码，然后执行<code>make</code>生成<code>rk399.bin</code>，再退出到工程目录下，执行脚本<code>rk3399_hardware_tool.sh</code>即可生成<code>rk3288_emmc.bin</code>和<code>rk3288_sd.bin</code>；</p><ul><li><code>rk3288_emmc.bin</code>用于emmc启动：Windows下使用AndroidTool.exe，开发板进入MaskRom模式，烧入Loader位置;</li><li><code>rk3288_sd.bin</code>用于SD卡启动：Linux下，插上SD卡，执行<code>sudo dd if=rk3399_sd.bin of=/dev/sdb seek=$(((0x000040)))</code>(其中/dev/sdb为SD卡)</li></ul><h1 id="3-Uboot启动部分分析"><a href="#3-Uboot启动部分分析" class="headerlink" title="3.Uboot启动部分分析"></a>3.Uboot启动部分分析</h1><p>为了方便后面从U-boot提取所需裸机代码，有必要先对U-boot进行分析，本节只分析启动部分的，后续具体某个模块，如LCD，将在后面对应的章节分析。<br>另外，本次分析是的RK3399，64位的ARMv8架构，与市面上较多的32位ARMv7架构SOC略有区别，注意不要混淆。<br>RK3399编译过的U-boot已上传<a href="https://github.com/hceng/RK3399/tree/master/hardware/2_u-boot_source" target="_blank" rel="external">GitHub</a>。U-boot执行的第一个文件是start.S，下面开始对其进行分析。</p><h2 id="3-1-start-S"><a href="#3-1-start-S" class="headerlink" title="3.1 start.S"></a>3.1 start.S</h2><p>所在文件路径：<a href="https://github.com/hceng/RK3399/blob/master/hardware/2_u-boot_source/arch/arm/cpu/armv8/start.S" target="_blank" rel="external"><code>u-boot/arch/arm/cpu/armv8/start.S</code></a></p><ul><li><p><strong>1.检查loader tag [unimportant]</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">.globl_start</div><div class="line">_start:</div><div class="line">nop</div><div class="line">breset               //hceng:首先跳到reset</div><div class="line">    ……</div><div class="line"></div><div class="line">reset:</div><div class="line"></div><div class="line">#ifdef CONFIG_ROCKCHIP</div><div class="line">/*</div><div class="line"> * check loader tag</div><div class="line"> */</div><div class="line">ldrx0, =__loader_tag</div><div class="line">ldrw1, [x0]</div><div class="line">ldrx0, =LoaderTagCheck</div><div class="line">ldrw2, [x0]</div><div class="line">cmpw1, w2</div><div class="line">b.eqcheckok            //hceng:LoaderTag正常则跳到checkok ，反之退出U-Boot进入maskrom or miniloader</div><div class="line"></div><div class="line">ret                   /* return to maskrom or miniloader */</div><div class="line"></div><div class="line">checkok:</div><div class="line">#endif</div></pre></td></tr></table></figure><p>这里检查loader tag对后面写裸机没什么用。</p></li><li><p><strong>2.设置中断向量等 [important]</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">adrx0, vectors            //hceng:将中断向量地址保存到x0</div><div class="line">switch_el x1, 3f, 2f, 1f       //hceng:根据CurrentEL的bit[3:2]位得知当前的EL级别，跳转到不同的分支进行处理，这里实测跳到3f，即上电为EL3</div><div class="line">3:msrvbar_el3, x0           //hceng:将中断向量保存到vbar_el3(Vector Base Address Register (EL3))</div><div class="line">mrsx0, scr_el3            //hceng:获取scr_el3(Secure Configuration Register)的值</div><div class="line">orrx0, x0, #0xf           //hceng:将低四位设置为1:EA|FIQ|IRQ|NS  </div><div class="line">msrscr_el3, x0            //hceng:写入scr_el3</div><div class="line">msrcptr_el3, xzr          //hceng:清除cptr_el3(Architectural Feature Trap Register (EL3))，Enable FP/SIMD</div><div class="line">ldrx0, =COUNTER_FREQUENCY //hceng:晶振频率：24000000hz</div><div class="line">msrcntfrq_el0, x0         //hceng:将晶振频率写入cntfrq_el0(Counter-timer Frequency register) </div><div class="line">#ifdef CONFIG_ROCKCHIP</div><div class="line">msrcntvoff_el2, xzr       /* clear cntvoff_el2 for kernel */</div><div class="line">#endif</div><div class="line">b0f                     //hceng:跳到本段结尾的0f，后面的未执行</div><div class="line">2:msrvbar_el2, x0</div><div class="line">movx0, #0x33ff            //hceng:FP为Float Processor(浮点运算器)；SIMD为Single Instruction Multiple Data(采用一个控制器来控制多个处理器)</div><div class="line">msrcptr_el2, x0           /* Enable FP/SIMD */</div><div class="line">b0f</div><div class="line">1:msrvbar_el1, x0</div><div class="line">movx0, #3 &lt;&lt; 20</div><div class="line">msrcpacr_el1, x0          /* Enable FP/SIMD */</div><div class="line">0:</div></pre></td></tr></table></figure><blockquote><p>注：<br>1.<code>switch_el</code>这一宏定义伪指令在<code>u-boot/arch/arm/include/asm/macro.h</code>定义；<br>2.<code>vbar_el3</code>等寄存器定义在文档<code>ARMv8-A_Architecture_Reference_Manual_(Issue_A.a).pdf</code><sup>[2]</sup>中；<br>3.<code>XZR/WZR</code>(word zero rigiser)分别代表64/32位，<code>zero register</code>的作用就是0，写进去代表丢弃结果，拿出来是0；</p></blockquote></li></ul><p>中断向量的定义在文件<code>u-boot/arch/arm/cpu/armv8/exceptions.S</code>中，内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line"> * Exception vectors.</div><div class="line"> */</div><div class="line">.align11        //hceng:注意这里的对齐11，是因为vbar_el3的低11为是Reserved，需要为0</div><div class="line">        //因此需要从2^11=2k的倍数位置起存放vectors</div><div class="line">.globlvectors</div><div class="line">vectors:</div><div class="line">.align7        //hceng:每个中断向量的偏移为32字节</div><div class="line">b_do_bad_sync/* Current EL Synchronous Thread */</div><div class="line"></div><div class="line">.align7</div><div class="line">b_do_bad_irq/* Current EL IRQ Thread */</div><div class="line"></div><div class="line">.align7</div><div class="line">b_do_bad_fiq/* Current EL FIQ Thread */</div><div class="line"></div><div class="line">.align7</div><div class="line">b_do_bad_error/* Current EL Error Thread */</div><div class="line"></div><div class="line">.align7</div><div class="line">b_do_sync/* Current EL Synchronous Handler */</div><div class="line"></div><div class="line">.align7</div><div class="line">b_do_irq/* Current EL IRQ Handler */</div><div class="line"></div><div class="line">.align7</div><div class="line">b_do_fiq/* Current EL FIQ Handler */</div><div class="line"></div><div class="line">.align7</div><div class="line">b_do_error/* Current EL Error Handler */</div><div class="line"></div><div class="line"></div><div class="line">_do_bad_sync:                //hceng:对应的异常处理函数</div><div class="line">exception_entry    </div><div class="line">bldo_bad_sync</div><div class="line"></div><div class="line">_do_bad_irq:</div><div class="line">exception_entry</div><div class="line">bldo_bad_irq</div><div class="line"></div><div class="line">_do_bad_fiq:</div><div class="line">exception_entry</div><div class="line">bldo_bad_fiq</div><div class="line"></div><div class="line">_do_bad_error:</div><div class="line">exception_entry</div><div class="line">bldo_bad_error</div><div class="line"></div><div class="line">_do_sync:</div><div class="line">exception_entry</div><div class="line">bldo_sync</div><div class="line"></div><div class="line">_do_irq:</div><div class="line">exception_entry         //hceng:保护现场，把ELR/X0~X30保存到堆栈</div><div class="line">bldo_irq</div><div class="line">exception_exit         //hceng:恢复现场，从堆栈恢复ELR/X0~X30</div><div class="line"></div><div class="line">_do_fiq:</div><div class="line">exception_entry</div><div class="line">bldo_fiq</div><div class="line"></div><div class="line">_do_error:</div><div class="line">exception_entry</div><div class="line">bldo_error</div><div class="line"></div></pre></td></tr></table></figure><br>这一部分功能就是根据当前的EL级别，配置中断向量、MMU、Endian、i/d Cache等，比较重要。</p><ul><li><p><strong>3.配置ARM核心特定勘误表 [unimportant]</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/* Apply ARM core specific erratas */</div><div class="line">blapply_core_errata</div></pre></td></tr></table></figure><p>看样子是对ARM做一些勘误，实测没有用到，不重要。</p></li><li><p><strong>4.lowlevel_init [important]</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line">/* Processor specific initialization */</div><div class="line">bllowlevel_init</div><div class="line"></div><div class="line">……</div><div class="line"></div><div class="line">WEAK(lowlevel_init)</div><div class="line">movx29, lr       /* Save LR */</div><div class="line"></div><div class="line">#if defined(CONFIG_ROCKCHIP)</div><div class="line"></div><div class="line">/* switch to el1 secure */</div><div class="line">#if defined(CONFIG_SWITCH_EL3_TO_EL1)  //hceng:实测没有定义，不需要从EL3切换到EL1，从前面可以看出，现在已经是EL1</div><div class="line">/*</div><div class="line"> * Switch to EL1 from EL3</div><div class="line"> */</div><div class="line">mrsx0, CurrentEL       /* check currentEL */</div><div class="line">cmpx0, 0xc </div><div class="line">b.neel1_start       /* currentEL != EL3 */</div><div class="line"></div><div class="line">ldrx0, =0xd00       /* ST, bit[11] | RW, bit[10] | HCE, bit[8] */</div><div class="line">msrscr_el3, x0</div><div class="line">ldrx0, =0x3c5       /* D, bit[9] | A, bit[8] | I, bit[7] | F, bit[6] | 0b0101 EL1h */</div><div class="line">msrspsr_el3, x0</div><div class="line">ldrx0, =el1_start</div><div class="line">msrelr_el3, x0</div><div class="line">eret</div><div class="line"></div><div class="line">el1_start:</div><div class="line">nop</div><div class="line">#endif /* CONFIG_SWITCH_EL3_TO_EL1 */</div><div class="line">#endif /* CONFIG_ROCKCHIP */</div><div class="line"></div><div class="line">#if defined(CONFIG_GICV2) || defined(CONFIG_GICV3)  //hceng:实测定义的是CONFIG_GICV3</div><div class="line">branch_if_slave x0, 1f        //hceng:通过mpidr_el1寄存器，判断当前处理器是否是从属CPU，如果是选择所有affinity为0的作为主CPU</div><div class="line">ldrx0, =GICD_BASE         //hceng:把GICD基地址作为参数传给gic_init_secure </div><div class="line">blgic_init_secure        //hceng:初始化主CPU的中断寄存器</div><div class="line">1:</div><div class="line">#if defined(CONFIG_GICV3)</div><div class="line">ldrx0, =GICR_BASE         //hceng:把GICR基地址作为参数传给gic_init_secure_percpu</div><div class="line">blgic_init_secure_percpu //hceng:初始化其它各个CPU的中断寄存器</div><div class="line">#elif defined(CONFIG_GICV2)            //hceng:未执行</div><div class="line">ldrx0, =GICD_BASE</div><div class="line">ldrx1, =GICC_BASE</div><div class="line">blgic_init_secure_percpu</div><div class="line">#endif</div><div class="line"></div><div class="line">#if defined(CONFIG_ROCKCHIP)</div><div class="line">/*</div><div class="line"> * Setting HCR_EL2.TGE AMO IMO FMO for exception rounting to EL2</div><div class="line"> */</div><div class="line">mrsx0, CurrentEL       /* check currentEL */</div><div class="line">cmpx0, 0x8                //hceng:根据CurrentEL的bir[3:2]判断当前运行级别，0xC(EL3)、0x8(EL2)、0x4(EL1)、0x0(EL0)，实测并没处于EL2，后面的内容不执行</div><div class="line">b.neendseting       /* currentEL != EL2 */</div><div class="line"></div><div class="line">mrsx9, hcr_el2            //hceng:hcr_el2(Hypervisor Configuration Register)</div><div class="line">orrx9, x9, #(7 &lt;&lt; 3)      /* HCR_EL2.AMO IMO FMO set */</div><div class="line">orrx9, x9, #(1 &lt;&lt; 27)     /* HCR_EL2.TGE set */</div><div class="line">msrhcr_el2, x9</div><div class="line"></div><div class="line">endseting:</div><div class="line">nop</div><div class="line">#endif /* CONFIG_ROCKCHIP */</div><div class="line"></div><div class="line">branch_if_master x0, x1, 2f    //hceng:通过mpidr_el1寄存器，判断当前处理器是否是主CPU，如果是选择所有affinity为0的作为主CPU；实测跳到2f</div><div class="line"></div><div class="line">/*</div><div class="line"> * Slave should wait for master clearing spin table.</div><div class="line"> * This sync prevent salves observing incorrect</div><div class="line"> * value of spin table and jumping to wrong place.</div><div class="line"> */</div><div class="line">#if defined(CONFIG_GICV2) || defined(CONFIG_GICV3)</div><div class="line">#ifdef CONFIG_GICV2</div><div class="line">ldrx0, =GICC_BASE</div><div class="line">#endif</div><div class="line">blgic_wait_for_interrupt</div><div class="line">#endif</div><div class="line"></div><div class="line">/*</div><div class="line"> * All slaves will enter EL2 and optionally EL1.</div><div class="line"> */</div><div class="line">blarmv8_switch_to_el2  </div><div class="line">#ifdef CONFIG_ARMV8_SWITCH_TO_EL1</div><div class="line">blarmv8_switch_to_el1</div><div class="line">#endif</div><div class="line"></div><div class="line">#endif /* CONFIG_ARMV8_MULTIENTRY */</div><div class="line"></div><div class="line">2:                                   //hceng：前面的都没执行，跳到这，返回</div><div class="line">movlr, x29     /* Restore LR */</div><div class="line">ret</div><div class="line">ENDPROC(lowlevel_init)</div></pre></td></tr></table></figure></li></ul><blockquote><p>注：<br>1.<code>branch_if_slave</code>和<code>branch_if_master</code>在<code>u-boot/arch/arm/include/asm/macro.h</code>定义；<br>2.<code>gic_init_secure</code>和<code>gic_init_secure_percpu</code>这两个中断初始化的关键函数在<code>u-boot/arch/arm/lib/gic_64.S</code>定义；<br>3.<code>armv8_switch_to_el2</code>和<code>armv8_switch_to_el1</code>在<code>u-boot/arch/arm/cpu/armv8/exceptions.S</code>定义；</p></blockquote><p><code>lowlevel_init</code>的主要功能就是中断的初始化，后面写中断服务程序的使用会用到。</p><ul><li><p><strong>5.是否需要在U-Boot开启多核CPU [unimportant]</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">branch_if_master x0, x1, master_cpu</div><div class="line"></div><div class="line">/*</div><div class="line"> * Slave CPUs</div><div class="line"> */</div><div class="line">slave_cpu:</div><div class="line">wfe</div><div class="line">ldrx1, =CPU_RELEASE_ADDR</div><div class="line">ldrx0, [x1]</div><div class="line">cbzx0, slave_cpu</div><div class="line">brx0/* branch to the given address */</div><div class="line">master_cpu:</div><div class="line">/* On the master CPU */</div><div class="line">#endif /* CONFIG_ARMV8_MULTIENTRY */</div></pre></td></tr></table></figure><p>实测没有定义，不用管。</p></li><li><p><strong>6.跳转到_main [important]</strong><br>到此<code>start.S</code>的工作就基本完成了，接下来就交给ARM公共的<code>_main</code>。</p></li></ul><h2 id="3-2-crt0-64-S"><a href="#3-2-crt0-64-S" class="headerlink" title="3.2 crt0_64.S"></a>3.2 crt0_64.S</h2><p>所在文件路径：<a href="https://github.com/hceng/RK3399/blob/master/hardware/2_u-boot_source/arch/arm/lib/crt0_64.S" target="_blank" rel="external"><code>u-boot/arch/arm/cpu/armv8/start.S</code></a><br><code>_main</code>在<code>crt0_64.S</code>里，<code>crt0</code>是<code>C-runtime Startup Code</code>的简称，意思就是运行C代码之前的准备工作，包括设置栈、重定位、清理BSS段等；</p><ul><li><strong>1.设置栈 [important]</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line"> * Set up initial C runtime environment and call board_init_f(0).</div><div class="line"> */</div><div class="line">ldrx0, =(CONFIG_SYS_INIT_SP_ADDR)     //hceng:设置栈顶为0x80000000=2G</div><div class="line">subx0, x0, #GD_SIZE           /* allocate one GD above SP */</div><div class="line">bicsp, x0, #0xf                   /* 16-byte alignment for ABI compliance */</div><div class="line">movx18, sp           /* GD is above SP */</div></pre></td></tr></table></figure></li></ul><p>这里栈需要16字节对齐，即要求地址为16的倍数，只需要二进制位最后四位为0(2的4次方)，与前面中断向量地址需要2K对齐，实现原理类似。<br>另外U-Boot在SP上面分配了一块GD(global data)，后面写裸机用不到。</p><ul><li><p><strong>2.board_init_f [important]</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">movx0, #0          //hceng:将0作为参数传入board_init_f</div><div class="line">blboard_init_f</div></pre></td></tr></table></figure><p><code>board_init_f</code>所在文件路径：<a href="https://github.com/hceng/RK3399/blob/master/hardware/2_u-boot_source/common/board_f.c" target="_blank" rel="external"><code>u-boot/common/board_f.c</code></a>。<br><code>board_init_f</code>中调用<code>initcall_run_list(init_sequence_f)</code>，<code>init_sequence_f</code>是个数组，里面是将要进行初始化的函数列表，完成一些前期的初始化工作，比如board相关的early的初始化<code>board_early_init_f</code>、环境变量初始化<code>env_init</code>、串口初始化的<code>serial_init</code>、I2C初始化<code>init_func_i2c</code>、设备树相关准备工作<code>fdtdec_prepare_fdt</code>、打印CPU信息<code>print_cpuinfo</code>、SDRAM初始化<code>dram_init</code>、计算重定位信息<code>setup_reloc</code>等；</p></li><li><p><strong>3.重定位 [important]</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line"> * Set up intermediate environment (new sp and gd) and call</div><div class="line"> * relocate_code(addr_moni). Trick here is that we&apos;ll return</div><div class="line"> * &apos;here&apos; but relocated.</div><div class="line"> */</div><div class="line">ldrx0, [x18, #GD_START_ADDR_SP]/* x0 &lt;- gd-&gt;start_addr_sp */</div><div class="line">bicsp, x0, #0xf                /* 16-byte alignment for ABI compliance */</div><div class="line">ldrx18, [x18, #GD_BD]/* x18 &lt;- gd-&gt;bd */</div><div class="line">subx18, x18, #GD_SIZE/* new GD is below bd */</div><div class="line"></div><div class="line">#ifndef CONFIG_SKIP_RELOCATE_UBOOT</div><div class="line">adrlr, relocation_return</div><div class="line">ldrx9, [x18, #GD_RELOC_OFF]/* x9 &lt;- gd-&gt;reloc_off */</div><div class="line">addlr, lr, x9                /* new return address after relocation */</div><div class="line">ldrx0, [x18, #GD_RELOCADDR]/* x0 &lt;- gd-&gt;relocaddr */</div><div class="line">brelocate_code</div><div class="line">#endif</div><div class="line"></div><div class="line">relocation_return:</div></pre></td></tr></table></figure><p>先是更新了gd结构体，然后根据宏<code>CONFIG_SKIP_RELOCATE_UBOOT</code>决定是否要重定位。<br>这里是不需要重定位的，因为链接脚本<a href="https://github.com/hceng/RK3399/blob/master/hardware/2_u-boot_source/arch/arm/cpu/armv8/u-boot.lds" target="_blank" rel="external"><code>u-boot.lds</code></a>里面的链接地址是<code>0x00000000</code>，而RK3399上电后，加头的<code>boot code</code>会自动将代码复制到DDR(0x00000000)，两者地址相同，不需要重定位。<br>重定位的代码在<code>u-boot/arch/arm/lib/relocate_64.S</code>里面。</p></li><li><p><strong>4.重新设置异常向量表 [important]</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line"> * Set up final (full) environment</div><div class="line"> */</div><div class="line">blc_runtime_cpu_setup/* still call old routine */</div></pre></td></tr></table></figure><p>如果发生了重定位，需要重新设置异常向量表。<code>c_runtime_cpu_setup</code>定义在<code>start.S</code>里面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">ENTRY(c_runtime_cpu_setup)</div><div class="line">/* Relocate vBAR */</div><div class="line">adrx0, vectors</div><div class="line">switch_el x1, 3f, 2f, 1f</div><div class="line">3:msrvbar_el3, x0</div><div class="line">b0f</div><div class="line">2:msrvbar_el2, x0</div><div class="line">b0f</div><div class="line">1:msrvbar_el1, x0</div><div class="line">0:</div><div class="line"></div><div class="line">ret</div><div class="line">ENDPROC(c_runtime_cpu_setup)</div></pre></td></tr></table></figure></li></ul><ul><li><strong>5.清理BSS段 [important]</strong><br>接下来就是清除BSS段，将未定义的全局变量设置为0。在以前使用Keil单片机编程时，未初始化的全局变量默认为0，那是因为集成开发环境为我们做了清理BSS段的操作，现在没有了集成开发环境，就需要我们自己做。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line"> * Clear BSS section</div><div class="line"> */</div><div class="line">ldrx0, =__bss_start/* this is auto-relocated! */</div><div class="line">ldrx1, =__bss_end/* this is auto-relocated! */</div><div class="line">movx2, #0</div><div class="line">clear_loop:</div><div class="line">strx2, [x0]</div><div class="line">addx0, x0, #8</div><div class="line">cmpx0, x1</div><div class="line">b.loclear_loop</div></pre></td></tr></table></figure></li></ul><ul><li><strong>6.board_init_r [important]</strong><br>接下来就是板子的后半部分的初始化：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">/* call board_init_r(gd_t *id, ulong dest_addr) */</div><div class="line">movx0, x18/* gd_t */</div><div class="line">ldrx1, [x18, #GD_RELOCADDR]/* dest_addr */</div><div class="line">bboard_init_r/* PC relative jump */</div><div class="line"></div><div class="line">/* NOTREACHED - board_init_r() does not return */</div></pre></td></tr></table></figure><code>board_init_r</code>所在文件路径：<a href="https://github.com/hceng/RK3399/blob/master/hardware/2_u-boot_source/common/board_r.c" target="_blank" rel="external"><code>u-boot/common/board_f.c</code></a>。<br>与前面的<code>board_init_f</code>类似，<code>board_init_r</code>中调用<code>initcall_run_list(init_sequence_r)</code>，<code>init_sequence_r</code>是个数组，里面是将要进行初始化的函数列表，又是一系列的初始化操作。之前遇到的LCD初始化就是在这里。<br>初始化数组列表最后一个成员是<code>run_main_loop</code>，将最终跳到主循环<a href="https://github.com/hceng/RK3399/blob/master/hardware/2_u-boot_source/common/main.c" target="_blank" rel="external"><code>main_loop</code></a>。</li></ul><p><code>crt0_64.S</code>主要就是为C语言运行设置栈和进行了重定位，以及两个阶段的初始化:<code>board_init_f</code>(front)和<code>board_init_r</code>(rear)，最后进入主循环。</p><h2 id="3-3-总结"><a href="#3-3-总结" class="headerlink" title="3.3 总结"></a>3.3 总结</h2><p>U-Boot启动流程示意图：</p><div align="center"> <img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180816/5.png"></div><h1 id="4-中断"><a href="#4-中断" class="headerlink" title="4.中断"></a>4.中断</h1><h2 id="4-1-分析"><a href="#4-1-分析" class="headerlink" title="4.1 分析"></a>4.1 分析</h2><p>在U-Boot中找到如下几个文件：</p><blockquote><p><code>u-boot/arch/arm/cpu/armv8/rk33xx/irqs.c</code>:包含中断的基本操作，如：初始化、注册、使能等；<br> <code>u-boot/arch/arm/cpu/armv8/rk33xx/irqs-gic.c</code>:包含非GPIO类型中断的使能、去能；<br> <code>u-boot/arch/arm/cpu/armv8/rk33xx/irqs-gpio.c</code>:包含GPIO类型中断的使能、去能、触发类型；<br> <code>u-boot/board/rockchip/rk33xx/demo.c</code>:包含一些测试代码，如：定时器中断测试、GPIO中断测试；</p></blockquote><ul><li><p><code>irqs.c</code>里的函数:<br>首先是<strong><code>irq_init()</code></strong>里面包含gic中断初始化和gpio中断初始化，函数里注释<code>gic has been init in Start.S</code>和之前的猜测一样，在<code>start.S</code>里面已经gic初始化了；<br>然后是<strong><code>irq_install_handler()</code></strong>里面实现了中断的注册，即把对应中断号放在<code>g_irq_handler[]</code>数组里；<br>再是<strong><code>irq_handler_enable()</code></strong>，将对应的中断处理函数使能，具体实现的函数在<code>irqs-gic.c</code>和<code>irqs-gpio.c</code>里面。此外还有使能总中断<code>enable_interrupts()</code>；<br>最后就是<strong><code>do_irq()</code></strong>中断处理函数。</p></li><li><p><code>irqs-gic.c</code>里的函数:<br>包含<code>gic_handler_enable()</code>和<code>gic_handler_disable()</code>，在前面<code>irq_handler_enable()</code>调用；</p></li><li><p><code>irqs-gpio.c</code>里的函数:<br>包含<code>gic_handler_enable()</code>、<code>gpio_irq_enable</code>和<code>gpio_irq_set_type()</code>，在前面<code>irq_handler_enable()</code>调用；</p></li><li><p><code>demo.c</code>里的函数:<br>包含定时器中断测试<code>board_gic_test()</code>和GPIO中断测试<code>board_gpio_irq_test()</code>；</p></li></ul><p>因此，除了<code>start.S</code>里的初始化，还需移植<code>irq_install_handler()</code>、<code>irq_handler_enable</code>、<code>do_irq()</code>三个函数，此外还有定时器中断测试和GPIO测试函数。</p><h2 id="4-2-启动和中断代码"><a href="#4-2-启动和中断代码" class="headerlink" title="4.2 启动和中断代码"></a>4.2 启动和中断代码</h2><p>因为<code>start.S</code>里面包含了中断初始化代码，即<code>gic_init_secure</code>和<code>gic_init_secure_percpu</code>，移植的时候直接复制过来的，因此也把<code>start.S</code>贴出来。<br><code>start.S</code>是对U-boot的<code>start.S</code>进行了裁剪和修改，思路和前面U-Boot的流程差不多，几个重定位、绝对跳转、代码对齐的坑，都踩完了，下面的<code>start.S</code>有时间的话可以好好看下。<br><figure class="highlight plain"><figcaption><span>[start.S]</span><a href="https://github.com/hceng/RK3399/tree/master/hardware/3_irq/code/start.S" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#include &quot;macro.h&quot;</div><div class="line"></div><div class="line">.text</div><div class="line">.global  _start</div><div class="line">_start: </div><div class="line">/* Could be EL3/EL2/EL1, Initial State: Little Endian, MMU Disabled, i/dCache Disabled */</div><div class="line">ldrx0, =vectors            //Exception vectors(Absolute address)</div><div class="line"> msrvbar_el3, x0            //RVBAR_EL3, Reset Vector Base Address Register (if EL3 implemented)</div><div class="line"></div><div class="line">mrsx0, scr_el3        </div><div class="line">orrx0, x0, #0xf            //SCR_EL3.NS|IRQ|FIQ|EA </div><div class="line">msrscr_el3, x0</div><div class="line"></div><div class="line">msrcptr_el3, xzr           //Enable FP/SIMD </div><div class="line"></div><div class="line">ldrx0, =24000000           //24MHz</div><div class="line">msrcntfrq_el0, x0          //Initialize CNTFRQ </div><div class="line"></div><div class="line">bllowlevel_init           //Processor specific initialization</div><div class="line"></div><div class="line">ldrx0, =0x80000000         //sp=2G</div><div class="line">bicsp, x0, #0xf        //16-byte alignment for ABI compliance  </div><div class="line"></div><div class="line">bl relocate      </div><div class="line">relocate_complete:</div><div class="line"></div><div class="line">bl clean_bss</div><div class="line">clean_bss_complete:</div><div class="line"></div><div class="line">//bl main </div><div class="line"></div><div class="line">ldrlr, =main                //Absolute address</div><div class="line">ret</div><div class="line"></div><div class="line">halt:</div><div class="line">b  halt </div><div class="line"></div><div class="line">/*******************************************************/</div><div class="line">led_debug:</div><div class="line">movx0, #0xff720000           </div><div class="line">movx1, #0xff720000           </div><div class="line">ldrw1, [x1,#4]</div><div class="line">orrw1, w1, #0x2000</div><div class="line">strw1, [x0,#4]</div><div class="line">movx0, #0xff720000           </div><div class="line">movx1, #0xff720000           </div><div class="line">ldrw1, [x1]</div><div class="line">orrw1, w1, #0x2000</div><div class="line">strw1, [x0]</div><div class="line">b halt</div><div class="line"></div><div class="line">/*******************************************************/</div><div class="line">lowlevel_init:</div><div class="line">movx29, lr                   //Save LR </div><div class="line"></div><div class="line">ldrx0, =0xFEE00000           //RKIO_GICD_PHYS   GIC DIST </div><div class="line">blgic_init_secure</div><div class="line"></div><div class="line">ldrx0, =0xFEF00000           //RKIO_GICR_PHYS</div><div class="line">blgic_init_secure_percpu</div><div class="line"></div><div class="line">movlr, x29                   //Restore LR</div><div class="line">ret</div><div class="line"></div><div class="line">/*******************************************************/</div><div class="line">//ref: u-boot/arch/arm/lib/gic_64.S</div><div class="line"></div><div class="line">/*Initialize Distributor  x0: Distributor Base*/</div><div class="line">gic_init_secure:</div><div class="line">movw9, #0x37                 //EnableGrp0 | EnableGrp1NS  </div><div class="line">                                          //EnableGrp1S | ARE_S | ARE_NS  </div><div class="line">strw9, [x0, 0x0000]          //Secure GICD_CTLR </div><div class="line">ldrw9, [x0, 0x0004]</div><div class="line">andw10, w9, #0x1f            //ITLinesNumber </div><div class="line">cbzw10, 1f                  //No SPIs </div><div class="line">addx11, x0, (0x0080 + 4)</div><div class="line">addx12, x0, (0x0d00 + 4)</div><div class="line">movw9, #~0</div><div class="line">0:strw9, [x11], #0x4</div><div class="line">strwzr, [x12], #0x4          //Config SPIs as Group1NS </div><div class="line">subw10, w10, #0x1</div><div class="line">cbnzw10, 0b</div><div class="line">1:</div><div class="line">ret</div><div class="line"></div><div class="line"></div><div class="line">/*Initialize ReDistributor  x0: ReDistributor Base*/</div><div class="line">gic_init_secure_percpu:</div><div class="line">mrsx10, mpidr_el1</div><div class="line">lsrx9, x10, #32</div><div class="line">bfix10, x9, #24, #8   //w10 is aff3:aff2:aff1:aff0 </div><div class="line">movx9, x0</div><div class="line">1:ldrx11, [x9, 0x0008]</div><div class="line">lsrx11, x11, #32   //w11 is aff3:aff2:aff1:aff0 </div><div class="line">cmpw10, w11</div><div class="line">b.eq2f</div><div class="line">addx9, x9, #(2 &lt;&lt; 16)</div><div class="line">b1b</div><div class="line"></div><div class="line">/* x9: ReDistributor Base Address of Current CPU */</div><div class="line">2:movw10, #~0x2</div><div class="line">ldrw11, [x9, 0x0014]</div><div class="line">andw11, w11, w10   //Clear ProcessorSleep </div><div class="line">strw11, [x9, 0x0014]</div><div class="line">dsbst</div><div class="line">isb</div><div class="line">3:ldrw10, [x9, 0x0014]</div><div class="line">tbnzw10, #2, 3b   //Wait Children be Alive </div><div class="line"></div><div class="line">addx10, x9, #(1 &lt;&lt; 16)        //SGI_Base </div><div class="line">movw11, #~0</div><div class="line">strw11, [x10, 0x0080]</div><div class="line">strwzr, [x10, 0x0d00]   //SGIs|PPIs Group1NS </div><div class="line">movw11, #0x1                  //Enable SGI 0 </div><div class="line">strw11, [x10, 0x0100]</div><div class="line"></div><div class="line">/* Initialize Cpu Interface */</div><div class="line">/* rockchip: first check elx for running on different el */</div><div class="line">switch_el x0, el3_sre, el2_sre, el1_sre</div><div class="line"></div><div class="line">el3_sre:</div><div class="line">mrsx10, S3_6_C12_C12_5</div><div class="line">orrx10, x10, #0xf           //SRE &amp; Disable IRQ/FIQ Bypass &amp; </div><div class="line">                                         //Allow EL2 access to ICC_SRE_EL2 </div><div class="line">msrS3_6_C12_C12_5, x10</div><div class="line">isb</div><div class="line"></div><div class="line">el2_sre:</div><div class="line">mrsx10, S3_4_C12_C9_5</div><div class="line">orrx10, x10, #0xf           //SRE &amp; Disable IRQ/FIQ Bypass &amp; </div><div class="line">                                         //Allow EL1 access to ICC_SRE_EL1 </div><div class="line">msrS3_4_C12_C9_5, x10</div><div class="line">isb</div><div class="line"></div><div class="line">el1_sre:</div><div class="line">mrsx0, CurrentEL            //check currentEL </div><div class="line">cmpx0, 0xC</div><div class="line">b.neel1_ctlr                 //currentEL != EL3 </div><div class="line"></div><div class="line">el3_ctlr:</div><div class="line">movx10, #0x3                //EnableGrp1NS | EnableGrp1S </div><div class="line">msrS3_6_C12_C12_7, x10</div><div class="line">isb</div><div class="line"></div><div class="line">msrS3_6_C12_C12_4, xzr</div><div class="line">isb</div><div class="line"></div><div class="line">el1_ctlr:</div><div class="line">movx10, #0x3                //EnableGrp1NS | EnableGrp1S </div><div class="line">msrS3_0_C12_C12_7, x10</div><div class="line">isb</div><div class="line"></div><div class="line">msrS3_0_C12_C12_4, xzr      //NonSecure ICC_CTLR_EL1 </div><div class="line">isb</div><div class="line"></div><div class="line">movx10, #0xf0               //Non-Secure access to ICC_PMR_EL1 </div><div class="line">msrS3_0_C4_C6_0, x10</div><div class="line">isb</div><div class="line"></div><div class="line">ret</div><div class="line"></div><div class="line">/*******************************************************/</div><div class="line">//ref:D:u-boot/arch/arm/cpu/armv8/exceptions.S</div><div class="line"></div><div class="line">/* Enter Exception.</div><div class="line"> * This will save the processor state that is ELR/X0~X30 to the stack frame.*/</div><div class="line"> </div><div class="line">.macroexception_entry</div><div class="line">stpx29, x30, [sp, #-16]!</div><div class="line">stpx27, x28, [sp, #-16]!</div><div class="line">stpx25, x26, [sp, #-16]!</div><div class="line">stpx23, x24, [sp, #-16]!</div><div class="line">stpx21, x22, [sp, #-16]!</div><div class="line">stpx19, x20, [sp, #-16]!</div><div class="line">stpx17, x18, [sp, #-16]!</div><div class="line">stpx15, x16, [sp, #-16]!</div><div class="line">stpx13, x14, [sp, #-16]!</div><div class="line">stpx11, x12, [sp, #-16]!</div><div class="line">stpx9,  x10, [sp, #-16]!</div><div class="line">stpx7,  x8,  [sp, #-16]!</div><div class="line">stpx5,  x6,  [sp, #-16]!</div><div class="line">stpx3,  x4,  [sp, #-16]!</div><div class="line">stpx1,  x2,  [sp, #-16]!</div><div class="line"></div><div class="line">/* Could be running at EL3/EL2/EL1 */</div><div class="line">switch_el x11, 3f, 2f, 1f</div><div class="line">3:mrsx1, esr_el3</div><div class="line">mrsx2, elr_el3</div><div class="line">b0f</div><div class="line">2:mrsx1, esr_el2</div><div class="line">mrsx2, elr_el2</div><div class="line">b0f</div><div class="line">1:mrsx1, esr_el1</div><div class="line">mrsx2, elr_el1</div><div class="line">0:</div><div class="line">stpx2, x0, [sp, #-16]!</div><div class="line">movx0, sp</div><div class="line">.endm</div><div class="line"></div><div class="line">/*</div><div class="line"> * Exit Exception.</div><div class="line"> * This will restore the processor state that is ELR/X0~X30</div><div class="line"> * from the stack frame.</div><div class="line"> */</div><div class="line">.macroexception_exit</div><div class="line">ldpx2, x0, [sp],#16</div><div class="line"></div><div class="line">/* Could be running at EL3/EL2/EL1 */</div><div class="line">switch_el x11, 3f, 2f, 1f</div><div class="line">3:msrelr_el3, x2</div><div class="line">b0f</div><div class="line">2:msrelr_el2, x2</div><div class="line">b0f</div><div class="line">1:msrelr_el1, x2</div><div class="line">0:</div><div class="line">ldpx1,  x2,  [sp],#16</div><div class="line">ldpx3,  x4,  [sp],#16</div><div class="line">ldpx5,  x6,  [sp],#16</div><div class="line">ldpx7,  x8,  [sp],#16</div><div class="line">ldpx9,  x10, [sp],#16</div><div class="line">ldpx11, x12, [sp],#16</div><div class="line">ldpx13, x14, [sp],#16</div><div class="line">ldpx15, x16, [sp],#16</div><div class="line">ldpx17, x18, [sp],#16</div><div class="line">ldpx19, x20, [sp],#16</div><div class="line">ldpx21, x22, [sp],#16</div><div class="line">ldpx23, x24, [sp],#16</div><div class="line">ldpx25, x26, [sp],#16</div><div class="line">ldpx27, x28, [sp],#16</div><div class="line">ldpx29, x30, [sp],#16</div><div class="line">eret</div><div class="line">.endm</div><div class="line"></div><div class="line"></div><div class="line">/* Exception vectors.*/</div><div class="line">.align11</div><div class="line">vectors:</div><div class="line">.align7</div><div class="line">b_do_bad_sync        //Current EL Synchronous Thread  </div><div class="line">                          </div><div class="line">.align7              </div><div class="line">b_do_bad_irq        //Current EL IRQ Thread  </div><div class="line">                            </div><div class="line">.align7               </div><div class="line">b_do_bad_fiq        //Current EL FIQ Thread </div><div class="line">                            </div><div class="line">.align7               </div><div class="line">b_do_bad_error        //Current EL Error Thread </div><div class="line">                           </div><div class="line">.align7               </div><div class="line">b_do_sync        //Current EL Synchronous Handler </div><div class="line">                            </div><div class="line">.align7               </div><div class="line">b_do_irq        //Current EL IRQ Handler </div><div class="line">                            </div><div class="line">.align7               </div><div class="line">b_do_fiq        //Current EL FIQ Handler </div><div class="line">                           </div><div class="line">.align7              </div><div class="line">b_do_error        //Current EL Error Handler </div><div class="line"></div><div class="line"></div><div class="line">_do_bad_sync:</div><div class="line">exception_entry</div><div class="line">blhalt                    //do_bad_sync</div><div class="line"></div><div class="line">_do_bad_irq:</div><div class="line">exception_entry</div><div class="line">blhalt                    //do_bad_irq</div><div class="line"></div><div class="line">_do_bad_fiq:</div><div class="line">exception_entry</div><div class="line">blhalt                    //do_bad_fiq</div><div class="line"></div><div class="line">_do_bad_error:</div><div class="line">exception_entry</div><div class="line">blhalt                    //do_bad_error</div><div class="line"></div><div class="line">_do_sync:</div><div class="line">exception_entry</div><div class="line">blhalt                    //do_sync</div><div class="line"></div><div class="line">_do_irq:</div><div class="line">exception_entry</div><div class="line">bldo_irq                  //do_irq</div><div class="line">exception_exit</div><div class="line"></div><div class="line">_do_fiq:</div><div class="line">exception_entry</div><div class="line">blhalt                    //do_fiq</div><div class="line"></div><div class="line">_do_error:</div><div class="line">exception_entry</div><div class="line">blhalt                    //do_error</div><div class="line"></div><div class="line">/*******************************************************/</div><div class="line">relocate:</div><div class="line">adr x0, _start  </div><div class="line">ldr x1, =_start</div><div class="line"></div><div class="line">cmp x0, x1     </div><div class="line">b.eq relocate_complete  //No need relocate</div><div class="line"></div><div class="line">ldr x2, =__bss_start    //relocate end addr</div><div class="line"></div><div class="line">cpy:</div><div class="line">ldr x3, [x0]            //ldr x3, [x0], #8  //ldpx10, x11, [x0], #16 //copy from source address [x0]</div><div class="line">add x0, x0, #8</div><div class="line"></div><div class="line">str x3, [x1]            //str x3, [x1], #8  //stpx10, x11, [x1], #16//copy to   target address [x1] </div><div class="line"></div><div class="line">add x1, x1, #8</div><div class="line"></div><div class="line">cmp x1, x2      </div><div class="line">b.lo cpy       </div><div class="line"></div><div class="line">b relocate_complete </div><div class="line"></div><div class="line">/*******************************************************/</div><div class="line">clean_bss:</div><div class="line">ldr x0, =__bss_start    //bss start</div><div class="line">ldr x1, =__bss_end      //bss end</div><div class="line">mov x2, #0  </div><div class="line"></div><div class="line">clean_loop:  </div><div class="line">str x2, [x0]  </div><div class="line">addx0, x0, #8</div><div class="line">cmp x0, x1          </div><div class="line">b.lo clean_loop        </div><div class="line"></div><div class="line">b clean_bss_complete   </div><div class="line"></div></pre></td></tr></table></figure></p><p>前面的中断初始化完成了，接下来就是注册、使能、执行中断、中断测试几个函数：<br><figure class="highlight"><figcaption><span>[int.c]</span><a href="https://github.com/hceng/RK3399/tree/master/hardware/3_irq/code/int.c" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div></pre></td><td class="code"><pre><div class="line">/*************</div><div class="line">Function：interrupt</div><div class="line">**************/</div><div class="line"></div><div class="line">#include "int.h"</div><div class="line">#include "led.h"</div><div class="line">#include "timer.h"</div><div class="line"></div><div class="line"></div><div class="line">void irq_init(void)</div><div class="line">&#123;</div><div class="line">    /* gic has been init in Start.S */</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">void enable_interrupts(void)</div><div class="line">&#123;</div><div class="line">    asm volatile("msrdaifclr, #0x03");</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* irq interrupt install handle */</div><div class="line">void irq_install_handler(int irq, interrupt_handler_t *handler, void *data)</div><div class="line">&#123;</div><div class="line">    if (g_irq_handler[irq].m_func != handler)</div><div class="line">        g_irq_handler[irq].m_func = handler;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* enable irq handler */</div><div class="line">int irq_handler_enable(int irq)</div><div class="line">&#123;</div><div class="line">    unsigned long M, N;</div><div class="line"></div><div class="line">    if (irq &gt;= NR_GIC_IRQS)</div><div class="line">        return -1;</div><div class="line"></div><div class="line">    M = irq / 32;</div><div class="line">    N = irq % 32;</div><div class="line"></div><div class="line">    GICD-&gt;ISENABLER[M]  = (0x1 &lt;&lt; N);</div><div class="line"></div><div class="line">    return 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void do_irq(void)</div><div class="line">&#123;</div><div class="line">    unsigned long nintid;</div><div class="line">    unsigned long long irqstat;</div><div class="line"></div><div class="line">    asm volatile("mrs %0, " __stringify(ICC_IAR1_EL1) : "=r" (irqstat));</div><div class="line"></div><div class="line">    nintid = (unsigned long)irqstat &amp; 0x3FF;</div><div class="line"></div><div class="line">    /* here we use gic id checking, not include gpio pin irq */</div><div class="line">    if (nintid &lt; NR_GIC_IRQS)</div><div class="line">        g_irq_handler[nintid].m_func((void *)(unsigned long)nintid);</div><div class="line"></div><div class="line">    asm volatile("msr " __stringify(ICC_EOIR1_EL1) ", %0" : : "r" ((unsigned long long)nintid));</div><div class="line">    asm volatile("msr " __stringify(ICC_DIR_EL1) ", %0" : : "r" ((unsigned long long)nintid));</div><div class="line">    isb();</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">static void board_timer_isr(void)</div><div class="line">&#123;</div><div class="line">    static unsigned char led_flag = 0;</div><div class="line"></div><div class="line">    TIMER3-&gt;INTSTATUS = 0x01;  //clrear interrupt</div><div class="line"></div><div class="line">    if(led_flag == 0)</div><div class="line">        led_mode(0);</div><div class="line">    else</div><div class="line">        led_mode(1);</div><div class="line"></div><div class="line">    led_flag = !led_flag;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void test_timer_irq(void)</div><div class="line">&#123;</div><div class="line">    /* enable exceptions */</div><div class="line">    enable_interrupts();</div><div class="line"></div><div class="line">    /* timer set */</div><div class="line">    TIMER3-&gt;CURRENT_VALUE0 = 0x0FFFFFF;</div><div class="line">    TIMER3-&gt;LOAD_COUNT0    = 0x0FFFFFF;</div><div class="line">    TIMER3-&gt;CONTROL_REG    = 0x05; //auto reload &amp; enable the timer</div><div class="line"></div><div class="line">    /* register and enable */</div><div class="line">    irq_install_handler(TIMER_INTR3, (interrupt_handler_t *)board_timer_isr, (void *)(0));</div><div class="line">    irq_handler_enable(TIMER_INTR3);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">static void board_gpio_isr(void)</div><div class="line">&#123;</div><div class="line">    if (GPIO4-&gt;INT_STATUS &amp; (0x01 &lt;&lt; (3 * 8 + 5))) //Interrupt status</div><div class="line">    &#123;</div><div class="line">        GPIO4-&gt;PORTA_EOI |= (0x01 &lt;&lt; (3 * 8 + 5)); //Clear interrupt</div><div class="line">        //if ((GPIO4-&gt;EXT_PORTA &amp; (0x01&lt;&lt;(3*8+5))) == 0)</div><div class="line">        led_mode(2);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">//GPIO4_D5</div><div class="line">void test_gpio_irq(void)</div><div class="line">&#123;</div><div class="line">    /* enable exceptions */</div><div class="line">    enable_interrupts();</div><div class="line"></div><div class="line">    /* GPIO set */</div><div class="line">    GPIO4-&gt;SWPORTA_DDR   &amp;= ~(0x01 &lt;&lt; (3 * 8 + 5)); //should be Input</div><div class="line">    GPIO4-&gt;INTEN         |=  (0x01 &lt;&lt; (3 * 8 + 5)); //Interrupt enable</div><div class="line">    GPIO4-&gt;INTMASK       &amp;= ~(0x01 &lt;&lt; (3 * 8 + 5)); //Interrupt bits are unmasked</div><div class="line">    GPIO4-&gt;INTTYPE_LEVEL |=  (0x01 &lt;&lt; (3 * 8 + 5)); //Edge-sensitive</div><div class="line">    GPIO4-&gt;INT_POLARITY  &amp;= ~(0x01 &lt;&lt; (3 * 8 + 5)); //Active-low</div><div class="line">    GPIO4-&gt;DEBOUNCE      |=  (0x01 &lt;&lt; (3 * 8 + 5)); //Enable debounce</div><div class="line"></div><div class="line">    /* register and enable */</div><div class="line">    irq_install_handler(GPIO4_INTR, (interrupt_handler_t *)board_gpio_isr, (void *)(0));</div><div class="line">    irq_handler_enable(GPIO4_INTR);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在主函数里对重定位的验证可以尝试定义一个全局变量检查是否正常，对清BSS段的验证可以尝试定义一个未初始化的全局变量检查是否正常，对中断的验证可以测试定时器中断是否正常，GPIO中断通过外接按键检测是否正常：<br><figure class="highlight c"><figcaption><span>[main.c]</span><a href="https://github.com/hceng/RK3399/tree/master/hardware/3_irq/code/main.c" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"led.h"</span></span></div><div class="line"></div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> test_a = <span class="number">0x1234</span>; <span class="comment">//for test relocate</span></div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> test_b;          <span class="comment">//for test clean bss</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    led_mode(<span class="number">1</span>); <span class="comment">//YELLOW LED</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> ((<span class="number">0x1234</span> != test_a) || (<span class="number">0</span> != test_b))</div><div class="line">    &#123;</div><div class="line">        led_mode(<span class="number">3</span>);</div><div class="line">        led_delay();</div><div class="line"></div><div class="line">        led_mode(<span class="number">0</span>);</div><div class="line">        led_delay();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    test_timer_irq();</div><div class="line">    test_gpio_irq();</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><ul><li>测试效果：<br>上电后，黄色LED1间隔闪烁；按下按键，蓝色LED2亮，随后熄灭。</li></ul><h1 id="5-串口"><a href="#5-串口" class="headerlink" title="5.串口"></a>5.串口</h1><p>串口的移植和前面<a href="https://hceng.cn/2018/03/28/iMX6ULL%E4%B8%8A%E6%89%8B%E4%BD%93%E9%AA%8C/#1-%E5%87%86%E5%A4%87%E8%B5%84%E6%96%99" target="_blank" rel="external">iMX6ULL上手体验</a>里的移植，思路是差不多，先找到U-Boot的uart相关代码，移植好后为printf提供对应函数即可。</p><h2 id="5-1-uart代码"><a href="#5-1-uart代码" class="headerlink" title="5.1 uart代码"></a>5.1 uart代码</h2><p>U-Boot里uart相关代码路径：<a href="https://github.com/hceng/RK3399/blob/master/hardware/2_u-boot_source/drivers/serial/serial_rk.c" target="_blank" rel="external"><code>u-boot/drivers/serial/serial_rk.c</code></a><br>可以看到<code>rk_uart_init()</code>是串口初始化，里面依次调用了引脚复用<code>rk_uart_iomux()</code>、串口复位<code>rk_uart_reset()</code>、设置IRDA SIR功能<code>rk_uart_set_iop()</code>、设置串口属性<code>rk_uart_set_lcr()</code>、设置波特率<code>rk_uart_set_baudrate()</code>、设置串口FIFO<code>rk_uart_set_fifo()</code>。<br>初始化完成后，就可以收发数据了，这里只实现了发生数据<code>rk_uart_sendbyte()</code>。<br>移植的过程还是比较简单，寄存器比较少，注意在设置波特率函数里，需要用到除法，为了简便，可先算出来直接赋值。这里的波特率为最大的1.5M。</p><figure class="highlight c"><figcaption><span>[uart.c]</span><a href="https://github.com/hceng/RK3399/tree/master/hardware/4_uart_printf/code/uart.c" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"grf.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"uart.h"</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rk_uart_iomux</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    GRF_GPIO4B_IOMUX = (<span class="number">3</span> &lt;&lt; <span class="number">18</span>) | (<span class="number">3</span> &lt;&lt; <span class="number">16</span>) | (<span class="number">2</span> &lt;&lt; <span class="number">2</span>) | (<span class="number">2</span> &lt;&lt; <span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rk_uart_reset</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="comment">/* UART reset, rx fifo &amp; tx fifo reset */</span></div><div class="line">    UART2_SRR = (<span class="number">0x01</span> &lt;&lt; <span class="number">1</span>) | (<span class="number">0x01</span> &lt;&lt; <span class="number">1</span>) | (<span class="number">0x01</span> &lt;&lt; <span class="number">2</span>);</div><div class="line">    led_mode(<span class="number">2</span>);</div><div class="line">    <span class="comment">/* interrupt disable */</span></div><div class="line">    UART2_IER = <span class="number">0x00</span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rk_uart_set_iop</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    UART2_MCR = <span class="number">0x00</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span>  <span class="keyword">void</span> <span class="title">rk_uart_set_lcr</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    UART2_LCR &amp;= ~(<span class="number">0x03</span> &lt;&lt; <span class="number">0</span>);</div><div class="line">    UART2_LCR |=  (<span class="number">0x03</span> &lt;&lt; <span class="number">0</span>); <span class="comment">//8bits</span></div><div class="line"></div><div class="line">    UART2_LCR &amp;= ~(<span class="number">0x01</span> &lt;&lt; <span class="number">3</span>); <span class="comment">//parity disabled</span></div><div class="line"></div><div class="line">    UART2_LCR &amp;= ~(<span class="number">0x01</span> &lt;&lt; <span class="number">2</span>); <span class="comment">//1 stop bit</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rk_uart_set_baudrate</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> rate;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> baudrate = <span class="number">1500000</span>;</div><div class="line"></div><div class="line">    <span class="comment">/* uart rate is div for 24M input clock */</span></div><div class="line">    <span class="comment">//rate = 24000000 / 16 / baudrate;</span></div><div class="line">    rate = <span class="number">1</span>;</div><div class="line"></div><div class="line">    UART2_LCR |= (<span class="number">0x01</span> &lt;&lt; <span class="number">7</span>);</div><div class="line"></div><div class="line">    UART2_DLL = (rate &amp; <span class="number">0xFF</span>);</div><div class="line">    UART2_DLH = ((rate &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>);</div><div class="line"></div><div class="line">    UART2_LCR &amp;= ~(<span class="number">0x01</span> &lt;&lt; <span class="number">7</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rk_uart_set_fifo</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">/* shadow FIFO enable */</span></div><div class="line">    UART2_SFE = <span class="number">0x01</span>;</div><div class="line">    <span class="comment">/* fifo 2 less than */</span></div><div class="line">    UART2_SRT = <span class="number">0x03</span>;</div><div class="line">    <span class="comment">/* 2 char in tx fifo */</span></div><div class="line">    UART2_STET = <span class="number">0x01</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">uart_init</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">    rk_uart_iomux();</div><div class="line">    rk_uart_reset();</div><div class="line"></div><div class="line">    rk_uart_set_iop();</div><div class="line">    rk_uart_set_lcr();</div><div class="line"></div><div class="line">    rk_uart_set_baudrate();</div><div class="line"></div><div class="line">    rk_uart_set_fifo();</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">rk_uart_sendbyte</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> byte)</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="keyword">while</span>((UART2_USR &amp; (<span class="number">0x01</span> &lt;&lt; <span class="number">1</span>)) == <span class="number">0</span>);</div><div class="line"></div><div class="line">    UART2_THR = byte;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">rk_uart_sendstring</span><span class="params">(<span class="keyword">char</span> *ptr)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span>(*ptr)</div><div class="line">        rk_uart_sendbyte(*ptr++);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/* 0xABCDEF12 */</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">rk_uart_sendhex</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> val)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> arr[<span class="number">8</span>];</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</div><div class="line">    &#123;</div><div class="line">        arr[i] = val &amp; <span class="number">0xf</span>;</div><div class="line">        val &gt;&gt;= <span class="number">4</span>;   <span class="comment">/* arr[0] = 2, arr[1] = 1, arr[2] = 0xF */</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/* printf */</span></div><div class="line">    rk_uart_sendstring(<span class="string">"0x"</span>);</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">7</span>; i &gt;= <span class="number">0</span>; i--)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (arr[i] &gt;= <span class="number">0</span> &amp;&amp; arr[i] &lt;= <span class="number">9</span>)</div><div class="line">            rk_uart_sendbyte(arr[i] + <span class="string">'0'</span>);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(arr[i] &gt;= <span class="number">0xA</span> &amp;&amp; arr[i] &lt;= <span class="number">0xF</span>)</div><div class="line">            rk_uart_sendbyte(arr[i] - <span class="number">0xA</span> + <span class="string">'A'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="5-2-printf移植"><a href="#5-2-printf移植" class="headerlink" title="5.2 printf移植"></a>5.2 printf移植</h2><p>printf库移植的方法：<br>1.先在<code>printf.h</code>里，用<code>__out_putchar</code>替换成自己实现的字节发送函数<code>rk_uart_sendbyte</code>；<br>2.然后在<code>printf.c</code>里，为其提供宏<code>va_start</code>、<code>va_arg</code>、<code>va_end</code>、<code>_INTSIZEOF</code>和<code>va_list</code>；</p><p>在第二步里，之前ARMv7的可以直接使用，现在使用ARMv8，实测发现打印有问题，找到交叉编译工具里对应宏的位置，直接加入头文件<code>stdarg.h</code>即可。<br><figure class="highlight c"><figcaption><span>[printf.c]</span><a href="https://github.com/hceng/RK3399/tree/master/hardware/4_uart_printf/code/printf.c" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span>  <span class="meta-string">"printf.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span>  <span class="meta-string">&lt;stdarg.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">/************************************************************************************************/</span></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">char</span>   *va_list;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> _INTSIZEOF(n)   ( (sizeof(n) + sizeof(int) - 1) &amp; ~(sizeof(int) - 1) )</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> va_start(ap,v)  ( ap = (va_list)&amp;v + _INTSIZEOF(v) )</span></div><div class="line"><span class="comment">//#define va_arg(ap,t)    ( *(t *)((ap += _INTSIZEOF(t)) - _INTSIZEOF(t)) )</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> va_arg(ap,t)    ( *(t *)( ap=ap + _INTSIZEOF(t), ap- _INTSIZEOF(t)) )</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> va_end(ap)      ( ap = (va_list)0 )</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="comment">/************************************************************************************************/</span></div><div class="line"></div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> hex_tab[] = &#123;<span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, \</div><div class="line">                           <span class="string">'8'</span>, <span class="string">'9'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span></div><div class="line">                          &#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">outc</span><span class="params">(<span class="keyword">int</span> c)</span></span></div><div class="line">&#123;</div><div class="line">    __out_putchar(c);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">outs</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span> (*s != <span class="string">'\0'</span>)</div><div class="line">        __out_putchar(*s++);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">out_num</span><span class="params">(<span class="keyword">long</span> n, <span class="keyword">int</span> base, <span class="keyword">char</span> lead, <span class="keyword">int</span> maxwidth)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> m = <span class="number">0</span>;</div><div class="line">    <span class="keyword">char</span> buf[MAX_NUMBER_BYTES], *s = buf + <span class="keyword">sizeof</span>(buf);</div><div class="line">    <span class="keyword">int</span> count = <span class="number">0</span>, i = <span class="number">0</span>;</div><div class="line"></div><div class="line">    *--s = <span class="string">'\0'</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (n &lt; <span class="number">0</span>)</div><div class="line">        m = -n;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        m = n;</div><div class="line"></div><div class="line">    <span class="keyword">do</span></div><div class="line">    &#123;</div><div class="line">        *--s = hex_tab[m % base];</div><div class="line">        count++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span> ((m /= base) != <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>( maxwidth &amp;&amp; count &lt; maxwidth)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span> (i = maxwidth - count; i; i--)</div><div class="line">            *--s = lead;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (n &lt; <span class="number">0</span>)</div><div class="line">        *--s = <span class="string">'-'</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> outs(s);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/*ref: int vprintf(const char *format, va_list ap); */</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">my_vprintf</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *fmt, va_list ap)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">char</span> lead = <span class="string">' '</span>;</div><div class="line">    <span class="keyword">int</span>  maxwidth = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(; *fmt != <span class="string">'\0'</span>; fmt++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (*fmt != <span class="string">'%'</span>)</div><div class="line">        &#123;</div><div class="line">            outc(*fmt);</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        lead = <span class="string">' '</span>;</div><div class="line">        maxwidth = <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="comment">//format : %08d, %8d,%d,%u,%x,%f,%c,%s</span></div><div class="line">        fmt++;</div><div class="line">        <span class="keyword">if</span>(*fmt == <span class="string">'0'</span>)</div><div class="line">        &#123;</div><div class="line">            lead = <span class="string">'0'</span>;</div><div class="line">            fmt++;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">while</span>(*fmt &gt;= <span class="string">'0'</span> &amp;&amp; *fmt &lt;= <span class="string">'9'</span>)</div><div class="line">        &#123;</div><div class="line">            maxwidth *= <span class="number">10</span>;</div><div class="line">            maxwidth += (*fmt - <span class="string">'0'</span>);</div><div class="line">            fmt++;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">switch</span> (*fmt)</div><div class="line">        &#123;</div><div class="line">        <span class="keyword">case</span> <span class="string">'d'</span>:</div><div class="line">            out_num(va_arg(ap, <span class="keyword">int</span>),          <span class="number">10</span>, lead, maxwidth);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">'o'</span>:</div><div class="line">            out_num(va_arg(ap, <span class="keyword">unsigned</span> <span class="keyword">int</span>),  <span class="number">8</span>, lead, maxwidth);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">'u'</span>:</div><div class="line">            out_num(va_arg(ap, <span class="keyword">unsigned</span> <span class="keyword">int</span>), <span class="number">10</span>, lead, maxwidth);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">'x'</span>:</div><div class="line">            out_num(va_arg(ap, <span class="keyword">unsigned</span> <span class="keyword">int</span>), <span class="number">16</span>, lead, maxwidth);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">'c'</span>:</div><div class="line">            outc(va_arg(ap, <span class="keyword">int</span>   ));</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">'s'</span>:</div><div class="line">            outs(va_arg(ap, <span class="keyword">char</span> *));</div><div class="line">            <span class="keyword">break</span>;</div><div class="line"></div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            outc(*fmt);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//ref: int printf(const char *format, ...);</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">printf</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *fmt, ...)</span></span></div><div class="line">&#123;</div><div class="line">    va_list ap;</div><div class="line"></div><div class="line">    va_start(ap, fmt);</div><div class="line">    my_vprintf(fmt, ap);</div><div class="line">    va_end(ap);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">printf_test</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"=========This is printf test=========\n"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"test char            = %c,%c\n"</span>, <span class="string">'H'</span>, <span class="string">'c'</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"test decimal1 number = %d\n"</span>,     <span class="number">123456</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"test decimal2 number = %d\n"</span>,     <span class="number">-123456</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"test hex1    number  = 0x%x\n"</span>,   <span class="number">0x123456</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"test hex2    number  = 0x%08x\n"</span>, <span class="number">0x123456</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"test string          = %s\n"</span>,    <span class="string">"www.hceng.cn"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">puts</span><span class="params">(<span class="keyword">char</span> *ptr)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span>(*ptr)</div><div class="line">        rk_uart_sendbyte(*ptr++);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><ul><li>测试效果：</li></ul><div align="center"><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180816/6.png"></div><h1 id="6-定时器"><a href="#6-定时器" class="headerlink" title="6.定时器"></a>6.定时器</h1><p>RK3399有12个通用定时器(timer0~timer11)、12个安全定时器(stimer0~stimer11)、2个PMU定时器(pmutimer0~pmutimer1)。<br>定时器部分比较简单，很多东西都是固定的，比如定时器的时钟来源都是24MHz的晶振，也就是定时器周期为1/24us。此外定时器的计数只能由小向大增加。<br>定时器支持两种模式:自由运行模式和用户自定义模式，其实就是前者计数达到设定值后，自动装载计数循环，后者需要手动重新装载，实现循环。</p><h2 id="6-1-编程思路"><a href="#6-1-编程思路" class="headerlink" title="6.1 编程思路"></a>6.1 编程思路</h2><p>这里希望通过用定时器实现一个比较准确的延时函数，包括us、ms、s的延时。<br>1.首先设置<code>CONTROLREG</code>，关闭定时器、设置为用户定义计数模式(用户确定循环次数)、中断屏蔽(不需要中断处理函数)；<br>2.向<code>LOAD_COUNT0</code>、<code>LOAD_COUNT1</code>放入计数结束值，向<code>LOAD_COUNT2</code>、<code>LOAD_COUNT3</code>放入计数初始值，默认为0；<br>3.设置<code>CONTROLREG</code>，开启定时器，计数器开始运行；<br>4.读取中断状态<code>INTSTATUS</code>判断时候完成计数，清中断，本次计数完成；</p><h2 id="6-2-实现代码"><a href="#6-2-实现代码" class="headerlink" title="6.2 实现代码"></a>6.2 实现代码</h2><figure class="highlight c"><figcaption><span>[timer.c]</span><a href="https://github.com/hceng/RK3399/tree/master/hardware/5_timer_delay/code/timer.c" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"timer.h"</span></span></div><div class="line"></div><div class="line"><span class="comment">//timer4 is used for delay.</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay_us</span><span class="params">(<span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span>  i)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span> count_value = <span class="number">24</span> * i;  <span class="comment">//24MHz; period=(1/24000000)*1000000=1/24us</span></div><div class="line"></div><div class="line">    TIMER4-&gt;CONTROL_REG &amp;= ~(<span class="number">0x01</span> &lt;&lt; <span class="number">0</span>);     <span class="comment">//Timer disable</span></div><div class="line">    TIMER4-&gt;CONTROL_REG |=  (<span class="number">0x01</span> &lt;&lt; <span class="number">1</span>);     <span class="comment">//Timer mode:user-defined count mode</span></div><div class="line">    TIMER4-&gt;CONTROL_REG &amp;= ~(<span class="number">0x01</span> &lt;&lt; <span class="number">2</span>);     <span class="comment">//Timer interrupt mask</span></div><div class="line"></div><div class="line">    TIMER4-&gt;LOAD_COUNT0 = count_value &amp; <span class="number">0xFFFFFFFF</span>; <span class="comment">//load_count_low bits</span></div><div class="line">    TIMER4-&gt;LOAD_COUNT1 = (count_value &gt;&gt; <span class="number">32</span>);      <span class="comment">//load_count_high bits</span></div><div class="line"></div><div class="line">    TIMER4-&gt;CONTROL_REG |=  (<span class="number">0x01</span> &lt;&lt; <span class="number">0</span>);     <span class="comment">//Timer enable</span></div><div class="line"></div><div class="line">    <span class="keyword">while</span>(!(TIMER4-&gt;INTSTATUS &amp; (<span class="number">0x01</span> &lt;&lt; <span class="number">0</span>)));</div><div class="line">    TIMER4-&gt;INTSTATUS |= (<span class="number">0x01</span> &lt;&lt; <span class="number">0</span>);        <span class="comment">//Write 1 clear the interrupt</span></div><div class="line"></div><div class="line">    TIMER4-&gt;CONTROL_REG &amp;= ~(<span class="number">0x01</span> &lt;&lt; <span class="number">0</span>);     <span class="comment">//Timer enable disable</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay_ms</span><span class="params">(<span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span> i)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span>(; i &gt; <span class="number">0</span>; i--)</div><div class="line">        delay_us(<span class="number">1000</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay_s</span><span class="params">(<span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span> i)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span>(; i &gt; <span class="number">0</span>; i--)</div><div class="line">        delay_ms(<span class="number">1000</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="7-ADC"><a href="#7-ADC" class="headerlink" title="7.ADC"></a>7.ADC</h1><p>RK3399有两类ADC：</p><ul><li>TS-ADC(Temperature Sensor):<br>　　内嵌的两路ADC，一路检测CPU温度，一路检测GPU温度；<br>　　ADC精度10bit，时钟频率必须低于800KHZ;<br>　　测量范围为-40℃~125℃，精度只有5℃；<br>　　支持用户自定义和自动模式(前者用户自己控制，后者控制器自动查询)；</li><li>SAR-ADC(Successive Approximation Register):<br>　　六路ADC，精度10bit；<br>　　时钟频率必须小于13MHZ;</li></ul><h2 id="7-1-编程思路"><a href="#7-1-编程思路" class="headerlink" title="7.1 编程思路"></a>7.1 编程思路</h2><p>这里希望通过用SAR-ADC获取外部ADC值，通过TS-ADC获取内部CPU/GPU温度。</p><ul><li><p>SAR-ADC<br>1.首先设置<code>SARADC_CTRL[3]</code>，关闭ADC；<br>2.设置<code>SARADC_CTRL[2:0]</code>，选择ADC通道；<br>3.设置<code>SARADC_CTRL[3]</code>，启动ADC转换；<br>4.读取ADC状态<code>SARADC_STAS</code>判断是否转换完成；<br>5.读取ADC数据<code>SARADC_DATA</code>；</p></li><li><p>TS-ADC(User-Define Mode)<br>1.首先设置<code>TSADC_AUTO_CON</code>为用户定义模式、ADC值与温度值负关系；<br>2.设置<code>TSADC_USER_CON</code>选择通道、复位、转换开始；<br>3.设置<code>TSADC_INT_EN</code>，使能ADC完成中断；<br>4.读取ADC中断状态<code>TSADC_INT_PD</code>判断是否转换完成，并清理；<br>5.根据选择的通道，从对应的<code>TSADC_DATA0</code>或<code>TSADC_DATA1</code>读取ADC数据；</p></li></ul><p>这里的TS-ADC得到的数值和温度并不是完全的线性关系，根据提供的表格，可以计算出一个大致的线性关系：<code>y = 0.5823x - 273.62</code></p><h2 id="7-2-实现代码"><a href="#7-2-实现代码" class="headerlink" title="7.2 实现代码"></a>7.2 实现代码</h2><figure class="highlight c"><figcaption><span>[timer.c]</span><a href="https://github.com/hceng/RK3399/tree/master/hardware/6_adc/code/adc.c" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"uart.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"printf.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"timer.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"int.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"adc.h"</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">get_saradc_val</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> channel)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> val;</div><div class="line"></div><div class="line">    <span class="comment">//delay between power up and start command</span></div><div class="line">    <span class="comment">//SARADC_DLY_PU_SOC = 8; //DLY_PU_SOC + 2</span></div><div class="line"></div><div class="line">    SARADC_CTRL &amp;= ~(<span class="number">0x01</span> &lt;&lt; <span class="number">3</span>); <span class="comment">//ADC power down control bit</span></div><div class="line"></div><div class="line">    SARADC_CTRL |= (channel &lt;&lt; <span class="number">0</span>); <span class="comment">//ADC input source selection</span></div><div class="line"></div><div class="line">    <span class="comment">//SARADC_CTRL |= (0x01&lt;&lt;3); //Interrupt enable.</span></div><div class="line"></div><div class="line">    SARADC_CTRL |=  (<span class="number">0x01</span> &lt;&lt; <span class="number">3</span>); <span class="comment">//ADC power up and reset</span></div><div class="line">    delay_us(<span class="number">100</span>); <span class="comment">//不能立即就判断状态</span></div><div class="line"></div><div class="line">    <span class="keyword">while</span>(SARADC_STAS &amp; <span class="number">0x01</span>); <span class="comment">//The status register of A/D Converter 1’b0: ADC stop</span></div><div class="line"></div><div class="line">    val = SARADC_DATA &amp; <span class="number">0x3FF</span>; <span class="comment">//A/D value of the last conversion (DOUT[9:0]).</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> val;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//channel0: CPU temperature</span></div><div class="line"><span class="comment">//channel1: GPU temperature</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_tsadc_temp</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> channel)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> val;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ((channel != <span class="number">0</span>) &amp;&amp; (channel != <span class="number">1</span>))</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"get_tsadc_temp set channel error.\n"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">-255</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//User-Define Mode</span></div><div class="line">    TSADC_AUTO_CON &amp;= ~(<span class="number">0x01</span> &lt;&lt; <span class="number">0</span>);     <span class="comment">//TSADC controller works at user-define mode</span></div><div class="line">    TSADC_AUTO_CON |=  (<span class="number">0x01</span> &lt;&lt; <span class="number">1</span>);     <span class="comment">//RK3399 is negative temprature coefficient</span></div><div class="line"></div><div class="line">    TSADC_USER_CON &amp;= ~(<span class="number">0x07</span> &lt;&lt; <span class="number">0</span>);     <span class="comment">//clear</span></div><div class="line">    TSADC_USER_CON |=  (channel &lt;&lt; <span class="number">0</span>);  <span class="comment">//PD_DVDD and ADC input source selection</span></div><div class="line">    TSADC_USER_CON |=  (<span class="number">0x01</span> &lt;&lt; <span class="number">3</span>);     <span class="comment">//CHSEL_DVDD and ADC power up and reset</span></div><div class="line"></div><div class="line">    TSADC_USER_CON |=  (<span class="number">0x01</span> &lt;&lt; <span class="number">4</span>);     <span class="comment">//the start_of_conversion will be controlled by TSADC_USER_CON[5].</span></div><div class="line">    TSADC_USER_CON |=  (<span class="number">0x01</span> &lt;&lt; <span class="number">5</span>);     <span class="comment">//start conversion</span></div><div class="line"></div><div class="line">    TSADC_INT_EN   |=  (<span class="number">0x01</span> &lt;&lt; <span class="number">16</span>);    <span class="comment">//eoc_interrupt enable in user defined mode</span></div><div class="line">    <span class="keyword">while</span>(!(TSADC_INT_PD &amp; (<span class="number">0x01</span> &lt;&lt; <span class="number">16</span>))); <span class="comment">//wait ADC conversion stop</span></div><div class="line">    TSADC_INT_PD &amp;= ~(<span class="number">0x01</span> &lt;&lt; <span class="number">16</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="number">0</span> == channel)</div><div class="line">        val = (<span class="keyword">int</span>)(<span class="number">0.5823</span> * (<span class="keyword">float</span>)(TSADC_DATA0) - <span class="number">273.62</span>); <span class="comment">//y = 0.5823x - 273.62</span></div><div class="line">    <span class="keyword">else</span></div><div class="line">        val = (<span class="keyword">int</span>)(<span class="number">0.5823</span> * (<span class="keyword">float</span>)(TSADC_DATA1) - <span class="number">273.62</span>); <span class="comment">//y = 0.5823x - 273.62</span></div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"get_tsadc_temp = %d \n"</span>, val);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> val;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>测试效果：</li></ul><div align="center"><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180816/7.png"></div><h1 id="8-I2C"><a href="#8-I2C" class="headerlink" title="8.I2C"></a>8.I2C</h1><p>RK3399拥有8个I2C，其功能和其它SOC的I2C差不多，这里通过I2C读写EEPROM，具体的操作和前面博客<a href="https://hceng.cn/2017/08/28/AM437x%E2%80%94%E2%80%94I2C%E8%A3%B8%E6%9C%BA/" target="_blank" rel="external">AM437x——I2C裸机</a>差不多，也实现了两个版本：GPIO模拟和寄存器控制，这里主要介绍寄存器控制版本。</p><h2 id="8-1-编程思路"><a href="#8-1-编程思路" class="headerlink" title="8.1 编程思路"></a>8.1 编程思路</h2><p>0.首先是I2C引脚复用、设置SCK时钟、注册/使能中断(非必须)等；</p><ul><li><p>写EEPROM<br>1.清空控制寄存器<code>CON</code>并使能；<br>2.设置I2C模式<code>transmit only</code>；<br>3.设置<code>CON</code>启动开始信号，并读取<code>IPD</code>等待开始信号发送完成；<br>4.设置<code>TXDATA0</code>实现从机地址、写地址、数据的设定，设置传输数据个数，等待传输完成；<br>5.设置<code>CON</code>发送结束信号，并读取<code>IPD</code>等待结束信号发送完成；</p></li><li><p>读EEPROM<br>1.清空控制寄存器<code>CON</code>并使能；<br>2.设置I2C模式<code>transmit only + restart + transmit address + receive only</code>；<br>3.设置<code>MRXADDR</code>设定从机地址，设置<code>MRXRADDR</code>设定从机寄存器地址；<br>4.设置<code>TXDATA0</code>实现从机地址、写地址、数据的设定，设置传输数据个数，等待传输完成；<br>5.设置<code>MRXCNT</code>值接收一个数据，读取<code>IPD</code>等待接收数据完成；<br>6.设置<code>CON</code>发送结束信号，并读取<code>IPD</code>等待结束信号发送完成；<br>7.读取<code>RXDATA0</code>获得数据；</p></li></ul><h2 id="8-2-实现代码"><a href="#8-2-实现代码" class="headerlink" title="8.2 实现代码"></a>8.2 实现代码</h2><figure class="highlight c"><figcaption><span>[i2c.c]</span><a href="https://github.com/hceng/RK3399/tree/master/hardware/7_I2C/I2C控制器/code/i2c.c" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"i2c.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"uart.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"printf.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"timer.h"</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//GPIO1_B3/I2C4_SDA</span></div><div class="line"><span class="comment">//GPIO1_B4/I2C4_SCL</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">i2c_init</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">//1.GPIO1_B3/I2C4_SDA、GPIO1_B4/I2C4_SCL设置为功能引脚,注意高位要先置为1才能写;</span></div><div class="line">    PMUGRF_GPIO1B_IOMUX |= ((<span class="number">0xFFFF0000</span> &lt;&lt; <span class="number">0</span>) | (<span class="number">0x01</span> &lt;&lt; <span class="number">6</span>) | (<span class="number">0x01</span> &lt;&lt; <span class="number">8</span>));</div><div class="line"></div><div class="line">    <span class="comment">//2.设置SCK时钟</span></div><div class="line">    <span class="comment">//3.注册/使能中断</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">eeprom_write</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> addr, <span class="keyword">unsigned</span> <span class="keyword">char</span> data)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">//0.清空控制寄存器并使能</span></div><div class="line">    I2C4-&gt;CON &amp;= ~(<span class="number">0x7F</span> &lt;&lt; <span class="number">0</span>);</div><div class="line">    I2C4-&gt;IPD &amp;= ~(<span class="number">0x7F</span> &lt;&lt; <span class="number">0</span>);</div><div class="line">    I2C4-&gt;CON |= <span class="number">0x01</span> &lt;&lt; <span class="number">0</span>; <span class="comment">//使能</span></div><div class="line"></div><div class="line">    <span class="comment">//1.设置模式:transmit only</span></div><div class="line">    I2C4-&gt;CON &amp;= ~(<span class="number">0x03</span> &lt;&lt; <span class="number">1</span>);</div><div class="line"></div><div class="line">    <span class="comment">//2.开始信号</span></div><div class="line">    I2C4-&gt;CON |= <span class="number">0x01</span> &lt;&lt; <span class="number">3</span>; <span class="comment">//开始信号</span></div><div class="line">    <span class="keyword">while</span>(!(I2C4-&gt;IPD &amp; (<span class="number">0x01</span> &lt;&lt; <span class="number">4</span>))); <span class="comment">//等待开始信号发完</span></div><div class="line">    I2C4-&gt;IPD |=  (<span class="number">0x01</span> &lt;&lt; <span class="number">4</span>); <span class="comment">//清开始信号标志</span></div><div class="line"></div><div class="line">    <span class="comment">//3.I2C从机地址+写地址+数据 (3个字节)</span></div><div class="line">    I2C4-&gt;TXDATA0 = <span class="number">0xA0</span> | (addr &lt;&lt; <span class="number">8</span>) | (data &lt;&lt; <span class="number">16</span>);</div><div class="line">    I2C4-&gt;MTXCNT = <span class="number">3</span>;</div><div class="line">    <span class="keyword">while</span>(!(I2C4-&gt;IPD &amp; (<span class="number">0x01</span> &lt;&lt; <span class="number">2</span>))); <span class="comment">//MTXCNT data transmit finished interrupt pending bit</span></div><div class="line">    I2C4-&gt;IPD |=  (<span class="number">0x01</span> &lt;&lt; <span class="number">2</span>);</div><div class="line"></div><div class="line">    <span class="comment">//4.结束信号</span></div><div class="line">    I2C4-&gt;CON &amp;= ~(<span class="number">0x01</span> &lt;&lt; <span class="number">3</span>); <span class="comment">//手动清除start(注意:前面的开始信号控制位理论会自动清0,实测没有,这里必须手动清,否则是开始信号)</span></div><div class="line">    I2C4-&gt;CON |= (<span class="number">0x01</span> &lt;&lt; <span class="number">4</span>);</div><div class="line">    <span class="keyword">while</span>(!(I2C4-&gt;IPD &amp; (<span class="number">0x01</span> &lt;&lt; <span class="number">5</span>)));</div><div class="line">    I2C4-&gt;IPD |=  (<span class="number">0x01</span> &lt;&lt; <span class="number">5</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//自动发送从机地址和从机寄存器地址</span></div><div class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">char</span> <span class="title">eeprom_read</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> addr)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> data = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="comment">//0.清空控制寄存器并使能</span></div><div class="line">    I2C4-&gt;CON &amp;= ~(<span class="number">0x7F</span> &lt;&lt; <span class="number">0</span>);</div><div class="line">    I2C4-&gt;IPD &amp;= ~(<span class="number">0x7F</span> &lt;&lt; <span class="number">0</span>);</div><div class="line">    I2C4-&gt;CON |= <span class="number">0x01</span> &lt;&lt; <span class="number">0</span>; <span class="comment">//使能</span></div><div class="line"></div><div class="line">    <span class="comment">//必须收到ack,否则停止传输(非必需)</span></div><div class="line">    <span class="comment">//I2C4-&gt;CON |=  (0x01&lt;&lt;6); //stop transaction when NAK handshake is received</span></div><div class="line"></div><div class="line">    <span class="comment">//1.设置模式:transmit address (device + register address) --&gt; restart --&gt; transmit address –&gt; receive only</span></div><div class="line">    I2C4-&gt;CON |=  (<span class="number">0x01</span> &lt;&lt; <span class="number">1</span>); <span class="comment">//自动发送从机地址和从机寄存器地址</span></div><div class="line"></div><div class="line">    <span class="comment">//2.从机地址</span></div><div class="line">    I2C4-&gt;MRXADDR = (<span class="number">0xA0</span> | (<span class="number">1</span> &lt;&lt; <span class="number">24</span>));</div><div class="line"></div><div class="line">    <span class="comment">//3.从机寄存器地址</span></div><div class="line">    I2C4-&gt;MRXRADDR = (addr | (<span class="number">1</span> &lt;&lt; <span class="number">24</span>)); <span class="comment">//地址只有6位,超过6位怎么办?</span></div><div class="line"></div><div class="line">    <span class="comment">//4.开始信号</span></div><div class="line">    I2C4-&gt;CON |=  (<span class="number">0x01</span> &lt;&lt; <span class="number">3</span>);</div><div class="line">    <span class="keyword">while</span>(!(I2C4-&gt;IPD &amp; (<span class="number">0x01</span> &lt;&lt; <span class="number">4</span>)));</div><div class="line">    I2C4-&gt;IPD |=  (<span class="number">0x01</span> &lt;&lt; <span class="number">4</span>);</div><div class="line"></div><div class="line">    <span class="comment">//5.接收一个数据且不响应</span></div><div class="line">    I2C4-&gt;CON |= (<span class="number">0x01</span> &lt;&lt; <span class="number">5</span>);</div><div class="line">    I2C4-&gt;MRXCNT = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(!(I2C4-&gt;IPD &amp; (<span class="number">0x01</span> &lt;&lt; <span class="number">3</span>)));</div><div class="line">    I2C4-&gt;IPD |=  (<span class="number">0x01</span> &lt;&lt; <span class="number">3</span>);</div><div class="line"></div><div class="line">    <span class="comment">//6.结束信号</span></div><div class="line">    I2C4-&gt;CON &amp;= ~(<span class="number">0x01</span> &lt;&lt; <span class="number">3</span>); <span class="comment">//手动清除start</span></div><div class="line">    I2C4-&gt;CON |= (<span class="number">0x01</span> &lt;&lt; <span class="number">4</span>);</div><div class="line">    <span class="keyword">while</span>(!(I2C4-&gt;IPD &amp; (<span class="number">0x01</span> &lt;&lt; <span class="number">5</span>)));</div><div class="line">    I2C4-&gt;IPD |=  (<span class="number">0x01</span> &lt;&lt; <span class="number">5</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> (I2C4-&gt;RXDATA0 &amp; <span class="number">0xFF</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>主函数里先向EEPROM写数据，再读出数据并打印出来，是否是预期的值。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">i2c_init();</div><div class="line"></div><div class="line"><span class="comment">//write eeprom.</span></div><div class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++)</div><div class="line">   &#123;</div><div class="line">       eeprom_write(i,<span class="number">2</span>*i);</div><div class="line">       delay_ms(<span class="number">4</span>);<span class="comment">//Must be delayed more than 4ms.</span></div><div class="line">   &#125;</div><div class="line"></div><div class="line"><span class="built_in">printf</span>(<span class="string">"write eeprom ok\n\r"</span>);</div><div class="line">delay_ms(<span class="number">10</span>);</div><div class="line"></div><div class="line"><span class="comment">//read eeprom.</span></div><div class="line">   <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++)</div><div class="line">   &#123;</div><div class="line">       <span class="built_in">printf</span>(<span class="string">"read_data%d = %d\n\r"</span>, i, eeprom_read(i));</div><div class="line">       delay_ms(<span class="number">4</span>);</div><div class="line">   &#125;</div><div class="line"></div></pre></td></tr></table></figure></p><ul><li>测试效果：</li></ul><div align="center"><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180816/8.png"></div><h1 id="9-SPI"><a href="#9-SPI" class="headerlink" title="9.SPI"></a>9.SPI</h1><p>RK3399有6组SPI，协议也是标准的，没什么好说的。通过SPI读取Flash，也实现了两个版本：GPIO模拟和寄存器控制，这里主要介绍寄存器控制版本。</p><h2 id="9-1-编程思路"><a href="#9-1-编程思路" class="headerlink" title="9.1 编程思路"></a>9.1 编程思路</h2><p>0.首先是SPI引脚复用、设置时钟、SPI模式(SCPH=1，SCPOL=1)等；<br>1.实现发送一字节函数：使能SPI、向<code>TXDR[0]</code>写入待发送的数据、根据<code>SR</code>等待发送完成及空闲、关闭SPI；<br>2.实现接收一字节函数：使能SPI、向<code>TXDR[0]</code>写入空数据、根据<code>SR</code>等待接收完成及空闲、读出<code>RXDR[0]</code>数据、关闭SPI；<br>3.实现片选函数；<br>4.剩下的就是SPI Flash(W25Q16DV)相关的操作，比如发送哪个指令读取ID，发送哪个指令擦除数据等，参考具体的Flash芯片手册；</p><p>值得注意的几点有：<br>1.SPI Flash(W25Q16DV)每次写操作某个分区前都得先擦除该分区；<br>2.注意片选的连续性，比如写使能指令(0x06)和写状态寄存器指令(0x01)之间的片选不能中断；</p><h2 id="9-2-实现代码"><a href="#9-2-实现代码" class="headerlink" title="9.2 实现代码"></a>9.2 实现代码</h2><figure class="highlight c"><figcaption><span>[spi.c]</span><a href="https://github.com/hceng/RK3399/tree/master/hardware/8_SPI/SPI控制器/code/spi.c" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"spi.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"uart.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"printf.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"timer.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"gpio.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"grf.h"</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">spi_init</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">//SPI1_CSn0/GPIO1_B2_U</span></div><div class="line">    <span class="comment">//SPI1_CLK/GPIO1_B1_U</span></div><div class="line">    <span class="comment">//SPI1_TXD/GPIO1_B0_U</span></div><div class="line">    <span class="comment">//SPI1_RXD/GPIO1_A7_U</span></div><div class="line"></div><div class="line">    <span class="comment">//1.IOMUX</span></div><div class="line">    PMUGRF_GPIO1A_IOMUX = <span class="number">0xFFFF8000</span>;</div><div class="line">    PMUGRF_GPIO1B_IOMUX = <span class="number">0xFFFF002A</span>;</div><div class="line"></div><div class="line">    SPI1-&gt;ENR &amp;=  ~(<span class="number">0x01</span> &lt;&lt; <span class="number">0</span>); <span class="comment">//关闭SPI</span></div><div class="line"></div><div class="line">    <span class="comment">//2.Clock Ratios   master mode:Fspi_clk&gt;= 2 × (maximum Fsclk_out)</span></div><div class="line">    <span class="comment">//CRU_CLKGATE2_CON &amp;= ~(0x01&lt;&lt;9);  //默认SPI1 source clock开启</span></div><div class="line">    <span class="comment">//CRU_CLKGATE6_CON &amp;= ~(0x01&lt;&lt;4);  //默认SPI1 APB clock开启</span></div><div class="line">    SPI1-&gt;BAUDR = <span class="number">24</span>; <span class="comment">//Fsclk_out = 48/24= 2M   48 &gt;= 2x2</span></div><div class="line"></div><div class="line">    <span class="comment">//3.注册/使能中断(本程序未使用,用的查询)</span></div><div class="line">    <span class="comment">//register_irq(IRQ_SPI1, spi_irq_isr);</span></div><div class="line">    <span class="comment">//irq_handler_enable(IRQ_SPI1);</span></div><div class="line">    <span class="comment">//SPI1-&gt;IPR &amp;= ~(0x01&lt;&lt;4); //Active Interrupt Polarity Level is HIGH(default)</span></div><div class="line">    <span class="comment">//SPI1-&gt;IMR |=  ((0x01&lt;&lt;4) | (0x01&lt;&lt;3) | (0x01&lt;&lt;2) | (0x01&lt;&lt;1) | (0x01&lt;&lt;0)); //Interrupt Mask</span></div><div class="line"></div><div class="line">    <span class="comment">//4.DMA(可以不用)</span></div><div class="line">    <span class="comment">//SPI1-&gt;DMACR |= ((0x01&lt;&lt;1) | (0x01&lt;&lt;0)); // Transmit/Receive DMA enabled</span></div><div class="line">    <span class="comment">//SPI1-&gt;DMATDLR = 1; //?</span></div><div class="line">    <span class="comment">//SPI1-&gt;DMARDLR = 1; //?</span></div><div class="line"></div><div class="line">    <span class="comment">//5.SPI模式</span></div><div class="line">    <span class="comment">//[1:0]Data Frame Size:8bit data</span></div><div class="line">    <span class="comment">//[5:2]Control Frame Size:8-bit serial data transfer</span></div><div class="line">    <span class="comment">//[6]SCPH:Serial clock toggles at start of first data bit</span></div><div class="line">    <span class="comment">//[7]SCPOL:Inactive state of serial clock is high</span></div><div class="line">    <span class="comment">//[13]BHT:apb 8bit write/read, spi 8bit write/read</span></div><div class="line">    <span class="comment">//[19:18]XFM(Transfer Mode):Transmit &amp; Receive(default)</span></div><div class="line">    <span class="comment">//[20]OPM(Operation Mode):Master Mode(default)</span></div><div class="line"></div><div class="line">    SPI1-&gt;CTRLR0 &amp;= ~(<span class="number">0x03</span> &lt;&lt; <span class="number">0</span>) ;</div><div class="line">    SPI1-&gt;CTRLR0 |= ((<span class="number">0x01</span> &lt;&lt; <span class="number">0</span>) | (<span class="number">0x07</span> &lt;&lt; <span class="number">2</span>) | (<span class="number">0x01</span> &lt;&lt; <span class="number">6</span>) | (<span class="number">0x01</span> &lt;&lt; <span class="number">7</span>) | (<span class="number">0x01</span> &lt;&lt; <span class="number">13</span>)); <span class="comment">//设置SPI模式</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">spi_send_byte</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> val)</span></span></div><div class="line">&#123;</div><div class="line">    SPI1-&gt;ENR |=  (<span class="number">0x01</span> &lt;&lt; <span class="number">0</span>);      <span class="comment">//SPI Enable</span></div><div class="line"></div><div class="line">    SPI1-&gt;TXDR[<span class="number">0</span>] = val &amp; <span class="number">0xFFFF</span>;</div><div class="line">    <span class="keyword">while</span>(!(SPI1-&gt;SR &amp; (<span class="number">0x01</span> &lt;&lt; <span class="number">2</span>))); <span class="comment">//Transmit FIFO is empty</span></div><div class="line">    <span class="keyword">while</span>(SPI1-&gt;SR &amp; (<span class="number">0x01</span> &lt;&lt; <span class="number">0</span>));  <span class="comment">//SPI is idle or disabled</span></div><div class="line"></div><div class="line">    SPI1-&gt;ENR &amp;=  ~(<span class="number">0x01</span> &lt;&lt; <span class="number">0</span>);     <span class="comment">//SPI Disable</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> <span class="title">spi_recv_byte</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> val = <span class="number">0</span>;</div><div class="line"></div><div class="line">    SPI1-&gt;ENR |=  (<span class="number">0x01</span> &lt;&lt; <span class="number">0</span>);    <span class="comment">//SPI Enable</span></div><div class="line"></div><div class="line">    SPI1-&gt;TXDR[<span class="number">0</span>] = <span class="number">0</span>;            <span class="comment">//因为是发送接收模式,FIFO在发送时也会接收数据,这里发送空数据,就可读取数据</span></div><div class="line"></div><div class="line">    <span class="keyword">while</span>(SPI1-&gt;SR &amp; (<span class="number">0x01</span> &lt;&lt; <span class="number">3</span>)); <span class="comment">//SReceive FIFO is not empty</span></div><div class="line">    <span class="keyword">while</span>(SPI1-&gt;SR &amp; (<span class="number">0x01</span> &lt;&lt; <span class="number">0</span>)); <span class="comment">//SPI is idle or disabled</span></div><div class="line"></div><div class="line">    val = SPI1-&gt;RXDR[<span class="number">0</span>] &amp; <span class="number">0xFF</span>;  <span class="comment">//读数据</span></div><div class="line"></div><div class="line">    SPI1-&gt;ENR &amp;=  ~(<span class="number">0x01</span> &lt;&lt; <span class="number">0</span>);  <span class="comment">//SPI Disable,为了清空FIFO</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> val;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">spi_flash_set_cs</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> flag)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(!flag)</div><div class="line">        SPI1-&gt;SER |=  (<span class="number">0x01</span> &lt;&lt; <span class="number">0</span>);</div><div class="line">    <span class="keyword">else</span></div><div class="line">        SPI1-&gt;SER &amp;= ~(<span class="number">0x01</span> &lt;&lt; <span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/* 通用部分 */</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">spi_flash_send_addr</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> addr)</span></span></div><div class="line">&#123;</div><div class="line">    spi_send_byte(addr &gt;&gt; <span class="number">16</span>);</div><div class="line">    spi_send_byte(addr &gt;&gt; <span class="number">8</span>);</div><div class="line">    spi_send_byte(addr &amp; <span class="number">0xff</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">spi_flash_write_enable</span><span class="params">(<span class="keyword">int</span> enable)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (enable)</div><div class="line">    &#123;</div><div class="line">        spi_flash_set_cs(<span class="number">0</span>);</div><div class="line">        spi_send_byte(<span class="number">0x06</span>);</div><div class="line">        spi_flash_set_cs(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        spi_flash_set_cs(<span class="number">0</span>);</div><div class="line">        spi_send_byte(<span class="number">0x04</span>);</div><div class="line">        spi_flash_set_cs(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> <span class="title">spi_flash_read_status_reg1</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> val;</div><div class="line"></div><div class="line">    spi_flash_set_cs(<span class="number">0</span>);</div><div class="line"></div><div class="line">    spi_send_byte(<span class="number">0x05</span>);</div><div class="line">    val = spi_recv_byte();</div><div class="line"></div><div class="line">    spi_flash_set_cs(<span class="number">1</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> val;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> <span class="title">spi_flash_read_status_reg2</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> val;</div><div class="line"></div><div class="line">    spi_flash_set_cs(<span class="number">0</span>);</div><div class="line"></div><div class="line">    spi_send_byte(<span class="number">0x35</span>);</div><div class="line">    val = spi_recv_byte();</div><div class="line"></div><div class="line">    spi_flash_set_cs(<span class="number">1</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> val;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">spi_flash_wait_when_busy</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span> (spi_flash_read_status_reg1() &amp; <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">spi_flash_write_status_reg</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> reg1, <span class="keyword">unsigned</span> <span class="keyword">char</span> reg2)</span></span></div><div class="line">&#123;</div><div class="line">    spi_flash_write_enable(<span class="number">1</span>);</div><div class="line"></div><div class="line">    spi_flash_set_cs(<span class="number">0</span>);</div><div class="line"></div><div class="line">    spi_send_byte(<span class="number">0x01</span>);</div><div class="line">    spi_send_byte(reg1);</div><div class="line">    spi_send_byte(reg2);</div><div class="line"></div><div class="line">    spi_flash_set_cs(<span class="number">1</span>);</div><div class="line"></div><div class="line">    spi_flash_wait_when_busy();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">spi_flash_clear_protect_for_status_reg</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> reg1, reg2;</div><div class="line"></div><div class="line">    reg1 = spi_flash_read_status_reg1();</div><div class="line">    reg2 = spi_flash_read_status_reg2();</div><div class="line"></div><div class="line">    reg1 &amp;= ~(<span class="number">1</span> &lt;&lt; <span class="number">7</span>);</div><div class="line">    reg2 &amp;= ~(<span class="number">1</span> &lt;&lt; <span class="number">0</span>);</div><div class="line"></div><div class="line">    spi_flash_write_status_reg(reg1, reg2);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">spi_flash_clear_protect_for_data</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">/* cmp=0,bp2,1,0=0b000 */</span></div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> reg1, reg2;</div><div class="line"></div><div class="line">    reg1 = spi_flash_read_status_reg1();</div><div class="line">    reg2 = spi_flash_read_status_reg2();</div><div class="line"></div><div class="line">    reg1 &amp;= ~(<span class="number">7</span> &lt;&lt; <span class="number">2</span>);</div><div class="line">    reg2 &amp;= ~(<span class="number">1</span> &lt;&lt; <span class="number">6</span>);</div><div class="line"></div><div class="line">    spi_flash_write_status_reg(reg1, reg2);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* erase 4K */</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">spi_flash_erase_sector</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> addr)</span></span></div><div class="line">&#123;</div><div class="line">    spi_flash_write_enable(<span class="number">1</span>);</div><div class="line"></div><div class="line">    spi_flash_set_cs(<span class="number">0</span>);</div><div class="line"></div><div class="line">    spi_send_byte(<span class="number">0x20</span>);</div><div class="line">    spi_flash_send_addr(addr);</div><div class="line"></div><div class="line">    spi_flash_set_cs(<span class="number">1</span>);</div><div class="line"></div><div class="line">    spi_flash_wait_when_busy();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* program */</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">spi_flash_program</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> addr, <span class="keyword">unsigned</span> <span class="keyword">char</span> *buf, <span class="keyword">int</span> len)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line"></div><div class="line">    spi_flash_write_enable(<span class="number">1</span>);</div><div class="line"></div><div class="line">    spi_flash_set_cs(<span class="number">0</span>);</div><div class="line"></div><div class="line">    spi_send_byte(<span class="number">0x02</span>);</div><div class="line">    spi_flash_send_addr(addr);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)</div><div class="line">        spi_send_byte(buf[i]);</div><div class="line"></div><div class="line">    spi_flash_set_cs(<span class="number">1</span>);</div><div class="line"></div><div class="line">    spi_flash_wait_when_busy();</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">spi_flash_read</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> addr, <span class="keyword">unsigned</span> <span class="keyword">char</span> *buf, <span class="keyword">int</span> len)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line"></div><div class="line">    spi_flash_set_cs(<span class="number">0</span>);</div><div class="line"></div><div class="line">    spi_send_byte(<span class="number">0x03</span>);</div><div class="line">    spi_flash_send_addr(addr);</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)</div><div class="line">        buf[i] = spi_recv_byte();</div><div class="line"></div><div class="line">    spi_flash_set_cs(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">spi_flash_init</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    spi_flash_clear_protect_for_status_reg();</div><div class="line">    spi_flash_clear_protect_for_data();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">spi_flash_read_ID</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> *pMID, <span class="keyword">unsigned</span> <span class="keyword">int</span> *pDID)</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">    spi_flash_set_cs(<span class="number">0</span>);</div><div class="line"></div><div class="line">    spi_send_byte(<span class="number">0x90</span>);</div><div class="line"></div><div class="line">    spi_flash_send_addr(<span class="number">0</span>);</div><div class="line"></div><div class="line">    *pMID = spi_recv_byte();</div><div class="line">    *pDID = spi_recv_byte();</div><div class="line"></div><div class="line">    spi_flash_set_cs(<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在主函数里先读取Flash的MID和PID，然后初始化Flash(去除写状态寄存器保护和写数据保护)，再写入数据，读出数据检测是否一致。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">   spi_init();</div><div class="line"></div><div class="line">spi_flash_read_ID(&amp;mid, &amp;pid);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"SPI Flash : MID = 0x%02x, PID = 0x%02x\n\r"</span>, mid, pid);</div><div class="line"></div><div class="line">   spi_flash_init();</div><div class="line">   <span class="keyword">while</span>(<span class="number">1</span>)</div><div class="line">&#123;</div><div class="line">       spi_flash_erase_sector(<span class="number">4096</span>);</div><div class="line">       spi_flash_program(<span class="number">4096</span>, <span class="string">"hceng"</span>, <span class="number">7</span>);</div><div class="line">       spi_flash_read(<span class="number">4096</span>, str, <span class="number">7</span>);</div><div class="line">       <span class="built_in">printf</span>(<span class="string">"SPI Flash read from 4096: %s\n\r"</span>, str);</div><div class="line">       </div><div class="line">       delay_s(<span class="number">2</span>);</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p><ul><li>测试效果：</li></ul><div align="center"><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180816/9.png"></div><h1 id="10-PWM"><a href="#10-PWM" class="headerlink" title="10.PWM"></a>10.PWM</h1><p>RK3399有四组PWM，其中PWM3可以配置为第二功能用于红外IR。<br>这里使用MIPI接口的PWM1为例，输出指定占空比的波形。</p><h2 id="10-1-编程思路"><a href="#10-1-编程思路" class="headerlink" title="10.1 编程思路"></a>10.1 编程思路</h2><p>1.首先是PWM引脚复用；<br>2.关闭PWM控制器；<br>3.设置时钟源、比例系数、预分频(可默认)；<br>4.设置模式:连续模式,占空比极性为高、左对齐(默认)；<br>5.设置占空比，其中<code>PERIOD_HPR</code>是总周期，<code>DUTY_LPR</code>是有效周期，<code>Duty cycle=DUTY_LPR/PERIOD_HPR</code>；<br>6.启动PWN控制器；</p><h2 id="10-2-实现代码"><a href="#10-2-实现代码" class="headerlink" title="10.2 实现代码"></a>10.2 实现代码</h2><figure class="highlight c"><figcaption><span>[pwm.c]</span><a href="https://github.com/hceng/RK3399/tree/master/hardware/9_pwm/code/pwm.c" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"pwm.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"gpio.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"timer.h"</span></span></div><div class="line"></div><div class="line"><span class="comment">//GPIO4_C6/PWM1</span></div><div class="line"><span class="comment">//0~100</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pwm1_out</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> val)</span></span></div><div class="line">&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> 0 <span class="comment">//test gpio ok</span></span></div><div class="line">GPIO4-&gt;SWPORTA_DDR |=  (<span class="number">0x01</span> &lt;&lt; (<span class="number">2</span> * <span class="number">8</span> + <span class="number">6</span>));</div><div class="line"></div><div class="line"><span class="keyword">while</span>(<span class="number">1</span>)</div><div class="line">&#123;</div><div class="line">GPIO4-&gt;SWPORTA_DR  &amp;= ~(<span class="number">0x01</span> &lt;&lt; (<span class="number">2</span> * <span class="number">8</span> + <span class="number">6</span>));</div><div class="line">delay_ms(<span class="number">10</span>);</div><div class="line">GPIO4-&gt;SWPORTA_DR  |=  (<span class="number">0x01</span> &lt;&lt; (<span class="number">2</span> * <span class="number">8</span> + <span class="number">6</span>));</div><div class="line">delay_ms(<span class="number">10</span>);</div><div class="line">&#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">else</span> </span></div><div class="line"><span class="comment">//1.IOMUX</span></div><div class="line">GRF_GPIO4C_IOMUX  |=  ((<span class="number">0x03</span>&lt;&lt;<span class="number">28</span>) | (<span class="number">0x01</span>&lt;&lt;<span class="number">12</span>)); <span class="comment">//  1'b1: pwm_1</span></div><div class="line"><span class="comment">//GRF_SOC_CON2  |=  ((0x01&lt;&lt;16) | (0x01&lt;&lt;0)); //P136  1'b1: pwm_1</span></div><div class="line"></div><div class="line"><span class="comment">//2.Set PWM</span></div><div class="line">PWM1-&gt;CTRL &amp;= ~(<span class="number">0x01</span>&lt;&lt;<span class="number">0</span>); <span class="comment">//PWM channel disabled</span></div><div class="line"><span class="comment">//2.1 设置时钟源、比例系数、预分频、</span></div><div class="line"><span class="comment">//PWM1-&gt;CTRL |= ((0x01&lt;&lt;16) | (0x01&lt;&lt;12) | (0x01&lt;&lt;9));//Scale Factor / Prescale Factor / Clock Source Select</span></div><div class="line"><span class="comment">//2.2 设置模式:连续模式,占空比极性为高、左对齐(默认)</span></div><div class="line">PWM1-&gt;CTRL |=  (<span class="number">0x01</span>&lt;&lt;<span class="number">1</span>) | (<span class="number">0x01</span>&lt;&lt;<span class="number">3</span>); <span class="comment">//PWM Operation Mode 01: Continuous mode.</span></div><div class="line"></div><div class="line"><span class="comment">//3.Set Duty Cycle</span></div><div class="line"><span class="keyword">if</span>(val &gt; <span class="number">100</span>)</div><div class="line">val = <span class="number">100</span>;</div><div class="line">PWM1-&gt;PERIOD_HPR = <span class="number">100</span>; <span class="comment">//总周期</span></div><div class="line">PWM1-&gt;DUTY_LPR   = val;  <span class="comment">//占空比=val/总周期</span></div><div class="line"></div><div class="line"><span class="comment">//4.Start</span></div><div class="line">PWM1-&gt;CTRL |=  (<span class="number">0x01</span>&lt;&lt;<span class="number">0</span>);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> </span></div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure><h1 id="11-LCD"><a href="#11-LCD" class="headerlink" title="11.LCD"></a>11.LCD</h1><p>待填坑……</p><p>参考资料：<br>[1]. <a href="https://www.t-firefly.com/download/Firefly-RK3399/docs/TRM/Rockchip%20RK3399TRM%20V1.3%20Part1.pdf" target="_blank" rel="external">Rockchip RK3399TRM V1.3 Part1.pdf</a><br>　　<a href="https://www.t-firefly.com/download/Firefly-RK3399/docs/TRM/Rockchip%20RK3399TRM%20V1.3%20Part2.pdf" target="_blank" rel="external">Rockchip RK3399TRM V1.3 Part2.pdf</a><br>[2]. <a href="https://yurichev.com/mirrors/ARMv8-A_Architecture_Reference_Manual_%28Issue_A.a%29.pdf" target="_blank" rel="external">ARMv8-A_Architecture_ReferenceManual(Issue_A.a).pdf</a><br>[3]. <a href="https://wushifublog.com/2017/11/26/u-boot%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%EF%BC%88%E4%BA%8C%EF%BC%89/" target="_blank" rel="external">u-boot源码阅读(二)</a><br>[4]. <a href="http://www.wowotech.net/u-boot/boot_flow_1.html" target="_blank" rel="external">u-boot启动流程分析(1)_平台相关部分</a><br>[5]. <a href="http://loda.hala01.com/?view=classic" target="_blank" rel="external">ARMv8 与Linux的新手笔记</a></p><hr><p><div align="center"><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本文采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href="http://hceng.cn/" target="_blank" rel="external">hceng’s blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以64位的RK3399为例，实现裸机的启动、中断、串口(printf移植)、定时器、ADC、PWM、I2C、SPI、LCD(MIPI)等；&lt;br&gt;
    
    </summary>
    
    
      <category term="裸机" scheme="http://yoursite.com/tags/%E8%A3%B8%E6%9C%BA/"/>
    
      <category term="Uboot" scheme="http://yoursite.com/tags/Uboot/"/>
    
      <category term="RK3399" scheme="http://yoursite.com/tags/RK3399/"/>
    
  </entry>
  
  <entry>
    <title>RK3288——LCD裸机</title>
    <link href="http://yoursite.com/2018/07/19/RK3288%E2%80%94%E2%80%94LCD%E8%A3%B8%E6%9C%BA/"/>
    <id>http://yoursite.com/2018/07/19/RK3288——LCD裸机/</id>
    <published>2018-07-19T01:12:32.000Z</published>
    <updated>2018-11-04T09:49:21.913Z</updated>
    
    <content type="html"><![CDATA[<p>在RK3288平台上，采用裸机实现LVDS和MIPI接口的LCD显示。<br><a id="more"></a></p><h1 id="1-常见的LCD显示接口"><a href="#1-常见的LCD显示接口" class="headerlink" title="1.常见的LCD显示接口"></a>1.常见的LCD显示接口</h1><p>在之前写的<a href="https://hceng.cn/2017/12/22/Exynos4412%E2%80%94%E2%80%94LCD%E9%A9%B1%E5%8A%A8/" target="_blank" rel="external">Exynos4412——LCD驱动</a>里，使用的RGB接口。<br>除了RGB接口，如今市面上主流的还有LVDS、MIPI、eDP接口。</p><table><tr><th>接口</th><th>分辨率</th><th>接口电平</th><th>说明</th></tr><tr><td>RGB</td><td>800x480以下</td><td>TTL</td><td>几乎所有的SOC都支持RGB接口；<br>在小屏、低端设备中广泛使用；</td></tr><tr><td>LVDS</td><td>1024x768及以上</td><td>差分信号</td><td>中高端的SOC大多数都集成，也可通过转换芯片将RGB转成LVDS输出；<br>在大屏，中高端平板、笔记本中使用；</td></tr><tr><td>MIPI</td><td>1080P以下</td><td>差分信号</td><td>大多数中高端的SOC都集成，也可通过转换芯片实现；<br>手机平台的标准接口，在手机中广泛使用；<br></td></tr><tr><td>eDP</td><td>1080P以上</td><td>差分信号</td><td>高端SOC中集成，相对比较新的规范；<br>支持超高分辨率，有取代LVDS的趋势；</td></tr></table><p>各接口示意图如下：</p><div align="center"><img width="800" src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180719/1.jpg"></div><ul><li><strong>RGB接口</strong>：RGB接口也叫TTL(<code>Transistor Transistor Logic</code>)接口，它是唯一一个采用TTL电平的LCD接口。如果数据接口R、G、B都只使用0~5共6x3根数据线，即为<strong>18bit RGB接口</strong>，如果R、G、B都使用0~7共8x3根数据线，即称为<strong>24bit RGB接口</strong>;它的详细介绍，可以参考前面的<a href="https://hceng.cn/2017/12/22/Exynos4412%E2%80%94%E2%80%94LCD%E9%A9%B1%E5%8A%A8/" target="_blank" rel="external">Exynos4412——LCD驱动</a>;</li><li><strong>LVDS接口</strong>：LVDS(<code>Low Voltage Differential Signaling</code>)，即一种采用低压差分信号技术的LCD接口，克服了TTL电平方式传输宽带高码率数据时功耗大、EMI电磁干扰大等缺点；如果数据接口只使用LVDS_D0~D2这三组数据线，就是<strong>6bit 模式</strong>；如果使用LVDS_D0~D3这四组数据线，就是<strong>8bit 模式</strong>；</li><li><strong>MIPI接口</strong>：MIPI(<code>Mobile Industry Processor Interface</code>)，为了推进手机应用处理器接口的标准化而产生的。MIPI是一系列接口的总称，MIPI下应用比较多的是DSI(<code>Display Serial Interface</code>)和CSI(<code>Camera Serial Interface</code>)，分别针对显示屏应用和摄像头应用。这里的MIPI接口，实质上指的是DSI接口；</li><li><strong>eDP接口</strong>：eDP(<code>Embedded Display Port</code>)，主要用于将视频源连接到显示设备（如计算机显示器），还可以传输音频，USB和其他形式的数据；该部分目前资料较少，RK3288芯片手册该部分寄存器都没给，属于保密范围，暂时没法研究；</li></ul><h1 id="2-LVDS"><a href="#2-LVDS" class="headerlink" title="2.LVDS"></a>2.LVDS</h1><h2 id="2-1-分析过程"><a href="#2-1-分析过程" class="headerlink" title="2.1 分析过程"></a>2.1 分析过程</h2><p>先理一下分析的思路：</p><ul><li>1.首先需要一个RK3288的开发板(这里使用的是Firefly生产的AIO-3288J)，且带有LVDS接口的屏，且提供的资料能够让屏亮起来；</li><li>2.根据提供资料、源码，重头编译一下源码，包括U-boot、Kernel、Android等(编译Android可能需要<a href="https://www.cyberciti.biz/faq/ubuntu-linux-create-add-swap-file/" target="_blank" rel="external">设置交换分区</a>)；</li><li>3.编译完成后，将生成的镜像文件烧录至开发板，验证是否可用；</li><li>4.可用后，就有了显示部分的源码，先从设备树文件夹入手，查看生成了哪些dtb文件，即表示对应的dts被使用了，再找到对应的dts文件，找到lcd、screen、blacklinght、lvds等关键词的部分；</li><li>5.得出RK3288的LVDS至少和VOP(lcdc)、lvds、screen、blacklinght这四个部分有关，再利用设备树<code>compatible</code>与内核匹配和源码若使用都会生成<code>.o</code>这两个特性，找到对应部分的内核源码；</li><li>6.修改内核源码，重新编译烧录，观察现象；比如，找到内核源码中lvds相关部分，屏蔽掉<code>lvds_en()</code>这一明显关键的函数后，发现开发板开机后，启动内核屏幕仍然会出现logo，因此推测U-boot也做了LVDS的相关初始化，内核中的<code>lvds_en()</code>可能用于后续锁屏等屏幕的开闭；</li><li>7.屏蔽多个关键函数，发现除去背光函数对屏幕显示有影响外，其它的关键函数的屏蔽，对开始显示logo都没影响；</li><li>8.在U-boot中，直接操作寄存器使能背光，同时屏蔽进入内核的代码，发现进入U-boot即可显示logo，因此U-boot里肯定有完整的LVDS显示的操作，内核就暂时不用管了；</li><li>9.以U-boot中<code>lcdc_init()</code>、<code>lvds_en()</code>等为核心突破口，先打印出该部分的寄存器操作值，再屏蔽掉该部分代码，自己直接向寄存器写值，重新烧录，查看logo是否仍显示；如果logo存在，则表示自己直接操作该部分寄存器成功；</li><li>10.以此类推，逐渐屏蔽源码，改为自己直接操作寄存器，最后按照源码的函数调用顺序，依次操作寄存器，单独生成bin文件，测试显示成功即可；</li><li>11.查阅相关寄存器，分析、注释；</li></ul><p>对LVDS接口的LCD显示分析如下：</p><div align="center"><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180719/2.jpg"></div><p>对LVDS接口的LCD操作框架总结如下：</p><div align="center"><img width="600" src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180719/3.jpg"></div><p>这其中有两个值得一提的点：</p><ul><li>1.核心板上有个电源IC，需要通过I2C设置电源IC的输出，提供给显示模块，如果没有设置，屏幕是不会有显示的；</li><li>2.屏幕参数的设置，用到了前面<a href="https://hceng.cn/2017/12/22/Exynos4412%E2%80%94%E2%80%94LCD%E9%A9%B1%E5%8A%A8/#1-3-LCD%E6%98%BE%E7%A4%BA%E5%8E%9F%E7%90%86" target="_blank" rel="external">1.3LCD显示原理</a>的知识：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">//hspw+hbp+col+hfp:8+8+800+48=848</div><div class="line">VOP_BIG_DSP_HTOTAL_HS_END  =  ((8&lt;&lt;0)   | (848&lt;&lt;16));  //0:HS_PW        16:HTOTAL</div><div class="line">VOP_BIG_DSP_HACT_ST_END    =  ((816&lt;&lt;0) | (16&lt;&lt;16));   //0:COL_END      16:COL_START</div><div class="line"></div><div class="line">//vspw+vbp+row+vfp:4+11+1280+32=1312</div><div class="line">VOP_BIG_DSP_VTOTAL_VS_END  =  ((4&lt;&lt;0)    | (1312&lt;&lt;16));//0:VS_PW        16:VTOTAL</div><div class="line">VOP_BIG_DSP_VACT_ST_END    =  ((1295&lt;&lt;0) | (15&lt;&lt;16));  //0:ROW_END      16:ROW_START</div><div class="line"></div><div class="line">VOP_BIG_POST_DSP_HACT_INFO =  ((816&lt;&lt;0)  | (16&lt;&lt;16));  //0:COL_END      16:COL_START</div><div class="line">VOP_BIG_POST_DSP_VACT_INFO =  ((1295&lt;&lt;0) | (15&lt;&lt;16));  //0:ROW_END      16:ROW_START</div></pre></td></tr></table></figure></li></ul><p>在水平方向，由<code>HSYNC(hspw)+HBP+Active weigth(col)+HFP=Total weigth(HTOTAL)</code>，再根据LCD的手册，取合适的值，填入寄存器对应位；<br>比如，VOP_BIG_DSP_HTOTAL_HS_END的低16位填入<code>HSYNC(hspw)</code>值，高16位填入<code>Total weigth(HTOTAL)</code>；VOP_BIG_DSP_HACT_ST_END低16位填入<code>HSYNC(hspw)+HBP+Active weigth(col)</code>的值，高16位填入<code>HSYNC(hspw)+HBP</code>的值；都是吻合LCD的显示原理的。</p><h2 id="2-2-源码及效果"><a href="#2-2-源码及效果" class="headerlink" title="2.2 源码及效果"></a>2.2 源码及效果</h2><p>源码见<a href="https://github.com/hceng/learn/blob/master/rk3288/hardware/4_lcd/lvds/lcd.c" target="_blank" rel="external">Github</a>。</p><div align="center"><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180719/4.gif"></div><h1 id="3-MIPI"><a href="#3-MIPI" class="headerlink" title="3.MIPI"></a>3.MIPI</h1><h2 id="3-1-分析过程"><a href="#3-1-分析过程" class="headerlink" title="3.1 分析过程"></a>3.1 分析过程</h2><p>先理一下分析的思路：</p><ul><li>1.首先需要一个带有MIPI屏的RK3288的开发板，Firefly生产的AIO-3288J的MIPI屏已经停产，也没找到兼容的，因此又去弄了一个带MIPI屏的RK3288开发板(荣品生产的king3288)；</li><li>2.根据提供的资料，编译源码，下载，烧录、测试；</li><li>3.有了前面的经验，猜测开机LOGO显示的代码在U-Boot中，注释掉U-Boot中<code>common/cmd_bootrk.c</code>里的<code>//do_bootm_linux(0, 0, NULL, &amp;images);</code>，使其不能引导内核，重新编译U-Boot，下载，发现有LOGO显示，证明U-Boot里有MIPI屏显示操作；</li><li>4.依旧是找到LOGO显示的相关代码，修改，编译，烧写，观察现象，最终得到独立的MIPI屏显示相关代码；</li></ul><p>对MIPI接口的LCD显示分析如下：</p><div align="center"><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180719/4.jpg"></div><p>MIPI部分的代码比LVDS感觉要乱一些，主要是因为在结构体里定义了函数，使用<code>Source Insight</code>分析代码时，没那么方便，涉及到了三个结构体如下，分别是VOP、MIPI接口、面板的相关操作：</p><div><img width="800" src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180719/5.jpg"></div><p>这其中有两个值得一提的点：</p><ul><li>1.它们的PMIC使用的同一款，且配置一样，直接就可以用之前的代码；</li><li>2.不能直接读出所有配置的寄存器，然后对比，因为实测有些寄存器操作后，需要一个等待时间(需要读取另一个寄存器判断)，才能进行下一个寄存器的操作，就可能出现源码和自己代码的寄存器值都一样，但实际效果不一样；</li></ul><h2 id="3-2-源码及效果"><a href="#3-2-源码及效果" class="headerlink" title="3.2 源码及效果"></a>3.2 源码及效果</h2><p>源码见<a href="https://github.com/hceng/learn/blob/master/rk3288/hardware/4_lcd/mipi/lcd.c" target="_blank" rel="external">Github</a>。</p><div align="center"><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180719/6.gif"></div><h1 id="4-心得"><a href="#4-心得" class="headerlink" title="4.心得"></a>4.心得</h1><ul><li>1.熟悉了如果从驱动中提取出裸机代码，看清了对寄存器的实质操作，有利于理解整个流程；</li><li>2.无论是何种接口的LCD，都有共性，比如都需要向buf写数据，且告诉对应寄存器；针对RK3288，都使用VOP对buf数据处理，然后再通过不同的接口发送出去，都需要根据LCD面板来设置时间参数；</li></ul><hr><p><div align="center"><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本文采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href="http://hceng.cn/" target="_blank" rel="external">hceng’s blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在RK3288平台上，采用裸机实现LVDS和MIPI接口的LCD显示。&lt;br&gt;
    
    </summary>
    
    
      <category term="裸机" scheme="http://yoursite.com/tags/%E8%A3%B8%E6%9C%BA/"/>
    
      <category term="LCD" scheme="http://yoursite.com/tags/LCD/"/>
    
      <category term="RK3288" scheme="http://yoursite.com/tags/RK3288/"/>
    
  </entry>
  
  <entry>
    <title>Linux声卡驱动</title>
    <link href="http://yoursite.com/2018/06/27/Linux%E5%A3%B0%E5%8D%A1%E9%A9%B1%E5%8A%A8/"/>
    <id>http://yoursite.com/2018/06/27/Linux声卡驱动/</id>
    <published>2018-06-27T01:22:47.000Z</published>
    <updated>2018-11-04T09:41:22.209Z</updated>
    
    <content type="html"><![CDATA[<p>了解、学习Linux声卡驱动，并在Tiny4412上实现声音的播放和录制。<br><a id="more"></a></p><h1 id="1-声卡基础"><a href="#1-声卡基础" class="headerlink" title="1.声卡基础"></a>1.声卡基础</h1><h2 id="1-1-基本概念"><a href="#1-1-基本概念" class="headerlink" title="1.1 基本概念"></a>1.1 基本概念</h2><p>记得是初中还是高中物理，里面说过声音是由物体振动产生，然后通过空气传播到耳朵里。<br>把耳朵换成咪头，声音振动咪头，改变了咪头两端的电压，ADC再采集电压，就记录了音频数据；反之，将记录的数据通过DAC转成电压，通过运放放大，就使喇叭振动就产生了声音。<br>这整个过程，涉及声音质量的参数有三个：</p><ul><li>采样频率：就是单位时间内ADC采集的次数，一般是8kHz~96kHz；</li><li>转换精度：就是每次ADC采集或者DAC转换的精度。一般有8bit、16bit、24bit；</li><li>通道数：就是单声道、双声道；</li></ul><hr><p>在Linux声卡驱动的发展中，最开始使用的声卡驱动框架是<strong><a href="https://zh.wikipedia.org/wiki/Open_Sound_System" target="_blank" rel="external">OSS</a></strong>(Open Sound System)。<br>从2.6版本开始，<strong><a href="https://zh.wikipedia.org/wiki/ALSA" target="_blank" rel="external">ALSA</a></strong>(Advanced Linux Sound Architecture)成为Linux内核中默认的标准音频驱动程序集，OSS则被标记为废弃。<br>OSS和ALSA的主要区别:</p><ul><li>OSS:提供基于ioctl等原始编程接口访问设备；</li><li>ALSA:除了提供基于ioctl等原始编程接口，还专门为简化应用程序的编写提供了相应的函数库，相对OSS更加方便；<div align="center"><img width="600" height="" src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180627/1.jpg"></div></li></ul><p>后面编写的驱动，将采用ALSA框架。</p><h2 id="1-2音频编解码芯片"><a href="#1-2音频编解码芯片" class="headerlink" title="1.2音频编解码芯片"></a>1.2音频编解码芯片</h2><p>一般来说，大多数SOC都不包含音频的转换，可能是因为功耗、模数干扰等考虑，因此大多数都是外接了一个音频编解码芯片(Codec)。<br>音频文件从Flash加载到RAM中，再由DMA将其通过I2S发送给Codec，再由Codec的DAC变成模拟信号，驱动功放使喇叭播放声音；同时，SOC通过I2C(有些Codec不是I2C，而是其它的接口)设置Codec的寄存器，调整声音大小等。</p><div align="center"><img width="600" height="" src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180627/2.jpg"></div><p>因此，整个声卡框架涉及的驱动可能有SOC的DMA、I2S、I2C以及Codec驱动。</p><h1 id="2-硬件接口"><a href="#2-硬件接口" class="headerlink" title="2.硬件接口"></a>2.硬件接口</h1><p>Tiny4412的声卡部分原理图如下，所采用的codec芯片为WM8960，该电路大致可分为四部分：</p><div align="center"><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180627/3.jpg"></div><p><strong> ① IIS接口，负责Exynos4412和WM8960之间的数据传输 </strong></p><table><tr><th>Function</th><th>SOC</th><th>Codec</th><th>Note</th></tr><tr><td rowspan="5">Date</td><td>Xi2sCDCLK0</td><td>MCLK</td><td>系统时钟</td></tr><tr><td>Xi2sSCLK0</td><td>BCLK</td><td>数据时钟</td></tr><tr><td>Xi2sLRCK0</td><td>DACLRC</td><td>左右声道切换</td></tr><tr><td>Xi2sSDO0_0</td><td>DATDAT</td><td>数据输出(播放)</td></tr><tr><td>Xi2sSDI0</td><td>ADCDAT</td><td>数据输入(录音)</td></tr></table><p>　<br><strong> ② I2C接口，负责Exynos4412对WM8960寄存器的配置 </strong></p><table><tr><th>Function</th><th>SOC</th><th>Codec</th><th>Note</th></tr><tr><td rowspan="2">Control</td><td>Xi2cSCL0</td><td>SCLK</td><td>I2C时钟</td></tr><tr><td>Xi2cSDA0</td><td>SDIN</td><td>I2C数据</td></tr></table><p><strong> ③ 录音 </strong><br>采用咪头和耳机接口进行录音；</p><p><strong> ④ 播放 </strong><br>采用耳机接口播放音频，另外还有一个耳机插入检测<code>Earphone_detect</code>；</p><p>最近急需入坑Android，声卡这个坑暂停一下，后续再回来填！</p><hr><p><div align="center"><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本文采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href="http://hceng.cn/" target="_blank" rel="external">hceng’s blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;了解、学习Linux声卡驱动，并在Tiny4412上实现声音的播放和录制。&lt;br&gt;
    
    </summary>
    
    
      <category term="Linux驱动" scheme="http://yoursite.com/tags/Linux%E9%A9%B1%E5%8A%A8/"/>
    
      <category term="Exynos4412" scheme="http://yoursite.com/tags/Exynos4412/"/>
    
      <category term="音频驱动" scheme="http://yoursite.com/tags/%E9%9F%B3%E9%A2%91%E9%A9%B1%E5%8A%A8/"/>
    
  </entry>
  
  <entry>
    <title>嵌入式Linux——WIFI网卡</title>
    <link href="http://yoursite.com/2018/06/21/%E5%B5%8C%E5%85%A5%E5%BC%8FLinux%E2%80%94%E2%80%94WIFI%E7%BD%91%E5%8D%A1/"/>
    <id>http://yoursite.com/2018/06/21/嵌入式Linux——WIFI网卡/</id>
    <published>2018-06-21T06:58:18.000Z</published>
    <updated>2018-11-04T09:38:14.594Z</updated>
    
    <content type="html"><![CDATA[<p>如何在嵌入式Linux中，使用WIFI无线网卡。<br><a id="more"></a><br>嵌入式中设备想要联网，无非就 有线和无线 两种方式。<br>有线就插上网线，没什么好说的；无线的话一种是将WIFI模块集成焊接在板子上，另一种是WIFI模块以USB的方式接到板子上。<br>本次使用的就是USB接口的WIFI无线网卡，实现开发板使用WIFI无线网卡访问互联网和作为个人热点。</p><h1 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h1><h2 id="1-2-WIFI基础知识"><a href="#1-2-WIFI基础知识" class="headerlink" title="1.2 WIFI基础知识"></a>1.2 WIFI基础知识</h2><p>WIFI网卡有两种工作模式，<br>一种是<strong>无线终端模式(STA)</strong>，也就是手机日常使用的模式，通过该模式连接网络上网；<br>一种是<strong>无线热点模式(AP)</strong>，也就是手机的个人热点模式，通过该模式提供热点供其它设备上网；</p><p>无线网络的安全性由两部分组成：<strong>认证</strong>和<strong>加密</strong>。<br><strong> 认证:</strong>使得只有允许的设备才能连接到无线网络；<br><strong> 加密:</strong>确保数据的保密性和完整性，即数据在传输过程中不会被篡改；</p><ul><li><p>常用的认证算法有:<strong>开放认证、共享秘钥认证、802.11x认证、PSK认证</strong>。<br>其中802.11x认证和PSK认证安全性较高，分别应用于企业和个人的环境;</p></li><li><p>常用的加密算法有:<strong>WEB加密、TKIP加密、CCMP加密算法</strong>。<br>其中WEB加密和TKIP加密都是RC4的加密算法，安全性较低；CCMP加密采用AES对称加密算法，安全性较高。</p></li></ul><table><tr><th>安全策略</th><th>认证方式</th><th>加密方式</th><th>备注</th></tr><tr><td rowspan="2">Open</td><td>open</td><td>open</td><td>开放WiFi，无任何加密</td></tr><tr><td>open</td><td>WEP</td><td>开放WiFi，仅数据加密</td></tr><tr><td>WEP</td><td>WEP</td><td>WEP</td><td>共享密钥认证，容易破解</td></tr><tr><td rowspan="2">WAP</td><td>802.11X</td><td>TKIP/WEP</td><td>比较安全，用于企业</td></tr><tr><td>PSK</td><td>TKIP/WEP</td><td>比较安全，用于个人</td></tr><tr><td rowspan="2">WAP2</td><td>802.11X</td><td>CCMP/TKIP/WEP</td><td>目前最安全，用于个人</td></tr><tr><td>PSK</td><td>CCMP/TKIP/WEP</td><td>目前最安全，用于个人</td></tr></table><p>连入超市、商场等公共WIFI的时候，不需要输入密码，但要通过网页输入手机号，使用验证码验证，也就是采用802.11X进行的验证，通过服务器完成的验证。<br>使用手机开个人热点的时候，可以选择安全性OPEN、WEP、WAP、WAP2，也就对应不同的安全等级。</p><p>我手里的MIX2S，MIUI10个人热点里面就仅OPEN和WAP2两个选项，感觉这是个趋势，要么最简单的OPEN，要么就最安全的WAP2(WAP2是向下兼容的)，逐渐扔掉历史的包袱。</p><h2 id="1-2-选择无线网卡"><a href="#1-2-选择无线网卡" class="headerlink" title="1.2 选择无线网卡"></a>1.2 选择无线网卡</h2><p>首先是选择合适的无线网卡，选取的原则是<strong>根据WIFI无线网卡的<code>VID</code>和<code>PID</code>判断内核是否支持该无线网卡。</strong></p><ul><li><p>1.获取无线网卡ID<br>将无线网卡插入Windows电脑，打开设备管理器，选中无线网卡，右键“属性”，切换到“详细信”息选项卡，在“属性”下拉栏中选择”硬件ld”，即可得到无线网卡的ID：<br><div align="center"><img width="390" height="374" src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180621/1.jpg"></div><br>我的无线网卡<code>VID</code>是<code>0x148F</code>，<code>PID</code>是<code>0x3070</code>；</p></li><li><p>2.查询内核是否支持<br>可以从<a href="https://wireless.wiki.kernel.org/en/users/devices" target="_blank" rel="external">wireless.kernel.org</a>得到<a href="https://wikidevi.com/wiki/DNI:USB_WiFi_adapters_w/_probable_Linux_support" target="_blank" rel="external">支持的设备列表</a>。<br>可以从列表中搜到前面的<code>VID</code>和<code>PID</code>，因此说明内核是支持现在使用的无线网卡。此外，还可以得知对应的驱动应该为<code>rt2800usb</code>、<code>rt2870sta</code>。<br><div align="center"><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180621/2.jpg"></div>　</p><h2 id="1-3-移植WIFI驱动"><a href="#1-3-移植WIFI驱动" class="headerlink" title="1.3 移植WIFI驱动"></a>1.3 移植WIFI驱动</h2></li><li>前面根据ID得到了对应的网卡驱动名字，但还不是很靠谱，建议直接在驱动中搜索ID，更靠谱：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grep &quot;0x3070&quot; drivers/net/wireless/ -nr</div></pre></td></tr></table></figure></li></ul><p>得到：<code>drivers/net/wireless/ralink/rt2x00/rt2800usb.c:1091:    { USB_DEVICE(0x148f, 0x3070) },</code>，知道了对应的驱动文件是<code>rt2800usb.c</code>；　</p><ul><li>再查看对应路径的Makfeile：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat  drivers/net/wireless/ralink/rt2x00/Makefile</div></pre></td></tr></table></figure></li></ul><p>得到：<code>obj-$(CONFIG_RT2800USB)            += rt2800usb.o</code>，知道了对应的宏是<code>CONFIG_RT2800USB</code>；　</p><ul><li>进入内核目录，执行：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make menuconfig</div></pre></td></tr></table></figure></li></ul><p>搜索<code>CONFIG_RT2800USB</code>，得知其依赖：<code>Depends on: NETDEVICES [=y] &amp;&amp; WLAN [=y] &amp;&amp; WLAN_VENDOR_RALINK [=y] &amp;&amp; RT2X00 [=n] &amp;&amp; USB [=y]</code>，可以知道<code>RT2X00 [=n]</code>没有打开，再搜索它，如此循环，直到<code>RT2800USB [=y]</code>。</p><p>这里有个注意的就是，当开启的上层的某个依赖，下层的某个选项可能会多出来许多选项，而这些选项原来是没有的，不要固化思维。</p><p>最后重新编译内核即可。</p><h2 id="1-4-使用buildroot移植应用"><a href="#1-4-使用buildroot移植应用" class="headerlink" title="1.4 使用buildroot移植应用"></a>1.4 使用buildroot移植应用</h2><p>想要使用无线网卡，需要用到四个软件：</p><ul><li>iw:可用于OPEN、WEP这两种”认证/加密”，以及扫描WIFI热点等；</li><li>wpa_supplicant:可用于前面4种”认证/加密”；</li><li>hostapd:能够使得无线网卡切换为AP模式；</li><li>dhcp:STA模式使WIFI网卡动态获取IP，AP模式分配IP；</li></ul><p>也就是需要移植这四个软件，目前的方法有：<br>1.逐个下载源码，交叉编译，配置，可以还需要相关依赖库，缺点是费时费力；<br>2.使用<code>Yocto</code>等工具，制作发行版的根文件系统，例如Ubuntu16.04，里面有apt-get，可以自动下载安装，缺点是制作发行版根文件系统比较麻烦，且体积较大；<br>3.使用<code>buildroot</code>制作根文件系统，选择需要的软件，自动生成根文件系统，相对简单，体积也较小；</p><p>本次就以buildroot为例，制作含需要应用程序的根文件系统。</p><ul><li><p>首先从GitHub下载针对Tiny4412修改后的buidroot</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone -b board_tiny4412 https://github.com/hceng/buildroot.git</div></pre></td></tr></table></figure></li><li><p>查看支持的board</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd buildroot/</div><div class="line">make list-defconfigs</div></pre></td></tr></table></figure></li></ul><p>得知tiny4412对应的配置文件:<code>tiny4412_defconfig                  - Build for tiny4412</code>；</p><ul><li><p>配置提供的配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make tiny4412_defconfig</div></pre></td></tr></table></figure></li><li><p>添加自己所需软件<br>执行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make menuconfig</div></pre></td></tr></table></figure></li></ul><p>对应勾选所需软件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">Target packages  ---&gt;</div><div class="line">    Networking applications  ---&gt;</div><div class="line">        [*] dhcp (ISC)                                                </div><div class="line">            [*]   dhcp server                                      </div><div class="line">                [*]     Enable delayed ACK feature                     </div><div class="line">            [*]   dhcp relay                                       </div><div class="line">            [*]   dhcp client </div><div class="line">        ……</div><div class="line">        [*] hostapd                                                     </div><div class="line">            [*]   Enable ACS (NEW)                                      </div><div class="line">            [*]   Enable EAP                                            </div><div class="line">            [*]   Enable WPS </div><div class="line">        ……</div><div class="line">        [*] iw</div><div class="line">        ……</div><div class="line">        [*] wpa_supplicant                                               </div><div class="line">            [*]   Enable nl80211 support                                  </div><div class="line">            [*]   Enable AP mode                                           </div><div class="line">            [ ]   Enable EAP                                                  </div><div class="line">            [ ]   Enable HS20                                                 </div><div class="line">            [ ]   Enable syslog support                                       </div><div class="line">            [ ]   Enable WPS                                                  </div><div class="line">            [*]   Install wpa_cli binary                                      </div><div class="line">            [*]   Install wpa_client shared library                           </div><div class="line">            [*]   Install wpa_passphrase binary</div></pre></td></tr></table></figure></p><ul><li><p>修改主机名、欢迎语、root密码等</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">System configuration  ---&gt;</div><div class="line">    (tiny_4412) System hostname  </div><div class="line">    (Welcome to hceng&apos;s board.) System banner  </div><div class="line">    ……</div><div class="line">    [*] Enable root login with password</div><div class="line">    (123456) Root password</div></pre></td></tr></table></figure></li><li><p>生成根文件系统<br>执行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make</div></pre></td></tr></table></figure></li></ul><p><code>buildroot</code>会自动下载相关源码包，整个过程时间比较久，最后生成<code>buildroot/output/images/rootfs.tar</code>，解压到SD卡rootfs分区即可。</p><h2 id="1-5-添加firmware"><a href="#1-5-添加firmware" class="headerlink" title="1.5 添加firmware"></a>1.5 添加firmware</h2><p>此时开发板启动Linux后，使用<code>ifconfig wlan0 up</code>启动无线网卡，提示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ieee80211 phy0: rt2x00lib_request_firmware: Info - Loading firmware file &apos;rt2870.bin&apos;</div><div class="line">rt2800usb 2-2.2:1.0: Direct firmware load for rt2870.bin failed with error -2</div><div class="line">ieee80211 phy0: rt2x00lib_request_firmware: Error - Failed to request Firmware</div><div class="line">ifconfig: SIOCSIFFLAGS: No such file or directory</div></pre></td></tr></table></figure></p><p>提示需要firmware文件<code>rt2870.bin</code>。</p><p>继续通过网站<a href="https://wireless.wiki.kernel.org/en/users/drivers/rt2800usb" target="_blank" rel="external">wireless.wiki.kernel.org</a>去下载<a href="https://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git/snapshot/linux-firmware-master.tar.gz" target="_blank" rel="external">该固件</a>。</p><p>得到<code>rt2870.bin</code>后，拷贝到单板<code>/lib/firmware/</code>下即可。</p><h2 id="1-6-启动WIFI网卡"><a href="#1-6-启动WIFI网卡" class="headerlink" title="1.6 启动WIFI网卡"></a>1.6 启动WIFI网卡</h2><blockquote><p><strong>注意：</strong><br>双网卡的单板的两个网卡IP不能设置为同一网段，原因参考<a href="https://www.zhihu.com/question/41331151" target="_blank" rel="external">这里</a>。</p></blockquote><p>也就是先把有线网卡IP设置为其它网段，比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ifconfig eth0 192.168.2.220</div></pre></td></tr></table></figure></p><p>然后启动WIFI网卡，并设置IP(路由器IP为192.168.1.1)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ifconfig wlan0 up</div><div class="line">ifconfig wlan0 192.168.1.220</div></pre></td></tr></table></figure></p><p>此时效果如下：</p><div align="center"><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180621/3.jpg"></div><h1 id="2-无线终端模式——STA"><a href="#2-无线终端模式——STA" class="headerlink" title="2.无线终端模式——STA"></a>2.无线终端模式——STA</h1><p>完成前面的准备工作后，就可以通过软件使用无线网卡了。</p><h2 id="2-1-iw的使用"><a href="#2-1-iw的使用" class="headerlink" title="2.1 iw的使用"></a>2.1 iw的使用</h2><ul><li><p>列出WIFI网卡的性能:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iw list</div></pre></td></tr></table></figure></li><li><p>扫描WIFI热点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">iw dev wlan0 scan </div><div class="line">iw dev wlan0 scan | grep SSID:</div></pre></td></tr></table></figure></li><li><p>连接到开放AP</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iw wlan0 connect hceng</div></pre></td></tr></table></figure></li><li><p>查看连接状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iw dev wlan0 link</div></pre></td></tr></table></figure></li><li><p>断开WIFI连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iw wlan0 disconnect</div></pre></td></tr></table></figure></li></ul><p>还可以连接加密的WEP，这里就不研究了。</p><blockquote><p><strong>注意：</strong><br>1.如果连接的不是路由器(IP为<code>192.168.1.1</code>)，而是Android手机热点(IP一般为<code>192.168.43.1</code>)，那么要将WIFI网卡IP设置为43网段，如:<code>192.168.43.10</code>，才能ping通<code>192.168.43.1</code>。<br>　<br>2.此时只能ping路由器和局域网设备，如果要联外网，还需要如下操作：<br>①修改<code>/etc/resolv.conf</code>，添加DNS:<code>nameserver 192.168.1.1</code>，如果是手机热点为<code>nameserver 192.168.43.1</code>；<br>②设置网关，输入命令:<code>route add default gw 192.168.1.1</code>，如果是手机热点为<code>route add default gw 192.168.43.1</code>；</p></blockquote><div align="center"><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180621/4.jpg"></div><h2 id="2-2-wpa-supplicant的使用"><a href="#2-2-wpa-supplicant的使用" class="headerlink" title="2.2 wpa_supplicant的使用"></a>2.2 wpa_supplicant的使用</h2><p><code>wpa_supplicant</code>本是开源项目，被谷歌修改后加入android移动平台，它主要是用来支持WEP，WPA/WPA2和WAPI无线协议和加密认证的。<br><code>wpa_supplicant</code>是一个连接、配置WIFI的工具，它主要包含<code>wpa_supplicant</code>(命令行模式)与<code>wpa_cli</code>(交互模式)两个程序。<br>通常情况下，可以通过<code>wpa_cli</code>来进行WIFI的配置与连接，如果有特殊的需要，可以编写应用程序直接调用<code>wpa_supplicant</code>的接口直接开发。</p><p>记得以前想查看Android手机连接过的WIFI热点密码时，就直接使用RE文件管理器查看<code>/data/misc/wifi/wpa_supplicant.conf</code>即可(需ROOT)，里面有所有连接过的WIFI名字和密码。<br>从这里可以看出，最后WIFI名字和密码，都会被保存到一个配置文件里，在Linux中，路径就是<code>/etc/wpa_supplicant.conf</code>。</p><ul><li>连接开放网络<br>向<code>/etc/wpa_supplicant.conf</code>加入：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">network=&#123;</div><div class="line">    ssid=&quot;hceng&quot;</div><div class="line">    key_mgmt=NONE</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><p>初始化wpa_supplicant，执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wpa_supplicant -B -d -i wlan0 -c /etc/wpa_supplicant.conf</div></pre></td></tr></table></figure></p><p>查看连接状态：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wpa_cli -iwlan0 status</div></pre></td></tr></table></figure></p><p>断开连接：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">wpa_cli -iwlan0 disconnect</div><div class="line"></div><div class="line">killall wpa_supplicant</div></pre></td></tr></table></figure></p><p>重新连接：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wpa_cli -iwlan0 reconnect</div></pre></td></tr></table></figure></p><div align="center"><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180621/5.jpg"></div><ul><li>连接加密网络(WAP2)<br>向<code>/etc/wpa_supplicant.conf</code>加入：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">network=&#123;</div><div class="line">    ssid=&quot;hceng_test&quot;</div><div class="line">    psk=&quot;12345678&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><p>初始化wpa_supplicant，执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wpa_supplicant -B -d -i wlan0 -c /etc/wpa_supplicant.conf</div></pre></td></tr></table></figure></p><div align="center"><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180621/6.jpg"></div><p>至于WEP和WAP方式，也就是配置文件的不同，这里就不去深究了，以后遇到了再说。</p><h2 id="2-3-dhclient的使用"><a href="#2-3-dhclient的使用" class="headerlink" title="2.3 dhclient的使用"></a>2.3 dhclient的使用</h2><p>至此，已经可以连接WIFI了，但还有一些问题。<br>就如前面，需要手动设置设备的IP，且要根据热点的网段设置，还可能与同网段的设备IP冲突。<br>为了解决这个问题，引入了DHCP，自动分配IP地址。</p><p>就像家里的设备连接到路由器一样，除了输入名字，密码，其它都不用操作，而且还不会出现IP冲突的情况。</p><p>连接好WIFI后，输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dhclient wlan0</div></pre></td></tr></table></figure></p><p>实现自动获取分配的IP，并设置。</p><div align="center"><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180621/7.jpg"></div><h2 id="2-4-自动脚本"><a href="#2-4-自动脚本" class="headerlink" title="2.4 自动脚本"></a>2.4 自动脚本</h2><p>现在已经从功能上实现了WIFI无线网卡的使用，但使用过程步骤比较多，相对麻烦。<br>理想的效果无论何时插上WIFI无线网卡，都自动连接WIFI，且自动获取IP地址。</p><p>这就要用到USB的热拔插机制，很久以前写过一篇<a href="https://hceng.cn/2017/04/22/Linux%E8%87%AA%E5%8A%A8%E6%8C%82%E8%BD%BD%E5%8D%B8%E8%BD%BDU%E7%9B%98/" target="_blank" rel="external">U盘自动挂载</a>的文章，用的就是这个机制。</p><ul><li>1.首先修改<code>/etc/mdev.conf</code>配置文件<br>加入WIFI无线网卡的热拔插事件：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># hceng add for wifi</div><div class="line">wlan0           root:root 660 * /sbin/auto_wifi.sh</div></pre></td></tr></table></figure></li></ul><p>其中<code>*</code>表示插拔都执行后面的脚本。</p><ul><li>2.自动连接脚本<code>/sbin/auto_wifi.sh</code><br>但检测到USB网卡插拔后，就会执行该脚本：<figure class="highlight bash"><figcaption><span>[auto_wifi.sh]</span><a href="https://github.com/hceng/learn/blob/master/tiny4412/10_usb_wifi/rootfs/sbin/auto_wifi.sh" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line"><span class="keyword">if</span> [ <span class="variable">$ACTION</span> = <span class="string">"add"</span> ];</div><div class="line"><span class="keyword">then</span></div><div class="line">   <span class="built_in">echo</span> --------usb wifi connect--------- &gt; /dev/console</div><div class="line">   wpa_supplicant -B <span class="_">-d</span> -i wlan0 -c /etc/wpa_supplicant.conf</div><div class="line">   wpa_cli -B -i wlan0 <span class="_">-a</span>/sbin/auto_dhcp.sh</div><div class="line"><span class="keyword">else</span></div><div class="line">   <span class="built_in">echo</span> --------usb wifi disconnect--------- &gt; /dev/console</div><div class="line">   killall wpa_supplicant</div><div class="line">   killall wpa_cli</div><div class="line">   killall dhclient</div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure></li></ul><p>如果是插入USB无线网卡，将执行<code>wpa_supplicant -B -d -i wlan0 -c /etc/wpa_supplicant.conf</code>连接wifi，再执行<code>wpa_cli -B -i wlan0 -a/sbin/auto_dhcp.sh</code>调用dhcp的脚本；</p><p>如果是拔出USB无线网卡，将清除所有相关进程；</p><ul><li>3.自动dhcp脚本<code>/sbin/auto_dhcp.sh</code><figure class="highlight bash"><figcaption><span>[auto_dhcp.sh]</span><a href="https://github.com/hceng/learn/blob/master/tiny4412/10_usb_wifi/rootfs/sbin/auto_dhcp.sh" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line">IFNAME=<span class="variable">$1</span></div><div class="line">CMD=<span class="variable">$2</span></div><div class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$CMD</span>"</span> = <span class="string">"CONNECTED"</span> ]; <span class="keyword">then</span></div><div class="line">   <span class="built_in">echo</span> ========connect <span class="variable">$IFNAME</span>, dhclient <span class="keyword">for</span> it======= &gt; /dev/console</div><div class="line">   dhclient <span class="variable">$IFNAME</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$CMD</span>"</span> = <span class="string">"DISCONNECTED"</span> ]; <span class="keyword">then</span></div><div class="line">   <span class="built_in">echo</span> ========disconnect <span class="variable">$IFNAME</span>, <span class="built_in">kill</span> dhclient <span class="keyword">for</span> it======= &gt; /dev/console</div><div class="line">   killall dhclient</div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure></li></ul><p>如果是连接，将调用<code>dhclient</code>分配IP，反之清除<code>dhclient</code>进程。</p><ul><li>4.为脚本加上可执行权限<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">chmod +x /sbin/auto_wifi.sh</div><div class="line">chmod +x /sbin/auto_dhcp.sh</div></pre></td></tr></table></figure></li></ul><p>最后便可实现自动连接WIFI，且自动获取IP地址。</p><h1 id="3-无线热点模式——AP"><a href="#3-无线热点模式——AP" class="headerlink" title="3.无线热点模式——AP"></a>3.无线热点模式——AP</h1><p>无线热点模式共需要两步操作，先使用<code>hostapd</code>将无线网卡切换成AP模式，再使用<code>dhcpd</code>分配IP。</p><h2 id="3-1-hostapd的使用"><a href="#3-1-hostapd的使用" class="headerlink" title="3.1 hostapd的使用"></a>3.1 hostapd的使用</h2><p>先清除前面STA模式的所有操作，重新启动单板。</p><ul><li>创建<code>/etc/hostapd.conf</code>配置文件</li></ul><p>1.OPEN模式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ctrl_interface=/var/run/hostapd</div><div class="line"></div><div class="line">ssid=hceng</div><div class="line">channel=1</div><div class="line">interface=wlan0</div><div class="line">driver=nl80211</div></pre></td></tr></table></figure></p><p>2.WAP/WAP2模式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">ctrl_interface=/var/run/hostapd</div><div class="line"></div><div class="line">ssid=hceng</div><div class="line">#hw_mode=g</div><div class="line">channel=1</div><div class="line">interface=wlan0</div><div class="line">#bridge=br0</div><div class="line">driver=nl80211</div><div class="line">macaddr_acl=0</div><div class="line">#accept_mac_file=/etc/hostapd.accept</div><div class="line">#deny_mac_file=/etc/hostapd.deny</div><div class="line"></div><div class="line">auth_algs=1</div><div class="line">wpa=3</div><div class="line">wpa_passphrase=12345678</div><div class="line">wpa_key_mgmt=WPA-PSK</div><div class="line">wpa_pairwise=TKIP</div><div class="line">rsn_pairwise=CCMP</div></pre></td></tr></table></figure></p><blockquote><p><strong><a href="https://wiki.gentoo.org/wiki/Hostapd" target="_blank" rel="external">注释</a>：</strong><br><code>ctrl_interface</code>：为了后面<code>hostapd_cli</code>链接上<code>hostapd</code>；<br><code>ssid</code>：无线热点名字；<br><code>hw_mode</code>：指定<a href="https://www.zhihu.com/question/29977752/answer/49806861" target="_blank" rel="external">802.11协议</a>，其中<code>a=IEEE 802.11a</code>，<code>b=IEEE 802.11b</code>， <code>g=IEEE 802.11g</code>；<br><code>channel</code>：设定<a href="https://www.zhihu.com/question/21935550/answer/33608131" target="_blank" rel="external">无线信道</a>；<br><code>interface</code>：指定使用哪一个无线网卡；<br><code>bridge</code>：指定所处网桥，对于一个同时接入公网、提供内部网和无线接入的路由器来说，设定网桥很有必要；<br><code>driver</code>：指定无线驱动；<br><code>macaddr_acl</code>：指定MAC地址过滤规则：<br>　　　　　　　0表示允许除禁止列表外的设备；<br>　　　　　　　1表示只允许在允许列表的设备；<br>　　　　　　　2表示使用外部RADIUS服务器；<br><code>accept_mac_file</code>：指定允许MAC列表文件所在路径；<br><code>deny_mac_file</code>：指定禁止MAC列表文件所在路径；<br><code>auth_algs</code>：指定采用哪种认证算法，采用位域(bit fields)方式来制定；<br>　　　　　　1表示使用WPA；<br>　　　　　　2表示使用WEP；<br>　　　　　　3表示使用WPA/WEP；<br><code>wpa</code>：指定WPA类型，采用位域(bit fields)方式来制定；<br>　　　1表示使用WPA；<br>　　　2表示使用WPA2；<br>　　　3表示使用WPA2/WPA；<br><code>wpa_passphrase</code>：WIFI的密钥；<br><code>wpa_key_mgmt</code>：PSK为个人AP，不使用服务器认证；<br><code>wpa_pairwise</code>：指定WPA的加密方式；<br><code>rsn_pairwise</code>：指定WPA2的加密方式；</p></blockquote><h2 id="3-2-dhcpd的使用"><a href="#3-2-dhcpd的使用" class="headerlink" title="3.2 dhcpd的使用"></a>3.2 dhcpd的使用</h2><p>如果此时启动热点，实测手机一直卡在获取IP地址，无法连接到热点，因此热点还需自动分配IP地址。</p><ul><li>编辑<code>/etc/dhcpcd.conf</code>配置文件<br>将原来的<code>/etc/dhcpcd.conf</code>复制备份，再修改<a href="https://wiki.archlinux.org/index.php/Dhcpd_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87" target="_blank" rel="external">配置文件</a>如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">subnet 192.168.2.0 netmask 255.255.255.0 &#123;</div><div class="line">  range 192.168.2.10 192.168.2.100;</div><div class="line">  option domain-name-servers 192.168.2.1;</div><div class="line">  option routers 192.168.2.1;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><p>指定了子网IP起始地址、子网掩码、动态分配的IP范围、DNS服务器、路由。</p><h2 id="3-3-启动热点"><a href="#3-3-启动热点" class="headerlink" title="3.3 启动热点"></a>3.3 启动热点</h2><ul><li><p>1.启动无线网卡，并设置IP</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ifconfig wlan0 up</div><div class="line">ifconfig wlan0 192.168.2.1</div></pre></td></tr></table></figure></li><li><p>2.启动AP和DHCP<br>启动命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hostapd -B /etc/hostapd.conf</div><div class="line">dhcpd -cf /etc/dhcpcd.conf wlan0</div></pre></td></tr></table></figure></li></ul><p>对应的停止命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">killall hostapd</div><div class="line">killall dhcpd</div></pre></td></tr></table></figure></p><ul><li>3.其它操作<br>查看热点状态：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hostapd_cli all_sta</div></pre></td></tr></table></figure></li></ul><p>查看热点配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hostapd_cli get_config</div></pre></td></tr></table></figure></p><p>查看已连接的设备：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iw dev wlan0 station dump</div></pre></td></tr></table></figure></p><div align="center"><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180621/8.jpg"></div><h2 id="3-4-自动脚本"><a href="#3-4-自动脚本" class="headerlink" title="3.4 自动脚本"></a>3.4 自动脚本</h2><p>和前面的一样，假如希望实现USB无线网卡的热拔插，自动进入AP模式，只需如下操作：</p><ul><li><p>1.首先修改<code>/etc/mdev.conf</code>配置文件<br>加入WIFI无线网卡的热拔插事件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># hceng add for wifi</div><div class="line">#wlan0           root:root 660 * /sbin/auto_wifi.sh</div><div class="line">wlan0           root:root 660 * /sbin/auto_wifi_ap.sh</div></pre></td></tr></table></figure></li><li><p>2.自动AP脚本<code>/sbin/auto_wifi_ap.sh</code><br>但检测到USB网卡插拔后，就会执行该脚本：</p><figure class="highlight bash"><figcaption><span>[auto_wifi_ap.sh]</span><a href="https://github.com/hceng/learn/blob/master/tiny4412/10_usb_wifi/rootfs/sbin/auto_wifi_ap.sh" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line"><span class="keyword">if</span> [ <span class="variable">$ACTION</span> = <span class="string">"add"</span> ];</div><div class="line"><span class="keyword">then</span>                                </div><div class="line">   <span class="built_in">echo</span> --------usb wifi connect--------- &gt; /dev/console</div><div class="line">   hostapd -B /etc/hostapd.conf</div><div class="line">   ifconfig wlan0 192.168.2.1</div><div class="line">   dhcpd -cf /etc/dhcpcd.conf wlan0</div><div class="line"></div><div class="line"><span class="keyword">else</span>                     </div><div class="line">   <span class="built_in">echo</span> --------usb wifi disconnect--------- &gt; /dev/console</div><div class="line">   killall hostapd</div><div class="line">   killall dhcpd</div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure></li><li><p>3.为脚本添加可执行权限<br>执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod +x /sbin/auto_wifi_ap.sh</div></pre></td></tr></table></figure></li></ul><p>之后就插上无线网卡，就自动启动了热点；拔掉无线网卡，就自动关闭热点。</p><hr><p><div align="center"><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本文采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href="http://hceng.cn/" target="_blank" rel="external">hceng’s blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如何在嵌入式Linux中，使用WIFI无线网卡。&lt;br&gt;
    
    </summary>
    
    
      <category term="Linux环境编程" scheme="http://yoursite.com/tags/Linux%E7%8E%AF%E5%A2%83%E7%BC%96%E7%A8%8B/"/>
    
      <category term="WiFi网卡" scheme="http://yoursite.com/tags/WiFi%E7%BD%91%E5%8D%A1/"/>
    
  </entry>
  
  <entry>
    <title>Linux摄像头驱动4——CMOS摄像头</title>
    <link href="http://yoursite.com/2018/05/20/Linux%E6%91%84%E5%83%8F%E5%A4%B4%E9%A9%B1%E5%8A%A84%E2%80%94%E2%80%94CMOS%E6%91%84%E5%83%8F%E5%A4%B4/"/>
    <id>http://yoursite.com/2018/05/20/Linux摄像头驱动4——CMOS摄像头/</id>
    <published>2018-05-20T08:02:12.000Z</published>
    <updated>2018-11-04T09:37:01.208Z</updated>
    
    <content type="html"><![CDATA[<p>Linux摄像头驱动学习第四篇，对CMOS摄像头进行学习，实现在Tiny4412上使用CMOS摄像头采集图像，在LCD上显示图像。<br><a id="more"></a><br>坚持到了Linux摄像头学习的最后一部分——CMOS摄像头。<br>写完本篇博客后，摄像头部分就暂告一个段落，希望以后有机会继续接触更多。</p><h1 id="1-CMOS摄像头基础"><a href="#1-CMOS摄像头基础" class="headerlink" title="1.CMOS摄像头基础"></a>1.CMOS摄像头基础</h1><p>本次使用的是<a href="http://www.100ask.org/" target="_blank" rel="external">百问网</a>提供的OV7740摄像头模块，先对该模块的基础知识进行整理。</p><p>CMOS摄像头是指采用<strong>CMOS图像传感器</strong>的摄像头。<br>CMOS摄像头的结构一般如下：</p><div align="center"><img width="497" height="332" src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180520/1.jpg"></div><h2 id="1-1-摄像头参数"><a href="#1-1-摄像头参数" class="headerlink" title="1.1 摄像头参数"></a>1.1 摄像头参数</h2><p>根据OV7740的<a href="http://www.dragonwake.com/download/camera/vc0706_spi/OV7740_CSP.pdf" target="_blank" rel="external">datasheet</a>可以得到以下特性和参数：</p><blockquote><ul><li>support for output formats: RAW RGB and YUV</li><li>output formats: 8-/10-bit RAW RGB data, 8-bit YUV　　<strong>[注1]</strong></li><li>support for image sizes: VGA, and QVGA, CIF and any size smaller　　<strong>[注2]</strong></li><li>active array size: 656 x 488</li><li>lens size: 1/5”</li><li>pixel size: 4.2 μm x 4.2 μm　　<strong>[注3]</strong></li><li>input clock frequency: 6 ~ 27 MHz　　<strong>[注4]</strong></li><li>scan mode: progressive　　<strong>[注5]</strong></li></ul></blockquote><ul><li><p><strong>[注1]</strong><br>①:输出的格式支持8/10bit的<strong><code>RAW RGB</code>格式</strong>，8bit的<strong><code>YUV</code>格式</strong>；<br>②:<code>RAW RGB</code>就只有红绿蓝三种颜色的数据，而RGB数据不仅只表示红绿蓝三种颜色，还能表示由红绿蓝组合成的任何一种颜色；<br>③:YUV:由Y(亮度信号)、U(R-Y的色差信号)、V(B-Y的色差信号)组成，与RGB是两种不同描述颜色的方法，它们的转换公式如下(RGB取值范围均为0-255)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">　Y = 0.299R + 0.587G + 0.114B</div><div class="line">　U = -0.147R - 0.289G + 0.436B</div><div class="line">　V = 0.615R - 0.515G - 0.100B</div><div class="line"></div><div class="line">　R = Y + 1.14V</div><div class="line">　G = Y - 0.39U - 0.58V</div><div class="line">　B = Y + 2.03U</div></pre></td></tr></table></figure></li><li><p><strong>[注2]</strong><br>输出分辨率为：VGA(640x480)、QVGA(240x320)、CIF(352x288)、其它更小的任意大小；</p></li><li><p><strong>[注3]</strong><br>①:有效感光阵列的大小:656 x 488 = 320128(30W)，指感光区域内单像素点的数量，像素越多，拍摄画面幅面就越大，可拍摄的画面的细节就越多；<br>②:镜头大小：1/5寸，指感光区域对角线距离，尺寸越大，材料成本越高；<br>③:像素大小: 4.2μm x 4.2μm，指单个感光元件的长宽尺寸，也称单像素的开口尺寸，开口尺寸越大，单位时间内进入的光量就越大，芯片整体性能就相对较高，最终拍摄画面的整体画质相对较优秀；</p></li></ul><p>单像素尺寸是图像传感器一个相当关键的参数，也就是都号称1200万像素的相机和手机，相机的效果远远好于手机的原因。手机由于体积限制，尽管像素很多，但每个像素都很小，拍摄瞬间进光量也小，成像质量就自然差一些了。</p><ul><li><p><strong>[注4]</strong><br>输入时钟频率: 6~27MHz<br>即0V7740摄像头模组的工作时钟范围，这个将由SOC提供给CMOS；</p></li><li><p><strong>[注5]</strong><br>扫描模式: 连续扫描(P)<br>扫描方式一般分为”逐行扫描”(P)和”隔行扫描”(I)两种。<br><strong>逐行扫描</strong>:每一帧图像由电子束顺序地一行接着一行连续扫描而成；<br><strong>隔行扫描</strong>:把每一帧图像通过两场扫描完成则是隔行扫描，两场扫描中，第一场（奇数场）只扫描奇数行，依次扫描1、3、5…行，而第二场（偶数场）只扫描偶数行，依次扫描2、4、6…行。<br>隔行扫描技术在传送信号带宽不够的情况下起了很大作用，逐行扫描和隔行扫描的显示效果主要区别在稳定性上面，隔行扫描的行间闪烁比较明显，逐行扫描克服了隔行扫描的缺点，画面平滑自然无闪烁。</p></li></ul><hr><p>再来看看OV7740的内部数据处理框图：</p><div align="center"><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180520/2.jpg"></div><p>分为了三部分：</p><ul><li><p>image sensor core(ISC)<br>功能：图像翻转、增益大小调整、黑电平校准、饱和度的控制、OTP存储器；</p></li><li><p>image sensor processor(ISP)<br>功能：提供测试功能、镜头补偿功能、自动白平衡、颜色空间的转换功能（RAW RGB-&gt;RGB、RGB-&gt;YUV）、窗口功能(自动裁剪图片)、缩小放大功能；</p></li><li><p>image output interface(ISI)<br>功能：RAW RGB/YUV(图片数据格式)、VGA/QVGA、BT601/BT656<br>BT601有独立的行同步信号线、帧同步信号线，而BT656是将这两种信号内嵌到数据中；</p></li></ul><h2 id="1-2-硬件接口"><a href="#1-2-硬件接口" class="headerlink" title="1.2 硬件接口"></a>1.2 硬件接口</h2><p>CMOS摄像头模块对外的接口如下：</p><div align="center"><img width="283" height="363" src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180520/3.jpg"></div><p>对应接到Tiny4412的引脚：</p><div align="center"><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180520/4.jpg"></div><p>按功能可以将接口分为两类：</p><ul><li><strong> 控制类：</strong></li></ul><table><thead><tr><th style="text-align:center">名字</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">I2CSDA</td><td style="text-align:center">I2C总线的数据线</td></tr><tr><td style="text-align:center">I2CSCL</td><td style="text-align:center">I2C总线的时钟线</td></tr></tbody></table><p><strong>功能：</strong><br>①：初始化：对摄像头模块进行相应的初始化操作，让摄像头模块能够正常的输出摄像头数据；<br>②：控制: 设置亮度、旋转、缩放等操作；</p><ul><li><strong> 数据传输类：</strong></li></ul><table><thead><tr><th style="text-align:center">名字</th><th style="text-align:center">功能</th><th style="text-align:center">输入/输出(针对模块)</th></tr></thead><tbody><tr><td style="text-align:center">CAMRST</td><td style="text-align:center">复位CMOS摄像头模块</td><td style="text-align:center">Input</td></tr><tr><td style="text-align:center">CAMCLK</td><td style="text-align:center">摄像头模块工作的系统时钟(24MHz)</td><td style="text-align:center">Input</td></tr><tr><td style="text-align:center">CAM_HREF</td><td style="text-align:center">行同步信号</td><td style="text-align:center">Output</td></tr><tr><td style="text-align:center">CAM_VSYNC</td><td style="text-align:center">帧同步信号</td><td style="text-align:center">Output</td></tr><tr><td style="text-align:center">CAM_PCLK</td><td style="text-align:center">像素时钟</td><td style="text-align:center">Output</td></tr><tr><td style="text-align:center">CAMDATA0~7</td><td style="text-align:center">八根数据线</td><td style="text-align:center">Output</td></tr></tbody></table><p><strong>功能：</strong><br>传输图像数据，类似LCD的RGB接口；</p><p>摄像头工作流程：<br><strong>首先SOC输出MCLK给摄像头提供时钟，然后控制CAMRST复位摄像头，再通过I2C初始化、设置摄像头，最后在HREF、VSYNC和PCLK的控制下，通过D0~D7这八根数据线将数据发给SOC。</strong></p><h2 id="1-3-Camera控制器"><a href="#1-3-Camera控制器" class="headerlink" title="1.3 Camera控制器"></a>1.3 Camera控制器</h2><p>前面所示的电路是<strong>ITU-R BT-601/656接口</strong>，除此之外，Exynos4412还支持<strong>AXI-bus接口</strong>和<strong>MIPI (CSI)接口</strong>。<br>Exynos4412通过CAMIF(Camera Interface)来选择输入源等操作。就目前了解的来看，高像素的摄像头一般采<br>用MIPI(CSI)接口。这里使用的是<strong>ITU-R BT-601接口</strong>，后面有机会再试试MIPI(CSI)接口。</p><p>摄像头的采集的数据CPU一般不直接处理，主控芯片里面集成了Camera控制器FIMC(FullyInteractive Mobile Camera)来处理。<br>摄像头先把图像数据传给Camera控制器，经过控制器处理(裁剪拉升后直接预览或者编码)之后交给CPU处理。<br>实际上摄像头工作需要的时钟(MCLK)也是FIMC给它提供的。</p><p>摄像头的驱动主要分为两部分:<br>一部分由模组厂家或者sensor厂家提供的初始化代码，通常是一段数组，通过I2C 总线来控制，用于设置sensor 寄存器，使用时一般不需要修改，如需调整，也由模组厂家完成；<br>另外一部分是应用处理器端的代码，这部分需要各个平台自行开发，在Exynos4412中就是CAMIF和FIMC。</p><p>CMOS摄像头模块，实质上是一个I2C设备。通过I2C设置、控制摄像头，SOC的摄像头控制器(CAMIF和FIMC)负责数据的处理。<br>因此后面CMOS驱动的核心就是：<strong>I2C设备驱动+CAMIF驱动+FIMC驱动</strong>。</p><h1 id="2-遇到问题"><a href="#2-遇到问题" class="headerlink" title="2.遇到问题"></a>2.遇到问题</h1><p>1.实测OV7740模块I2C通信时，必须要提供PCLK，而不是MCLK，这里和理解的刚好相反，检查硬件也没发现什么问题，待解决；<br>2.内核自带了FIMC驱动、CAMIF驱动是非4412的，用起来悬，没找到相关成功的demo，测试摸索了一段时间无果，功力不够，决定暂时搁置，回头再来研究；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">bakup：</div><div class="line"># 2.驱动框架 #</div><div class="line">## 1.1 设备树文件 ##</div><div class="line"># 3.寄存器分析 #</div><div class="line"># 4.测试 #</div></pre></td></tr></table></figure><!--   xxxxxxxxxx   --> <p>参考资料：<br><a href="https://www.cnblogs.com/fjutacm/p/220631977df995512d136e4dbd411951.html" target="_blank" rel="external">camera理论基础和工作原理</a><br><a href="http://www.ccm99.com/thread-3492-1-1.html" target="_blank" rel="external">详细的摄像头模组工作原理(使用samsung系列处理器)</a></p><hr><p><div align="center"><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本文采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href="http://hceng.cn/" target="_blank" rel="external">hceng’s blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Linux摄像头驱动学习第四篇，对CMOS摄像头进行学习，实现在Tiny4412上使用CMOS摄像头采集图像，在LCD上显示图像。&lt;br&gt;
    
    </summary>
    
    
      <category term="Linux驱动" scheme="http://yoursite.com/tags/Linux%E9%A9%B1%E5%8A%A8/"/>
    
      <category term="摄像头" scheme="http://yoursite.com/tags/%E6%91%84%E5%83%8F%E5%A4%B4/"/>
    
      <category term="CMOS" scheme="http://yoursite.com/tags/CMOS/"/>
    
  </entry>
  
  <entry>
    <title>Linux摄像头驱动3——LCD显示</title>
    <link href="http://yoursite.com/2018/05/18/Linux%E6%91%84%E5%83%8F%E5%A4%B4%E9%A9%B1%E5%8A%A83%E2%80%94%E2%80%94LCD%E6%98%BE%E7%A4%BA/"/>
    <id>http://yoursite.com/2018/05/18/Linux摄像头驱动3——LCD显示/</id>
    <published>2018-05-18T08:01:05.000Z</published>
    <updated>2018-11-04T09:35:55.383Z</updated>
    
    <content type="html"><![CDATA[<p>Linux摄像头驱动学习第三篇，在Tiny4412的LCD上显示摄像头采集图像。<br><a id="more"></a><br>前面的UVC驱动，实现了在Ubuntu主机上显示摄像头采集的图像，但那不是最终目的，最终目的是在嵌入式设备上显示图像。<br>本篇博客尝试写一个应用程序，实现USB摄像头采集的图像在Tiny4412的LCD上显示。所以本篇算不上驱动开发，更多的是Linux环境下编程。</p><h1 id="1-将驱动加入内核"><a href="#1-将驱动加入内核" class="headerlink" title="1.将驱动加入内核"></a>1.将驱动加入内核</h1><p>在开始应用编程之前，需要先准备好驱动，在LCD上显示摄像头图像，至少需要三个驱动：LCD驱动、背光驱动、UVC驱动。<br>这三个驱动都在前面写过了，只需要加载即可。以前都是使用的<code>insmod xx.ko</code>进行动态加载驱动，每次开发板上电后，都需要手动/脚本里加载驱动，有点麻烦。<br>反观内核自带的驱动，使用<code>make menuconfig</code>进入图形配置界面里，找到对应的驱动，可以设置为<code>Y</code>(编译到内核)、<code>M</code>(编译成模块)、<code>N</code>(不编译)。当设置为<code>Y</code>后，进入系统后，就自带了该驱动，不再需要手动加载。</p><p>前者常用于<strong>调试阶段</strong>，就算驱动有问题，内核崩溃了，下次内核还能正常启动，修改驱动后重新加载，很方便。<br>后者常用于<strong>发布阶段</strong>，加入到内核，就不能再修改了，也就少了一些加载驱动的操作。</p><p>本次就仿照内核的方式，使用<code>make menuconfig</code>将驱动直接加到内核里。<br>在这之前需要理解三个文件：</p><ul><li><strong>Kconfig</strong>：<code>driver/</code>下的每个目录都有，在内核配置时候，提供配置选项；</li><li><strong>Makefile</strong>：<code>driver/</code>下的每个目录都有，在编译的时候，判断是否加入内核；</li><li><strong>.config</strong>:在源码根目录下，作为最终的内核编译的依据；</li></ul><p>因此，以上三个文件，是主要影响内核模块编译的文件，后面只需要修改这三个文件即可。</p><ul><li><p><strong>1.创建驱动目录</strong><br>在<code>driver/</code>目录下新建一个<code>hceng_drv</code>目录作为存放自己驱动源码的目录。</p></li><li><p><strong>2.创建底层配置文件</strong><br>在<code>driver/hceng_drv/</code>下创建<code>Kconfig</code>和<code>Makefile</code>，并将驱动源码<code>backlight_drv.c</code>、<code>lcd_drv.c</code>、<code>uvc_drv.c</code>，也放在里面。<br>编辑<code>Kconfig</code>如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">#</div><div class="line"># Backlight &amp;&amp; LCD &amp;&amp; UVC device configuration</div><div class="line">#</div><div class="line"></div><div class="line">menu &quot;Hceng add driver&quot;</div><div class="line">config BACKLIGHT</div><div class="line">tristate &quot;Backlight support&quot;</div><div class="line">default y  </div><div class="line">help</div><div class="line">  This is backlight driver to tiny4412 from hceng.</div><div class="line"> </div><div class="line">config LCD</div><div class="line">tristate &quot;LCD support&quot;</div><div class="line">depends on BACKLIGHT </div><div class="line">default y </div><div class="line">help</div><div class="line">  This is LCD driver to tiny4412 from hceng. </div><div class="line">  </div><div class="line">config UVC</div><div class="line">tristate &quot;UVC support&quot;</div><div class="line">depends on BACKLIGHT &amp;&amp; LCD</div><div class="line">default y </div><div class="line">help</div><div class="line">  This is UVC driver to tiny4412 from hceng.</div><div class="line">  </div><div class="line">endmenu</div></pre></td></tr></table></figure></li></ul><p>包含在<code>menu</code>/<code>endmenu</code>中的内容会成为<code>Hceng add driver</code>的子菜单；<br>每一个子菜单项都是由<code>config</code>来定义的；<br><code>congfig</code>下方的<code>tristate</code>、<code>depends on</code>、<code>default</code>、<code>help</code>等为<code>config</code>的属性，用于定义该菜单项的类型、依赖项、默认值、帮助信息等；</p><p>编辑<code>Makefile</code>如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">obj-$(CONFIG_BACKLIGHT)+= backlight_drv.o</div><div class="line">obj-$(CONFIG_LCD)    += lcd_drv.o</div><div class="line">obj-$(CONFIG_UVC)    += uvc_drv.o</div></pre></td></tr></table></figure></p><p>根据<code>CONFIG_*</code>是<code>y</code>、<code>m</code>还是<code>n</code>，再决定是否将后面的<code>*.o</code>编译到内核。<br>这里的<code>CONFIG_*</code>就是由最后的<code>.config</code>决定。</p><ul><li><strong>3.编辑上级配置文件</strong><br>这里我的<code>hceng_drv/</code>上级是<code>driver/</code>，因此修改<code>driver/</code>下的<code>Kconfig</code>和<code>Makefile</code>。<br>修改<code>Kconfig</code>，在<code>menu</code>/<code>endmenu</code>之间的任意位置添加：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source &quot;drivers/hceng_drv/Kconfig&quot;</div></pre></td></tr></table></figure></li></ul><p>这里的写的位置，会影响在<code>make menuconfig</code>，即这里写得比较靠前，在配置界面也是比较靠前。</p><p>修改<code>Makefile</code>，在任意位置添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">obj-$(CONFIG_BACKLIGHT) += hceng_drv/</div><div class="line">obj-$(CONFIG_LCD)       += hceng_drv/</div><div class="line">obj-$(CONFIG_UVC)       += hceng_drv/</div></pre></td></tr></table></figure></p><ul><li><strong>4.配置</strong><br>执行<code>make menuconfig</code>，在配置界面找到：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Device Drivers  ---&gt;</div><div class="line">    Hceng add driver  ---&gt;</div></pre></td></tr></table></figure></li></ul><div align="center"><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180518/0.jpg"></div><p>将添加的三个驱动勾选上，最后保存、退出，就将更改的内容写到了<code>.config</code>。<br>最后重新<code>make</code>编译，也得到添加自己驱动的内核。</p><p>也可以直接修改<code>.config</code>配置文件，加入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">CONFIG_BACKLIGHT=y</div><div class="line">CONFIG_LCD=y</div><div class="line">CONFIG_UVC=y</div></pre></td></tr></table></figure></p><p>再<code>make</code>，也一样得到添加自己驱动的内核。</p><h1 id="2-软件框架"><a href="#2-软件框架" class="headerlink" title="2.软件框架"></a>2.软件框架</h1><p>①:首先从摄像头<strong>获取数据</strong>放入<code>video_buf</code>，数据的格式(YUV、MJPEG、RGB)和分辨率可能有多种；<br>②:Tiny4412的LCD仅支持RGB格式，因此需要<strong>数据格式转换</strong>；<br>③:Tiny4412的LCD分辨率是800X480，因此可能需要<strong>大小缩放</strong>；<br>④:根据LCD显示流程，必须要将显示数据<strong>写入显存</strong>(FrameBuffer)；<br>⑤:最后LCD控制器会将显存数据<strong>自动搬运</strong>到LCD/VGA等显示设备上；</p><div align="center"><img width="506" height="367" src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180518/1.jpg"></div><p>在应用编程中，要习惯<strong>面向对象编程(Object Oriented Programming)</strong>，也就是把对象作为程序的基本单元，一个对象包含了<strong>数据</strong>和<strong>操作数据的函数</strong>，在C语言中常常用结构体(<code>struct</code>)来实现。</p><p>关于<strong>Linux内核C语言中的面向对象的实现</strong>，可以参考这篇<a href="http://unicornx.github.io/2016/01/06/20160106-c-oob/" target="_blank" rel="external">博客</a>，介绍了如何C语言实现面向对象，也通过这个能稍微理解Linux驱动中的操作函数的原理。</p><p>这里，模仿内核的编程框架，为每个模块实现一个管理链表，模块对应加入链表，再调用对应的操作函数，框架如下：</p><div align="center"><img width="565" height="441" src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180518/2.jpg"></div><p>这个框架，在这里暂时不能体会到它的优势，以后接触多了，应该就能感受了。</p><p>简单说明下这个框架，主要有四个模块:<br><code>video</code>用于摄像头数据采集，<code>convert</code>用于格式转换、<code>process</code>用于缩放等操作、<code>dispaly</code>用于显示。<br>以<code>convert</code>为例，有一个<code>manager</code>管理每个子模块，将每个子模块放入链表，向上提供统一的操作接口，调用对应文件的操作函数。</p><h1 id="3-编程-获取摄像头数据"><a href="#3-编程-获取摄像头数据" class="headerlink" title="3.编程_获取摄像头数据"></a>3.编程_获取摄像头数据</h1><p>使用结构体<code>video_device</code>来表示<strong>摄像头设备</strong>，包含了设备的文件句柄、像素格式、分辨率、buf信息、操作函数等：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> video_device &#123;</div><div class="line">    <span class="keyword">int</span> fd;            <span class="comment">//文件句柄</span></div><div class="line">    <span class="keyword">int</span> pixel_format;  <span class="comment">//像素格式</span></div><div class="line">    <span class="keyword">int</span> width, height; <span class="comment">//分辨率:宽*高</span></div><div class="line"></div><div class="line">    <span class="keyword">int</span> buf_count;     <span class="comment">//buf数量</span></div><div class="line">    <span class="keyword">int</span> buf_maxlen;    <span class="comment">//每个buf最大长度</span></div><div class="line">    <span class="keyword">int</span> buf_cur_index; <span class="comment">//当前buf索引</span></div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *video_buf[VIDEO_BUFFER_NUM]; <span class="comment">//每个video buf的地址</span></div><div class="line"></div><div class="line">    <span class="comment">//操作函数</span></div><div class="line">    p_video_operations p_video_fops;</div><div class="line">    </div><div class="line">&#125;video_device, *p_video_device;</div><div class="line"></div><div class="line"><span class="comment">//摄像头设备的操作函数</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> video_operations &#123;</div><div class="line">    <span class="keyword">char</span> *name;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> (*init_device)(<span class="keyword">char</span> *dev_name, p_video_device p_video_dev);</div><div class="line">    <span class="keyword">int</span> (*exit_device)(p_video_device p_video_dev);</div><div class="line">    </div><div class="line">    <span class="keyword">int</span> (*get_format)(p_video_device p_video_dev);</div><div class="line">    </div><div class="line">    <span class="keyword">int</span> (*get_frame)(p_video_device p_video_dev, p_video_buffer p_video_buf); </div><div class="line">    <span class="keyword">int</span> (*put_frame)(p_video_device p_video_dev, p_video_buffer p_video_buf); </div><div class="line"></div><div class="line">    <span class="keyword">int</span> (*start_device)(p_video_device p_video_dev);</div><div class="line">    <span class="keyword">int</span> (*stop_device)(p_video_device p_video_dev);</div><div class="line"></div><div class="line">    <span class="keyword">struct</span> video_operations *p_next;</div><div class="line">&#125;video_operations, *p_video_operations;</div></pre></td></tr></table></figure></p><p>使用结构体<code>video_buffer</code>来表示<strong>摄像头采集的数据</strong>，包含每帧数据信息、像素格式等：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//图片像素的数据</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> pixel_datas &#123;</div><div class="line"><span class="keyword">int</span> width;                       <span class="comment">//宽度: 一行有多少个像素</span></div><div class="line"><span class="keyword">int</span> height;                      <span class="comment">//高度: 一列有多少个像素</span></div><div class="line"><span class="keyword">int</span> bpp;                         <span class="comment">//一个像素用多少位来表示</span></div><div class="line"><span class="keyword">int</span> line_bytes;                  <span class="comment">//一行数据有多少字节</span></div><div class="line"><span class="keyword">int</span> total_bytes;                 <span class="comment">//所有字节数</span></div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> *pixel_datas_addr; <span class="comment">//像素数据存储的地址</span></div><div class="line">&#125;pixel_datas, *p_pixel_datas;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//摄像头的数据</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> video_buffer &#123;</div><div class="line">    pixel_datas pixel_datas;   <span class="comment">//图片像素的数据</span></div><div class="line">    <span class="keyword">int</span> pixel_format;          <span class="comment">//像素的格式</span></div><div class="line">&#125;video_buffer, *p_video_buffer;</div></pre></td></tr></table></figure></p><h2 id="3-1-video-manager-c"><a href="#3-1-video-manager-c" class="headerlink" title="3.1 video_manager.c"></a>3.1 video_manager.c</h2><p><code>video_manager.c</code>主要功能是操作<code>video_operations</code>构成的链表，涉及的函数有：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">register_video_ops</span><span class="params">(p_video_operations p_video_ops)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">show_video_ops</span><span class="params">(<span class="keyword">void</span>)</span></span>;</div><div class="line"><span class="function">p_video_operations <span class="title">get_video_ops</span><span class="params">(<span class="keyword">char</span> *name)</span></span>;</div></pre></td></tr></table></figure><br>此外，通过<code>video_device_init()</code>初始化链表上指定设备节点的设备，通过<code>video_init()</code>注册设备。</p><div align="center"><img width="351" height="180" src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180518/4.jpg"></div><p>对链表的操作比较简单，见<a href="https://github.com/hceng/learn/blob/master/tiny4412/09_video2lcd/app_code/video/video_manager.c" target="_blank" rel="external">GitHub</a>。</p><h2 id="3-2-v4l2-c"><a href="#3-2-v4l2-c" class="headerlink" title="3.2 v4l2.c"></a>3.2 v4l2.c</h2><p>首先构建一个<code>video_operations</code>结构体，然后注册并具体实现函数的功能。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//构造一个video_operations结构体</span></div><div class="line"><span class="keyword">static</span> video_operations v4l2_video_ops =</div><div class="line">&#123;</div><div class="line">    .name        = <span class="string">"v4l2"</span>,</div><div class="line"></div><div class="line">    .init_device  = v4l2_init_device,</div><div class="line">    .exit_device  = v4l2_exit_device,</div><div class="line"></div><div class="line">    .get_format   = v4l2_get_format,</div><div class="line"></div><div class="line">    .get_frame    = v4l2_get_frame_streaming,</div><div class="line">    .put_frame    = v4l2_put_frame_streaming,</div><div class="line"></div><div class="line">    .start_device = v4l2_start_device,</div><div class="line">    .stop_device  = v4l2_stop_device,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/* 注册这个结构体 */</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">v4l2_init</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> register_video_ops(&amp;v4l2_video_ops);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>首先是<code>v4l2_init_device()</code>，它的内容比较多，前面写<code>uvc</code>驱动的时候，对应用层的操作其实都脑补了一遍，包含的步骤如下:</p><blockquote><p>1.<strong>VIDIOC_QUERYCAP</strong>:获取设备信息(是否为摄像头、名字、版本等)<br>2.<strong>VIDIOC_ENUM_FMT</strong>:查询支持哪些种格式<br>3.<strong>VIDIOC_S_FMT</strong>:设置设备使用何种格式<br>4.<strong>VIDIOC_REQBUFS</strong>:申请buf<br>5.根据接口类型进行对应操作(streaming接口需要映射)<br>　　streaming接口：<br>　　　　6.1查询分配的buf(获得每个buf大小、偏移)<br>　　　　6.2映射buf到用户空间(将用户空间buf和内核空间buf 进行绑定)<br>　　　　6.3将映射的buf放入驱动的buf队列<br>　　readwrite接口：<br>　　　　7.1准备read()所需参数</p></blockquote><p><strong>这样一系列操作后，<code>p_video_dev</code>就包含了几乎摄像头设备的所有信息。</strong></p><ul><li><p>对于streaming接口，使用<code>v4l2_get_frame_streaming()</code>和<code>v4l2_put_frame_streaming()</code>来获取数据。<br>首先<code>poll()</code>查询是否有数据，使用<code>VIDIOC_DQBUF</code>从队列取出数据，最后再<code>VIDIOC_QBUF</code>放入队列。</p></li><li><p>对于streaming接口，使用<code>v4l2_get_frame_readwrite()</code>来获取数据。</p></li></ul><p><strong>无论是何种方式，最后<code>p_video_buf</code>就包含了摄像头采集的图像数据。</strong></p><div align="center"><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180518/5.jpg?v=1"></div><h1 id="4-编程-格式转换"><a href="#4-编程-格式转换" class="headerlink" title="4.编程_格式转换"></a>4.编程_格式转换</h1><p>前面的UVC驱动，通过USB设备描述符知道了摄像头图像数据格式是MJPEG，而LCD只支持RGB格式，且前面LCD驱动，设置的LCD为RGB32格式。因此这里需要把MJPEG转换成RGB32格式。</p><p>使用结构体<code>video_convert</code>来表示一种转换，包含名字、判断是否支持转换、转换等：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> video_convert</div><div class="line">&#123;</div><div class="line">    <span class="keyword">char</span> *name;</div><div class="line">    <span class="keyword">int</span> (*judge_support)(<span class="keyword">int</span> pixel_format_in, <span class="keyword">int</span> pixel_format_out);</div><div class="line">    <span class="keyword">int</span> (*convert)(p_video_buffer video_buf_in, p_video_buffer video_buf_out);</div><div class="line">    <span class="keyword">int</span> (*convert_exit)(p_video_buffer video_buf_out);</div><div class="line">    <span class="keyword">struct</span> video_convert *p_next;</div><div class="line">&#125; video_convert, *p_video_convert;</div></pre></td></tr></table></figure></p><h2 id="4-1-convert-manager-c"><a href="#4-1-convert-manager-c" class="headerlink" title="4.1 convert_manager.c"></a>4.1 convert_manager.c</h2><p>这里依旧使用链表来管理，这里有三类转换：MJPEG转RGB、YUV转RGB、RGB转RGB，将它们都放到链表中，通过<code>get_video_convert_format()</code>传入待转换的格式，从链表中依次查询谁支持该转换，如果支持，就得到<code>p_video_convert</code>，就可以调用到对应的操作函数。<br>从这个例子中，稍微能感受到这个框架的优势，添加新格式的话，将变得很容易。<br>具体的链表操作和前面的差不多。</p><h2 id="4-2-mjpeg2rgb-c"><a href="#4-2-mjpeg2rgb-c" class="headerlink" title="4.2 mjpeg2rgb.c"></a>4.2 mjpeg2rgb.c</h2><p>目前只是需要实现USB摄像头的MJPEG转RGB，所以暂时只对<code>mjpeg2rgb.c</code>分析。<br>需要实现<code>video_convert</code>里构造函数，其中转换的过程是调用的<code>libjpeg</code>库，其转换流程在<a href="https://hceng.cn/2017/12/22/Exynos4412%E2%80%94%E2%80%94LCD%E9%A9%B1%E5%8A%A8/#5-1-%E5%9B%BE%E5%83%8F%E6%98%BE%E7%A4%BA" target="_blank" rel="external">LCD驱动_5.测试程序</a>中有详细的分析，这里只对两个不同点就行分析。</p><ul><li><p>1.转换错误处理函数<br><code>libjpeg</code>库自带的转换错误处理函数在出错时，会退出程序。但在将摄像头图像转换的过程中，某一帧出现问题，可以忽略过去，画面顶多卡顿一下，为了不让程序退出，需要自己定义错误处理函数，并绑定。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> my_error_mgr</div><div class="line">&#123;</div><div class="line"><span class="keyword">struct</span> jpeg_error_mgr pub;</div><div class="line">jmp_buf setjmp_buffer;</div><div class="line">&#125;my_error_mgr, *p_my_error_mgr;</div><div class="line"></div><div class="line"><span class="comment">//参考libjpeg里的bmp.c,自定义的libjpeg库出错处理函数:</span></div><div class="line"><span class="comment">//默认的错误处理函数是让程序退出,这里不让程序退出</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">my_error_exit</span><span class="params">(j_common_ptr cinfo)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">char</span> err_str[JMSG_LENGTH_MAX];</div><div class="line">    </div><div class="line">p_my_error_mgr my_err = (p_my_error_mgr)cinfo-&gt;err;</div><div class="line"></div><div class="line">    <span class="comment">/* Create the message */</span></div><div class="line">    (*cinfo-&gt;err-&gt;format_message) (cinfo, err_str);</div><div class="line">    printf_debug(<span class="string">"%s\n"</span>, err_str);</div><div class="line"></div><div class="line">longjmp(my_err-&gt;setjmp_buffer, <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">……</div><div class="line"></div><div class="line">    cinfo.err = jpeg_std_error(&amp;jerr.pub); <span class="comment">//绑定jerr错误结构体至jpeg对象结构体</span></div><div class="line">    jerr.pub.error_exit = my_error_exit; <span class="comment">//设置为自己定义的出错处理函数</span></div></pre></td></tr></table></figure></li><li><p>2.BPP转换<br>前面LCD驱动里，将LCD设置为了RGB32(实际还是RGB24，多出来的没有使用)，而摄像头采集的数据格式为RGB24，因此需要RGB24转RGB32。</p></li></ul><p>如果源bpp和目标bpp一致，直接<code>memcpy()</code>复制，长度就是宽的像素个数x每个像素由3*8位构成/8位构成一字节：<code>width\*(8+8+8)/8=width\*3</code><br>如果是24BPP转32BPP，需要把源数据变长：</p><div align="center"><img width="884" height="364" src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180518/6.jpg"></div><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//把已经从JPG文件取出的一行像素数据,转换为能在显示设备上使用的格式</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">covert_one_line</span><span class="params">(<span class="keyword">int</span> width, <span class="keyword">int</span> scr_bpp, <span class="keyword">int</span> dst_bpp, </span></span></div><div class="line">                                  <span class="keyword">unsigned</span> <span class="keyword">char</span> *scr_datas, <span class="keyword">unsigned</span> <span class="keyword">char</span> *dst_datas)</div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> i;</div><div class="line"><span class="keyword">int</span> pos = <span class="number">0</span>;</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> red, green, blue, color;</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span> *dst_datas_16bpp = (<span class="keyword">unsigned</span> <span class="keyword">short</span> *)dst_datas;</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span>   *dst_datas_32bpp = (<span class="keyword">unsigned</span> <span class="keyword">int</span> *)dst_datas;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (scr_bpp != <span class="number">24</span>)</div><div class="line"><span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (dst_bpp == <span class="number">24</span>)</div><div class="line"><span class="built_in">memcpy</span>(dst_datas, scr_datas, width*<span class="number">3</span>); <span class="comment">//len=width*(8+8+8)/8=width*3</span></div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; width; i++)</div><div class="line">&#123;</div><div class="line">red   = scr_datas[pos++];</div><div class="line">green = scr_datas[pos++];</div><div class="line">blue  = scr_datas[pos++];</div><div class="line"><span class="keyword">if</span> (dst_bpp == <span class="number">32</span>)</div><div class="line">&#123;</div><div class="line">color = (red &lt;&lt; <span class="number">16</span>) | (green &lt;&lt; <span class="number">8</span>) | blue;</div><div class="line">*dst_datas_32bpp = color;</div><div class="line">dst_datas_32bpp++;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span> (dst_bpp == <span class="number">16</span>)</div><div class="line">&#123;</div><div class="line"><span class="comment">/* 565 */</span></div><div class="line">red   = red &gt;&gt; <span class="number">3</span>;</div><div class="line">green = green &gt;&gt; <span class="number">2</span>;</div><div class="line">blue  = blue&gt;&gt; <span class="number">3</span>;</div><div class="line">color = (red &lt;&lt; <span class="number">11</span>) | (green &lt;&lt; <span class="number">5</span>) | (blue);</div><div class="line">*dst_datas_16bpp = color;</div><div class="line">dst_datas_16bpp++;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>即先定义一个<code>unsigned int *</code>类型的指针<code>dst_datas_32bpp</code>，先提取出r、g、b，再组成新格式，复制给指针指向的变量，由于是<code>unsigned int *</code>类型的指针，指针每增加1，实际移动32位，即刚好指向下一个像素。连续操作后，<code>dst_datas</code>指针指向的位置，就是转换后的数据开始位置。</p><h1 id="5-编程-图像处理"><a href="#5-编程-图像处理" class="headerlink" title="5.编程_图像处理"></a>5.编程_图像处理</h1><p>处理部分有两个操作，一个是图像的缩放，一个是将图片放在Framebuffer指定位置。</p><h2 id="5-1-zoom-c"><a href="#5-1-zoom-c" class="headerlink" title="5.1 zoom.c"></a>5.1 zoom.c</h2><p><a href="http://blog.chinaunix.net/uid-22915173-id-2185545.html" target="_blank" rel="external">图像的缩放算法</a>没有去深入研究，这里只简单的学习了下<code>近邻取样插值缩放法</code>。<br>巧的是LCD分辨率是<code>800*480</code>，摄像头采集的图片分辨率是<code>640*480</code>，两者的宽是一样的，实际上并没有用到缩放。<br>缩放的原理还是比较简单，图片 某个像素的长/宽 与 图片的长/宽 比值是始终不变的，根据这一规则，可以得到坐标的两个关系：</p><div align="center"><img width="613" height="341" src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180518/7.jpg"></div><p>因此，已知缩放后图片中的任意一点<code>(Dx, Dy)</code>，可以求得其对应的原图片中的点<code>Sx=Dx*Sw/Dw，Sy=Dy*Sh/Dh</code>，然后直接复制对应原图图像数据到对应的缩放后的图片位置。<br>此外，为了避免每行重复计算，先将<code>Sx=Dx*Sw/Dw</code>的计算结果保存下来，在每行的处理里直接调用。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//近邻取样插值方法缩放图片</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">pic_zoom</span><span class="params">(p_pixel_datas origin_pic, p_pixel_datas zoom_pic)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> x, y;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> scr_y;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *scr, *dest;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> *src_x_table;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> dst_width   = zoom_pic-&gt;width;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> pixel_bytes = origin_pic-&gt;bpp / <span class="number">8</span>;</div><div class="line"></div><div class="line">    printf_debug(<span class="string">"src:\n"</span>);</div><div class="line">    printf_debug(<span class="string">"%d x %d, %d bpp, data: 0x%x\n"</span>, origin_pic-&gt;width, origin_pic-&gt;height,</div><div class="line">                 origin_pic-&gt;bpp, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)origin_pic-&gt;pixel_datas_addr);</div><div class="line"></div><div class="line">    printf_debug(<span class="string">"dest:\n"</span>);</div><div class="line">    printf_debug(<span class="string">"%d x %d, %d bpp, data: 0x%x\n"</span>, zoom_pic-&gt;width, zoom_pic-&gt;height,</div><div class="line">                 zoom_pic-&gt;bpp, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)zoom_pic-&gt;pixel_datas_addr);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (origin_pic-&gt;bpp != zoom_pic-&gt;bpp)</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line"></div><div class="line">    src_x_table = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span>) * dst_width);</div><div class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == src_x_table)</div><div class="line">    &#123;</div><div class="line">        printf_debug(<span class="string">"malloc error!\n"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; x &lt; dst_width; x++) <span class="comment">//生成表 src_x_table</span></div><div class="line">        src_x_table[x] = (x * origin_pic-&gt;width / zoom_pic-&gt;width);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (y = <span class="number">0</span>; y &lt; zoom_pic-&gt;height; y++)</div><div class="line">    &#123;</div><div class="line">        scr_y = (y * origin_pic-&gt;height / zoom_pic-&gt;height);</div><div class="line"></div><div class="line">        dest = zoom_pic-&gt;pixel_datas_addr + y * zoom_pic-&gt;line_bytes;</div><div class="line">        scr  = origin_pic-&gt;pixel_datas_addr + scr_y * origin_pic-&gt;line_bytes;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (x = <span class="number">0</span>; x &lt; dst_width; x++)</div><div class="line">        &#123;</div><div class="line">            <span class="comment">//原图座标: src_x_table[x]，src_y       缩放座标: x, y</span></div><div class="line">            <span class="built_in">memcpy</span>(dest + x * pixel_bytes, scr + src_x_table[x]*pixel_bytes, pixel_bytes);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">free</span>(src_x_table);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="5-2-merge-c"><a href="#5-2-merge-c" class="headerlink" title="5.2 merge.c"></a>5.2 merge.c</h2><p>使用<code>pic_merge()</code>函数来实现将图片放在Framebuffer指定位置。<br>前面得到了经过缩放(图片的宽和LCD的宽一致)的图片数据，知道了这个数据的地址，理论上直接放到Frambuffer的起始地址即可，这样图片会以LCD左上角为基点显示图片，显示出来效果如下图1，此情况理想的效果应该如图2所示；<br>如果图片缩放后宽和LCD的宽还不一致，且又把图片数据直接放到Frambuffer的起始地址，则显示效果如图3，此情况理想的效果应该如图4所示；</p><div align="center"><img width="488" height="293" src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180518/8.jpg"></div><p>以图4的极端情况为例，要想图片居中显示，需要<code>(x，y)</code>的坐标，这个简单，用<code>(LCD宽-图片宽)/2</code>得到<code>x</code>，用<code>(LCD高-图片高)/2</code>得到<code>y</code>。<br>还需要将以<code>(0,0)</code>为起点的图片数据，依次复制到以<code>(x，y)</code>为起点，新地址的偏移就是<code>(x，y)</code>前的全部数据。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//将图片放在Framebuffer指定位置</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">pic_merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, p_pixel_datas small_pic, p_pixel_datas big_pic)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> i;</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> *scr;</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> *dst;</div><div class="line"></div><div class="line"><span class="keyword">if</span> ((small_pic-&gt;width &gt; big_pic-&gt;width)   || </div><div class="line">        (small_pic-&gt;height &gt; big_pic-&gt;height) ||</div><div class="line">(small_pic-&gt;bpp != big_pic-&gt;bpp))</div><div class="line"><span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line"></div><div class="line">scr = small_pic-&gt;pixel_datas_addr;</div><div class="line"><span class="comment">//目标地址的偏移就是指定坐标之前的所有数据:y*每行数据+x的数据</span></div><div class="line">dst = big_pic-&gt;pixel_datas_addr + y * big_pic-&gt;line_bytes + x * big_pic-&gt;bpp / <span class="number">8</span>;</div><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; small_pic-&gt;height; i++)</div><div class="line">&#123;</div><div class="line"><span class="built_in">memcpy</span>(dst, scr, small_pic-&gt;line_bytes);</div><div class="line">scr += small_pic-&gt;line_bytes;</div><div class="line">dst += big_pic-&gt;line_bytes;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="6-编程-图像显示"><a href="#6-编程-图像显示" class="headerlink" title="6.编程_图像显示"></a>6.编程_图像显示</h1><p>使用结构体<code>disp_operations</code>来表示显示操作：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> disp_operations &#123;</div><div class="line"><span class="keyword">char</span> *name;                   <span class="comment">//显示模块的名字</span></div><div class="line"><span class="keyword">int</span> x_res;                    <span class="comment">//X分辨率 </span></div><div class="line"><span class="keyword">int</span> y_res;                    <span class="comment">//Y分辨率</span></div><div class="line"><span class="keyword">int</span> bpp;                      <span class="comment">//一个像素用多少位来表示 </span></div><div class="line"><span class="keyword">int</span> line_width;               <span class="comment">//一行数据占据多少字节</span></div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> *dis_mem_addr;  <span class="comment">//显存地址 </span></div><div class="line"><span class="keyword">int</span> (*device_init)(<span class="keyword">char</span> *name);     <span class="comment">//设备初始化函数 </span></div><div class="line"><span class="keyword">int</span> (*show_pixel)(<span class="keyword">int</span> pen_x, <span class="keyword">int</span> pen_y, <span class="keyword">unsigned</span> <span class="keyword">int</span> color); <span class="comment">//把指定座标的像素设为某颜色</span></div><div class="line"><span class="keyword">int</span> (*clean_screen)(<span class="keyword">unsigned</span> <span class="keyword">int</span> back_color);                <span class="comment">//清屏为某颜色</span></div><div class="line"><span class="keyword">int</span> (*show_page)(p_pixel_datas p_pixel_data);                <span class="comment">//显示一页,数据源自p_video_mem</span></div><div class="line"><span class="keyword">struct</span> disp_operations *p_next;                             <span class="comment">//链表</span></div><div class="line">&#125;disp_operations, *p_disp_operations;</div></pre></td></tr></table></figure></p><h2 id="6-1-disp-manager-c"><a href="#6-1-disp-manager-c" class="headerlink" title="6.1 disp_manager.c"></a>6.1 disp_manager.c</h2><p>还是用链表的方式管理图像显示模块，这里的图像显示模块就一个LCD。<br>除了常规的注册、显示、获取ops的函数，还有选中指定显示模块并初始化<code>select_and_init_disp_dev()</code>，获取显示设备的参数<code>get_disp_resolution()</code>，获取显示设备的buf信息<code>get_video_buf_for_disp()</code>，以及LCD显示<code>flush_pixel_datas_to_dev()</code>。</p><h2 id="6-2-lcd-c"><a href="#6-2-lcd-c" class="headerlink" title="6.2 lcd.c"></a>6.2 lcd.c</h2><p><code>lcd.c</code>里填充<code>disp_operations</code>结构体的四个操作函数。</p><ul><li><code>device_init()</code>里通过<code>ioctl()</code>和<code>mmap()</code>得到LCD的可变参数和映射地址，保存到<code>disp_operations</code>结构体里；</li><li><code>fb_show_pixel()</code>用来显示一个像素，根据BPP不同，对传入的颜色进行对应处理，放在基地址后的坐标偏移；</li><li><code>fb_clean_screen()</code>用于全屏显示一种颜色，用于清屏；</li><li><code>fb_show_page()</code>用于显示整屏图像，即将数据复制到显存位置；</li></ul><h1 id="7-编程-主函数"><a href="#7-编程-主函数" class="headerlink" title="7.编程_主函数"></a>7.编程_主函数</h1><p>完成了以上各个模块的函数，现在就在主函数里组织起来。程序框图如下：</p><div align="center"><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180518/9.jpg"></div><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print_help</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Usage: video2lcd [options]... [FILE]...\n"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"The LCD displays the image captured by the camera.\n"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Options:\n"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\t"</span> <span class="string">"-v"</span> <span class="string">"\t\tSelect the camera device, default: /dev/video0\n"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\t"</span> <span class="string">"-d"</span> <span class="string">"\t\tSelect the lcd display device, default: /dev/fb0\n"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\t"</span> <span class="string">"-h"</span> <span class="string">"\t\tDisplay this information.\n"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">stop_app</span><span class="params">(<span class="keyword">int</span> signo)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\nexit.\n"</span>);</div><div class="line"></div><div class="line">    _exit(<span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i, ret;</div><div class="line">    <span class="keyword">float</span> k;</div><div class="line">    video_device video_dev;</div><div class="line">    p_video_convert video_conv;</div><div class="line">    <span class="keyword">int</span> pixel_formt_of_video, pixel_formt_of_disp;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> top_left_x, top_left_y;</div><div class="line">    <span class="keyword">int</span> lcd_width, lcd_height, lcd_bpp;</div><div class="line"></div><div class="line">    p_video_buffer video_buf_cur;</div><div class="line">    video_buffer video_buf, convert_buf, zoom_buf, frame_buf;</div><div class="line"></div><div class="line">    <span class="keyword">char</span> *get_argv[<span class="number">2</span>] = &#123;&#125;;</div><div class="line"></div><div class="line">    signal(SIGINT, stop_app);</div><div class="line"></div><div class="line">    <span class="comment">//0.传入参数判断</span></div><div class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; argc; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(<span class="string">"-v"</span>, argv[i]))</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(<span class="literal">NULL</span> == argv[i + <span class="number">1</span>])</div><div class="line">            &#123;</div><div class="line">                print_help();</div><div class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                get_argv[<span class="number">0</span>] = argv[i + <span class="number">1</span>];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(<span class="string">"-d"</span>, argv[i]))</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(<span class="literal">NULL</span> == argv[i + <span class="number">1</span>])</div><div class="line">            &#123;</div><div class="line">                print_help();</div><div class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                get_argv[<span class="number">1</span>] = argv[i + <span class="number">1</span>];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(<span class="string">"-h"</span>, argv[i]))</div><div class="line">        &#123;</div><div class="line">            print_help();</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//1.初始化显示设备并获取显示设备参数</span></div><div class="line">    display_init(); <span class="comment">//注册所有显示设备(fb和crt)</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> (get_argv[<span class="number">1</span>] == <span class="literal">NULL</span>) <span class="comment">//选择和初始化指定的显示设备</span></div><div class="line">        select_and_init_disp_dev(<span class="string">"lcd"</span>, <span class="string">"/dev/fb0"</span>); <span class="comment">//default:lcd的/dev/fb0</span></div><div class="line">    <span class="keyword">else</span></div><div class="line">        select_and_init_disp_dev(<span class="string">"lcd"</span>, get_argv[<span class="number">1</span>]);</div><div class="line"></div><div class="line">    get_disp_resolution(&amp;lcd_width, &amp;lcd_height, &amp;lcd_bpp); <span class="comment">//获取设备的分辨率和支持的bpp</span></div><div class="line">    get_video_buf_for_disp(&amp;frame_buf); <span class="comment">//得到显存的各种信息(分辨率、bpp、大小、地址等)</span></div><div class="line"></div><div class="line">    pixel_formt_of_disp = frame_buf.pixel_format;</div><div class="line"></div><div class="line">    <span class="comment">//2.初始化采集设备</span></div><div class="line">    video_init(); <span class="comment">//注册所有图像采集设备(v4l2协议)</span></div><div class="line"></div><div class="line">    ret = video_device_init(get_argv[<span class="number">0</span>], &amp;video_dev); <span class="comment">//初始化指定的/dev/video0</span></div><div class="line">    <span class="keyword">if</span> (ret)</div><div class="line">    &#123;</div><div class="line">        printf_debug(<span class="string">"video_device_init for %s error!\n"</span>, get_argv[<span class="number">0</span>]);</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    pixel_formt_of_video = video_dev.p_video_fops-&gt;get_format(&amp;video_dev); <span class="comment">//获取视频格式</span></div><div class="line"></div><div class="line">    <span class="comment">//3.转换初始化</span></div><div class="line">    video_convert_init(); <span class="comment">//注册所有支持的转换方式(yuv、mjpeg、rgb)</span></div><div class="line">    <span class="comment">//传入采集设备格式和显示设备支持格式,在链表里依次判断是否支持该格式转换</span></div><div class="line">    video_conv = get_video_convert_format(pixel_formt_of_video, pixel_formt_of_disp);</div><div class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == video_conv)</div><div class="line">    &#123;</div><div class="line">        printf_debug(<span class="string">"Can not support this format convert\n"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">//4.启动摄像头设备</span></div><div class="line">    ret = video_dev.p_video_fops-&gt;start_device(&amp;video_dev);</div><div class="line">    <span class="keyword">if</span> (ret)</div><div class="line">    &#123;</div><div class="line">        printf_debug(<span class="string">"start_device for %s error!\n"</span>, get_argv[<span class="number">0</span>]);</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">memset</span>(&amp;video_buf, <span class="number">0</span>, <span class="keyword">sizeof</span>(video_buf));</div><div class="line">    <span class="built_in">memset</span>(&amp;convert_buf, <span class="number">0</span>, <span class="keyword">sizeof</span>(convert_buf));</div><div class="line">    convert_buf.pixel_format    = pixel_formt_of_disp;</div><div class="line">    convert_buf.pixel_datas.bpp = lcd_bpp;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="built_in">memset</span>(&amp;zoom_buf, <span class="number">0</span>, <span class="keyword">sizeof</span>(zoom_buf));</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="comment">//5.读入摄像头数据</span></div><div class="line">        ret = video_dev.p_video_fops-&gt;get_frame(&amp;video_dev, &amp;video_buf);</div><div class="line">        <span class="keyword">if</span> (ret)</div><div class="line">        &#123;</div><div class="line">            printf_debug(<span class="string">"get_frame for %s error!\n"</span>, get_argv[<span class="number">0</span>]);</div><div class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">        video_buf_cur = &amp;video_buf;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (pixel_formt_of_video != pixel_formt_of_disp) <span class="comment">//采集的图像格式和显示的图像格式不一致</span></div><div class="line">        &#123;</div><div class="line">            <span class="comment">//6.格式转换</span></div><div class="line">            ret = video_conv-&gt;convert(&amp;video_buf, &amp;convert_buf);</div><div class="line">            <span class="keyword">if</span> (ret)</div><div class="line">            &#123;</div><div class="line">                printf_debug(<span class="string">"convert for %s error!\n"</span>, get_argv[<span class="number">0</span>]);</div><div class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">            &#125;</div><div class="line">            video_buf_cur = &amp;convert_buf;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//现在video_buf_cur就是最后的图像数据</span></div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment">//7.如果图像分辨率大于LCD, 缩放</span></div><div class="line">        <span class="keyword">if</span> ((video_buf_cur-&gt;pixel_datas.width &gt; lcd_width) || (video_buf_cur-&gt;pixel_datas.height &gt; lcd_height))</div><div class="line">        &#123;</div><div class="line">            <span class="comment">//确定缩放后的分辨率</span></div><div class="line">            <span class="comment">//把图片按比例缩放到video_mem上, 居中显示</span></div><div class="line">            <span class="comment">//1. 先算出缩放后的大小</span></div><div class="line">            k = (<span class="keyword">float</span>)video_buf_cur-&gt;pixel_datas.height / video_buf_cur-&gt;pixel_datas.width; <span class="comment">//长宽比例</span></div><div class="line">            zoom_buf.pixel_datas.width  = lcd_width;</div><div class="line">            zoom_buf.pixel_datas.height = lcd_width * k;</div><div class="line">            <span class="keyword">if</span> ( zoom_buf.pixel_datas.height &gt; lcd_height)</div><div class="line">            &#123;</div><div class="line">                zoom_buf.pixel_datas.width  = lcd_height / k;</div><div class="line">                zoom_buf.pixel_datas.height = lcd_height;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            zoom_buf.pixel_datas.bpp         = lcd_bpp;</div><div class="line">            zoom_buf.pixel_datas.line_bytes  = zoom_buf.pixel_datas.width * zoom_buf.pixel_datas.bpp / <span class="number">8</span>;</div><div class="line">            zoom_buf.pixel_datas.total_bytes = zoom_buf.pixel_datas.line_bytes * zoom_buf.pixel_datas.height;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (!zoom_buf.pixel_datas.pixel_datas_addr)</div><div class="line">            &#123;</div><div class="line">                zoom_buf.pixel_datas.pixel_datas_addr = <span class="built_in">malloc</span>(zoom_buf.pixel_datas.total_bytes);</div><div class="line">                <span class="keyword">if</span> (<span class="literal">NULL</span> == zoom_buf.pixel_datas.pixel_datas_addr)</div><div class="line">                    <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            pic_zoom(&amp;video_buf_cur-&gt;pixel_datas, &amp;zoom_buf.pixel_datas);</div><div class="line">            video_buf_cur = &amp;zoom_buf;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//合并进framebuffer</span></div><div class="line">        <span class="comment">//接着算出居中显示时左上角坐标</span></div><div class="line">        top_left_x = (lcd_width - video_buf_cur-&gt;pixel_datas.width) / <span class="number">2</span>;</div><div class="line">        top_left_y = (lcd_height - video_buf_cur-&gt;pixel_datas.height) / <span class="number">2</span>;</div><div class="line"></div><div class="line">        pic_merge(top_left_x, top_left_y, &amp;video_buf_cur-&gt;pixel_datas, &amp;frame_buf.pixel_datas);</div><div class="line"></div><div class="line">        flush_pixel_datas_to_dev(&amp;frame_buf.pixel_datas);</div><div class="line"></div><div class="line">        ret = video_dev.p_video_fops-&gt;put_frame(&amp;video_dev, &amp;video_buf);</div><div class="line">        <span class="keyword">if</span> (ret)</div><div class="line">        &#123;</div><div class="line">            printf_debug(<span class="string">"put_frame for %s error!\n"</span>, get_argv[<span class="number">0</span>]);</div><div class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//把framebuffer的数据刷到LCD上, 显示</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="8-Makefile"><a href="#8-Makefile" class="headerlink" title="8. Makefile"></a>8. Makefile</h1><p>最后，还需要用Makefile将整个工程组织编译。这里总结一个通用的Makefile模板。</p><h2 id="8-1-基础知识"><a href="#8-1-基础知识" class="headerlink" title="8.1 基础知识"></a>8.1 基础知识</h2><p>首先总结一些<a href="http://www.gnu.org/software/make/manual/" target="_blank" rel="external">基础知识</a>：</p><ul><li><p>常用通配符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">%.o  ——&gt; 表示所有的.o文件</div><div class="line">%.c  ——&gt; 表示所有的.c文件</div><div class="line">$@   ——&gt; 表示目标</div><div class="line">$&lt;   ——&gt; 表示第1个依赖文件</div><div class="line">$^   ——&gt; 表示所有依赖文件</div></pre></td></tr></table></figure></li><li><p>常用变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">:=   ——&gt; 即时变量，它的值在定义的时候确定；(可追加内容)</div><div class="line">=    ——&gt; 延时变量，只有在使用到的时候才确定，在定义/等于时并没有确定下来；</div><div class="line">?=   ——&gt; 延时变量, 如果是第1次定义才起效, 如果在前面该变量已定义则忽略；(不覆盖前面的定义)</div><div class="line">+=   ——&gt; 附加, 它是即时变量还是延时变量取决于前面的定义；</div></pre></td></tr></table></figure></li><li><p>常用参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">-Wp,-MD,xx.o.d  ——&gt; 生成依赖xx.o.d</div><div class="line">-I /xx          ——&gt; 指定头文件(.h)目录xx</div><div class="line">-L /xx          ——&gt; 指定库文件(.so)目录xx</div><div class="line">-Wall           ——&gt; 打开gcc的所有警告</div><div class="line">-Werror         ——&gt; 将所有的警告当成错误进行处理</div><div class="line">-O2             ——&gt; 优化等级</div><div class="line">-g              ——&gt; gdb调试</div></pre></td></tr></table></figure></li><li><p>常用函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$(foreach var,list,text)                ——&gt; 将list里面的每个成员,都作text处理</div><div class="line">$(filter pattern...,text)               ——&gt; 在text中取出符合patten格式的值</div><div class="line">$(filter-out pattern...,text)           ——&gt; 在text中取出不符合patten格式的值</div><div class="line">$(wildcard pattern)                     ——&gt; pattern定义了文件名的格式,wildcard取出其中存在的文件</div><div class="line">$(patsubst pattern,replacement,$(var))  ——&gt; 从列表中取出每一个值,如果符合pattern,则替换为replacement</div></pre></td></tr></table></figure></li></ul><p>举例：<br>假设当前路径下有<code>a.c b.c c.c Makefile</code>四个文件，Makefile内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">A = a b c </div><div class="line">B = $(foreach f, $(A), $(f).o)</div><div class="line"></div><div class="line">C = a b c d/</div><div class="line">D = $(filter %/, $(C))</div><div class="line">E = $(filter-out %/, $(C))</div><div class="line"></div><div class="line">files = $(wildcard *.c)</div><div class="line"></div><div class="line">files2 = a.c b.c c.c d.c e.c  abc</div><div class="line">files3 = $(wildcard $(files2))</div><div class="line"></div><div class="line">dep_files = $(patsubst %.c,%.d,$(files2))</div><div class="line"></div><div class="line">all:</div><div class="line">@echo B = $(B)</div><div class="line">@echo D = $(D)</div><div class="line">@echo E = $(E)</div><div class="line">@echo files = $(files)</div><div class="line">@echo files3 = $(files3)</div><div class="line">@echo dep_files = $(dep_files)</div></pre></td></tr></table></figure></p><p>执行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">B = a.o b.o c.o                     //把A中每个成员加上后缀.o</div><div class="line">D = d/                              //取出C中符合搜索条件&quot;/&quot;的成员，常用于取出文件夹</div><div class="line">E = a b c                           //取出C中不符合搜索条件&quot;/&quot;的成员，常用于取出非文件夹</div><div class="line">files = a.c b.c c.c                 //取出当前路径下的a.c b.c c.c三个文件，常用于得到当前路径的文件</div><div class="line">files3 = a.c b.c c.c                //取出当前路径下存在的a.c b.c c.c三个文件，常用于判断文件是否存在</div><div class="line">dep_files = a.d b.d c.d d.d e.d abc //替换符合条件&quot;.c&quot;的文件为&quot;.d&quot;，常用于文件后缀的修改</div></pre></td></tr></table></figure></p><h2 id="8-2-Makefile分析"><a href="#8-2-Makefile分析" class="headerlink" title="8.2 Makefile分析"></a>8.2 Makefile分析</h2><p>下面对本程序的Makefile进行分析。在本程序中Makefile分为3类:</p><blockquote><p>1.顶层目录的Makefile<br>2.顶层目录的Makefile.build<br>3.各级子目录的Makefile</p></blockquote><div align="center"><img width="565" height="441" src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180518/11.jpg"></div><ul><li><p><strong>1.顶层目录的Makefile</strong><br>它除了定义<code>obj-y</code>来指定根目录下要编进程序去的文件、子目录外，主要是定义工具链、编译参数、链接参数(即文件中用<code>export</code>导出的各变量)；</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 1.定义编译工具简写并声明(以变其它文件可使用)</span></div><div class="line">CROSS_COMPILE = arm-linux-gnueabihf-</div><div class="line">AS            = <span class="variable">$(CROSS_COMPILE)</span>as</div><div class="line">LD      = <span class="variable">$(CROSS_COMPILE)</span>ld</div><div class="line">CC      = <span class="variable">$(CROSS_COMPILE)</span>gcc</div><div class="line">CPP      = <span class="variable">$(CC)</span> -E</div><div class="line">AR      = <span class="variable">$(CROSS_COMPILE)</span>ar</div><div class="line">NM      = <span class="variable">$(CROSS_COMPILE)</span>nm</div><div class="line">              </div><div class="line">STRIP  = <span class="variable">$(CROSS_COMPILE)</span>strip</div><div class="line">OBJCOPY  = <span class="variable">$(CROSS_COMPILE)</span>objcopy</div><div class="line">OBJDUMP  = <span class="variable">$(CROSS_COMPILE)</span>objdump</div><div class="line">export AS LD CC CPP AR NM</div><div class="line">export STRIP OBJCOPY OBJDUMP</div><div class="line"></div><div class="line"><span class="comment"># 2.定义编译选项并声明(警告信息、优化等级、gdb调试、指定本程序头文件路径)</span></div><div class="line">CFLAGS := -Wall -Werror -O2 -g</div><div class="line">CFLAGS += -I <span class="variable">$(shell pwd)</span>/include</div><div class="line">export CFLAGS</div><div class="line"></div><div class="line"><span class="comment"># 3.定义链接选项并声明(数学库、LibJPEG库)</span></div><div class="line">LDFLAGS := -lm -ljpeg</div><div class="line">export LDFLAGS</div><div class="line"></div><div class="line"><span class="comment"># 4.定义顶层目录路径并声明(shell命令实现)</span></div><div class="line">TOPDIR := <span class="variable">$(shell pwd)</span></div><div class="line">export TOPDIR</div><div class="line"></div><div class="line"><span class="comment"># 5.程序目标文件</span></div><div class="line">TARGET := video2lcd</div><div class="line"></div><div class="line"><span class="comment"># 6.使用"obj-y"表示各个目标文件,即过程中的所有.o文件(包含当前路径文件和当前路径下的文件夹)</span></div><div class="line">obj-y += main.o</div><div class="line">obj-y += video/</div><div class="line">obj-y += convert/</div><div class="line">obj-y += process/</div><div class="line">obj-y += display/</div><div class="line"></div><div class="line"><span class="comment"># 7. 目标all:</span></div><div class="line"><span class="comment"># 7.1在-C指定目录下,执行指定路径下的文件(即在本路径执行Makefile.build)</span></div><div class="line"><span class="comment"># 7.2依赖"built-in.o"生成最终的目标文件</span></div><div class="line">all : </div><div class="line">make -C ./ -f <span class="variable">$(TOPDIR)</span>/Makefile.build</div><div class="line"><span class="variable">$(CC)</span> -o <span class="variable">$(TARGET)</span> built-in.o <span class="variable">$(LDFLAGS)</span></div><div class="line"></div><div class="line"><span class="comment"># 8.目标clean:清除所有的.o文件和目标文件</span></div><div class="line"><span class="section">clean:</span></div><div class="line">rm -f <span class="variable">$(shell find -name "*.o")</span></div><div class="line">rm -f <span class="variable">$(TARGET)</span></div><div class="line"></div><div class="line"><span class="comment"># 9.目标distclean:清除所有的.o文件、.d文件(依赖文件)和目标文件</span></div><div class="line"><span class="section">distclean:</span></div><div class="line">rm -f <span class="variable">$(shell find -name "*.o")</span></div><div class="line">rm -f <span class="variable">$(shell find -name "*.d")</span></div><div class="line">rm -f <span class="variable">$(TARGET)</span></div></pre></td></tr></table></figure></li><li><p><strong>2.顶层目录的Makefile.build</strong><br>把某个目录及它的所有子目录中、需要编进程序去的文件都编译出来，打包为<code>built-in.o</code>；</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 1.定义"PHONY"表示目标(目前包含一个目标:__build)</span></div><div class="line">PHONY := __build</div><div class="line"></div><div class="line"><span class="comment"># 2.定义目标"__build"内容是下面的所有操作</span></div><div class="line"><span class="section">__build:</span></div><div class="line"></div><div class="line"><span class="comment"># 3.定义"obj-y"表示当前路径的目标文件,定义"subdir-y"表示当前路径下目录的目标文件</span></div><div class="line">obj-y :=</div><div class="line">subdir-y :=</div><div class="line"></div><div class="line"><span class="comment"># 4.包含当前路径的Makefile(为了获取"obj-y"的内容)</span></div><div class="line">include Makefile</div><div class="line"></div><div class="line"><span class="comment"># 5. 得到当前路径下各目录名</span></div><div class="line"><span class="comment"># 5.1filter函数从obj-y中筛选出含"/"的内容,即目录</span></div><div class="line"><span class="comment"># 5.2patsubst函数将上述结果中的"/"替换为空,subdir-y即为当前路径的目录名(不含"/")</span></div><div class="line">__subdir-y:= $(patsubst %/,%,$(filter %/, $(obj-y)))</div><div class="line">subdir-y+= $(__subdir-y)</div><div class="line"><span class="comment">#实测结果:第一次为[video convert process display],后面每次都为空</span></div><div class="line"><span class="comment">#$(warning ------debug info:subdir-y=$(subdir-y)------)</span></div><div class="line"></div><div class="line"><span class="comment"># 6.把"obj-y"都加上"/built-in.o"后缀</span></div><div class="line">subdir_objs := <span class="variable">$(foreach f,$(subdir-y)</span>,<span class="variable">$(f)</span>/built-in.o)</div><div class="line"><span class="comment">#实测结果:第一次为[video/built-in.o convert/built-in.o ……],后面每次都为空</span></div><div class="line"><span class="comment">#$(warning ------debug info:subdir_objs=$(subdir_objs)------)</span></div><div class="line"></div><div class="line"><span class="comment"># 7.得到"obj-y"中的非文件夹文件(即各个.o文件)</span></div><div class="line">cur_objs := <span class="variable">$(filter-out %/, $(obj-y)</span>)</div><div class="line"></div><div class="line"><span class="comment"># 8. 得到依赖文件(.d文件)</span></div><div class="line"><span class="comment"># 8.1foreach把前面的*.o文件变为.*.o.d(这是当前目录Makefile提供的数据)</span></div><div class="line"><span class="comment"># 8.2wildcard根据这些.d名字在当前路径查找,得到真正存在的.d文件</span></div><div class="line">dep_files := <span class="variable">$(foreach f,$(cur_objs)</span>,.<span class="variable">$(f)</span>.d)</div><div class="line">dep_files := <span class="variable">$(wildcard $(dep_files)</span>)</div><div class="line"></div><div class="line"><span class="comment"># 9.如果"dep_files"不为空,则包含(即包含了.d依赖文件,保证头文件修改后程序会重新编译)</span></div><div class="line">ifneq ($(dep_files),)</div><div class="line">  include $(dep_files)</div><div class="line">endif</div><div class="line"></div><div class="line"><span class="comment"># 10.新增目标(目前包含两个目标:__build和subdir-y的各个成员)</span></div><div class="line">PHONY += <span class="variable">$(subdir-y)</span></div><div class="line"></div><div class="line"><span class="comment"># 11.目标__build依赖于subdir-y各个成员和built-in.o</span></div><div class="line">__build : $(subdir-y) built-in.o</div><div class="line"></div><div class="line"><span class="comment"># 12.对subdir-y的每个成员(即目录),都调用Makefile.build</span></div><div class="line">$(subdir-y):</div><div class="line">make -C $@ -f <span class="variable">$(TOPDIR)</span>/Makefile.build</div><div class="line"></div><div class="line"><span class="comment"># 13.built-in.o依赖当前路径下的.o和目录下的built-in.o(即将当前路径下的.o链接成built-in.o)</span></div><div class="line">built-in.o : $(cur_objs) $(subdir_objs)</div><div class="line"><span class="variable">$(LD)</span> -r -o $@ $^</div><div class="line"></div><div class="line"><span class="comment"># 14.定义dep_file为所有的依赖</span></div><div class="line">dep_file = .$@.d</div><div class="line"></div><div class="line"><span class="comment"># 15.所有的.o依赖于所有的.c,编译过程生成对应.d文件</span></div><div class="line">%.o : %.c</div><div class="line"><span class="variable">$(CC)</span> <span class="variable">$(CFLAGS)</span> -Wp,-MD,<span class="variable">$(dep_file)</span> -c -o $@ $&lt;</div><div class="line"></div><div class="line"><span class="comment"># 16.声明$(PHONY)是个假想目标</span></div><div class="line">.PHONY : $(PHONY)</div></pre></td></tr></table></figure></li><li><p><strong>3.各级子目录的Makefile</strong><br>指定当前目录下需要编进程序去的文件；</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 1.指定当前目录下需要编进程序去的文件</span></div><div class="line">obj-y += color.o</div><div class="line">obj-y += yuv2rgb.o</div><div class="line">obj-y += rgb2rgb.o</div><div class="line">obj-y += mjpeg2rgb.o</div><div class="line">obj-y += jdatasrc-tj.o</div><div class="line">obj-y += convert_manager.o</div></pre></td></tr></table></figure></li><li><p><strong>4.实际编译过程</strong><br>①执行<code>make</code>，调用顶层Makefile，调用<code>make -C ./ -f /work/drv/code/Makefile.build</code>，执行<code>Makefile.build</code>；</p></li></ul><p>②<code>Makefile.build</code>里调用<code>make -C $@ -f $(TOPDIR)/Makefile.build</code>对每个目录都执行<code>Makefile.build</code>；</p><p>③以<code>video</code>目录为例，调用<code>Makefile.build</code>，会执行以下操作：<br>　　- 编译每一个.c：<br>　　<code>arm-linux-gnueabihf-gcc -Wall -Werror -O2 -g -I /work/drv/code/include -Wp,-MD,.v4l2.o.d -c -o v4l2.o v4l2.c</code><br>　　- 将所有.o链接成<code>built-in.o</code>：<br>　　<code>arm-linux-gnueabihf-ld -r -o built-in.o v4l2.o video_manager.o</code><br>　　<br>④完成对当前目录的内容编译后，再对当前路径的.c文件编译：<br><code>arm-linux-gnueabihf-gcc -Wall -Werror -O2 -g -I /work/drv/code/include -Wp,-MD,.main.o.d -c -o main.o main.c</code></p><p>⑤将各子目录生成的<code>built-in.o</code>与<code>main.o</code>链接生成新<code>built-in.o</code>；</p><p>⑥最后依赖<code>built-in.o</code>输出目标文件<code>arm-linux-gnueabihf-gcc -o video2lcd built-in.o -lm -ljpeg</code></p><h1 id="9-实测效果及源码"><a href="#9-实测效果及源码" class="headerlink" title="9. 实测效果及源码"></a>9. 实测效果及源码</h1><ul><li><p>实测效果：</p><div align="center"><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180518/10.jpg"></div></li><li><p>源码：<br>所有源码见<a href="https://github.com/hceng/learn/tree/master/tiny4412/09_video2lcd" target="_blank" rel="external">GitHub</a>。</p></li><li><p>参考文章：<br><a href="http://unicornx.github.io/2016/01/06/20160106-c-oob/" target="_blank" rel="external">Linux内核C语言中的面向对象</a><br><a href="http://www.100ask.org/index.html" target="_blank" rel="external">韦东山第三期项目视频_摄像头</a></p></li></ul><hr><p><div align="center"><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本文采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href="http://hceng.cn/" target="_blank" rel="external">hceng’s blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Linux摄像头驱动学习第三篇，在Tiny4412的LCD上显示摄像头采集图像。&lt;br&gt;
    
    </summary>
    
    
      <category term="LCD" scheme="http://yoursite.com/tags/LCD/"/>
    
      <category term="摄像头" scheme="http://yoursite.com/tags/%E6%91%84%E5%83%8F%E5%A4%B4/"/>
    
      <category term="UVC" scheme="http://yoursite.com/tags/UVC/"/>
    
      <category term="Linux环境编程" scheme="http://yoursite.com/tags/Linux%E7%8E%AF%E5%A2%83%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Linux摄像头驱动2——UVC</title>
    <link href="http://yoursite.com/2018/04/22/Linux%E6%91%84%E5%83%8F%E5%A4%B4%E9%A9%B1%E5%8A%A82%E2%80%94%E2%80%94UVC/"/>
    <id>http://yoursite.com/2018/04/22/Linux摄像头驱动2——UVC/</id>
    <published>2018-04-22T12:18:08.000Z</published>
    <updated>2018-11-04T09:33:35.435Z</updated>
    
    <content type="html"><![CDATA[<p>Linux摄像头驱动学习第二篇，对USB摄像头驱动USB video class(UVC)进行详细分析、编写。<br><a id="more"></a><br>这次要写一个真正的摄像头驱动，内容有点多。<br>先简单的介绍了USB接口，了解Linux中USB设备描述符的意义。<br>然后再移植内核自带的USB摄像头驱动，同时也验证了摄像头的可用。<br>最后为了学习，逐句写一个摄像头驱动，再总结。</p><h1 id="1-UVC基础"><a href="#1-UVC基础" class="headerlink" title="1.UVC基础"></a>1.UVC基础</h1><p>UVC是USB video class的简写，也就是USB接口的视频设备。<br>UVC其实很好理解，就是<strong>V4L2+USB</strong>。<br>前面的虚拟摄像头驱动，数据的来源是自己构造的虚拟数据，现在V4L2的数据来源则是通过USB传进来的真实摄像头视频数据。<br>除了视频数据，摄像头还把自己的特性(比如支持哪几种分辨率)告诉驱动，驱动则要配置摄像头(指定何种分辨率)。</p><h2 id="1-1-USB基础知识"><a href="#1-1-USB基础知识" class="headerlink" title="1.1 USB基础知识"></a>1.1 USB基础知识</h2><p>USB分主从系统，一般而言，PC中的USB系统就是作主系统，而一般的USB鼠标、U盘则是典型的USB从系统。<br>为了方便开发，USB定义了一套标准，只要是支持USB的主机，就可以支持任何一个厂商的USB鼠标、U盘，只要是被USB系统包含的设备，只要这些设备支持相应的标准，就无需重新设计驱动而直接使用。<br>下面简单的列出了USB设备类型，理想情况的USB系统要对这些设备作完整的支持，设备也必须符合USB规范中的要求。</p><table><thead><tr><th style="text-align:center">Base Class</th><th style="text-align:center">Descriptor Usage</th><th style="text-align:center">Description</th></tr></thead><tbody><tr><td style="text-align:center">00h</td><td style="text-align:center">Device</td><td style="text-align:center">Use class information in the Interface Descriptors</td></tr><tr><td style="text-align:center">01h</td><td style="text-align:center">Interface</td><td style="text-align:center">Audio</td></tr><tr><td style="text-align:center">02h</td><td style="text-align:center">Both</td><td style="text-align:center">Communications and CDC Control(通讯设备)</td></tr><tr><td style="text-align:center">03h</td><td style="text-align:center">Interface</td><td style="text-align:center">HID (Human Interface Device)</td></tr><tr><td style="text-align:center">05h</td><td style="text-align:center">Interface</td><td style="text-align:center">Physical</td></tr><tr><td style="text-align:center">06h</td><td style="text-align:center">Interface</td><td style="text-align:center">Image</td></tr><tr><td style="text-align:center">07h</td><td style="text-align:center">Interface</td><td style="text-align:center">Printer</td></tr><tr><td style="text-align:center">08h</td><td style="text-align:center">Interface</td><td style="text-align:center">Mass Storage(存储)</td></tr><tr><td style="text-align:center">09h</td><td style="text-align:center">Device</td><td style="text-align:center">Hub</td></tr><tr><td style="text-align:center">0Ah</td><td style="text-align:center">Interface</td><td style="text-align:center">CDC-Data</td></tr><tr><td style="text-align:center">0Bh</td><td style="text-align:center">Interface</td><td style="text-align:center">Smart Card</td></tr><tr><td style="text-align:center">0Dh</td><td style="text-align:center">Interface</td><td style="text-align:center">Content Security</td></tr><tr><td style="text-align:center">0Eh</td><td style="text-align:center">Interface</td><td style="text-align:center">Video</td></tr><tr><td style="text-align:center">0Fh</td><td style="text-align:center">Interface</td><td style="text-align:center">Personal Healthcare</td></tr><tr><td style="text-align:center">10h</td><td style="text-align:center">Interface</td><td style="text-align:center">Audio/Video Devices</td></tr><tr><td style="text-align:center">11h</td><td style="text-align:center">Device</td><td style="text-align:center">Billboard Device Class</td></tr><tr><td style="text-align:center">12h</td><td style="text-align:center">Interface</td><td style="text-align:center">USB Type-C Bridge Class</td></tr><tr><td style="text-align:center">DCh</td><td style="text-align:center">Both</td><td style="text-align:center">Diagnostic Device</td></tr><tr><td style="text-align:center">E0h</td><td style="text-align:center">Interface</td><td style="text-align:center">Wireless Controller</td></tr><tr><td style="text-align:center">EFh</td><td style="text-align:center">Both</td><td style="text-align:center">Miscellaneous</td></tr><tr><td style="text-align:center">FEh</td><td style="text-align:center">Interface</td><td style="text-align:center">Application Specific</td></tr><tr><td style="text-align:center">FFh</td><td style="text-align:center">Both</td><td style="text-align:center">Vendor Specific</td></tr></tbody></table><p>其中UVC就是Video类。</p><p>为了更好地描述USB设备的特征，USB提出了设备架构的概念。<br>从这个角度来看，可以认为USB设备是由一些<strong>配置</strong>，<strong>接口</strong>和<strong>端点</strong>；<br>即一个USB设备可以含有一个或多个配置，在每个配置中可含有一个或多个接口，在每个接口中可含有若干个端点。</p><div align="center"><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180422/1.png"></div><p>此外，驱动是绑定到USB接口上，而不是整个设备。</p><p>体现到驱动上，就是一个一个的结构体，对应设备、配置、接口、端点。<br><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180422/2.jpg" alt=""><br>其中USB video class它是在在标准的USB协议上进行了扩展，扩展的部分称为Class Specific。</p><ul><li><p>标准的设备描述符：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> Device_Descriptor  </div><div class="line">&#123;  </div><div class="line">    uchar   bLength;            <span class="comment">//设备描述符的字节数  </span></div><div class="line">    uchar   bDescriptorType;    <span class="comment">//设备描述符类型编号  </span></div><div class="line">    uint    bcdUSB;             <span class="comment">//USB版本号  </span></div><div class="line">    uchar   bDeviceClass;       <span class="comment">//USB分配的设备类  </span></div><div class="line">    uchar   bDeviceSubClass;    <span class="comment">//USB分配的设备子类  </span></div><div class="line">    uchar   bDeviceProtocol;    <span class="comment">//USB分配的设备协议代码  </span></div><div class="line">    uchar   bMaxPacketSize0;    <span class="comment">//端点0的最大包大小  </span></div><div class="line">    uint    idVendor;           <span class="comment">//厂商编号  </span></div><div class="line">    uint    idProduct;          <span class="comment">//产品编号  </span></div><div class="line">    uint    bcdDevice;          <span class="comment">//设备出厂编号  </span></div><div class="line">    uchar   iManufacturer;      <span class="comment">//设备厂商字符串索引  </span></div><div class="line">    uchar   iProduct;           <span class="comment">//产品字符串索引  </span></div><div class="line">    uchar   iSerialNumber;      <span class="comment">//设备序列号索引  </span></div><div class="line">    uchar   bNumConfigurations; <span class="comment">//可能的配置数  </span></div><div class="line">      </div><div class="line">&#125;Device_Descriptor,*pDevice_Descriptor; </div></pre></td></tr></table></figure></li><li><p>配置描述符：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> Configuration_Descriptor  </div><div class="line">&#123;  </div><div class="line">    uchar   bLength;            <span class="comment">//配置描述符 的字节数  </span></div><div class="line">    uchar   bDescriptorType;    <span class="comment">//配置描述符类型编号  </span></div><div class="line">    uint    wTotalLength;       <span class="comment">//此配置返回的所有数据大小  </span></div><div class="line">    uchar   bNumInterfaces;     <span class="comment">//此配置支持的接口数量  </span></div><div class="line">    uchar   bConfigurationValue;<span class="comment">//Set_Configuration命令所需要的参数  </span></div><div class="line">    uchar   iConfiguration;     <span class="comment">//描述该配置的字符串索引  </span></div><div class="line">    uchar   bmAttributes;       <span class="comment">//供电模式的选择  </span></div><div class="line">    uchar   bMaxPower;          <span class="comment">//设备从总线获取的最大电流  </span></div><div class="line">      </div><div class="line">&#125;Configuration_Descriptor,*pConfiguration_Descriptor;  </div></pre></td></tr></table></figure></li><li><p>接口描述符：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> Interface_Descriptor  </div><div class="line">&#123;  </div><div class="line">    uchar   bLength;            <span class="comment">//接口描述符的字节数  </span></div><div class="line">    uchar   bDescriptorType;    <span class="comment">//接口描述符的类型编号  </span></div><div class="line">    uchar   bInterfaceNumber;   <span class="comment">//该接口的编号  </span></div><div class="line">    uchar   bAlternateSetting;  <span class="comment">//备用的接口描述符的编号  </span></div><div class="line">    uchar   bNumEndPoints;      <span class="comment">//该接口使用 的端点数，不包括端点0  </span></div><div class="line">    uchar   bInterfaceClass;    <span class="comment">//接口类  </span></div><div class="line">    uchar   bInterfaceSubClass; <span class="comment">//接口子类  </span></div><div class="line">    uchar   bInterfaceProtocol; <span class="comment">//接口类协议  </span></div><div class="line">    uchar   iInterface;         <span class="comment">//描述该接口的字符串索引值  </span></div><div class="line">&#125;Interface_Descriptor,*pInterface_Descriptor;</div></pre></td></tr></table></figure></li><li><p>端点描述符：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> EndPoint_Descriptor  </div><div class="line">&#123;  </div><div class="line">    uchar   bLength;            <span class="comment">//端点描述符字节数  </span></div><div class="line">    uchar   bDescriptorType;    <span class="comment">//端点描述符类型编号  </span></div><div class="line">    uchar   bEndpointAddress;   <span class="comment">//端点地址及输入输出类型  </span></div><div class="line">    uchar   bmAtrributes;       <span class="comment">//端点的传输类型  </span></div><div class="line">    uint    wMaxPacketSize;     <span class="comment">//端点收发的最大包大小  </span></div><div class="line">    uchar   bInterval;          <span class="comment">//主机查询端点的时间间隔  </span></div><div class="line">      </div><div class="line">&#125;EndPoint_Descriptor,*pEndPoint_Descriptor;  </div></pre></td></tr></table></figure></li></ul><h2 id="1-2-UVC硬件模型"><a href="#1-2-UVC硬件模型" class="headerlink" title="1.2 UVC硬件模型"></a>1.2 UVC硬件模型</h2><p>首先从<a href="http://www.usb.org/developers/docs/devclass_docs/" target="_blank" rel="external">USB官网</a>下载标准协议相关资料：<code>Video Class -&gt; Video Class 1.5 document set (.zip format, size 6.58MB)</code>。<br>在<code>USB_Video_Example 1.5.pdf</code>里，可以得知硬件模型分为两部分：<code>VC interface</code>和<code>VS interface</code>。<br><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180422/3.jpg" alt=""><br><code>VC interface</code>用于控制，内部又分为多个<code>unit</code>和<code>terminal</code>，<code>unit</code>用于内部处理，<code>terminal</code>用于内外链接；<br><code>VS interface</code>用于传输，内部包括视频数据传输的端点以及摄像头支持的视频格式等信息；</p><p>每个视频有且仅有一个<code>Vieo Control</code>接口和可有多个<code>Video Streaming</code>接口;</p><p>一个接口，就相当于一个逻辑上的USB设备。<br>现在，想象一下当USB摄像头插上主机，就相当于同时插上了两个设备，可通过函数去选中其中一个设备，从而去操作它。<br>一个设备用于控制，比如设置亮度等；<br>一个设备用于获取数据，选择所支持的某个格式等；<br>这样就基本把控制和数据分开，要控制则操作控制接口，要数据则通过数据接口。</p><ul><li><p><code>VideoControl Interface</code>用于控制，比如设置亮度。<br>它内部有多个Unit/Terminal(在程序里Unit/Terminal都称为entity)<br>可以通过<code>uvc_query_ctrl</code>类似的函数来访问:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ret = uvc_query_ctrl(dev /*哪一个USB设备*/, SET_CUR, ctrl-&gt;entity-&gt;id /*哪一个unit/terminal*/, dev-&gt;intfnum /*哪一个接口:VC interface*/, ctrl-&gt;info-&gt;selector, uvc_ctrl_data(ctrl, UVC_CTRL_DATA_CURRENT), ctrl-&gt;info-&gt;size);</div></pre></td></tr></table></figure></li><li><p><code>VideoStreaming Interface</code>用于获得视频数据，也可以用来选择fromat/frame(VS可能有多种format,一个format支持多种frame,frame用来表示分辨率等信息)<br>可以通过<code>__uvc_query_ctrl</code>类似的函数来访问：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ret = __uvc_query_ctrl(video-&gt;dev /*哪一个USB设备*/, SET_CUR, 0, video-&gt;streaming-&gt;intfnum /*哪一个接口: VS*/, probe ? VS_PROBE_CONTROL : VS_COMMIT_CONTROL, data, size, uvc_timeout_param);</div></pre></td></tr></table></figure></li></ul><h2 id="1-3-USB描述符"><a href="#1-3-USB描述符" class="headerlink" title="1.3 USB描述符"></a>1.3 USB描述符</h2><p>前面提到摄像头要把自己的特性(比如支持哪几种分辨率)告诉驱动，这个特性就是被放在USB描述符里面。<br>在前面下载的<code>USB_Video_Example 1.5.pdf</code>文档里，有个UVC描述符层次结构例子：<br><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180422/4.jpg" alt=""><br>将USB插在Ubuntu主机上，执行<code>lsusb</code>可以看到当前的USB设备：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub</div><div class="line">Bus 002 Device 012: ID 1b3b:2977 iPassion Technology Inc. </div><div class="line">Bus 002 Device 001: ID 1d6b:0001 Linux Foundation 1.1 root hub</div></pre></td></tr></table></figure></p><p>可根据厂家名字<code>iPassion Technology Inc</code>知道ID为<code>1b3b:2977</code>的USB设备就是摄像头。<br>再使用<code>-v</code>(显示USB设备的详细信息)和<code>-d</code>(仅显示指定厂商和产品编号的设备)获取指定设备的详细信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lsusb -v -d 1b3b:2977</div></pre></td></tr></table></figure></p><p>此时会打印出许多<a href="https://github.com/hceng/learn/blob/master/tiny4412/08_uvc/USB%E8%AE%BE%E5%A4%87%E6%8F%8F%E8%BF%B0%E7%AC%A6.txt" target="_blank" rel="external">信息</a>，精简去掉详细的数据，只留下大致框架如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">Device Descriptor:</div><div class="line">  Configuration Descriptor:</div><div class="line">    Interface Association:</div><div class="line">    Interface Descriptor:</div><div class="line">      VideoControl Interface Descriptor:</div><div class="line">      VideoControl Interface Descriptor:</div><div class="line">      Endpoint Descriptor:</div><div class="line">    Interface Descriptor:</div><div class="line">      VideoStreaming Interface Descriptor:</div><div class="line">      VideoStreaming Interface Descriptor:</div><div class="line">    Interface Descriptor:</div><div class="line">      Endpoint Descriptor:</div><div class="line">    Interface Descriptor:</div><div class="line">      Endpoint Descriptor:</div><div class="line">    </div><div class="line">Interface Association:</div><div class="line">    Interface Descriptor:</div><div class="line">      AudioControl Interface Descriptor:</div><div class="line">      AudioControl Interface Descriptor:</div><div class="line">    Interface Descriptor:</div><div class="line">      AudioStreaming Interface Descriptor:</div><div class="line">      AudioStreaming Interface Descriptor:</div><div class="line">      Endpoint Descriptor:</div><div class="line">        AudioControl Endpoint Descriptor:</div><div class="line">    Interface Descriptor:</div><div class="line">      AudioStreaming Interface Descriptor:</div><div class="line">      AudioStreaming Interface Descriptor:</div><div class="line">      Endpoint Descriptor:</div><div class="line">        AudioControl Endpoint Descriptor:</div></pre></td></tr></table></figure></p><p>可以看到设备描述符下有一个配置描述符，配置描述符下有两个联合接口(IAD)，一个是视频的，一个是音频的。<br>同级的还有若干接口描述符，接口描述符下有若干VC、VS和端点，与前面的框架是完全对应的。</p><p>任取其中一个描述符：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">VideoStreaming Interface Descriptor:</div><div class="line">  bLength                            30</div><div class="line">  bDescriptorType                    36</div><div class="line">  bDescriptorSubtype                  7 (FRAME_MJPEG)</div><div class="line">  bFrameIndex                         1</div><div class="line">  bmCapabilities                   0x01</div><div class="line">    Still image supported</div><div class="line">  wWidth                            640</div><div class="line">  wHeight                           480</div><div class="line">  dwMinBitRate                  2304000</div><div class="line">  dwMaxBitRate                  2304000</div><div class="line">  dwMaxVideoFrameBufferSize       76800</div><div class="line">  dwDefaultFrameInterval         333333</div><div class="line">  bFrameIntervalType                  1</div><div class="line">  dwFrameInterval( 0)            333333</div></pre></td></tr></table></figure></p><p>就可以得知该摄像头支持一种叫FRAME_MJPEG的格式，分辨率为<code>640*480</code>等信息。<br>因此，从上面的一系列描述符，就可完全得知摄像头的特征，后面驱动用用到具体的特性再说明。</p><h1 id="2-内核摄像头驱动"><a href="#2-内核摄像头驱动" class="headerlink" title="2.内核摄像头驱动"></a>2.内核摄像头驱动</h1><p>对UVC进行学习，步骤大致如下:<br>首先分析内核自带的UVC是如何实现的;<br>然后让手里的摄像头工作起来，可能内核自带的驱动可以直接用，也可能需要移植；<br>最后再尝试写一个精简版的UVC驱动，深入理解。</p><h2 id="2-1分析内核摄像头驱动"><a href="#2-1分析内核摄像头驱动" class="headerlink" title="2.1分析内核摄像头驱动"></a>2.1分析内核摄像头驱动</h2><p>在4.13.9内核中，UVC驱动在<code>drivers/media/usb/uvc/</code>文件夹里，下面对<code>uvc_driver.c</code>进行分析。<br><strong>a.构造usb_driver</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> uvc_driver &#123;</div><div class="line"><span class="keyword">struct</span> usb_driver driver;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> uvc_driver uvc_driver = &#123;</div><div class="line">.driver = &#123;</div><div class="line">.name= <span class="string">"uvcvideo"</span>,</div><div class="line">.probe= uvc_probe,</div><div class="line">.disconnect= uvc_disconnect,</div><div class="line">.suspend= uvc_suspend,</div><div class="line">.resume= uvc_resume,</div><div class="line">.reset_resume= uvc_reset_resume,</div><div class="line">.id_table= uvc_ids,</div><div class="line">.supports_autosuspend = <span class="number">1</span>,</div><div class="line">&#125;,</div><div class="line">&#125;;</div></pre></td></tr></table></figure><br>其中<code>.id_table</code>里列举了驱动支持哪些USB设备。</p><p><strong>b.设置usb_driver</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">uvc_probe</div><div class="line">    kzalloc //分配video_device</div><div class="line">        uvc_register_chains  </div><div class="line">            uvc_register_terms  </div><div class="line">                uvc_register_video</div><div class="line">                    vdev-&gt;v4l2_dev = &amp;dev-&gt;vdev; //设置video_device</div><div class="line">                    vdev-&gt;fops = &amp;uvc_fops; </div><div class="line">                    vdev-&gt;ioctl_ops = &amp;uvc_ioctl_ops;</div><div class="line">                    vdev-&gt;release = uvc_release;</div><div class="line">                    video_register_device //注册video_device</div></pre></td></tr></table></figure></p><p><strong>c.注册usb_driver</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">uvc_init</div><div class="line">    usb_register</div></pre></td></tr></table></figure></p><p>可以看到，<code>probe()</code>函数里面的操作就是前面<code>vivid</code>驱动里一样的操作方式。<br>然后在外面加了一个usb的“壳”。</p><p>驱动的核心还是<code>fops</code>和<code>ioctl_ops</code>。下面对这两个操作函数的实现进行分析。<br>首先是<code>v4l2_file_operations</code>:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">struct</span> v4l2_file_operations uvc_fops = &#123;</div><div class="line">.owner= THIS_MODULE,</div><div class="line">.open= uvc_v4l2_open,</div><div class="line">.release= uvc_v4l2_release,</div><div class="line">.unlocked_ioctl= video_ioctl2,</div><div class="line">#ifdef CONFIG_COMPAT</div><div class="line">.compat_ioctl32= uvc_v4l2_compat_ioctl32,</div><div class="line">#endif</div><div class="line">.read= uvc_v4l2_read,</div><div class="line">.mmap= uvc_v4l2_mmap,</div><div class="line">.poll= uvc_v4l2_poll,</div><div class="line">#ifndef CONFIG_MMU</div><div class="line">.get_unmapped_area = uvc_v4l2_get_unmapped_area,</div><div class="line">#endif</div><div class="line">&#125;;</div></pre></td></tr></table></figure><br>里面有<code>open()</code>、<code>release()</code>、<code>ioctl2</code>、<code>read</code>、<code>mmap</code>、<code>poll</code>，这点和前面的虚拟驱动一样。</p><p>这其中最重要的就是<code>ioctl2</code>，它使用<code>video_usercopy()</code>获得用户空间传进来的参数，调用<code>__video_do_ioctl()</code>在<code>v4l2_ioctls[]</code>数组里找到对应的<code>uvc_ioctl_ops</code>。</p><p><code>uvc_ioctl_ops</code>每个函数的实现放在后面写代码里，逐个讲解。</p><p>UVC驱动的重点在于：</p><ul><li>对描述符的解析；</li><li>属性的控制: 通过<code>VideoControl Interface</code>来设置；</li><li>格式的选择：通过<code>VideoStreaming Interface</code>来设置；</li><li>数据的获得：通过<code>VideoStreaming Interface</code>的URB来获得；</li></ul><h2 id="2-2移植内核摄像头驱动"><a href="#2-2移植内核摄像头驱动" class="headerlink" title="2.2移植内核摄像头驱动"></a>2.2移植内核摄像头驱动</h2><p>我手里使用的是百问网提供的<a href="https://item.taobao.com/item.htm?spm=a1z10.1-c.w5003-15370717107.13.764a82ac5wTCBT&amp;id=19992970904&amp;scene=taobao_shop" target="_blank" rel="external">二合一摄像头</a>，它既有CMOS接口，也有USB接口。<br>使用USB接口时，上面有一个DSP芯片，可以将原始的YUV数据转换成MJPEG的压缩数据。</p><p>它基本是符合UVC规范的，但有些小差别，厂家提供的文档里面有说明，按着说明修改即可。<br>主要添加了<code>usb_device_id</code>和修改了数据的处理。详细参考<a href="https://github.com/hceng/learn/blob/master/tiny4412/08_uvc/kernel_uvc/uvc.patch" target="_blank" rel="external">补丁</a>，修改后的代码在<a href="https://github.com/hceng/learn/tree/master/tiny4412/08_uvc/kernel_uvc" target="_blank" rel="external">Github</a>。<br>编译完成后，先加载内核自带的<code>uvcvideo</code>及依赖，然后移除内核自带的驱动，安装修改后的驱动，运行<code>xawtv</code>应用程序：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo modprobe uvcvideo</div><div class="line">sudo rmmod uvcvideo</div><div class="line">sudo insmod uvcvideo.ko</div><div class="line">xawtv -noalsa</div></pre></td></tr></table></figure></p><ul><li>效果：<div align="center"><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180422/5.png"></div></li></ul><h1 id="3-编写UVC驱动"><a href="#3-编写UVC驱动" class="headerlink" title="3.编写UVC驱动"></a>3.编写UVC驱动</h1><p>UVC的驱动有点长，我尽量根据功能将其分解若干部分，逐一编写。<br>当USB插上主机，就会产生两个接口(VC和VS)，然后获取到USB描述符并解析，从而设置摄像头(比如分辨率、格式)；然后分配缓冲区，启动摄像头，便从USB得到摄像头采集数据，保存到缓冲区供应用程序使用。<br>整个流程就大致这样，因此将其分为了6个部分进行编写。</p><ul><li>1.注册(USB和Video)</li><li>2.数据格式设置相关</li><li>3.缓冲区操作相关</li><li>4.属性相关(以亮度控制为例)</li><li>5.URB</li><li>6.启动/停止</li><li>7.其它操作函数(mmap和poll) </li><li>8.测试/效果</li></ul><h2 id="3-1-注册-USB和Video"><a href="#3-1-注册-USB和Video" class="headerlink" title="3.1 注册(USB和Video)"></a>3.1 注册(USB和Video)</h2><p>在入口函数先“套”一个USB驱动的框架，首先分配一个<code>usb_driver</code>：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> usb_driver my_uvc_driver = &#123;</div><div class="line">    .name       = <span class="string">"my_uvc"</span>,</div><div class="line">    .probe      = my_uvc_probe,</div><div class="line">    .disconnect = my_uvc_disconnect,</div><div class="line">    .id_table   = my_uvc_ids,</div><div class="line">&#125;;</div></pre></td></tr></table></figure><br>其中的<code>id_table</code>只包含我们所需的VC和VS，这样摄像头的Audio接口，就不会被识别：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> usb_device_id my_uvc_ids[] =</div><div class="line">&#123;</div><div class="line">    <span class="comment">/* Generic USB Video Class */</span></div><div class="line">    &#123; USB_INTERFACE_INFO(USB_CLASS_VIDEO, <span class="number">1</span>, <span class="number">0</span>) &#125;,  <span class="comment">/* VideoControl Interface */</span></div><div class="line">    &#123; USB_INTERFACE_INFO(USB_CLASS_VIDEO, <span class="number">2</span>, <span class="number">0</span>) &#125;,  <span class="comment">/* VideoStreaming Interface */</span></div><div class="line">    &#123;&#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><br>这里<code>USB_INTERFACE_INFO</code>宏参数分别是前面接口描述符里的<code>bInterfaceClass</code>(接口类)，<code>bInterfaceSubClass</code>(接口子类)，<code>bInterfaceProtocol</code>(接口类协议)。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> USB_INTERFACE_INFO(cl, sc, pr) \</span></div><div class="line">.match_flags = USB_DEVICE_ID_MATCH_INT_INFO, \</div><div class="line">.bInterfaceClass = (cl), \</div><div class="line">.bInterfaceSubClass = (sc), \</div><div class="line">.bInterfaceProtocol = (pr)</div></pre></td></tr></table></figure><br>这里传入的第一个参数都是video类，第二个分别是VC和VS，第三个参数都是无协议。这些设置的依据来自于摄像头的USB描述符：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Interface Descriptor:</div><div class="line">  ……</div><div class="line">  bInterfaceClass        14 Video</div><div class="line">  bInterfaceSubClass      1 Video Control</div><div class="line">  bInterfaceProtocol      0 </div><div class="line">  ……   </div><div class="line">  </div><div class="line">Interface Descriptor:</div><div class="line">  ……</div><div class="line">  bInterfaceClass        14 Video</div><div class="line">  bInterfaceSubClass      2 Video Streaming</div><div class="line">  bInterfaceProtocol      0 </div><div class="line">  ……</div></pre></td></tr></table></figure></p><p>这里驱动的<code>usb_device_id</code>和摄像头提供的一旦匹配后，就会调用<code>probe()</code>函数，这里两个接口，就会调用两次。</p><p>在<code>probe()</code>函数里，需要先得到<code>usb_device</code>，用于对usb设备的操作，以及分别得到两个接口的编号，用于后面分别调用每个接口。<br>再在<code>probe()</code>函数里做常规的分配、设置、注册<code>video_device</code>。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">my_uvc_probe</span><span class="params">(<span class="keyword">struct</span> usb_interface *intf, <span class="keyword">const</span> <span class="keyword">struct</span> usb_device_id *id)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> ret;</div><div class="line"></div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    <span class="comment">//usb_device_id会使probe()调用两次,然而创建video_device只需要一次</span></div><div class="line">    cnt++;</div><div class="line"></div><div class="line">    my_uvc_udev = interface_to_usbdev(intf); <span class="comment">//获取usb设备</span></div><div class="line">    <span class="keyword">if</span> (cnt == <span class="number">1</span>) <span class="comment">//获取编号</span></div><div class="line">        my_uvc_control_intf = intf-&gt;cur_altsetting-&gt;desc.bInterfaceNumber;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (cnt == <span class="number">2</span>)</div><div class="line">        my_uvc_streaming_intf = intf-&gt;cur_altsetting-&gt;desc.bInterfaceNumber;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (cnt == <span class="number">2</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="comment">/* 1.分配一个video_device结构体 */</span></div><div class="line">        my_uvc_vdev = video_device_alloc();</div><div class="line">        <span class="keyword">if</span> (<span class="literal">NULL</span> == my_uvc_vdev)</div><div class="line">        &#123;</div><div class="line">            printk(<span class="string">"Faile to alloc video device (%d)\n"</span>, ret);</div><div class="line">            <span class="keyword">return</span> -ENOMEM;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">/* 2.设置 */</span></div><div class="line">        my_uvc_vdev-&gt;release   = my_uvc_release;</div><div class="line">        my_uvc_vdev-&gt;fops      = &amp;my_uvc_fops;</div><div class="line">        my_uvc_vdev-&gt;ioctl_ops = &amp;my_uvc_ioctl_ops;</div><div class="line">        my_uvc_vdev-&gt;v4l2_dev  = &amp;v4l2_dev;</div><div class="line"></div><div class="line">        <span class="comment">/* 3. 注册 */</span></div><div class="line">        ret = video_register_device(my_uvc_vdev, VFL_TYPE_GRABBER, <span class="number">-1</span>);</div><div class="line">        <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            printk(<span class="string">"Faile to video_register_device.\n"</span>);</div><div class="line">            <span class="keyword">return</span> ret;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            printk(<span class="string">"video_register_device ok.\n"</span>);</div><div class="line"></div><div class="line">        <span class="comment">/* 为了确定带宽,使用哪一个setting */</span></div><div class="line">        my_uvc_try_streaming_params(&amp;my_uvc_params); <span class="comment">//测试参数</span></div><div class="line">        my_uvc_get_streaming_params(&amp;my_uvc_params); <span class="comment">//取出参数</span></div><div class="line">        my_uvc_set_streaming_params(&amp;my_uvc_params); <span class="comment">//设置参数</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>对应的<code>disconnect</code>也会被调用两次，但只做一次释放操作：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">my_uvc_disconnect</span><span class="params">(<span class="keyword">struct</span> usb_interface *intf)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line"></div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    cnt++;</div><div class="line">    <span class="keyword">if</span> (cnt == <span class="number">2</span>)</div><div class="line">    &#123;</div><div class="line">        video_unregister_device(my_uvc_vdev);</div><div class="line">        video_device_release(my_uvc_vdev);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>现在，就完成了<strong>USB设备</strong>和<strong>Video设备</strong>的注册。<br>且为Video设备绑定了操作函数，后续的工作就是完善操作函数。</p><h2 id="3-2-数据格式设置相关"><a href="#3-2-数据格式设置相关" class="headerlink" title="3.2 数据格式设置相关"></a>3.2 数据格式设置相关</h2><p>前面Video设备绑定了<code>fops</code>，这里主要有五个操作函数：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">struct</span> v4l2_file_operations my_uvc_fops =</div><div class="line">&#123;</div><div class="line">    .owner    = THIS_MODULE,</div><div class="line">    .open           = my_uvc_open,</div><div class="line">    .release        = my_uvc_close,</div><div class="line">    .mmap           = my_uvc_mmap,</div><div class="line">    .unlocked_ioctl = video_ioctl2, <span class="comment">/* V4L2 ioctl handler */</span></div><div class="line">    .poll           = my_uvc_poll,</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><p><code>open()</code>和<code>close()</code>没什么好说的，常规操作：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">my_uvc_open</span><span class="params">(<span class="keyword">struct</span> file *file)</span></span></div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">my_uvc_close</span><span class="params">(<span class="keyword">struct</span> file *file)</span></span></div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    my_uvc_vidioc_streamoff(<span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>关闭的时候，顺手调用<code>vidioc_streamoff</code>关闭数据采集。</p><p><code>mmap()</code>和<code>poll()</code>涉及buf的操作，后面再讲。<br>先讲<code>ioctl</code>里面几个稍微简单点的操作函数。</p><p>首先是<code>vidioc_querycap()</code>，用于表明本设备是一个摄像头设备。<br>需要对<code>v4l2_capability</code>结构体的<code>driver</code>命名，<code>card</code>命名，<code>version</code>指定版本号，<code>capabilities</code>指定支持的功能，<code>device_caps</code>通过节点访问的功能。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">my_uvc_vidioc_querycap</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="keyword">void</span>  *priv, <span class="keyword">struct</span> v4l2_capability *cap)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> video_device *vdev = video_devdata(file);</div><div class="line"></div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    strlcpy(cap-&gt;driver, <span class="string">"my_uvc_video"</span>, <span class="keyword">sizeof</span>(cap-&gt;driver));</div><div class="line">    strlcpy(cap-&gt;card, vdev-&gt;name, <span class="keyword">sizeof</span>(cap-&gt;card));</div><div class="line"></div><div class="line">    cap-&gt;version = <span class="number">4</span>;</div><div class="line"></div><div class="line">    cap-&gt;capabilities = V4L2_CAP_VIDEO_CAPTURE | V4L2_CAP_STREAMING | V4L2_CAP_DEVICE_CAPS;</div><div class="line">    cap-&gt;device_caps  = V4L2_CAP_VIDEO_CAPTURE | V4L2_CAP_STREAMING | V4L2_CAP_DEVICE_CAPS;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><hr><p>然后是<code>vidioc_enum_fmt_vid_cap()</code>，用于列举摄像头支持的格式。<br>从USB摄像头的设备描述符可知，本摄像头只支持一种<code>MJPEG</code>格式，通过<code>index</code>来限定只接受一种格式。<br>需要设置<code>v4l2_fmtdesc</code>结构体的<code>description</code>(格式名字)、<code>pixelformat</code>(格式对应的像素格式)和<code>type</code>(v4l2_buf_type)。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">my_uvc_vidioc_enum_fmt_vid_cap</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="keyword">void</span>  *priv, <span class="keyword">struct</span> v4l2_fmtdesc *f)</span></span></div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    <span class="comment">/* 根据摄像头的设备描述符可知,只支持一种格式:VS_FORMAT_MJPEG */</span></div><div class="line">    <span class="keyword">if</span>(f-&gt;index &gt;= <span class="number">1</span>)</div><div class="line">        <span class="keyword">return</span> -EINVAL;</div><div class="line"></div><div class="line">    <span class="built_in">strcpy</span>(f-&gt;description, MY_UVC_FMT); <span class="comment">//支持格式</span></div><div class="line">    f-&gt;pixelformat = V4L2_PIX_FMT_MJPEG;</div><div class="line">    f-&gt;type        = V4L2_BUF_TYPE_VIDEO_CAPTURE;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><hr><p>之后是获取摄像头数据格式<code>vidioc_g_fmt_vid_cap()</code>操作函数。<br>这个比较简单，直接返回<code>my_uvc_format</code>即可。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">my_uvc_vidioc_g_fmt_vid_cap</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="keyword">void</span> *priv, <span class="keyword">struct</span> v4l2_format *f)</span></span></div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    <span class="built_in">memcpy</span>(f, &amp;my_uvc_format, <span class="keyword">sizeof</span>(my_uvc_format));</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><hr><p>再是<code>vidioc_try_fmt_vid_cap()</code>，用于尝试设置摄像头数据的格式。<br>先判断传入的<code>v4l2_format</code>结构体里的<code>type</code>和<code>pixelformat</code>是不是正确的格式。<br>再设置<code>v4l2_pix_format</code>结构体的<code>width</code>(宽)、<code>height</code>(高)和<code>filed</code>(数据扫描方式:不交错)。<br>以及<code>sizeimage</code>(每帧图像大小)，这里的值大小的确定是通过<code>probe()</code>里打印的<code>dwMaxVideoFrameSize</code>值，这里每帧的理论大小是<code>width*height=320*240=76800</code>小于<code>dwMaxVideoFrameSize=77312</code>，估计最大每帧图像还会包含其它数据。<br>大多数网络摄像头的<code>colorspace</code>(颜色空间)都是<code>V4L2_COLORSPACE_SRGB</code>。<br><code>priv</code>(私有数据)由<code>pixelformat</code>决定。<br>这里的所有设置的值，理论上都来自对USB设备描述符的解析，这里简化了代码解析的过程，直接赋值，实际开发中为了适配多个摄像头，应该读取后解析。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">my_uvc_vidioc_try_fmt_vid_cap</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="keyword">void</span> *priv, <span class="keyword">struct</span> v4l2_format *f)</span></span></div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (f-&gt;type != V4L2_BUF_TYPE_VIDEO_CAPTURE || f-&gt;fmt.pix.pixelformat != V4L2_PIX_FMT_MJPEG)</div><div class="line">        <span class="keyword">return</span> -EINVAL;</div><div class="line"></div><div class="line">    <span class="comment">/* 调整format的width, height */</span></div><div class="line">    f-&gt;fmt.pix.width  = my_uvc_wWidth; <span class="comment">//设备描述符里支持的分辨率:640x480,320x240,160x120</span></div><div class="line">    f-&gt;fmt.pix.height = my_uvc_wHeight;</div><div class="line"></div><div class="line">    f-&gt;fmt.pix.field      = V4L2_FIELD_NONE;</div><div class="line"></div><div class="line">    <span class="comment">/* 计算bytesperline, sizeimage */</span></div><div class="line">    <span class="comment">//bBitsPerPixel = my_uvc_bBitsPerPixel; //lsusb:bBitsPerPixel</span></div><div class="line">    <span class="comment">//f-&gt;fmt.pix.bytesperline = (f-&gt;fmt.pix.width * bBitsPerPixel) &gt;&gt; 3;</span></div><div class="line">    f-&gt;fmt.pix.sizeimage = dwMaxVideoFrameSize; <span class="comment">//f-&gt;fmt.pix.height * f-&gt;fmt.pix.bytesperline;</span></div><div class="line"></div><div class="line">    f-&gt;fmt.pix.colorspace = V4L2_COLORSPACE_SRGB;</div><div class="line">    f-&gt;fmt.pix.priv       = <span class="number">0</span>;<span class="comment">/* private data, depends on pixelformat */</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><hr><p>最后是设置摄像头的数据的格式<code>vidioc_s_fmt_vid_cap()</code>。<br>先参数设置传入的<code>v4l2_format</code>，如果不支持返回错误。支持的话，直接赋值给<code>my_uvc_format</code>。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">my_uvc_vidioc_s_fmt_vid_cap</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="keyword">void</span> *priv, <span class="keyword">struct</span> v4l2_format *f)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> ret;</div><div class="line"></div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    ret = my_uvc_vidioc_try_fmt_vid_cap(file, <span class="literal">NULL</span>, f);</div><div class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line"></div><div class="line">    <span class="built_in">memcpy</span>(&amp;my_uvc_format, f, <span class="keyword">sizeof</span>(my_uvc_format));</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>至此，就完成了对<strong>摄像头数据格式</strong><code>my_uvc_format</code>的设置。<br>应用层就可以对摄像头数据格式进行操作，比如选择何种数据格式、何种分辨率等，当然，这里的驱动没有提供选择，全都直接赋值了。</p><h2 id="3-3-缓冲区操作相关"><a href="#3-3-缓冲区操作相关" class="headerlink" title="3.3 缓冲区操作相关"></a>3.3 缓冲区操作相关</h2><p>buf操作是一个难点，容易出问题的地方。<br>首先是申请缓冲区<code>vidioc_reqbufs()</code>，应用层<code>ioctl</code>调用此函数，让其分配若干个buf，应用层后面将从这些buf读取视频数据。<br>驱动先从传入的<code>v4l2_requestbuffers</code>结构体获得<code>count</code>(buf数量)，每个buf的大小是前面<code>my_uvc_format</code>的<code>sizeimage</code>(每帧图像大小)，且长度页对齐。</p><blockquote><ul><li>PAGE_ALIGN<br>PAGE_ALIGN在内核里作用是将数据以4K页大小上界对齐。<br>举个例子：<br>假如传入的数据大小是4000字节，那么结果得到4096字节；<br>假如传入的数据大小是4096字节，那么结果得到4096字节；<br>假如传入的数据大小是5000字节，那么结果得到8192字节；</li></ul><p>源码：<br><code>#define PAGE_SIZE 4096</code><br><code>#define PAGE_MASK (~(PAGE_SIZE-1))</code><br><code>#define PAGE_ALIGN(x) ((x + PAGE_SIZE - 1) &amp; PAGE_MASK)</code></p><p>实质:<code>PAGE_ALIGN(x) = ((x + 4095) &amp; (~4095))</code></p></blockquote><p>然后再判断<code>my_uvc_queue</code>结构体里的<code>mem</code>(内存地址)是否为空，非空的话说明原来已经分配了buf，需要先释放内存、清空<code>my_uvc_queue</code>。<br>如果传入需要的buf数量为0，则表明不需要分配，直接退出。<br>然后就分配buf，将所有buf作为一个整体一次性分配，大小也就是<code>nbuffers * bufsize</code>，如果分配失败，减小buf数量，再尝试。<br>现在就有了一整块buf，对应的起始地址是<code>mem</code>，再清空<code>my_uvc_queue</code>进行初始化。<br>再初始化两个队列(双向链表)，<code>mainqueue</code>用于供应用层读取数据用，<code>irqqueue</code>用于供驱动产生数据用。<br>再依次设置每个buf的<code>v4l2_buffer</code>结构体的<code>index</code>(索引)、<code>m.offset</code>(偏移)、<code>length</code>(大小)、<code>type</code>(类型)、<code>sequence</code>(序列计数)、<code>field</code>(扫描方式)、<code>memory</code>(内存类型)、<code>flags</code>(标志)，再设置<code>my_uvc_buffer</code>的<code>state</code>(状态)和初始化等待队列<code>wait</code>。<br>最后再设置<code>my_uvc_q</code>，记录buf首地址、数量和大小。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* APP调用该ioctl让驱动程序分配若干个buf, APP将从这些buf中读到视频数据  */</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">my_uvc_vidioc_reqbufs</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="keyword">void</span> *priv, <span class="keyword">struct</span> v4l2_requestbuffers *p)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">void</span> *mem = <span class="literal">NULL</span>;</div><div class="line">    <span class="keyword">int</span> nbuffers = p-&gt;count; <span class="comment">//buf数量</span></div><div class="line">    <span class="keyword">int</span> bufsize  = PAGE_ALIGN(my_uvc_format.fmt.pix.sizeimage); <span class="comment">//buf大小,且长度页对齐</span></div><div class="line"></div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (my_uvc_q.mem)    <span class="comment">//如果原来分配了buf,先释放原来的buf</span></div><div class="line">    &#123;</div><div class="line">        vfree(my_uvc_q.mem);</div><div class="line">        <span class="built_in">memset</span>(&amp;my_uvc_q, <span class="number">0</span>, <span class="keyword">sizeof</span>(my_uvc_q));</div><div class="line">        my_uvc_q.mem = <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (nbuffers == <span class="number">0</span>)   <span class="comment">//没有需要分配的,直接退出</span></div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (; nbuffers &gt; <span class="number">0</span>; --nbuffers)          <span class="comment">//依次减少buf数量，直到分配成功</span></div><div class="line">    &#123;</div><div class="line">        mem = vmalloc_32(nbuffers * bufsize); <span class="comment">//这些buf是一次性作为一个整体来分配的</span></div><div class="line">        <span class="keyword">if</span> (mem != <span class="literal">NULL</span>)</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (mem == <span class="literal">NULL</span>)</div><div class="line">        <span class="keyword">return</span> -ENOMEM;</div><div class="line"></div><div class="line">    <span class="built_in">memset</span>(&amp;my_uvc_q, <span class="number">0</span>, <span class="keyword">sizeof</span>(my_uvc_q)); <span class="comment">//清空my_uvc_q,初始化</span></div><div class="line"></div><div class="line">    INIT_LIST_HEAD(&amp;my_uvc_q.mainqueue); <span class="comment">//初始化两个队列,my_uvc_vidioc_qbuf</span></div><div class="line">    INIT_LIST_HEAD(&amp;my_uvc_q.irqqueue);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nbuffers; ++i)</div><div class="line">    &#123;</div><div class="line">        my_uvc_q.buffer[i].buf.index    = i;  <span class="comment">//索引</span></div><div class="line">        my_uvc_q.buffer[i].buf.m.offset = i * bufsize; <span class="comment">//偏移</span></div><div class="line">        my_uvc_q.buffer[i].buf.length   = my_uvc_format.fmt.pix.sizeimage; <span class="comment">//原始大小;实测PAGE_ALIGN对齐,也没问题</span></div><div class="line">        my_uvc_q.buffer[i].buf.type     = V4L2_BUF_TYPE_VIDEO_CAPTURE; <span class="comment">//视频捕获设备</span></div><div class="line">        my_uvc_q.buffer[i].buf.sequence = <span class="number">0</span>;</div><div class="line">        my_uvc_q.buffer[i].buf.field    = V4L2_FIELD_NONE;</div><div class="line">        my_uvc_q.buffer[i].buf.memory   = V4L2_MEMORY_MMAP;</div><div class="line">        my_uvc_q.buffer[i].buf.flags    = <span class="number">0</span>;</div><div class="line">        my_uvc_q.buffer[i].state        = VIDEOBUF_IDLE; <span class="comment">//分配完更新状态为空闲</span></div><div class="line">        init_waitqueue_head(&amp;my_uvc_q.buffer[i].wait); <span class="comment">//初始化一个等待队列</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    my_uvc_q.mem = mem;</div><div class="line">    my_uvc_q.count = nbuffers;</div><div class="line">    my_uvc_q.buf_size = bufsize;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> nbuffers;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>这样，我们就得到一个<code>my_uvc_queue</code>结构体，这个结构体里面的<code>my_uvc_buffer</code>结构体数组，存放了每个buf的信息。示意如下：<br><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180422/6.jpg" alt=""></p><hr><p>接下来是<code>vidioc_querybuf()</code>，用于查询buf，获得buf的地址信息等。<br>先判断传入的<code>v4l2_buffer</code>结构体中的<code>index</code>是否超出了buf数量范围。<br>然后将<code>my_uvc_q</code>中的对应的<code>v4l2_buffer</code>传给传入的<code>v4l2_buf</code>。<br>再判断<code>my_uvc_buffer</code>中的<code>vma_use_count</code>是否表示被<code>mmap()</code>，对应修改标准位。<br>最后再将uvc的state flags转换成V4L2的state flags，其实它们的值都是一样的，<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 查询缓存状态, 比如地址信息(APP可以用mmap进行映射)  */</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">my_uvc_vidioc_querybuf</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="keyword">void</span> *priv, <span class="keyword">struct</span> v4l2_buffer *v4l2_buf)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line"></div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (v4l2_buf-&gt;index &gt;= my_uvc_q.count)</div><div class="line">    &#123;</div><div class="line">        ret = -EINVAL;</div><div class="line">        <span class="keyword">goto</span> done;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">memcpy</span>(v4l2_buf, &amp;my_uvc_q.buffer[v4l2_buf-&gt;index].buf, <span class="keyword">sizeof</span>(*v4l2_buf));</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (my_uvc_q.buffer[v4l2_buf-&gt;index].vma_use_count) <span class="comment">//更新flags</span></div><div class="line">        v4l2_buf-&gt;flags |= V4L2_BUF_FLAG_MAPPED;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></div><div class="line">    <span class="keyword">switch</span> (my_uvc_q.buffer[v4l2_buf-&gt;index].state)    <span class="comment">//将uvc flags转换成V4L2 flags</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">case</span> VIDEOBUF_ERROR:</div><div class="line">        <span class="keyword">case</span> VIDEOBUF_DONE:</div><div class="line">            v4l2_buf-&gt;flags |= V4L2_BUF_FLAG_DONE;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> VIDEOBUF_QUEUED:</div><div class="line">        <span class="keyword">case</span> VIDEOBUF_ACTIVE:</div><div class="line">            v4l2_buf-&gt;flags |= V4L2_BUF_FLAG_QUEUED;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> VIDEOBUF_IDLE:</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line">done:</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>这样，就将对应的<code>v4l2_buffer</code>相关信息传给了应用层，应用层就通过此函数查询各个buf信息。</p><hr><p><code>vidioc_qbuf()</code>是将前面的buf放入到队列中。<br>首先是判断传入的<code>v4l2_buffer</code>的类型、内存种类、节点是否超过最大数量和<code>my_uvc_q</code>的<code>my_uvc_buffer</code>状态是否处于空闲。<br>然后修改<code>my_uvc_q</code>的<code>my_uvc_buffer</code>状态为处于队列中<code>VIDEOBUF_QUEUED</code>，初始化<code>v4l2_buffer</code>中的<code>bytesused</code>(缓冲区中数据的大小)为0。<br>然后把对应buf的<code>stream</code>和<code>irq</code>分别加到队列<code>mainqueue</code>和队列<code>irqqueue</code>尾部。</p><ul><li>队列<code>mainqueue</code>：供应用层使用，当队列中缓冲区有数据时, 应用层从<code>mainqueue</code>队列中取出数据；</li><li>队列<code>irqqueue</code>：供产生数据的函数使用，当采集到数据时,从<code>irqqueue</code>队列中取出首个缓冲区,存入数据;<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 把传入的缓冲区放入队列, 底层的硬件操作函数将会把数据放入这个队列的缓存 */</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">my_uvc_vidioc_qbuf</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="keyword">void</span> *priv, <span class="keyword">struct</span> v4l2_buffer *v4l2_buf)</span></span></div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    <span class="comment">/* 0. APP传入的v4l2_buf可能有问题, 要做判断 */</span></div><div class="line">    <span class="keyword">if</span> (v4l2_buf-&gt;type != V4L2_BUF_TYPE_VIDEO_CAPTURE || v4l2_buf-&gt;memory != V4L2_MEMORY_MMAP)</div><div class="line">        <span class="keyword">return</span> -EINVAL;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (v4l2_buf-&gt;index &gt;= my_uvc_q.count)</div><div class="line">        <span class="keyword">return</span> -EINVAL;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (my_uvc_q.buffer[v4l2_buf-&gt;index].state != VIDEOBUF_IDLE)</div><div class="line">        <span class="keyword">return</span> -EINVAL;</div><div class="line"></div><div class="line">    <span class="comment">/* 1. 修改状态 */</span></div><div class="line">    my_uvc_q.buffer[v4l2_buf-&gt;index].state = VIDEOBUF_QUEUED;</div><div class="line">    my_uvc_q.buffer[v4l2_buf-&gt;index].buf.bytesused = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="comment">/* 2. 放入2个队列 */</span></div><div class="line">    <span class="comment">//队列1: 供应用层使用</span></div><div class="line">    <span class="comment">//当队列中缓冲区有数据时, 应用层从mainqueue队列中取出数据</span></div><div class="line">    list_add_tail(&amp;my_uvc_q.buffer[v4l2_buf-&gt;index].stream, &amp;my_uvc_q.mainqueue);</div><div class="line"></div><div class="line">    <span class="comment">//队列2: 供产生数据的函数使用</span></div><div class="line">    <span class="comment">//当采集到数据时,从irqqueue队列中取出首个缓冲区,存入数据</span></div><div class="line">    list_add_tail(&amp;my_uvc_q.buffer[v4l2_buf-&gt;index].irq, &amp;my_uvc_q.irqqueue);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>通过此函数，就将传入的<code>v4l2_buffer</code>放在了两个队列中。</li></ul><hr><p>最后是将数据从队列取出<code>vidioc_dqbuf()</code>。<br>这里是应用层想得到数据，因此是从<code>mainqueue</code>队列获取。<br>首先判断<code>mainqueue</code>是否是空队列，然后以<code>my_uvc_q.mainqueue</code>作为头节点，搜索<code>my_uvc_buffer</code>结构体中的<code>stream</code>，得到队列中第一个<code>my_uvc_buffer</code>的地址。<br>再把<code>my_uvc_buffer</code>的<code>state</code>(状态)改为<code>VIDEOBUF_IDLE</code>(空闲)。、<br>再将该节点从队列删除，最后返回<code>v4l2_buf</code>。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* APP通过poll/select确定有数据后,把buf从mainqueue队列中取出来 */</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">my_uvc_vidioc_dqbuf</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="keyword">void</span> *priv, <span class="keyword">struct</span> v4l2_buffer *v4l2_buf)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> my_uvc_buffer *get_buf;</div><div class="line"></div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (list_empty(&amp;my_uvc_q.mainqueue))</div><div class="line">        <span class="keyword">return</span> -EINVAL;</div><div class="line"></div><div class="line">    get_buf = list_first_entry(&amp;my_uvc_q.mainqueue, <span class="keyword">struct</span> my_uvc_buffer, stream); <span class="comment">//取出buf</span></div><div class="line"></div><div class="line">    <span class="keyword">switch</span> (get_buf-&gt;state)   <span class="comment">//修改状态</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">case</span> VIDEOBUF_ERROR:</div><div class="line">            <span class="keyword">return</span> -EIO;</div><div class="line">        <span class="keyword">case</span> VIDEOBUF_DONE:</div><div class="line">            get_buf-&gt;state = VIDEOBUF_IDLE;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> VIDEOBUF_IDLE:</div><div class="line">        <span class="keyword">case</span> VIDEOBUF_QUEUED:</div><div class="line">        <span class="keyword">case</span> VIDEOBUF_ACTIVE:</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">return</span> -EINVAL;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    list_del(&amp;get_buf-&gt;stream); <span class="comment">//从队列删除</span></div><div class="line">    <span class="built_in">memcpy</span>(v4l2_buf, &amp;get_buf-&gt;buf, <span class="keyword">sizeof</span> *v4l2_buf); <span class="comment">//复制返回数据</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>至此，对buf的基本操作就完成了，包括buf的申请、查询、放入/取出到队列。<br>其中，队列的变化如下：<br><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180422/7.jpg" alt=""><br>初始状态，队列<code>mainqueue</code>和队列<code>irqqueue</code>串连起了传进来的buf。<br>产生数据的时候，buf[0]装入数据，且断开与队列<code>irqqueue</code>的连接，此时buf[1]是队列<code>irqqueue</code>的第一个节点。<br>取出数据的时候，buf[0]取出数据，且断开与队列<code>mainqueue</code>的连接，此时buf[1]是队列<code>mainqueue</code>的第一个节点。<br>待数据处理完成，buf[0]将被再次放入队列，此时在队列尾部。<br>周而复始完成放入、取出队列。</p><h2 id="3-4-属性相关-以亮度控制为例"><a href="#3-4-属性相关-以亮度控制为例" class="headerlink" title="3.4 属性相关(以亮度控制为例)"></a>3.4 属性相关(以亮度控制为例)</h2><p>接下来是操作摄像头属性，以亮度控制为例，查询、获取、设置摄像头的亮度属性。<br>从前面的UVC硬件模型中可以得知，<code>VC interface</code>是用于控制摄像头的，其中<code>PU</code>单元用于属性的控制。<br>在<code>UVC 1.5 Class specification.pdf</code>文档里，找到<code>Processing Unit Descriptor</code>，其中的<code>bmControls</code>表示摄像头支持属性的含义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">A bit set to 1 indicates that the mentioned Control is supported for the video stream.</div><div class="line">D0: Brightness</div><div class="line">D1: Contrast</div><div class="line">D2: Hue</div><div class="line">D3: Saturation</div><div class="line">D4: Sharpness</div><div class="line">D5: Gamma</div><div class="line">D6: White Balance Temperature</div><div class="line">D7: White Balance Component</div><div class="line">D8: Backlight Compensation</div><div class="line">D9: Gain</div><div class="line">……</div></pre></td></tr></table></figure></p><p>再找到本摄像头USB描述符中<code>VC interface Descriptor</code>的<code>PROCESSING_UNIT</code>中的<code>bmControls</code>，其值是<code>0x0000053f</code>，对应支持的属性也就是其下面的几个属性，<code>Brightness</code>(亮度)控制是支持的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">VideoControl Interface Descriptor:</div><div class="line">  bLength                11</div><div class="line">  bDescriptorType        36</div><div class="line">  bDescriptorSubtype      5 (PROCESSING_UNIT)</div><div class="line">Warning: Descriptor too short</div><div class="line">  bUnitID                 3</div><div class="line">  bSourceID               1</div><div class="line">  wMaxMultiplier          0</div><div class="line">  bControlSize            2</div><div class="line">  bmControls     0x0000053f</div><div class="line">    Brightness</div><div class="line">    Contrast</div><div class="line">    Hue</div><div class="line">    Saturation</div><div class="line">    Sharpness</div><div class="line">    Gamma</div><div class="line">    Backlight Compensation</div><div class="line">    Power Line Frequency</div></pre></td></tr></table></figure></p><p>在代码中，UVC规范定义的属性在<code>uvc_ctrl.c</code>里的一个<code>uvc_control_info</code>结构体类型的<code>vc_ctrls</code>数组里。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">.entity= UVC_GUID_UVC_PROCESSING,   <span class="comment">//属于哪个entity(比如PU)</span></div><div class="line">.selector= UVC_PU_BRIGHTNESS_CONTROL, <span class="comment">//用于亮度</span></div><div class="line">.index= <span class="number">0</span>,                         <span class="comment">//对应Processing Unit Descriptor的bmControls[0]</span></div><div class="line">.size= <span class="number">2</span>,                         <span class="comment">//数据长度为2字节</span></div><div class="line">.flags= UVC_CTRL_FLAG_SET_CUR      <span class="comment">//支持SET_CUR、GET_RANGE(GET_CUR、GET_MIN、GET_MAX)等</span></div><div class="line">| UVC_CTRL_FLAG_GET_RANGE</div><div class="line">| UVC_CTRL_FLAG_RESTORE,</div><div class="line">&#125;,</div><div class="line">&#123;</div><div class="line">.entity= UVC_GUID_UVC_PROCESSING,</div><div class="line">.selector= UVC_PU_CONTRAST_CONTROL,</div><div class="line">.index= <span class="number">1</span>,</div><div class="line">.size= <span class="number">2</span>,</div><div class="line">.flags= UVC_CTRL_FLAG_SET_CUR</div><div class="line">| UVC_CTRL_FLAG_GET_RANGE</div><div class="line">| UVC_CTRL_FLAG_RESTORE,</div><div class="line">&#125;,</div></pre></td></tr></table></figure><br>现在，文档、硬件、代码三者都找到了对应。</p><p>此外，<code>uvc_control_mapping</code>结构体类型的<code>uvc_ctrl_mappings</code>数组更加细致地描述属性。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">.id    = V4L2_CID_BRIGHTNESS,       <span class="comment">//应用层根据ID来找到对应属性</span></div><div class="line">.name= <span class="string">"Brightness"</span>,              <span class="comment">//名字</span></div><div class="line">.entity= UVC_GUID_UVC_PROCESSING,   <span class="comment">//属于哪了个entity(比如PU)</span></div><div class="line">.selector= UVC_PU_BRIGHTNESS_CONTROL, <span class="comment">//用于亮度控制</span></div><div class="line">.size= <span class="number">16</span>,                        <span class="comment">//数据占多少位</span></div><div class="line">.offset= <span class="number">0</span>,                         <span class="comment">//从哪位开始</span></div><div class="line">.v4l2_type= V4L2_CTRL_TYPE_INTEGER,    <span class="comment">//属性类别(整数)</span></div><div class="line">.data_type= UVC_CTRL_DATA_TYPE_SIGNED, <span class="comment">//数据类型(有符号整数)</span></div><div class="line">&#125;,</div><div class="line">&#123;</div><div class="line">.id    = V4L2_CID_CONTRAST,</div><div class="line">.name= <span class="string">"Contrast"</span>,</div><div class="line">.entity= UVC_GUID_UVC_PROCESSING,</div><div class="line">.selector= UVC_PU_CONTRAST_CONTROL,</div><div class="line">.size= <span class="number">16</span>,</div><div class="line">.offset= <span class="number">0</span>,</div><div class="line">.v4l2_type= V4L2_CTRL_TYPE_INTEGER,</div><div class="line">.data_type= UVC_CTRL_DATA_TYPE_UNSIGNED,</div><div class="line">&#125;,</div></pre></td></tr></table></figure></p><p>因此，属性控制的准备工作有：</p><blockquote><p>1.获取摄像头的设备描述符，根据PU的描述符的<code>bmControls</code>，得知它支持哪些属性；<br>2.从<code>uvc_ctrls</code>数组中根据<code>entity</code>和<code>index</code>找到对应属性，得知其支持的操作(SET_CUR、GET_CUR等)；<br>3.从<code>uvc_ctrl_mappings</code>数组中根据<code>ID</code>找到对应属性，得知其更加详细信息(整数等);</p></blockquote><hr><p>首先是查询属性<code>vidioc_queryctrl()</code>，应用层传入一个<code>v4l2_queryctrl</code>结构体，驱动设置其参数返回。<br>需要设置的参数有<code>id</code>(ID)、<code>type</code>(类型)、<code>name</code>(名字)、<code>flags</code>(标志)、<code>minimum</code>(最小值)、<code>maximum</code>(最大值)、<code>step</code>(步长)、<code>default_value</code>(典型值)，其中前面几个是根据前面的准备工作得知的值，直接赋值，后面的几个需要使用<code>usb_control_msg()</code>函数向摄像头发起USB传输，获取对应值。</p><blockquote><ul><li><strong>usb_control_msg()</strong><br>功能：发送一个简单的控制消息到指定的端点，并等待消息完成或超时；<br>参数：<br>　　<strong>dev</strong>:指向控制消息所发送的目标USB设备(<code>usb_device</code>)的指针； &lt;这里是在<code>probe()</code>里获取的<code>my_uvc_udev</code>&gt;<br>　　<strong>pipe</strong>:控制消息所发送的目标USB设备的特定端点，调用<code>usb_sndctrlpipe</code>(把指定USB设备的指定端点设置为一个控制OUT端点)或<code>usb_rcvctrlpipe</code>(把指定USB设备的指定端点设置为一个控制IN端点)来创建的; &lt;这里把<code>my_uvc_udev</code>设置为接收端点&gt;<br>　　<strong>request</strong>:控制消息的USB请求值； &lt;这里分别是需要的GET_MIN、GET_MAX、GET_RES、GET_DEF&gt;<br>　　<strong>requesttype</strong>:控制消息的USB请求类型值； &lt;这里为USB_TYPE_CLASS(1&lt;<5)、usb_recip_interface(1<<0)、usb_dir_in(1<<7)><br>　　　　D7:数据的传输方向:0表示从主机到设备；1表示从设备到主机；<br>　　　　D6~5:命令的类型:0表示标准命令；1表示类命令；2表示厂商提供的命令；3保留；<br>　　　　D4~0:接收对象:0表示设备； 1表示接口；2表示端点；3表示其他；<br>　　<strong>value</strong>:控制消息的USB消息值； &lt;这里是PU亮度控制&gt;<br>　　<strong>index</strong>:控制消息的USB消息索引值；&lt;这里是PU对应的ID和控制接口&gt;<br>　　<strong>data</strong>:指向要发送/接收的数据的指针； &lt;这里是接收数据&gt;<br>　　<strong>size</strong>:data参数所指缓冲区的大小； &lt;这里是两字节，bControlSize=2&gt;<br>　　<strong>timeout</strong>:以msecs为单位，期望等待的超时时间，如果为0，该函数将一直等待消息结束以的时间；&lt;这里是5s&gt;<br>返回值：<br>　　成功返回接收/发送的字节数，否则返回负的错误值；</5)、usb_recip_interface(1<<0)、usb_dir_in(1<<7)></li></ul></blockquote><p>通过<code>usb_control_msg()</code>获得的<code>data</code>还需要调用<code>my_uvc_get_le_value()</code>进行转换成<code>value</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">my_uvc_vidioc_queryctrl</span> <span class="params">(<span class="keyword">struct</span> file *file, <span class="keyword">void</span> *fh, <span class="keyword">struct</span> v4l2_queryctrl *ctrl)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> data[<span class="number">2</span>];  </div><div class="line"></div><div class="line">    <span class="keyword">if</span> (ctrl-&gt;id != V4L2_CID_BRIGHTNESS)     <span class="comment">//这里只操作控制亮度的v4l2_queryctrl</span></div><div class="line">        <span class="keyword">return</span> -EINVAL;</div><div class="line"></div><div class="line">    <span class="built_in">memset</span>(ctrl, <span class="number">0</span>, <span class="keyword">sizeof</span> * ctrl);          <span class="comment">//初始化,清空</span></div><div class="line">    ctrl-&gt;id   = V4L2_CID_BRIGHTNESS;        <span class="comment">//设置ID</span></div><div class="line">    ctrl-&gt;type = V4L2_CTRL_TYPE_INTEGER;     <span class="comment">//设置属性类别(整数)</span></div><div class="line">    <span class="built_in">strcpy</span>(ctrl-&gt;name, <span class="string">"MY_UVC_BRIGHTNESS"</span>); <span class="comment">//设置名字</span></div><div class="line">    ctrl-&gt;flags = <span class="number">0</span>;                         <span class="comment">//默认支持设置等</span></div><div class="line"></div><div class="line">    <span class="comment">/* 发起USB传输,从摄像头获取这些值 */</span></div><div class="line">    <span class="comment">//设置最小值</span></div><div class="line">    <span class="keyword">if</span>(<span class="number">2</span> != usb_control_msg(my_uvc_udev, usb_rcvctrlpipe(my_uvc_udev, <span class="number">0</span>), </div><div class="line">                            GET_MIN, USB_TYPE_CLASS | USB_RECIP_INTERFACE | USB_DIR_IN, </div><div class="line">                            PU_BRIGHTNESS_CONTROL &lt;&lt; <span class="number">8</span>, my_uvc_bUnitID &lt;&lt; <span class="number">8</span> | my_uvc_control_intf, data, <span class="number">2</span>, <span class="number">5000</span>)) </div><div class="line">        <span class="keyword">return</span> -EIO;</div><div class="line">    ctrl-&gt;minimum = my_uvc_get_le_value(data);</div><div class="line"></div><div class="line">    <span class="comment">//设置最大值</span></div><div class="line">    <span class="keyword">if</span>(<span class="number">2</span> != usb_control_msg(my_uvc_udev, usb_rcvctrlpipe(my_uvc_udev, <span class="number">0</span>), </div><div class="line">                            GET_MAX, USB_TYPE_CLASS | USB_RECIP_INTERFACE | USB_DIR_IN, </div><div class="line">                            PU_BRIGHTNESS_CONTROL &lt;&lt; <span class="number">8</span>, my_uvc_bUnitID &lt;&lt; <span class="number">8</span> | my_uvc_control_intf, data, <span class="number">2</span>, <span class="number">5000</span>))</div><div class="line">        <span class="keyword">return</span> -EIO;</div><div class="line">    ctrl-&gt;maximum = my_uvc_get_le_value(data);</div><div class="line"></div><div class="line">    <span class="comment">//设置步长</span></div><div class="line">    <span class="keyword">if</span>(<span class="number">2</span> != usb_control_msg(my_uvc_udev, usb_rcvctrlpipe(my_uvc_udev, <span class="number">0</span>), </div><div class="line">                            GET_RES, USB_TYPE_CLASS | USB_RECIP_INTERFACE | USB_DIR_IN, </div><div class="line">                            PU_BRIGHTNESS_CONTROL &lt;&lt; <span class="number">8</span>, my_uvc_bUnitID &lt;&lt; <span class="number">8</span> | my_uvc_control_intf, data, <span class="number">2</span>, <span class="number">5000</span>))</div><div class="line">        <span class="keyword">return</span> -EIO;</div><div class="line">    ctrl-&gt;step = my_uvc_get_le_value(data);</div><div class="line"></div><div class="line">    <span class="comment">//设置典型值</span></div><div class="line">    <span class="keyword">if</span>(<span class="number">2</span> != usb_control_msg(my_uvc_udev, usb_rcvctrlpipe(my_uvc_udev, <span class="number">0</span>), </div><div class="line">                            GET_DEF, USB_TYPE_CLASS | USB_RECIP_INTERFACE | USB_DIR_IN, </div><div class="line">                            PU_BRIGHTNESS_CONTROL &lt;&lt; <span class="number">8</span>, my_uvc_bUnitID &lt;&lt; <span class="number">8</span> | my_uvc_control_intf, data, <span class="number">2</span>, <span class="number">5000</span>))</div><div class="line">        <span class="keyword">return</span> -EIO;</div><div class="line">    ctrl-&gt;default_value = my_uvc_get_le_value(data);</div><div class="line"></div><div class="line">    printk(<span class="string">"Brightness: min =%d, max = %d, step = %d, default = %d\n"</span>, ctrl-&gt;minimum, ctrl-&gt;maximum, ctrl-&gt;step, ctrl-&gt;default_value);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><p>之后是<code>vidioc_g_ctrl()</code>(获得属性)和<code>vidioc_s_ctrl()</code>(设置属性)，操作和前面差不多，都是通过<code>usb_control_msg()</code>函数建立控制消息，从而发送/接收亮度数据。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">my_uvc_vidioc_g_ctrl</span> <span class="params">(<span class="keyword">struct</span> file *file, <span class="keyword">void</span> *fh, <span class="keyword">struct</span> v4l2_control *ctrl)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> data[<span class="number">2</span>];</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (ctrl-&gt;id != V4L2_CID_BRIGHTNESS)</div><div class="line">        <span class="keyword">return</span> -EINVAL;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(<span class="number">2</span> != usb_control_msg(my_uvc_udev, usb_rcvctrlpipe(my_uvc_udev, <span class="number">0</span>), </div><div class="line">                            GET_CUR, USB_TYPE_CLASS | USB_RECIP_INTERFACE | USB_DIR_IN, </div><div class="line">                            PU_BRIGHTNESS_CONTROL &lt;&lt; <span class="number">8</span>, my_uvc_bUnitID &lt;&lt; <span class="number">8</span> | my_uvc_control_intf, data, <span class="number">2</span>, <span class="number">5000</span>))</div><div class="line">        <span class="keyword">return</span> -EIO;</div><div class="line">    </div><div class="line">    ctrl-&gt;value = my_uvc_get_le_value(data);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">my_uvc_vidioc_s_ctrl</span> <span class="params">(<span class="keyword">struct</span> file *file, <span class="keyword">void</span> *fh, <span class="keyword">struct</span> v4l2_control *ctrl)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> data[<span class="number">2</span>];</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (ctrl-&gt;id != V4L2_CID_BRIGHTNESS)</div><div class="line">        <span class="keyword">return</span> -EINVAL;</div><div class="line"></div><div class="line">    my_uvc_set_le_value(ctrl-&gt;value, data);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(<span class="number">2</span> != usb_control_msg(my_uvc_udev, usb_sndctrlpipe(my_uvc_udev, <span class="number">0</span>), </div><div class="line">                            SET_CUR, USB_TYPE_CLASS | USB_RECIP_INTERFACE | USB_DIR_OUT, </div><div class="line">                            PU_BRIGHTNESS_CONTROL &lt;&lt; <span class="number">8</span>, my_uvc_bUnitID  &lt;&lt; <span class="number">8</span> | my_uvc_control_intf, data, <span class="number">2</span>, <span class="number">5000</span>))</div><div class="line">        <span class="keyword">return</span> -EIO;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>至此，对属性进行操作，比如对摄像头亮度控制就完成了，其它的属性控制类似。</p><h2 id="3-5-URB"><a href="#3-5-URB" class="headerlink" title="3.5 URB"></a>3.5 URB</h2><p><code>USB Request Block</code>(URB)是Linux内核中，USB驱动实现的一个数据结构，用于组织每一次的USB设备驱动的数据传输请求。<br>也就是说，将USB传输相关信息放到URB这个结构体中，发送给USB核心，USB核心解析该结构体，从而进行所需数据/控制相关操作。</p><p>所需的操作大致有三步：<br>1.分配usb_buffers，作为数据的缓冲区；<br>2.分配URB；<br>3.设置URB；</p><ul><li>为什么要<code>usb_buffer</code>?<br>从这个角度想：前面的<code>my_uvc_buffer</code>作为内核与用于空间的buf进行交互，这里的<code>urb_buffer</code>作为内核与USB设备的buf进行交互，最后类似<code>urb_buffer = my_uvc_buffer</code>，就实现了USB设备的数据传到用户层了。</li></ul><p>首先，USB每次传输的数据大小，是可变的，根据外部设备的能力决定，比如外部设备支持一次传输100、200或800字节数据，每次传输称为<code>Packet</code>(包)；<br>其次，USB每次需要传输的数据，很可能大于前面的最大包(800字节)，因此每次传输的数据，将会被分割成N个包来传输。<br>因此，用URB来记录一次完整传输的信息，包括每次传多少，传几次，传的目标位置等。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">psize = my_uvc_wMaxPacketSize; <span class="comment">//实时传输端点一次能传输的最大字节数;lsusb: wMaxPacketSize 0x0320 1x800 bytes;</span></div><div class="line">size  = my_uvc_params.dwMaxVideoFrameSize; <span class="comment">//一帧数据的最大长度</span></div><div class="line">npackets = DIV_ROUND_UP(size, psize); <span class="comment">//传多少次(向上取整)</span></div></pre></td></tr></table></figure><ul><li><code>psize</code>就是每次传输的数据大小，通过USB摄像头的设备描述符<code>wMaxPacketSize</code>(最大每包大小)可以得知。</li><li><code>size</code>就是每帧图像的大小，前面在<code>my_uvc_params</code>已经设置过了，是通过在<code>probe()</code>的打印<code>dwMaxPayloadTransferSize</code>得知的；</li><li><code>npackets</code>就是<code>size/psize</code>再向上取整，得到需要传多少次。<br>最后还要<code>size = psize * npackets</code>更新一下向上取整后的新大小。</li></ul><p>这个分配<code>MY_UVC_URBS_NUM</code>个(一个就行)<code>urb_buffer</code>和<code>urb</code>。<br><code>urb_buffer</code>通过<code>usb_alloc_coherent()</code>函数分配，大小为前面的调整后的<code>size</code>，得到指向buf的指针和DMA地址。<br><code>urb</code>通过<code>my_uvc_uninit_urbs</code>函数分配，数量为<code>npackets</code>，得到指向该<code>urb</code>的指针。</p><p>对应的，如果分配失败，相应的调用<code>usb_free_coherent()</code>和<code>usb_free_urb()</code>释放空间，并相应的清空指针和重置<code>my_uvc_q.urb_size</code>。</p><p>然后就是设置URB：</p><blockquote><p><strong><code>urb-&gt;dev</code></strong>:指向目标设备的指针；&lt;这里是USB摄像头<code>my_uvc_udev</code>&gt;<br><strong><code>urb-&gt;pipe</code></strong>:与目标设置的管道；&lt;这里使用<code>usb_rcvisocpipe()</code>创建等时(ISO:Isochronous)管道，参数是对应VS的端点地址&gt;<br><strong><code>urb-&gt;transfer_flags</code></strong>:传输标志；&lt;<code>URB_ISO_ASAP</code>(开始调度)和<code>URB_NO_TRANSFER_DMA_MAP</code>(使用DMA对应的buf)&gt;<br><strong><code>urb-&gt;interval</code></strong>:传输间隔；&lt;来自USB描述符的<code>bInterval=1</code>&gt;<br><strong><code>urb-&gt;transfer_buffer</code></strong>:要传输的buf；&lt;前面得到的<code>my_uvc_q.urb_buffer[i]</code>指针&gt;<br><strong><code>urb-&gt;transfer_dma</code></strong>:buf对应的dma物理地址；&lt;前面得到的<code>my_uvc_q.urb_dma[i]</code>地址&gt;<br><strong><code>urb-&gt;complete</code></strong>:收完数据后的中断处理函数；&lt;后面再编写&gt;<br><strong><code>urb-&gt;number_of_packets</code></strong>:该URB要传输多少个包；&lt;前面计算的<code>npackets</code>&gt;<br><strong><code>urb-&gt;transfer_buffer_length</code></strong>:总共的数据长度；&lt;前面计算的<code>size</code>&gt;<br><strong><code>urb-&gt;iso_frame_desc[j].offset</code></strong>:每个包的偏移位置；&lt;<code>j * psize</code>就对应每个包的偏移&gt;<br><strong><code>urb-&gt;iso_frame_desc[j].length</code></strong>:每个包的大小；&lt;前面得到的<code>psize</code>&gt;<br>关于<a href="https://blog.csdn.net/myarrow/article/details/7025065" target="_blank" rel="external">URB数据结构</a>的参考博客。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">my_uvc_uninit_urbs</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> i;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; MY_UVC_URBS_NUM; ++i)   </div><div class="line">    &#123;</div><div class="line">        <span class="comment">//释放usb_buffers</span></div><div class="line">        <span class="comment">//同时判断urb大小,如果非0才执行,因为本函数最后会将其置0,streamoff调用时,就不应该再释放一次</span></div><div class="line">        <span class="keyword">if</span> (my_uvc_q.urb_buffer[i] &amp;&amp; my_uvc_q.urb_size)</div><div class="line">        &#123;</div><div class="line">            usb_free_coherent(my_uvc_udev, my_uvc_q.urb_size, my_uvc_q.urb_buffer[i], my_uvc_q.urb_dma[i]);</div><div class="line">            my_uvc_q.urb_buffer[i] = <span class="literal">NULL</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//释放urb</span></div><div class="line">        <span class="keyword">if</span> (my_uvc_q.urb[i])   </div><div class="line">        &#123;</div><div class="line">            usb_free_urb(my_uvc_q.urb[i]);</div><div class="line">            my_uvc_q.urb[i] = <span class="literal">NULL</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    my_uvc_q.urb_size = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">my_uvc_alloc_init_urbs</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i, j;</div><div class="line">    <span class="keyword">int</span> npackets;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> size;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span> psize;</div><div class="line">    </div><div class="line">    <span class="keyword">struct</span> urb *urb;</div><div class="line"></div><div class="line">    psize = my_uvc_wMaxPacketSize; <span class="comment">//实时传输端点一次能传输的最大字节数;lsusb: wMaxPacketSize </span></div><div class="line">    size  = my_uvc_params.dwMaxVideoFrameSize; <span class="comment">//一帧数据的最大大小</span></div><div class="line">    npackets = DIV_ROUND_UP(size, psize); <span class="comment">//传多少次(向上取整)</span></div><div class="line">    <span class="keyword">if</span> (npackets == <span class="number">0</span>)</div><div class="line">        <span class="keyword">return</span> -ENOMEM;</div><div class="line"></div><div class="line">    size = my_uvc_q.urb_size = psize * npackets; <span class="comment">//取整后新大小</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; MY_UVC_URBS_NUM; ++i)</div><div class="line">    &#123;</div><div class="line">        <span class="comment">/* 1.分配usb_buffers */</span></div><div class="line">        my_uvc_q.urb_buffer[i] = usb_alloc_coherent(my_uvc_udev, size, </div><div class="line">                                                    GFP_KERNEL | __GFP_NOWARN, &amp;my_uvc_q.urb_dma[i]);</div><div class="line">        <span class="comment">/* 2.分配urb */</span></div><div class="line">        my_uvc_q.urb[i] = usb_alloc_urb(npackets, GFP_KERNEL);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!my_uvc_q.urb_buffer[i] || !my_uvc_q.urb[i]) <span class="comment">//如果分配失败</span></div><div class="line">        &#123;</div><div class="line">            my_uvc_uninit_urbs();</div><div class="line"></div><div class="line">            <span class="keyword">return</span> -ENOMEM;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/* 3. 设置urb */</span></div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; MY_UVC_URBS_NUM; ++i)</div><div class="line">    &#123;</div><div class="line">        urb = my_uvc_q.urb[i];</div><div class="line"></div><div class="line">        urb-&gt;dev = my_uvc_udev;</div><div class="line">        urb-&gt;pipe = usb_rcvisocpipe(my_uvc_udev, my_uvc_bEndpointAddress); <span class="comment">//lsusb: bEndpointAddress 0x82</span></div><div class="line">        urb-&gt;transfer_flags = URB_ISO_ASAP | URB_NO_TRANSFER_DMA_MAP;</div><div class="line">        urb-&gt;interval = <span class="number">1</span>; <span class="comment">//lsusb: bInterval 1</span></div><div class="line">        urb-&gt;transfer_buffer = my_uvc_q.urb_buffer[i];</div><div class="line">        urb-&gt;transfer_dma = my_uvc_q.urb_dma[i];</div><div class="line">        urb-&gt;complete = my_uvc_video_complete; <span class="comment">//中断处理函数</span></div><div class="line">        urb-&gt;number_of_packets = npackets;</div><div class="line">        urb-&gt;transfer_buffer_length = size;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; npackets; ++j)</div><div class="line">        &#123;</div><div class="line">            urb-&gt;iso_frame_desc[j].offset = j * psize;</div><div class="line">            urb-&gt;iso_frame_desc[j].length = psize;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>现在我们就设置好了URB，<strong>包含了目标设备USB摄像头和<code>urb_buffer</code>等信息，只要把这个URB传给USB核心，USB核心就会解析URB，与指定的USB设备传输数据，数据将被放在<code>urb_buffer</code>里，接收到USB设备传来的数据包时，将产生一个中断，执行中断处理函数<code>my_uvc_video_complete</code>。</strong><br><strong>中断函数里会依次处理每个包，将包的数据放到<code>my_uvc_q.irqqueue</code>队列首个节点所指的buf，当多个包的数据量足够一帧时，就唤醒休眠的应用层，应用层就会得到数据，最后中断程序再发送URB，再次进入中断，依次循环。</strong></p><hr><p>下面就是实现<code>my_uvc_video_complete</code>，在里面首先判断之前URB传输的结果：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">switch</span> (urb-&gt;status) &#123;</div><div class="line">       <span class="keyword">case</span> <span class="number">0</span>:             <span class="comment">//Success </span></div><div class="line">           <span class="keyword">break</span>;</div><div class="line">       <span class="keyword">case</span> -ETIMEDOUT:    <span class="comment">//Nak</span></div><div class="line">       <span class="keyword">case</span> -ECONNRESET:   <span class="comment">//Kill</span></div><div class="line">       <span class="keyword">case</span> -ENOENT:</div><div class="line">       <span class="keyword">case</span> -ESHUTDOWN:</div><div class="line">       <span class="keyword">default</span>:            <span class="comment">//Error</span></div><div class="line">           <span class="keyword">return</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>只有<code>urb-&gt;status = 0</code>才表示传输成功，否则都直接返回。</p><p>然后在判断<code>my_uvc_q.irqqueue</code>队列不为空的情况下，取出首个buf，后面将从URB得到的数据放在这个buf里：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (!list_empty(&amp;my_uvc_q.irqqueue)) <span class="comment">//判断是不是空队列</span></div><div class="line">    buf = list_first_entry(&amp;my_uvc_q.irqqueue, <span class="keyword">struct</span> my_uvc_buffer, irq);<span class="comment">//取出首buf用于后续存放数据</span></div><div class="line"><span class="keyword">else</span></div><div class="line">    buf = <span class="literal">NULL</span>;</div></pre></td></tr></table></figure></p><p>之后便是对每个URB的子包进行处理:</p><blockquote><p>1.判断状态<code>urb-&gt;iso_frame_desc[i].status</code>小于0，跳过处理该子包；<br>2.计算数据源(来自URB)、长度、目的地址(放到队列提取的buf)；<br>3.判断该包数据是否有效，其中<code>data[0]</code>包含头部长度，<code>data[1]</code>包含错误状态；<br>4.使用摄像头厂家提供的特殊处理，完成对<code>fid</code>的操作；&lt;<code>fid</code>介绍见下面&gt;<br>5.如果<code>buf=NULL</code>，表示之前<code>irqqueue</code>队列没有空间了，没必要后续操作了；<br>6.判断<code>buf-&gt;state</code>是不是<code>VIDEOBUF_ACTIVE</code>(正在接收数据)状态，即是不是第一次开始接收数据，是的话改为<code>VIDEOBUF_ACTIVE</code>；<br>7.让<code>last_fid = fid</code>，表示要开始接收本帧数据；<br>8.传输的数据长度为:子包去除头部信息后的数据长度与buf剩余空间的 最小值；<br>9.将URB子包复制到buf中；<br>10.引用厂家代码，对buf数据进行某些处理；<br>11.当子包数据长度大于该buf剩下空间、得到标志<code>UVC_STREAM_EOF</code>且收到数据不为空时，表明一帧数据传完，修改buf状态<code>VIDEOBUF_DONE</code>；<br>12.从<code>irqqueue</code>队列删除该节点；唤醒应用层读取<code>mainqueue</code>队列的数据，即本帧数据；修改<code>mem</code>偏移和<code>date_len</code>，取出下一个buf；</p></blockquote><p>以上就是对每个子包的操作，主要包含了<strong>子包状态的判断</strong>、<strong>对是否完成一帧传输的判断</strong>、<strong>复制子包数据到buf</strong>、<strong>厂家特殊处理</strong>、<strong>再次从队列获取buf</strong>。</p><blockquote><p>讲一下<code>fid</code>(frame id)。<br>我们看到的连续视频，可以分成若干个1s的视频，再把每个1s的视频分成30份，每一份就是一张图片，称之为帧(frame)。<br>这个帧的数据，是由URB传输中的若干个pack组成的，在URB传输中，产生一连续的pack，我们如何知道其中的某几个pack属于某一帧的呢？<br>摄像头厂家的解决方案是，为每个pack也编号，属于同一帧的几个连续pack编号相同，这就实现了在pack上出现0、1交替时，就表示该帧传输完了，开始传输下一帧。</p><div align="center"><img width="500" height="500" src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180422/8.jpg"></div></blockquote><p>在中断函数的最后，还要再次提交URB，这样才能再次进入中断，拷贝数据，如此反复。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">my_uvc_video_complete</span><span class="params">(<span class="keyword">struct</span> urb *urb)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> ret, i;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *mem;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *src, *dest;</div><div class="line">    <span class="keyword">struct</span> my_uvc_buffer *buf;</div><div class="line">    <span class="keyword">int</span> len, maxlen, nbytes, data_len;</div><div class="line">    </div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> fid, last_fid = <span class="number">-1</span>;</div><div class="line"></div><div class="line">    <span class="comment">//要修改影像資料，必須先宣告一個特別型態的指標變數，才能正確存取記憶體中的資料</span></div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *point_mem;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> *mem_temp = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line">    <span class="comment">//初始化暫存用的記憶體位置</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> nArrayTemp_Size = <span class="number">1000</span>;</div><div class="line"></div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line">    printk(<span class="string">"=======urb-&gt;status: %d ======\n"</span>, urb-&gt;status);</div><div class="line">    </div><div class="line"><span class="keyword">switch</span> (urb-&gt;status) &#123;</div><div class="line">        <span class="keyword">case</span> <span class="number">0</span>:             <span class="comment">//Success </span></div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> -ETIMEDOUT:    <span class="comment">//Nak</span></div><div class="line">        <span class="keyword">case</span> -ECONNRESET:   <span class="comment">//Kill</span></div><div class="line">        <span class="keyword">case</span> -ENOENT:</div><div class="line">        <span class="keyword">case</span> -ESHUTDOWN:</div><div class="line">        <span class="keyword">default</span>:            <span class="comment">//Error</span></div><div class="line">            <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">    <span class="comment">/* 从irqqueue队列中取出首个缓冲区 */</span></div><div class="line">    <span class="keyword">if</span> (!list_empty(&amp;my_uvc_q.irqqueue)) <span class="comment">//判断是不是空队列</span></div><div class="line">        buf = list_first_entry(&amp;my_uvc_q.irqqueue, <span class="keyword">struct</span> my_uvc_buffer, irq);<span class="comment">//取出首buf用于后续存放数据</span></div><div class="line">    <span class="keyword">else</span></div><div class="line">        buf = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; urb-&gt;number_of_packets; ++i) <span class="comment">//一次urb传输包含number_of_packets个子包</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (urb-&gt;iso_frame_desc[i].status &lt; <span class="number">0</span>)</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        </div><div class="line">        src = urb-&gt;transfer_buffer + urb-&gt;iso_frame_desc[i].offset; <span class="comment">//数据源</span></div><div class="line">        len = urb-&gt;iso_frame_desc[i].actual_length; <span class="comment">//数据长度</span></div><div class="line">        <span class="keyword">if</span>(buf)</div><div class="line">            dest = my_uvc_q.mem + buf-&gt;buf.m.offset + buf-&gt;buf.bytesused; <span class="comment">//目的地址</span></div><div class="line"></div><div class="line">        <span class="comment">//判断数据是否有效;URB数据含义: data[0]-&gt;头部长度;data[1]-&gt;错误状态</span></div><div class="line">        <span class="keyword">if</span> ((len &lt; <span class="number">2</span>) || (src[<span class="number">0</span>] &lt; <span class="number">2</span>) || (src[<span class="number">0</span>] &gt; len) || (src[<span class="number">1</span>] &amp; UVC_STREAM_ERR))</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (my_uvc_udev-&gt;descriptor.idVendor == <span class="number">0x1B3B</span>) <span class="comment">/* ip2970/ip2977 */</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> ( len &gt;= <span class="number">16</span> ) <span class="comment">// have data in buffer</span></div><div class="line">            &#123;</div><div class="line">                <span class="comment">// 資料必須從data[12]開始判斷，是因為前面的資料是封包專用</span></div><div class="line">                <span class="keyword">if</span> ( (src[<span class="number">12</span>] == <span class="number">0xFF</span> &amp;&amp; src[<span class="number">13</span>] == <span class="number">0xD8</span> &amp;&amp; src[<span class="number">14</span>] == <span class="number">0xFF</span>) ||</div><div class="line">                        (src[<span class="number">12</span>] == <span class="number">0xD8</span> &amp;&amp; src[<span class="number">13</span>] == <span class="number">0xFF</span> &amp;&amp; src[<span class="number">14</span>] == <span class="number">0xC4</span>))</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">if</span>(last_fid) <span class="comment">//效果:取反</span></div><div class="line">                        fid &amp;= ~UVC_STREAM_FID; </div><div class="line">                    <span class="keyword">else</span></div><div class="line">                        fid |= UVC_STREAM_FID;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            fid = src[<span class="number">1</span>] &amp; UVC_STREAM_FID;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">/* Store the payload FID bit and return immediately when the buffer is NULL.*/</span></div><div class="line">        <span class="keyword">if</span> (buf == <span class="literal">NULL</span>)</div><div class="line">        &#123;</div><div class="line">            last_fid = fid;<span class="comment">//?必要性？</span></div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (buf-&gt;state != VIDEOBUF_ACTIVE)  <span class="comment">//!= VIDEOBUF_ACTIVE, 表示"之前还未接收数据" </span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> (fid == last_fid)</div><div class="line">                <span class="keyword">continue</span>; <span class="comment">//因为是第一次接收数据,前面的fid已经被取反,不该等于上一次的last_fid</span></div><div class="line">            buf-&gt;state = VIDEOBUF_ACTIVE; <span class="comment">//表示开始接收第1个数据</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        last_fid = fid; <span class="comment">//开始传本帧数据</span></div><div class="line"></div><div class="line"></div><div class="line">        len -= src[<span class="number">0</span>]; <span class="comment">//除去头部后的数据长度</span></div><div class="line">        maxlen = buf-&gt;buf.length - buf-&gt;buf.bytesused; <span class="comment">//缓冲区最多还能存多少数据</span></div><div class="line">        nbytes = min(len, maxlen);</div><div class="line"></div><div class="line">        <span class="comment">//dest = my_uvc_q.mem + buf-&gt;buf.m.offset + buf-&gt;buf.bytesused; //目的地址</span></div><div class="line"></div><div class="line">        <span class="built_in">memcpy</span>(dest, src + src[<span class="number">0</span>], nbytes); <span class="comment">//复制数据</span></div><div class="line">        </div><div class="line">        buf-&gt;buf.bytesused += nbytes; <span class="comment">//更新buf已使用空间</span></div><div class="line"></div><div class="line">        <span class="comment">/* ip2970/ip2977 */</span></div><div class="line">        <span class="keyword">if</span> (my_uvc_udev-&gt;descriptor.idVendor == <span class="number">0x1B3B</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(mem_temp == <span class="literal">NULL</span>)</div><div class="line">            &#123;</div><div class="line">                mem_temp = kmalloc(nArrayTemp_Size, GFP_KERNEL);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nArrayTemp_Size &lt;= nbytes)  <span class="comment">//當收到的資料長度大於上一次的資料長度，則重新分配所需的空間+</span></div><div class="line">            &#123;</div><div class="line">                kfree(mem_temp);</div><div class="line">                nArrayTemp_Size += <span class="number">500</span>;</div><div class="line">                mem_temp = kmalloc(nArrayTemp_Size, GFP_KERNEL);</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">memset</span>(mem_temp, <span class="number">0x00</span>, nArrayTemp_Size);</div><div class="line"></div><div class="line">            <span class="comment">// 指向資料儲存的記憶體位置</span></div><div class="line">            point_mem = (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)dest;</div><div class="line">            <span class="keyword">if</span>( *(point_mem) == <span class="number">0xD8</span> &amp;&amp; *(point_mem + <span class="number">1</span>) == <span class="number">0xFF</span> &amp;&amp; *(point_mem + <span class="number">2</span>) == <span class="number">0xC4</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="built_in">memcpy</span>( mem_temp + <span class="number">1</span>, point_mem, nbytes);</div><div class="line">                mem_temp[<span class="number">0</span>] = <span class="number">0xFF</span>;</div><div class="line">                <span class="built_in">memcpy</span>(point_mem, mem_temp, nbytes + <span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">/* 判断一帧数据是否已经全部接收到 */</span></div><div class="line">        <span class="keyword">if</span> (len &gt; maxlen)</div><div class="line">            buf-&gt;state = VIDEOBUF_DONE;</div><div class="line"></div><div class="line">        <span class="comment">/* Mark the buffer as done if the EOF marker is set. */</span></div><div class="line">        <span class="keyword">if</span> ((src[<span class="number">1</span>] &amp; UVC_STREAM_EOF) &amp;&amp; (buf-&gt;buf.bytesused != <span class="number">0</span>))</div><div class="line">            buf-&gt;state = VIDEOBUF_DONE;</div><div class="line"></div><div class="line">        <span class="comment">/* 当接收完一帧数据,从irqqueue中删除这个缓冲区,唤醒等待数据的进程 */</span></div><div class="line">        <span class="keyword">if</span> ((buf-&gt;state == VIDEOBUF_DONE) || (buf-&gt;state == VIDEOBUF_ERROR))</div><div class="line">        &#123;</div><div class="line">            list_del(&amp;buf-&gt;irq);</div><div class="line">            wake_up(&amp;buf-&gt;wait);</div><div class="line"></div><div class="line">            mem = my_uvc_q.mem + buf-&gt;buf.m.offset;</div><div class="line">            data_len = buf-&gt;buf.bytesused;</div><div class="line">  </div><div class="line">            <span class="comment">/* 取出下一个buf */</span></div><div class="line">            <span class="keyword">if</span> (!list_empty(&amp;my_uvc_q.irqqueue))</div><div class="line">                buf = list_first_entry(&amp;my_uvc_q.irqqueue, <span class="keyword">struct</span> my_uvc_buffer, irq);</div><div class="line">            <span class="keyword">else</span></div><div class="line">                buf = <span class="literal">NULL</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/* 再次提交URB */</span></div><div class="line">    <span class="keyword">if</span> ((ret = usb_submit_urb(urb, GFP_ATOMIC)) &lt; <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        printk(<span class="string">"Failed to resubmit video URB (%d).\n"</span>, ret);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="3-6-启动-停止"><a href="#3-6-启动-停止" class="headerlink" title="3.6 启动/停止"></a>3.6 启动/停止</h2><p>应用层调用<code>ioctl()</code>传入的参数为<code>VIDIOC_STREAMON</code>时，就会调用<code>vidioc_streamon()</code>启动摄像头采集数据。<br>在该驱动函数里面，主要做三件事：</p><ol><li>设置USB摄像头参数；(比如使用何种视频数据格式、何种分辨率)</li><li>分配设置URB；(调用前面的<code>my_uvc_alloc_init_urbs()</code>函数)</li><li>提交URB，等待中断；</li></ol><p>一般的摄像头，会支持多种格式，比如MJPEG、H264等，也会支持多种分辨率。<br>因此需要在开始传输前，通过USB设置摄像头，让其后面返回正确的数据。</p><p>假如我们直接设置，可能摄像头不支持我们设置的格式，后面对应的解析数据可能会出现错误。因此我们先尝试传入设置参数，摄像头接收后会保存起来，并根据自身情况做一些修正，再将该设置读取出来，再进行真正的设置。<br>这里我们定义一个<code>my_uvc_streaming_control</code>结构体，用于保存这个设置过程中的参数。</p><p>首先是尝试设置参数，根据摄像头版本，对应的分配一个<code>data</code>空间，用于等会保存参数进行USB传输。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//lsusb得到:bcdUVC =   1.00;再BCD转换,eg:2.10 -&gt; 210H, 1.50 -&gt; 150H</span></div><div class="line">size = my_uvc_bcdUVC &gt;= <span class="number">0x0110</span> ? <span class="number">34</span> : <span class="number">26</span>; <span class="comment">//根据版本分配buf大小</span></div><div class="line">data = kmalloc(size, GFP_KERNEL);</div><div class="line"><span class="keyword">if</span> (data == <span class="literal">NULL</span>)</div><div class="line">    <span class="keyword">return</span> -ENOMEM;</div></pre></td></tr></table></figure></p><p>再清空传入的<code>my_uvc_streaming_control</code>结构体，设置相应参数，再参考内核UVC驱动使用<code>cpu_to_le16()</code>将<code>my_uvc_streaming_control</code>赋值给<code>data</code>。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">memset</span>(ctrl, <span class="number">0</span>, <span class="keyword">sizeof</span> * ctrl);</div><div class="line"></div><div class="line">ctrl-&gt;bmHint = <span class="number">1</span>;    <span class="comment">//保持dwFrameInterval不变    </span></div><div class="line">ctrl-&gt;bFormatIndex = <span class="number">1</span>; <span class="comment">//支持格式数量</span></div><div class="line">ctrl-&gt;bFrameIndex  = bFrameIndex; <span class="comment">//使用第二种分辨率:640x480(1),320x240(2),160x120(3)</span></div><div class="line">ctrl-&gt;dwFrameInterval = <span class="number">333333</span>;   <span class="comment">//lsusb: dwFrameInterval(0)  333333 每秒30帧</span></div><div class="line"></div><div class="line">ctrl_to_data(ctrl, data, size);</div></pre></td></tr></table></figure></p><p>最后调用<code>usb_control_msg()</code>将<code>data</code>传给摄像头，这里的<code>usb_control_msg()</code>在前面的亮度控制详细介绍了每个参数的含义，当时使用的是VC接口，这里使用VS接口。<br>这里不是真正的设置，所以传入的参数是<code>VS_PROBE_CONTROL</code>。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ret = usb_control_msg(my_uvc_udev,  usb_sndctrlpipe(my_uvc_udev, <span class="number">0</span>),</div><div class="line">                      SET_CUR, USB_TYPE_CLASS | USB_RECIP_INTERFACE | USB_DIR_OUT,</div><div class="line">                      VS_PROBE_CONTROL &lt;&lt; <span class="number">8</span>, <span class="number">0</span> &lt;&lt; <span class="number">8</span> | my_uvc_streaming_intf, data, size, <span class="number">5000</span>); </div><div class="line">kfree(data);</div></pre></td></tr></table></figure></p><hr><p>尝试设置了USB后，再把摄像头修正的参数读取出来保存到<code>my_uvc_streaming_control</code>结构体中。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">my_uvc_get_streaming_params</span><span class="params">(<span class="keyword">struct</span> my_uvc_streaming_control *ctrl)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *data;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span> size;</div><div class="line"></div><div class="line">    <span class="comment">//lsusb得到:bcdUVC=1.00;再BCD转换,eg:2.10 -&gt; 210H, 1.50 -&gt; 150H</span></div><div class="line">    size = my_uvc_bcdUVC &gt;= <span class="number">0x0110</span> ? <span class="number">34</span> : <span class="number">26</span>; <span class="comment">//根据版本分配buf大小</span></div><div class="line">    data = kmalloc(size, GFP_KERNEL);</div><div class="line">    <span class="keyword">if</span> (data == <span class="literal">NULL</span>)</div><div class="line">        <span class="keyword">return</span> -ENOMEM;</div><div class="line"></div><div class="line">    <span class="comment">//通过usb获取摄像头参数</span></div><div class="line">    ret = usb_control_msg(my_uvc_udev, usb_rcvctrlpipe(my_uvc_udev, <span class="number">0</span>),</div><div class="line">                          GET_CUR, USB_TYPE_CLASS | USB_RECIP_INTERFACE | USB_DIR_IN,</div><div class="line">                          VS_PROBE_CONTROL &lt;&lt; <span class="number">8</span>, <span class="number">0</span> &lt;&lt; <span class="number">8</span> | my_uvc_streaming_intf, data, size, <span class="number">5000</span>); </div><div class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</div><div class="line">        <span class="keyword">goto</span> done;</div><div class="line"></div><div class="line">    <span class="comment">//返回摄像头参数</span></div><div class="line">    data_to_ctrl(data, ctrl, size);</div><div class="line"></div><div class="line">done:</div><div class="line">    kfree(data);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><hr><p>最后再将新的参数设置给摄像头，这样就能保证现在设置的参数对摄像头是有效的。<br>这里不是真正的设置，所以传入的参数是<code>VS_COMMIT_CONTROL</code>。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">my_uvc_set_streaming_params</span><span class="params">(<span class="keyword">struct</span> my_uvc_streaming_control *ctrl)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *data;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span> size;</div><div class="line"></div><div class="line">    <span class="comment">//lsusb得到:bcdUVC=1.00;再BCD转换,eg:2.10 -&gt; 210H, 1.50 -&gt; 150H</span></div><div class="line">    size = my_uvc_bcdUVC &gt;= <span class="number">0x0110</span> ? <span class="number">34</span> : <span class="number">26</span>; <span class="comment">//根据版本分配buf大小</span></div><div class="line">    data = kmalloc(size, GFP_KERNEL);</div><div class="line">    <span class="keyword">if</span> (data == <span class="literal">NULL</span>)</div><div class="line">        <span class="keyword">return</span> -ENOMEM;</div><div class="line"></div><div class="line">    ctrl_to_data(ctrl, data, size);</div><div class="line"></div><div class="line">    <span class="comment">//通过usb尝试设置摄像头参数</span></div><div class="line">    ret = usb_control_msg(my_uvc_udev,  usb_sndctrlpipe(my_uvc_udev, <span class="number">0</span>),</div><div class="line">                          SET_CUR, USB_TYPE_CLASS | USB_RECIP_INTERFACE | USB_DIR_OUT,</div><div class="line">                          VS_COMMIT_CONTROL &lt;&lt; <span class="number">8</span>, <span class="number">0</span> &lt;&lt; <span class="number">8</span> | my_uvc_streaming_intf, data, size, <span class="number">5000</span>); </div><div class="line">    kfree(data);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><hr><p>然后还要指定<code>bAlternateSetting</code>，<code>bAlternateSetting</code>用于在同一个接口中的多个描述符中进行切换。<br>也就是说，USB摄像头提供多种<code>Interface Descriptor</code>(接口)，每个接口的支持一种<code>wMaxPacketSize</code>(带宽，一次传输提供的数据量)、<code>dwMaxPayloadTransferSize</code>(每帧最大数据，实测等于分辨率加512)。<br>当摄像头分辨率变化时，相应所需的接口也会变化，比如分辨率变大，要选择带宽更大的接口。<br><code>bAlternateSetting</code>就相当于是接口的索引，因此不同分辨率，应该选择对应的接口。比如本次使用的分辨率为<code>640x480</code>，从<code>my_uvc_params</code>获取的推荐接口就是<code>bAlternateSetting=6</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">Interface Descriptor:</div><div class="line">  bLength                 9</div><div class="line">  bDescriptorType         4</div><div class="line">  bInterfaceNumber        1</div><div class="line">  bAlternateSetting       6</div><div class="line">  bNumEndpoints           1</div><div class="line">  bInterfaceClass        14 Video</div><div class="line">  bInterfaceSubClass      2 Video Streaming</div><div class="line">  bInterfaceProtocol      0 </div><div class="line">  iInterface              0 </div><div class="line">  Endpoint Descriptor:</div><div class="line">    bLength                 7</div><div class="line">    bDescriptorType         5</div><div class="line">    bEndpointAddress     0x82  EP 2 IN</div><div class="line">    bmAttributes            5</div><div class="line">      Transfer Type            Isochronous</div><div class="line">      Synch Type               Asynchronous</div><div class="line">      Usage Type               Data</div><div class="line">    wMaxPacketSize     0x03bc  1x 956 bytes</div><div class="line">    bInterval               1</div></pre></td></tr></table></figure></p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 1. 向USB摄像头设置参数:比如使用哪个format, 使用这个format下的哪个frame(分辨率等) */</span></div><div class="line"><span class="comment">// 根据结构体my_uvc_streaming_control设置数据包;再调用usb_control_msg发出数据包;</span></div><div class="line"></div><div class="line"><span class="comment">//a.测试参数</span></div><div class="line">my_uvc_try_streaming_params(&amp;my_uvc_params);</div><div class="line"><span class="comment">//b.取出参数</span></div><div class="line">my_uvc_get_streaming_params(&amp;my_uvc_params);</div><div class="line"><span class="comment">//c.设置参数</span></div><div class="line">my_uvc_set_streaming_params(&amp;my_uvc_params);</div><div class="line"></div><div class="line"><span class="comment">//d.设置VideoStreaming Interface所使用的setting</span></div><div class="line"><span class="comment">//从my_uvc_params.dwMaxPayloadTransferSize得知所需带宽;实测分辨率不一样,所需的带宽也不一样;</span></div><div class="line"><span class="comment">//根据wMaxPacketSize得到对应的bAlternateSetting;</span></div><div class="line">usb_set_interface(my_uvc_udev, my_uvc_streaming_intf, my_uvc_bAlternateSetting); </div></pre></td></tr></table></figure><p>设置好了摄像头的<code>format</code>(格式)、<code>frame</code>(分辨率)等，就可以分配设置URB，准备和USB摄像头传输数据了。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 2.分配设置URB */</span></div><div class="line">ret = my_uvc_alloc_init_urbs();</div><div class="line"><span class="keyword">if</span> (<span class="number">0</span> != ret)</div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"my_uvc_alloc_init_urbs err : ret = %d\n"</span>, ret);</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>分配完成后，就提交给USB核心，等待中断来临，读取摄像头发来的数据。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 3.提交URB以接收数据 */</span></div><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; MY_UVC_URBS_NUM; ++i)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> ((ret = usb_submit_urb(my_uvc_q.urb[i], GFP_KERNEL)) &lt; <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        printk(<span class="string">"Failed to submit URB %u (%d).\n"</span>, i, ret);</div><div class="line">        my_uvc_uninit_urbs();</div><div class="line"></div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><hr><p>停止采集数据<code>vidioc_streamoff()</code>也需要做三件事：</p><ol><li>取消URB传输；</li><li>释放<code>urb_buffer</code>和URB；</li><li>设置接口为0，让其处于休眠状态；</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">my_uvc_vidioc_streamoff</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="keyword">void</span> *priv, <span class="keyword">enum</span> v4l2_buf_type t)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> urb *urb;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> i;</div><div class="line"></div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    <span class="comment">/* 1. kill all URB */</span></div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; MY_UVC_URBS_NUM; ++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> ((urb = my_uvc_q.urb[i]) == <span class="literal">NULL</span>)</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        usb_kill_urb(urb);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/* 2. free all URB */</span></div><div class="line">    my_uvc_uninit_urbs();</div><div class="line"></div><div class="line">    <span class="comment">/* 3. 设置VideoStreaming Interface为setting 0 */</span></div><div class="line">    usb_set_interface(my_uvc_udev, my_uvc_streaming_intf, <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="3-7-其它操作函数-mmap和poll"><a href="#3-7-其它操作函数-mmap和poll" class="headerlink" title="3.7 其它操作函数(mmap和poll)"></a>3.7 其它操作函数(mmap和poll)</h2><p>现在还遗留两个操作函数<code>mmap()</code>和<code>poll()</code>，因为涉及buf和队列，前面无法理解，现在应该好理解了。<br>首先是<code>mmap()</code>，前面提到应用层调用<code>vidioc_queryctrl()</code>时，会让驱动程序分配若干个buf，也就是<code>my_uvc_q.buf[N]</code>；<br>现在我们需要做的就是把buf映射到用户空间，以后用户空间操作映射后的空间，就间接的操作了内核的<code>my_uvc_q.buf[N]</code>。</p><p>根据传入的<code>vma-&gt;vm_pgoff</code>偏移，对应找到<code>my_uvc_q.buf</code>，如果没找到或者大小不对，就退出。<br>如果找到了对应偏移的<code>my_uvc_q.buf</code>，就可以根据该buf的起始地址和偏移得到物理地址<code>addr</code>；<br>再将物理地址传入<code>vmalloc_to_page()</code>函数得到<code>page</code>结构体，再使用<code>vm_insert_page()</code>函数将<code>page</code>结构体和传入的<code>vma</code>虚拟地址绑定，以<code>PAGE_SIZE</code>大小分割总的<code>size</code>。<br>最后在使用计数加1，后面<code>vidioc_querybuf()</code>查询缓存状态时，用于更新标志。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//把缓存映射到APP的空间,以后APP就可以直接操作这块缓存</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">my_uvc_mmap</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="keyword">struct</span> vm_area_struct *vma)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i, ret = <span class="number">0</span>;</div><div class="line">    <span class="keyword">struct</span> page *page;</div><div class="line">    <span class="keyword">struct</span> my_uvc_buffer *buffer;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> addr, start, size;</div><div class="line">    </div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    start = vma-&gt;vm_start;</div><div class="line">    size = vma-&gt;vm_end - vma-&gt;vm_start;</div><div class="line"></div><div class="line">    <span class="comment">//应用程序调用mmap函数时,会传入offset参数,再根据offset找出指定的缓冲区</span></div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; my_uvc_q.count; ++i)</div><div class="line">    &#123;</div><div class="line">        buffer = &amp;my_uvc_q.buffer[i];</div><div class="line">        <span class="keyword">if</span> ((buffer-&gt;buf.m.offset &gt;&gt; PAGE_SHIFT) == vma-&gt;vm_pgoff)</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//没找到对应的my_uvc_q.buffer或大小不对</span></div><div class="line">    <span class="keyword">if</span> ((i == my_uvc_q.count) || (size != my_uvc_q.buf_size))</div><div class="line">        <span class="keyword">return</span> -EINVAL;</div><div class="line"></div><div class="line">    <span class="comment">/* VM_IO marks the area as being an mmaped region for I/O to a</span></div><div class="line">     * device. It also prevents the region from being core dumped. */</div><div class="line">    vma-&gt;vm_flags |= VM_IO;</div><div class="line"></div><div class="line">    <span class="comment">//根据虚拟地址得到缓冲区对应的page结构体</span></div><div class="line">    addr = (<span class="keyword">unsigned</span> <span class="keyword">long</span>)my_uvc_q.mem + buffer-&gt;buf.m.offset;</div><div class="line">    <span class="keyword">while</span> (size &gt; <span class="number">0</span>) <span class="comment">//循环把size大小的空间变为page</span></div><div class="line">    &#123;</div><div class="line">        page = vmalloc_to_page((<span class="keyword">void</span> *)addr);</div><div class="line"></div><div class="line">        <span class="comment">//把page和APP传入的虚拟地址挂构</span></div><div class="line">        <span class="keyword">if</span> ((ret = vm_insert_page(vma, start, page)) &lt; <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> ret ;</div><div class="line"></div><div class="line">        start += PAGE_SIZE;</div><div class="line">        addr  += PAGE_SIZE;</div><div class="line">        size  -= PAGE_SIZE;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    buffer-&gt;vma_use_count++; <span class="comment">//引用计数+1</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><hr><p>最后是<code>poll()</code>函数，用来确定buf是否准备就绪，即含有数据。<br>应用层调用<code>poll()</code>时，会尝试从<code>my_uvc_q.mainqueue</code>队列取出首个缓冲区，得到其<code>buf-&gt;wait</code>，然后调用<code>poll_wait()</code>以<code>wait</code>为标志，进入休眠。等待中断里的<code>wake_up()</code>，再唤醒。根据<code>buf-&gt;state</code>返回对应的<code>mask</code>，对应的应用程序就读取数据。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//APP调用POLL/select来确定缓存是否就绪(有数据)</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">my_uvc_poll</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="keyword">struct</span> poll_table_struct *wait)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> my_uvc_buffer *buf;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> mask = <span class="number">0</span>;</div><div class="line"></div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    <span class="comment">//从mainqueuq中取出第1个缓冲区,判断它的状态, 如果未就绪,休眠</span></div><div class="line">    <span class="keyword">if</span> (list_empty(&amp;my_uvc_q.mainqueue))</div><div class="line">    &#123;</div><div class="line">        mask |= POLLERR;</div><div class="line">        <span class="keyword">goto</span> done;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    buf = list_first_entry(&amp;my_uvc_q.mainqueue, <span class="keyword">struct</span> my_uvc_buffer, stream);</div><div class="line"></div><div class="line">    poll_wait(file, &amp;buf-&gt;wait, wait);</div><div class="line">    <span class="keyword">if</span> (buf-&gt;state == VIDEOBUF_DONE || buf-&gt;state == VIDEOBUF_ERROR)</div><div class="line">        mask |= POLLIN | POLLRDNORM; <span class="comment">//普通或优先级带数据可读 | 普通数据可读</span></div><div class="line"></div><div class="line">done:</div><div class="line">    <span class="keyword">return</span> mask;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="3-8-测试-效果"><a href="#3-8-测试-效果" class="headerlink" title="3.8 测试/效果"></a>3.8 测试/效果</h2><p>如前面测试内核自带驱动一样，先编译自己的驱动，然后加载内核自带的<code>uvcvideo</code>及依赖，然后移除内核自带的驱动，安装自己写的新驱动，运行<code>xawtv</code>应用程序:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">make</div><div class="line"></div><div class="line">sudo modprobe uvcvideo</div><div class="line">sudo rmmod uvcvideo</div><div class="line">sudo insmod my_uvc.ko</div><div class="line">xawtv -noalsa</div></pre></td></tr></table></figure></p><ul><li>效果：<div align="center"><img width="537" height="500" src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180422/9.png"></div></li></ul><p>完整代码见<a href="https://github.com/hceng/learn/tree/master/tiny4412/08_uvc/my_uvc" target="_blank" rel="external">GitHub</a>。</p><h1 id="4-总体分析"><a href="#4-总体分析" class="headerlink" title="4.总体分析"></a>4.总体分析</h1><p>整体框图如下:<br><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180422/10.jpg" alt=""></p><p>几个基本概念：<br>1.应用层有五个操作函数，其中<code>ioctl</code>下至少有11个基本的操作函数；<br>2.USB摄像头有且只有一个<code>VC</code>接口用于控制，可有多个<code>VS</code>接口用于数据传输；<br>3.11个操作函数可以分为四类：数据buf的操作、摄像头格式的操作、摄像头属性的操作、摄像头的启动与停止；<br>4.数据buf的操作：<br>　　a.根据应用层参数生成指定个数的<code>v4l2_buffer</code>，这些buf又同时在两个队列上:<code>mianquque</code>和<code>irqquque</code>；<br>　　b.摄像头产生的数据通过<code>VS</code>接口和USB核心的URB，放入<code>irqquque</code>队列的首buf，并将该buf从该队列删除；<br>　　c.应用层取出<code>mianquque</code>队列的首buf，得到数据，并将该buf从该队列删除，此时该buf同时不在两个队列上，将被重新放在尾部；<br>5.摄像头格式的操作：使用<code>interface_to_usbdev()</code>得到对应接口的USB设备描述符，描述符包含摄像头的各种特性信息，保存在<code>v4l2_format</code>结构体中；<br>6.摄像头属性的操作：使用·<code>usb_control_msg()</code>通过<code>VC</code>接口设置相关属性；</p><p>有了上面的基本概念，现在开始调用<code>vidioc_streamon()</code>启动传输：<br>1.设置USB摄像头对应带宽接口等；<br>2.分配<code>usb_buffers</code>和<code>urb</code>，设置<code>urb</code>；<br>3.上报<code>urb</code>，USB核心解析<code>urb</code>，向指定接口(摄像头VS接口)接收数据(放在<code>usb_buffers</code>)；<br>4.<code>urb</code>传输完成后产生中断，中断里取出<code>irqquque</code>队列首buf，将<code>usb_buffers</code>数据放入，并唤醒休眠的<code>poll</code>；<br>5.<code>poll</code>唤醒，<code>vidioc_dqbuf()</code>从<code>mianquque</code>队列取出首buf，返回给应用层，完成了摄像头数据到应用层的传输。</p><p>参考文章：<br><a href="http://www.100ask.org/index.html" target="_blank" rel="external">韦东山第三期项目视频_摄像头</a></p><hr><p><div align="center"><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本文采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href="http://hceng.cn/" target="_blank" rel="external">hceng’s blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Linux摄像头驱动学习第二篇，对USB摄像头驱动USB video class(UVC)进行详细分析、编写。&lt;br&gt;
    
    </summary>
    
    
      <category term="Linux驱动" scheme="http://yoursite.com/tags/Linux%E9%A9%B1%E5%8A%A8/"/>
    
      <category term="摄像头" scheme="http://yoursite.com/tags/%E6%91%84%E5%83%8F%E5%A4%B4/"/>
    
  </entry>
  
  <entry>
    <title>iMX6ULL上手体验</title>
    <link href="http://yoursite.com/2018/03/28/iMX6ULL%E4%B8%8A%E6%89%8B%E4%BD%93%E9%AA%8C/"/>
    <id>http://yoursite.com/2018/03/28/iMX6ULL上手体验/</id>
    <published>2018-03-28T06:12:36.000Z</published>
    <updated>2018-11-04T09:28:49.417Z</updated>
    
    <content type="html"><![CDATA[<p>第一次接触NXP/Freescale的SOC，记录拿到板子后快速上手的技巧和思维的方式。<br><a id="more"></a><br>iMX6ULL感觉还是很有优势的，除了之前接触的NanoPi(全志H3)，就没见过几个运行Linux，只卖100多元的开发板。<br>Cortex-A7架构，主频528MHz，一些普通的嵌入式Linux应用领域足够了。<br>感觉未来几年，运行Linux的板子会越来越便宜，嵌入式Linux会越来越普及。</p><h1 id="1-准备资料"><a href="#1-准备资料" class="headerlink" title="1.准备资料"></a>1.准备资料</h1><p>对于一个陌生的SOC，首先就是要准备相关的资料，核心的就是<strong>参考手册</strong>和<strong>电路图</strong>。<br>资料的来源无非有三个：</p><ul><li><p>芯片官网<br>官网是<strong>参考手册</strong>的来源；<br>NXP的官网做得还是比较清晰，很容易就找到了i.MX6ULL提供的<a href="https://www.nxp.com/cn/products/processors-and-microcontrollers/applications-processors/i.mx-applications-processors/i.mx-6-processors/i.mx-6ull-single-core-processor-with-arm-cortex-a7-core:i.MX6ULL?tab=Documentation_Tab" target="_blank" rel="external">文档</a>。</p></li><li><p>开发板提供厂家<br>开发板厂家一般都提供所有的资料，包括<strong>参考手册</strong>、<strong>电路图</strong>、<strong>使用手册</strong>、<strong>工具</strong>、<strong>系统</strong>等；<br>我这使用的是米尔科技的板子，官网的资料路径不好找，直接问客服要<a href="http://down.myir-tech.com/MYS-6ULX/" target="_blank" rel="external">资料链接</a>更快。</p></li><li><p>网络<br>Google/Baidu用于搜索相关博文的一些细节资料，比如某一块别人的分析。<br>随便提一下，科学上网是基本素养。</p></li></ul><h1 id="2-观察开发板"><a href="#2-观察开发板" class="headerlink" title="2.观察开发板"></a>2.观察开发板</h1><p>拿到一个板子，首先是观察板子上大致有什么资源。<br><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180328/1.png" alt=""><br>比如看到SOC附近有两个芯片，一般一个是RAM，一个Flash；<br>有个TF卡接口和拨动开关，多半是TF卡启动和Flash的启动选择；<br>一个网口、USB接口、Micro USB接口、电源接口，USB接口可能用于下载或串口或供电；<br>三组排针，其中三针上的丝印有RX、TX、GND，肯定是串口接口；<br>两个按键和几个LED灯，背后还有一个FPC插座，多半是接显示屏；<br>以及我的是IOT版，还有一个WIFI天线。</p><p>再查看厂家提供的资料，验证一些猜想。<br><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180328/2.jpg" alt=""></p><p>上面的猜想几乎八九不离十，现在知道了可以通过“Boot Select”来TF/Nand启动。</p><p>现在有三个方向，</p><ul><li>一是做应用，比如搞个微型服务器，此时插上电源、串口、网络，基本就可以直接使用了，无需再关心板子硬件细节；</li><li>二是做驱动，比如试试写个iMX6ULL的LED驱动，这就需要部署开发环境，在Ubuntu里安装交叉编译工具链、编译提供内核、编写驱动等；</li><li>三是做裸机，比如试试在裸机上点个LED灯，这就需要编写裸机程序，然后启动验证；</li></ul><p>其实，这三个领域，都能玩，但都比较尴尬，</p><ul><li>做应用，感觉没有好项目，树莓派还在吃灰；</li><li>做驱动，手里的Tiny4412还在研究，没必要另起炉灶，也没工作的需求；</li><li>做裸机，应该没人拿跑Linux的板子做裸机吧，单片机可选的一大堆；</li></ul><p>既然这样，就做无任何资料的裸机吧，开启hard模式。</p><h1 id="3-系统更新"><a href="#3-系统更新" class="headerlink" title="3.系统更新"></a>3.系统更新</h1><p>确定了方向，先是做裸机，<br>首先就需要知道如何将裸机代码放到存储介质(Nand或TF卡)，然后启动裸机代码。</p><p>如何下手呢？<br>我也不知道，跟着厂家提供的资料，重新烧写一遍系统，这个过程中肯定包含Uboot，Uboot就是一个大裸机程序，只要炮制Uboot的烧写方式烧写裸机即可。</p><p>i.MX6ULL系统更新使用两种方法，<strong>MfgTool更新</strong>和<strong>SD卡更新</strong>。</p><ul><li>MFGTools</li></ul><p>MFGTools是NXP官方推荐的一个使用OTG来升级镜像的软件。可以用来升级Linux、升级Android；单独刷写某一系统分区，如 android的boot.img分区等；独立地刷写spi nor、emmc 等等；<br>操作方式按着厂商的操作即可。</p><p>另外，MfgTool的文件更新有两个部分：<strong>firmware</strong>和<strong>files</strong>。<br>firmware是烧写系统的镜像文件(<strong>作为媒介用途的镜像</strong>)，路径为”MYS-6ULXmfgtools/<br>Profiles/Linux/OS Firmware/firmware/“。<br>files目录下为烧写的目标镜像文件(<strong>真正烧录到emmc或者nand的镜像文件</strong>)，路径为”MYS-6ULX-mfgtools/Profiles/Linux/OS<br>Firmware/files/“。<br>之所以存着这两种镜像，是因为MFGTools的烧写<strong>原理是先将媒介镜像下载到到ddr内存里面，然后启动linux，再通过这个启动的linux把目标镜像固化到emmc或者nand里</strong><br>因此，当更新系统的分区大小或烧写方式时才需要更新firmware中的文件。</p><p>更新完，重新启动开开发板即是新系统。</p><ul><li>SD卡更新<br>和前面的原理类似，即先将一个媒介镜像烧写到SD卡上，SD卡启动后，再通过SD卡的系统烧写Nand，从而更新系统。<br>因此需要先做一个“用于SD启动更新的镜像”，使用厂商提供的<code>build-sdcard.sh</code>脚本即可。<br>同样的，“firmware”目录下是烧写系统的镜像文件(<strong>作为媒介用途的镜像</strong>)，一般情况下不需要修改。<br>”mfgimages-mys-imx6ull-ddr256m-nand256m“目录下是烧写的目标镜像文件(<strong>真正烧录到emmc或者nand的镜像文件</strong>)。<br>使用脚本后，会生成一个<code>.sdcard</code>后缀的文件，即是“用于SD启动更新的镜像”，下面需要将它烧到SD卡上，可以使用Linux下的<code>dd</code>命令。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo dd if=mys6ull-xx.rootfs.sdcard of=/dev/sdb conv=fsync</div></pre></td></tr></table></figure></li></ul><p>然后改为SD卡启动，就可以进入SD卡的系统，并在系统里自动的烧写Nand。<br>完成后，改为Nand启动，即可进入新系统。</p><p>综上两个方法，都可以实现烧写Uboot到Nand上，但却都是通过进入“媒介系统”完成的烧写，看来直接烧写裸机到Nand是比较麻烦的。<br>反观SD卡启动，是通过先使用脚本制作一个<code>.sdcard</code>后缀的文件，再通过<code>dd</code>命令，完整的复制到SD卡上。<br>因此只需要分析下脚本如何操作即可。</p><p>通过过脚本<code>build-sdcard.sh</code>进行分析:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dd if=$&#123;FIRMWARE_DIR&#125;/u-boot-$&#123;MACHINE&#125;.$&#123;UBOOT_SUFFIX_SDCARD&#125; of=$&#123;SDCARD&#125; conv=notrunc seek=2 bs=512</div></pre></td></tr></table></figure></p><p>以及<a href="https://blog.csdn.net/wofeile880_jian/article/details/64444029" target="_blank" rel="external">博客</a>参考。<br>确定了Uboot是被放在了SD卡开始的512x2=1K处。<br>即，<strong>裸机代码必须放在SD卡的偏移地址1K位置处</strong>。</p><h1 id="4-裸机文件加头"><a href="#4-裸机文件加头" class="headerlink" title="4.裸机文件加头"></a>4.裸机文件加头</h1><p>这时候，按理说下一步是编写个LED裸机程序，使用<code>dd</code>命令放在偏移地址1K位置处。<br>但是，如厂商提供资料文档里说的：</p><blockquote><p>由于i.MX6ULL/i.MX6UL烧写bootloaer时需要使用kobs-ng工具添加头部信<br>息，需要在操作系统上才可以烧写。</p></blockquote><p>同时，Uboot文件名为<code>*.imx</code>后缀，因此这里的裸机文件还需要先加一个头。</p><p>那么问题来了，这个头怎么加？<br>肯定还是从Uboot切入，使用厂家提供Uboot，重新编译生成Uboot，在这个过程中，肯定会将<code>u-boot.bin</code>变为<code>u-boot.imx</code>。</p><p>编译Uboot的过程参考厂家文档，先安装交叉编译工具链，再指定配置文件编译即可。<br>这里编译完后，是不会有什么提示信息的，这里就需要<code>--just-print</code>编译参数，将整个编译过程打印出来：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- --just-print  &gt; 123.txt</div></pre></td></tr></table></figure></p><p>在生成的<code>123.txt</code>里搜索<code>u-boot.bin</code>，很快就能定位到加头操作附近：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo &apos;  MKIMAGE u-boot.imx&apos;; ./tools/mkimage -n board/myir/mys_imx6ull/imximage.cfg.cfgtmp -T imximage -e 0x87800000 -d u-boot.bin u-boot.imx  &gt;/dev/null;</div></pre></td></tr></table></figure></p><p>这里的<code>./tools/mkimage -n board/myir/mys_imx6ull/imximage.cfg.cfgtmp -T imximage -e 0x87800000 -d u-boot.bin u-boot.imx</code>命令就是加头操作。<br>需要<code>mkimage</code>工具和<code>imximage.cfg.cfgtmp</code>配置文件，而且这几个文件路径也可以从命令得知。</p><p>此时，将编译好的<code>u-boot.bin</code>，使用上面的命令完成加头操作，得到自己的<code>u-boot.imx</code>，尝试烧到SD卡上，看能否启动。</p><p>这里的烧写有一个坑，当使用<code>dd</code>命令进行烧写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo dd if=u-boot.imx of=/dev/sdb bs=512 seek=2 conv=fsync</div></pre></td></tr></table></figure></p><p>还是先介绍下<code>dd</code>命令，<code>dd</code>是对块进行操作，<code>cp</code>是对文件操作，<br>比如复制一个数据从A-&gt;B，<code>dd</code>是放在指定的位置，<code>cp</code>是放在空闲的位置。</p><p>同时结合SD卡的分区简图：<br><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180328/3.jpg" alt=""></p><p>可以看出，烧写到SD卡上，是无法直观的从SD上得知是否烧写成功的，烧写的偏移地址1K位置处，无法从SD卡的分区剩余大小上判断。</p><p>解决方法是，通过<code>dd</code>命令读取出数据，再将读取的数据和烧写的数据进行简单比较，因此烧写完成后，要使用以下命令进行检查，判断是否烧写成功：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo dd if=/dev/sdb of=read_uboot.bin  bs=512 skip=2 count=2</div><div class="line"></div><div class="line">hexdump u-boot.imx | more</div><div class="line">hexdump read_uboot.bin | more</div></pre></td></tr></table></figure></p><p>比较两者前面部分数据相同即可。</p><p>然后把SD卡插上开发板，设置为SD卡启动，成功启动Uboot，且打印的Uboot生成日期是当前日期，证明裸机文件加头的方式是正确的。</p><h1 id="5-运行LED"><a href="#5-运行LED" class="headerlink" title="5.运行LED"></a>5.运行LED</h1><p>知道了怎么加头，怎么烧写到SD卡，就可以编写裸机程序了，第一个裸机当然是最简单的点灯。<br>在点灯之前，一般都需要关看门狗、初始化时钟、初始化SDRAM/DDR等。<br>上面的操作不一定都是必须的，比如看门狗可能默认时间很长，对于点灯来说，无所谓。<br>又比如SDRAM/DDR在点灯这个小程序上，没必要用到。</p><p>因此，最基本的肯定是设置GPIO引脚，控制LED灯。<br>点灯一般需要使能引脚时钟、设置引脚功能为GPIO功能、引脚设值等。<br>在设置了引脚方向寄存器和引脚数据寄存器后，抱着试一试的心态编译、加头后烧写了进去，居然成功亮灯。<br>确实很惊讶，这应该是遇到的步骤最少的亮灯代码。<br>看门狗、时钟什么的，猜测应该被初始化了。</p><p>而且，还有更大的惊喜。<br>在前面加头的操作，就很纳闷有个参数是<code>-e 0x87800000</code>，应该是个地址，这个地址处于：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Start address 　　End address 　　　　Size　　　 　Description</div><div class="line">8000_0000  　　　　FFFF_FFFF 　　　　　2048 MB 　　MMDC—x16 DDR Controller.</div></pre></td></tr></table></figure></p><p>也就是DDR的位置，难道DDR也被初始化了?<br>写个测试函数，尝试读写DDR所在的0x80000000：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span>    DDR_ADDRESS       (*(volatile unsigned long *)0x80000000)  <span class="comment">//P175 ARM Platform Memory Map</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>    DDR_ADDR(offset)  (*(volatile unsigned long *)(0x80000000+offset))  </span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>    TEST_SIZE   (1024*1024)</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_ddr</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> i;</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> offset;</div><div class="line"><span class="keyword">int</span> equal_flag = <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="comment">//写寄存器</span></div><div class="line">offset = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;TEST_SIZE; i++)</div><div class="line">&#123;</div><div class="line">DDR_ADDR(offset) = i;</div><div class="line">offset = offset + <span class="number">4</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//读寄存器并判断</span></div><div class="line">offset = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;TEST_SIZE; i++)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span>( i != DDR_ADDR(offset) ) </div><div class="line">&#123;</div><div class="line">equal_flag = <span class="number">0</span>;</div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line">offset = offset + <span class="number">4</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//显示</span></div><div class="line"><span class="comment">/*</span></div><div class="line">if(equal_flag)</div><div class="line">led_mode(3);</div><div class="line">else</div><div class="line">led_mode(2);</div><div class="line">*/</div><div class="line"></div><div class="line"><span class="keyword">if</span>(DDR_ADDR(<span class="number">0</span>) == <span class="number">1</span>)  </div><div class="line">led_mode(<span class="number">1</span>);</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span>(DDR_ADDR(<span class="number">4</span>*<span class="number">8</span>) == <span class="number">8</span>)</div><div class="line">led_mode(<span class="number">3</span>);</div><div class="line"><span class="keyword">else</span> </div><div class="line">led_mode(<span class="number">2</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>结果发现居然能正确读取出来，看来DDR也被初始化了。</p><p>不得不说，很强，很完美。(●’◡’●)</p><p>倒回来想，不应能初始化DDR，不同的板子，DDR型号不一定相同，不可能做到适配所有的DDR。<br>整个过程，就做了加头操作，答案应该在加头操作里面。</p><p>打开<code>imximage.cfg.cfgtmp</code>可以看到一堆寄存器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">…………</div><div class="line">DATA 4 0x021B0000 0x84180000</div><div class="line">DATA 4 0x021B0890 0x00400000</div><div class="line">…………</div></pre></td></tr></table></figure></p><p>这里的<code>0x021B0000</code>刚好是DDR的寄存器：MMDC Core Control Register (MMDC_MDCTL)；<br>其上电复位值是0x00，尝试读取寄存器值是不是为0，就知道是否真的被设置了：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">read_ddr_reg</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> reg_value = <span class="number">0</span>;</div><div class="line"></div><div class="line">reg_value = MMDC_MDCTL;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (reg_value &amp; (<span class="number">0x01</span>&lt;&lt;<span class="number">30</span>)) <span class="comment">//SDE_1</span></div><div class="line">led_mode(<span class="number">1</span>);</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> (reg_value &amp; (<span class="number">0x01</span>&lt;&lt;<span class="number">31</span>)) <span class="comment">//SDE_0</span></div><div class="line">led_mode(<span class="number">2</span>);<span class="comment">//结果亮</span></div><div class="line"></div><div class="line"><span class="keyword">while</span>(<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>结果其31位，还真是1，和<code>imximage.cfg.cfgtmp</code>的<code>DATA 4 0x021B0000 0x84180000</code>里的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">0x84180000 = ‭10000100000110000000000000000000‬</div></pre></td></tr></table></figure></p><p>最高为1是吻合的。</p><h1 id="6-移植串口"><a href="#6-移植串口" class="headerlink" title="6.移植串口"></a>6.移植串口</h1><p>点灯很轻松的被解决了，其它常规的初始化也被完成了。<br>尝试加点难度，移植下串口，为什么是移植呢？<br>不想从头去看参考手册的详细说明，直接移植Uboot里的串口操作即可。</p><p>Uboot里面一堆<code>start.S</code>，哪一个才是本开发板的呢？<br>笨方法是根据芯片型号分类去慢慢找，聪明的方法是一个命令解决：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">find -name start.o</div></pre></td></tr></table></figure></p><p>得到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./arch/arm/cpu/armv7/start.o</div></pre></td></tr></table></figure></p><p>因为前面根据本开发板配置文件编译过Uboot，理论上现在生成的所有<code>*.o</code>文件都是本开发板所使用的，这样就可以直接找到用到的<code>start.S</code>。</p><p>对<code>start.S</code>进行分析，没发现里面有串口相关的调用操作。</p><p>茫茫代码，如何找到需要的“uart”相关代码呢。<br>既然所有<code>*.o</code>才是用到的，就先找出所有<code>*.o</code>，再在对应的C文件搜索<code>uart</code>即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">find -name &quot;.o&quot;</div></pre></td></tr></table></figure></p><p>将得到的结果里面所有的文件名改为<code>.*</code>，再作为参数传给<code>grep</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">grep -nr &quot;uart&quot; ./test/dm/cmd_dm.* \</div><div class="line">./test/dm/built-in.* \</div><div class="line">./test/built-in.* \</div><div class="line">./common/image-fdt.* \</div><div class="line">./common/env_attr.* \</div><div class="line">…………</div></pre></td></tr></table></figure></p><p>可以得到如下结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">./common/console.c:10:#include &lt;debug_uart.h&gt;</div><div class="line"></div><div class="line">./board/myir/mys_imx6ull/mys_imx6ull.c:330:static iomux_v3_cfg_t const uart1_pads[] = &#123;</div><div class="line">./board/myir/mys_imx6ull/mys_imx6ull.c:400:static void setup_iomux_uart(void)</div><div class="line">./board/myir/mys_imx6ull/mys_imx6ull.c:402:     imx_iomux_v3_setup_multiple_pads(uart1_pads, ARRAY_SIZE(uart1_pads));</div><div class="line">./board/myir/mys_imx6ull/mys_imx6ull.c:850:     setup_iomux_uart();</div><div class="line"></div><div class="line"></div><div class="line">./tools/kwbimage.c:34:  &#123; 0x69, &quot;uart&quot; &#125;,</div><div class="line"></div><div class="line">./arch/arm/cpu/armv7/mx6/soc.c:448:static void set_uart_from_osc(void)</div><div class="line">./arch/arm/cpu/armv7/mx6/soc.c:452:     /* set uart clk to OSC */</div><div class="line">./arch/arm/cpu/armv7/mx6/soc.c:578:             set_uart_from_osc();</div><div class="line"></div><div class="line">./arch/arm/cpu/armv7/mx6/clock.c:132:void enable_uart_clk(unsigned char enable)</div><div class="line">./arch/arm/cpu/armv7/mx6/clock.c:412:static u32 get_uart_clk(void)</div><div class="line">./arch/arm/cpu/armv7/mx6/clock.c:414:   u32 reg, uart_podf;</div><div class="line">./arch/arm/cpu/armv7/mx6/clock.c:426:   uart_podf = reg &gt;&gt; MXC_CCM_CSCDR1_UART_CLK_PODF_OFFSET;</div><div class="line">./arch/arm/cpu/armv7/mx6/clock.c:428:   return freq / (uart_podf + 1);</div><div class="line">./arch/arm/cpu/armv7/mx6/clock.c:1049:u32 imx_get_uartclk(void)</div><div class="line">./arch/arm/cpu/armv7/mx6/clock.c:1051:  return get_uart_clk();</div><div class="line">./arch/arm/cpu/armv7/mx6/clock.c:1269:          return get_uart_clk();</div><div class="line"></div><div class="line">./arch/arm/cpu/armv7/mx6/clock.su:3:clock.c:412:12:get_uart_clk 16      static</div><div class="line">./arch/arm/cpu/armv7/mx6/clock.su:10:clock.c:132:6:enable_uart_clk      8      static</div><div class="line">./arch/arm/cpu/armv7/mx6/clock.su:20:clock.c:1049:5:imx_get_uartclk     0      static</div><div class="line">./drivers/serial/serial_mxc.c:145:      u32 clk = imx_get_uartclk();</div><div class="line">./drivers/serial/serial_mxc.c:241:struct mxc_uart &#123;</div><div class="line">./drivers/serial/serial_mxc.c:270:      struct mxc_uart *const uart = plat-&gt;reg;</div><div class="line">./drivers/serial/serial_mxc.c:271:      u32 clk = imx_get_uartclk();</div><div class="line">./drivers/serial/serial_mxc.c:273:      writel(4 &lt;&lt; 7, &amp;uart-&gt;fcr); /* divide input clock by 2 */</div><div class="line">./drivers/serial/serial_mxc.c:274:      writel(0xf, &amp;uart-&gt;bir);</div><div class="line">./drivers/serial/serial_mxc.c:275:      writel(clk / (2 * baudrate), &amp;uart-&gt;bmr);</div><div class="line">./drivers/serial/serial_mxc.c:278:             &amp;uart-&gt;cr2);</div><div class="line">./drivers/serial/serial_mxc.c:279:      writel(UCR1_UARTEN, &amp;uart-&gt;cr1);</div><div class="line">./drivers/serial/serial_mxc.c:287:      struct mxc_uart *const uart = plat-&gt;reg;</div><div class="line">./drivers/serial/serial_mxc.c:289:      writel(0, &amp;uart-&gt;cr1);</div><div class="line">./drivers/serial/serial_mxc.c:290:      writel(0, &amp;uart-&gt;cr2);</div><div class="line">./drivers/serial/serial_mxc.c:291:      while (!(readl(&amp;uart-&gt;cr2) &amp; UCR2_SRST));</div><div class="line">./drivers/serial/serial_mxc.c:292:      writel(0x704 | UCR3_ADNIMP, &amp;uart-&gt;cr3);</div><div class="line">./drivers/serial/serial_mxc.c:293:      writel(0x8000, &amp;uart-&gt;cr4);</div><div class="line">./drivers/serial/serial_mxc.c:294:      writel(0x2b, &amp;uart-&gt;esc);</div><div class="line">./drivers/serial/serial_mxc.c:295:      writel(0, &amp;uart-&gt;tim);</div><div class="line">./drivers/serial/serial_mxc.c:296:      writel(0, &amp;uart-&gt;ts);</div><div class="line">./drivers/serial/serial_mxc.c:304:      struct mxc_uart *const uart = plat-&gt;reg;</div><div class="line">./drivers/serial/serial_mxc.c:306:      if (readl(&amp;uart-&gt;ts) &amp; UTS_RXEMPTY)</div><div class="line">./drivers/serial/serial_mxc.c:309:      return readl(&amp;uart-&gt;rxd) &amp; URXD_RX_DATA;</div><div class="line">./drivers/serial/serial_mxc.c:315:      struct mxc_uart *const uart = plat-&gt;reg;</div><div class="line">./drivers/serial/serial_mxc.c:317:      if (!(readl(&amp;uart-&gt;ts) &amp; UTS_TXEMPTY))</div><div class="line">./drivers/serial/serial_mxc.c:320:      writel(ch, &amp;uart-&gt;txd);</div><div class="line">./drivers/serial/serial_mxc.c:328:      struct mxc_uart *const uart = plat-&gt;reg;</div><div class="line">./drivers/serial/serial_mxc.c:329:      uint32_t sr2 = readl(&amp;uart-&gt;sr2);</div><div class="line"></div><div class="line">./drivers/serial/serial.c:143:serial_initfunc(mxs_auart_initialize);</div><div class="line">./drivers/serial/serial.c:156:serial_initfunc(uartlite_serial_initialize);</div><div class="line">./drivers/serial/serial.c:234:  mxs_auart_initialize();</div><div class="line">./drivers/serial/serial.c:247:  uartlite_serial_initialize();</div><div class="line">./drivers/serial/serial.c:525: * uart_post_test() - Test the currently selected serial port using POST</div><div class="line">./drivers/serial/serial.c:535:/* Mark weak until post/cpu/.../uart.c migrate over */</div><div class="line">./drivers/serial/serial.c:537:int uart_post_test(int flags)</div></pre></td></tr></table></figure></p><p>可以看到分别是初始化<code>uart</code>引脚、时钟、设置相关寄存器等函数。<br>非常的清晰，很容易就移植过来：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">uart1_clock_enable</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line"><span class="comment">//uart时钟</span></div><div class="line">CCM_CSCDR1 |= (<span class="number">0x01</span>&lt;&lt;<span class="number">6</span>); <span class="comment">//P676 Selector for the UART clock multiplexor:1 derive clock from osc_clk</span></div><div class="line">CCM_CCGR5  |= (<span class="number">0x03</span>&lt;&lt;<span class="number">24</span>); <span class="comment">//uart1 clock (uart1_clk_enable)</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">uart1_iomux</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line"><span class="comment">//uart引脚复用</span></div><div class="line">IOMUXC_UART1_TX |=  (<span class="number">0x01</span>&lt;&lt;<span class="number">16</span> | <span class="number">0x02</span>&lt;&lt;<span class="number">14</span> | <span class="number">0x01</span>&lt;&lt;<span class="number">13</span> | <span class="number">0x01</span>&lt;&lt;<span class="number">12</span> | <span class="number">0x02</span>&lt;&lt;<span class="number">6</span> | <span class="number">0x06</span>&lt;&lt;<span class="number">3</span> | <span class="number">0x01</span>&lt;&lt;<span class="number">0</span>);</div><div class="line">IOMUXC_UART1_RX |=  (<span class="number">0x01</span>&lt;&lt;<span class="number">16</span> | <span class="number">0x02</span>&lt;&lt;<span class="number">14</span> | <span class="number">0x01</span>&lt;&lt;<span class="number">13</span> | <span class="number">0x01</span>&lt;&lt;<span class="number">12</span> | <span class="number">0x02</span>&lt;&lt;<span class="number">6</span> | <span class="number">0x06</span>&lt;&lt;<span class="number">3</span> | <span class="number">0x01</span>&lt;&lt;<span class="number">0</span>);</div><div class="line"> </div><div class="line">IOMUXC_UART1_TX &amp;= ~(<span class="number">0x0F</span>&lt;&lt;<span class="number">0</span>); <span class="comment">//P1578  0000 ALT0 — Select mux mode: ALT0 mux port: UART1_TX of instance: uart1</span></div><div class="line">IOMUXC_UART1_RX &amp;= ~(<span class="number">0x0F</span>&lt;&lt;<span class="number">0</span>); <span class="comment">//P1579  0000 ALT0 — Select mux mode: ALT0 mux port: UART1_RX of instance: uart1</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">raise</span> <span class="params">(<span class="keyword">int</span> sig_nr)</span></span></div><div class="line">&#123;</div><div class="line">;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">get_uart_clk</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> reg, uart_podf;</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> freq, div;</div><div class="line"></div><div class="line"><span class="comment">//div = CCM_ANALOG_PLL_USB1;</span></div><div class="line">div = CCM_CACRR;</div><div class="line">div &amp;= <span class="number">0x00000003</span>;</div><div class="line">freq = <span class="number">26000000</span> * (<span class="number">20</span> + (div &lt;&lt; <span class="number">1</span>));</div><div class="line"></div><div class="line">reg = CCM_CSCDR1;</div><div class="line"><span class="keyword">if</span> (reg &amp; (<span class="number">1</span>&lt;&lt;<span class="number">6</span>))</div><div class="line">freq = <span class="number">26000000</span>;</div><div class="line"></div><div class="line"></div><div class="line">reg &amp;= <span class="number">0x3F</span>; </div><div class="line">uart_podf = reg &gt;&gt; <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="keyword">return</span> freq / (uart_podf + <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//uart配置</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">uart1_config</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> clk;</div><div class="line"></div><div class="line">UART1_UCR1 = <span class="number">0</span>;</div><div class="line">UART1_UCR2 = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span>(!(UART1_UCR2 &amp; (<span class="number">1</span>&lt;&lt;<span class="number">0</span>)));</div><div class="line">UART1_UCR3 = (<span class="number">0x704</span> | (<span class="number">1</span>&lt;&lt;<span class="number">7</span>));</div><div class="line">UART1_UCR4 = (<span class="number">0x8000</span>);</div><div class="line">UART1_UESC = (<span class="number">0x2b</span>);</div><div class="line">UART1_UTIM = (<span class="number">0</span>);</div><div class="line">UART1_UTS  = (<span class="number">0</span>);</div><div class="line"></div><div class="line">clk = get_uart_clk(); <span class="comment">//实测是25952384</span></div><div class="line">UART1_UFCR = (<span class="number">4</span>&lt;&lt;<span class="number">7</span> | <span class="number">2</span>&lt;&lt;<span class="number">10</span> | <span class="number">1</span>&lt;&lt;<span class="number">0</span>);</div><div class="line"><span class="comment">//UART1_UFCR = (4&lt;&lt;7);</span></div><div class="line">UART1_UBIR = (<span class="number">0xf</span>);</div><div class="line">UART1_UBMR = (clk / (<span class="number">2</span> * <span class="number">125000</span>));<span class="comment">//115200 - 9.42     125000 - 8.75</span></div><div class="line"></div><div class="line">UART1_UCR2 = (<span class="number">1</span>&lt;&lt;<span class="number">5</span> | <span class="number">1</span>&lt;&lt;<span class="number">14</span> | <span class="number">1</span>&lt;&lt;<span class="number">1</span> | <span class="number">1</span>&lt;&lt;<span class="number">2</span> | <span class="number">1</span>&lt;&lt;<span class="number">0</span>);</div><div class="line">UART1_UCR1 = (<span class="number">1</span>&lt;&lt;<span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span>  <span class="title">uart_init</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">uart1_clock_enable();</div><div class="line"></div><div class="line">uart1_iomux();</div><div class="line"></div><div class="line">uart1_config();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span>  <span class="title">uart_PutChar</span><span class="params">(<span class="keyword">char</span>  c)</span></span></div><div class="line">&#123;</div><div class="line">UART1_UTXD = c;</div><div class="line"><span class="keyword">while</span>(!(UART1_UTS &amp; (<span class="number">1</span>&lt;&lt;<span class="number">6</span>)));</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">uart_PutString</span><span class="params">(<span class="keyword">char</span> *ptr)</span></span></div><div class="line">&#123;</div><div class="line"> </div><div class="line"><span class="keyword">while</span>(*ptr != <span class="string">'\0'</span>)</div><div class="line">&#123;          </div><div class="line">uart_PutChar(*ptr++);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>这里的移植后遇到两个问题：<br>1.程序里打印<code>45</code>，实际打印出<code>tu</code>，通过ASCLL表和逻辑分析仪发现数据有点错位，代码里的<code>115200</code>波特率对应的脉宽宽了，这里直接把程序里的波特率改为<code>125000</code>，再用逻辑分析仪看就很“正”了。</p><p>2.前面的<code>get_uart_clk()</code>函数涉及到了除法，交叉编译工具链是不支持硬件除法的。解决方法有两个：</p><ul><li><p>在Makefile添加含除法的GCC库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># Add GCC lib</div><div class="line">PLATFORM_LIBS += -L $(shell dirname `$(CC) $(CFLAGS) -print-libgcc-file-name`) -lgcc</div></pre></td></tr></table></figure></li><li><p>打印出get_uart_clk()的返回值，直接赋值。</p></li></ul><h1 id="7-重定位"><a href="#7-重定位" class="headerlink" title="7.重定位"></a>7.重定位</h1><p>前面的uart程序，后面实测发现一些问题，很大概率打印的数据是错误或者无法打印，研究后发现，是没有重定位的原因。</p><p>原来，开发板上电后，会从Flash中复制代码到SRAM，在SRAM里面一句一句的执行指令(此时运行的地址是硬件决定的)。<br>实际上，我们更多的是希望他在SDRAM上运行，因为SDRAM的空间更大，于是在链接脚本中，指定它应该运行的地址。<br>于是代码开始时实际运行的地址和期望运行的地址一般是不一样的，就需要<strong>重定位</strong>代码到链接脚本指定的地址。<br>不然的话，假如一个数据，在链接脚本里指定放在了高地址某处，但实际代码运行在低地址附近。代码执行时，需要读取高地址位置的数据，但高地址的数据并没有任何东西，一但读取就很可能发生异常。</p><p>首先编写链接脚本：<br><figure class="highlight plain"><figcaption><span>[imx6ul.lds]</span><a href="https://github.com/hceng/learn/blob/master/imx6ull/hardware/uart/imx6ul.lds" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">SECTIONS &#123;</div><div class="line">    . = 0x80000000;</div><div class="line">    .text : &#123; start.o(.text)</div><div class="line">  main.o(.text)</div><div class="line">              led.o(.text)</div><div class="line">              uart.o(.text)</div><div class="line">  printf.o(.text)</div><div class="line">              *(.text) </div><div class="line">            &#125;</div><div class="line">    .rodata ALIGN(4) : &#123;*(.rodata*)&#125; </div><div class="line">    .data   ALIGN(4) : &#123; *(.data) &#125;</div><div class="line">    __bss_start = .;</div><div class="line">    .bss ALIGN(4)  : &#123; *(.bss)  *(COMMON) &#125;</div><div class="line">    __bss_end = .;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>这是一个比较通用的链接脚本，指定了代码段、只读数据段、数据段、BSS段等的位置。<br>开始的<code>0x80000000</code>就是我们期望它运行的地址，一般都是SDRAM中的某个地址，如果这个地址和代码实际运行的地址相同，就没必要重定位了。</p><p>然后在<code>start.S</code>里重定位操作：<br><figure class="highlight plain"><figcaption><span>[start.S]</span><a href="https://github.com/hceng/learn/blob/master/imx6ull/hardware/uart/start.S" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">.text</div><div class="line">.global  _start</div><div class="line">_start: </div><div class="line"></div><div class="line">@设置栈</div><div class="line">ldr  sp,=0x90000000@设置栈</div><div class="line"></div><div class="line">bl relocate      @重定位</div><div class="line">@bl clean_bss     @清BSS段</div><div class="line"></div><div class="line">@adr r0, _start @可用于获取当前代码的地址,作为参数传给main,main里面再打印出来&quot;int main(int addr)&quot;</div><div class="line">@ldr  pc, =main @如果没重定位,这样直接跳到main代码的位置(链接脚本的期望地址),那个位置的数据未知,肯定出错</div><div class="line">bl main          @bl相对跳转,不管有没有重定位,都能到main的位置</div><div class="line"></div><div class="line">halt:</div><div class="line">b  halt </div><div class="line"></div><div class="line">relocate:</div><div class="line">    adr r0, _start  @r0:代码当前被放在的位置,由硬件特性决定</div><div class="line">ldr r1, =_start @r1:代码期望被放在的位置,即链接脚本里的地址,用户想放在的位置,比如SDRAM</div><div class="line">@当两者相同则不用重定位,否则需要重定位</div><div class="line">cmp r0, r1      @比较r0和r1</div><div class="line">moveq pc,lr     @相等则pc=lr,即跳回到调用relocate的位置;不相等跳过执行下面的指令</div><div class="line"></div><div class="line">ldr r2, =__bss_start @r2等于链接脚本里的__bss_start,即代码段、只读数据段、数据段的结束位置</div><div class="line">cpy:</div><div class="line">ldr r3, [r0], #4 @将r0地址的数据放到r3,r0往后再移动一个字节</div><div class="line">str r3, [r1], #4 @将r3的数据放到r1,r1往后再移动一个字节</div><div class="line">                 @这两句完成了代码从当前位置复制到期望的链接地址位置的操作</div><div class="line">    cmp r1, r2       @判断是不是复制完了</div><div class="line">    bne cpy          @不相等继续复制   </div><div class="line"></div><div class="line">mov pc, lr     @pc=lr,即跳回到调用relocate的位置;</div><div class="line"></div><div class="line">clean_bss:</div><div class="line">ldr r0, =__bss_start @r0=bss段开始位置</div><div class="line">ldr r1, =__bss_end   @r1=bss段结束位置</div><div class="line">mov r2, #0           @r0=0,填充0用</div><div class="line">clean_loop:  </div><div class="line">str r2, [r0], #4     @将0写到bss段开始位置,并r0向后移一个字节</div><div class="line">cmp r0, r1           @比较bss段是不是完了</div><div class="line">bne clean_loop       @不相等则继续清0</div><div class="line"></div><div class="line">mov pc, lr     @pc=lr,即跳回到调用clean_bss的位置;</div></pre></td></tr></table></figure></p><p>开始的栈地址，选择SDRAM的最高地址即可。其它没什么说的了，注释写的很清楚，目的就是把当前位置的代码(一般是SRAM)复制到期望运行的地址(一般是SDRAM)。</p><h1 id="8-移植printf"><a href="#8-移植printf" class="headerlink" title="8.移植printf"></a>8.移植printf</h1><p>移植printf就很简单了，搞定了uart打印字符的函数后，利用以下框架即可：</p><ul><li>复制提供的<code>printf.c</code>和<code>printf.h</code>；</li><li>将<code>printf.h</code>里定义的<code>__out_putchar</code>宏改为uart里打印字符的函数即可；</li></ul><p>实测效果：<br><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180328/4.png" alt=""></p><h1 id="9-其它"><a href="#9-其它" class="headerlink" title="9.其它"></a>9.其它</h1><p>以上就是拿到一个全新的板子，如何快速上手板子的过程。</p><p>将以上思路，应用于RK3288，发现完全适用，也是先编译Uboot，得知加头的方式，然后得知下载方式，点灯，重定位，仅仅半天就可以实现串口的打印。<br>对RK3288的操作就不详细写了，思路上是完全一摸一样的，相关代码在文章最后。</p><p>后续有时间的话，可能会尝试去移植Nand，这些后续再看情况。</p><p>对iMX6ULL的初步上手就差不多了，感觉这SOC做得还是很不错，上手很快，价格低廉。</p><p>相关代码Github地址：<br><a href="https://github.com/hceng/learn/tree/master/imx6ull/hardware" target="_blank" rel="external">IMX6ULL</a><br><a href="https://github.com/hceng/learn/tree/master/rk3288/hardware" target="_blank" rel="external">RK3288</a></p><hr><p><div align="center"><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本文采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href="http://hceng.cn/" target="_blank" rel="external">hceng’s blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第一次接触NXP/Freescale的SOC，记录拿到板子后快速上手的技巧和思维的方式。&lt;br&gt;
    
    </summary>
    
    
      <category term="裸机" scheme="http://yoursite.com/tags/%E8%A3%B8%E6%9C%BA/"/>
    
      <category term="i.MX6ULL" scheme="http://yoursite.com/tags/i-MX6ULL/"/>
    
  </entry>
  
  <entry>
    <title>Linux摄像头驱动1——vivid</title>
    <link href="http://yoursite.com/2018/03/08/Linux%E6%91%84%E5%83%8F%E5%A4%B4%E9%A9%B1%E5%8A%A81%E2%80%94%E2%80%94vivid/"/>
    <id>http://yoursite.com/2018/03/08/Linux摄像头驱动1——vivid/</id>
    <published>2018-03-08T07:59:30.000Z</published>
    <updated>2018-11-04T09:24:24.899Z</updated>
    
    <content type="html"><![CDATA[<p>Linux摄像头驱动学习第一篇，对虚拟视频驱动Virtual Video Driver(vivid)进行测试、分析、编写。<br><a id="more"></a></p><p>V4L2(Video for Linux two)是Linux内核中关于<strong>视频设备</strong>的内核<strong>驱动框架</strong>，为上层的访问底层的视频设备提供了统一的接口。</p><p>V4L2可以支持多种设备,它可以有以下几种接口: </p><blockquote><ol><li>Video capture interface(视频采集接口):从摄像头等设备上获取视频数据,是V4L2设计最初功能；</li><li>Video output interface(视频输出接口):驱动计算机的外围视频、图像显示设备；</li><li>Video overlay interface(直接传输视频接口):把从视频采集设备采集过来的信号直接输出到输出设备之上,而不用经过CPU；</li><li>Video output overlay device(视频输出覆盖设备):也被称为OSD(On-Screen Display),即在显示画面上叠加一层显示，比如菜单设置界面；</li><li>VBI interface(视频间隔消隐信号接口):提供对VBI(Vertical Blanking Interval)数据的控制,它可以使应用可以访问传输消隐期的视频信号；</li><li>Radio interface(收音机接口):处理从AM或FM高频头设备接收来的音频流；</li></ol></blockquote><h1 id="1-V4L2框架分析"><a href="#1-V4L2框架分析" class="headerlink" title="1.V4L2框架分析"></a>1.V4L2框架分析</h1><p><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180308/1.jpg" alt=""></p><h1 id="2-测试vivid"><a href="#2-测试vivid" class="headerlink" title="2.测试vivid"></a>2.测试vivid</h1><p>这里目的先加载vivid驱动，然后运行应用程序调用vivid驱动，初步体验效果。</p><h2 id="2-1加载驱动"><a href="#2-1加载驱动" class="headerlink" title="2.1加载驱动"></a>2.1加载驱动</h2><p>先在Ubuntu16.04上输入<code>uname -a</code>，可以得到当前Ubuntu内核版本号：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Linux ubuntu 4.4.0-116-generic #140-Ubuntu SMP Mon Feb 12 21:23:04 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux</div></pre></td></tr></table></figure></p><p>当前内核版本是<code>4.4.0-116-generic</code>，然后去<a href="https://www.kernel.org/pub/linux/kernel/v4.x/" target="_blank" rel="external">Linux内核官网</a>下载对应的内核，提取出其中的<code>linux-4.13.9/drivers/media/</code>文件夹。</p><p>修改<code>media/platform/vivid/</code>下的<code>Makefile</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">KERN_DIR = /usr/src/linux-headers-4.4.0-116-generic</div><div class="line"></div><div class="line">vivid-objs := vivid-core.o vivid-ctrls.o vivid-vid-common.o vivid-vbi-gen.o \</div><div class="line">vivid-vid-cap.o vivid-vid-out.o vivid-kthread-cap.o vivid-kthread-out.o \</div><div class="line">vivid-radio-rx.o vivid-radio-tx.o vivid-radio-common.o \</div><div class="line">vivid-rds-gen.o vivid-sdr-cap.o vivid-vbi-cap.o vivid-vbi-out.o \</div><div class="line">vivid-osd.o vivid-tpg.o vivid-tpg-colors.o</div><div class="line"></div><div class="line">all:</div><div class="line">make -C $(KERN_DIR) M=`pwd` modules </div><div class="line"></div><div class="line">clean:</div><div class="line">make -C $(KERN_DIR) M=`pwd` modules clean</div><div class="line">rm -rf modules.order</div><div class="line"></div><div class="line">obj-$(CONFIG_VIDEO_VIVID) += vivid.o</div></pre></td></tr></table></figure></p><p>然后执行<code>make</code>编译，获得<code>vivid.ko</code><br>此时加载模块<code>sudo insmod vivid.ko</code>，发现报错如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">insmod: ERROR: could not insert module vivid.ko: Unknown symbol in module</div></pre></td></tr></table></figure></p><p>原因是模块中的一些依赖函数的模块，没有加载，通过<code>dmesg</code>命令，可以看到很多函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[  488.786285] vivid: Unknown symbol vb2_queue_init (err 0)</div><div class="line">[  488.786295] vivid: Unknown symbol v4l2_ctrl_poll (err 0)</div><div class="line">[  488.786304] vivid: Unknown symbol v4l2_enum_dv_timings_cap (err 0)</div><div class="line">[  488.786314] vivid: Unknown symbol video_ioctl2 (err 0)</div><div class="line">[  488.786364] vivid: Unknown symbol v4l2_get_timestamp (err 0)</div><div class="line">[  488.786389] vivid: Unknown symbol v4l2_device_put (err 0)</div><div class="line">[  488.786418] vivid: Unknown symbol vb2_ioctl_streamoff (err 0)</div><div class="line">…………</div></pre></td></tr></table></figure></p><p>需要先加载这些函数所在的模块才行。<br>这里有两个方法：<br>一是找到函数对应的文件，修改<code>Makefile</code>，编译出来，先加载。<br>二是找到函数对应的文件，其实模块都已经编译好了，路径在<code>/lib/modules/4.4.0-116-generic/kernel/drivers/media/v4l2-core/</code>里面，直接加载即可。</p><p>这两种方式都需要慢慢找对应的文件，比较麻烦，直接:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo modprobe vivid     //安装自带vivid及依赖</div><div class="line">sudo rmmod vivid        //卸载自带的vivid</div><div class="line">sudo insmod ./vivid.ko  //安装自己编译的vivid.ko</div></pre></td></tr></table></figure></p><p>这里先使用<code>modprobr</code>加载vivid，会将其依赖一并加载，然后再卸载vivid，最后加载上我们编译的<code>vivid.ko</code>。</p><p>这里为什么使用自己编译的<code>vivid.ko</code>，而不使用自带的？<br>因为后面修改vivid源码后，重新加载修改后的驱动，才知道修改后的效果。</p><h2 id="2-2应用程序"><a href="#2-2应用程序" class="headerlink" title="2.2应用程序"></a>2.2应用程序</h2><p>Linux摄像头测试软件webcam、spcaview、luvcview、xawtv等，经测试，<code>luvcview</code>和<code>xawtv</code>比较靠谱。</p><ul><li><p><a href="https://packages.ubuntu.com/zh-cn/source/trusty/luvcview" target="_blank" rel="external">luvcview</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">luvcview -h             //帮助信息</div><div class="line">luvcview -d /dev/videoX //指定设备</div><div class="line">luvcview -L             //查询当前摄像头所支持的所有数据格式以及分辨率信息 </div><div class="line">luvcview                //运行摄像头</div></pre></td></tr></table></figure></li><li><p><a href="https://linuxtv.org/downloads/xawtv/" target="_blank" rel="external">xawtv</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">xawtv -h                //帮助信息</div><div class="line">xawtv -c /dev/videoX    //指定设备</div><div class="line">xawtv -noalsa           //关闭声卡启动</div><div class="line">xawtv                   //运行摄像头</div></pre></td></tr></table></figure></li></ul><p>这里加载vivid驱动后，运行xawtv效果如下：<br><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180308/2.png" alt=""></p><h1 id="3-分析vivid"><a href="#3-分析vivid" class="headerlink" title="3.分析vivid"></a>3.分析vivid</h1><p>第一次接触V4L2，直接对内核提供的Virtual Video Driver(vivid)进行分析，只要熟悉了vivid，后续再对摄像头再进行分析，就会轻松很多。</p><p>vivid是内核提供的一个虚拟机的视频设备驱动，内核提供的vivid源码在<code>linux-4.13.9/drivers/media/platform/vivid/</code>。</p><h2 id="3-1-初始化、注册分析"><a href="#3-1-初始化、注册分析" class="headerlink" title="3.1 初始化、注册分析"></a>3.1 初始化、注册分析</h2><p>在<code>vivid_init()</code>里分别注册了<code>vivid_pdev</code>和<code>vivid_pdrv</code>，注册后，由于两者<code>name</code>一致，则会调用<code>probe()</code>。在<code>probe()</code>里面主要进行初始化、注册等相关流程。</p><p><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180308/3.png" alt=""></p><p>可以看到，在<code>probe()</code>里，会调用<code>vivid_create_instance()</code>，让后在里面先<strong>分配</strong>一个<code>video_device</code>，然后<strong>设置</strong><code>video_device</code>，包括操作函数<code>ops</code>，<code>ioctl</code>操作函数，设备等。<br>然后对<code>ctrl</code>属性进行详细的设置，最后<strong>注册</strong><code>video_device</code>，和进行常规的字符设备注册。</p><p>因此，写摄像头驱动程序的流程如下:   </p><blockquote><ol><li>分配<code>video_device</code>:<code>video_device_alloc()</code>或<code>kzalloc()</code>；</li><li>设置<code>video_device</code>:<code>.fops</code>、<code>.ioctl_ops</code>、<code>dev</code>；</li><li>注册<code>video_device</code>: <code>video_register_device()</code>；</li></ol></blockquote><h2 id="3-2-操作函数分析"><a href="#3-2-操作函数分析" class="headerlink" title="3.2 操作函数分析"></a>3.2 操作函数分析</h2><p>再来看看操作函数是如何调用的：<br><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180308/4.png" alt=""></p><p>当应用层<code>open()</code>/<code>read()</code>/<code>write()</code>操作<code>/dev/videox</code>时，先找到<code>v4l2_fops</code>，<br>然后调用<code>v4l2_open</code>/<code>v4l2_read</code>/<code>v4l2_write</code>(<code>drivers/media/v4l2-core/v4l2-dev.c</code>)，<br>再通过<code>video_devdata</code>根据次设备号从数组中得到<code>video_device</code>，再找到<code>vivid_fops</code>里对应的操作函数。</p><p><code>ioctl</code>的前面流程类似，后面通过<code>video_usercopy()</code>获取传入的<code>ioctl</code>类型，找到对应<code>ioctl_ops</code>，调用不同的<code>ioctl</code>。</p><h2 id="3-3-ioctl-ops分析"><a href="#3-3-ioctl-ops分析" class="headerlink" title="3.3 ioctl_ops分析"></a>3.3 ioctl_ops分析</h2><p>摄像头驱动有众多的<code>ioctl</code>，这些<code>ioctl</code>实现了对设备的控制：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div></pre></td><td class="code"><pre><div class="line">static const struct v4l2_ioctl_ops vivid_ioctl_ops = &#123;</div><div class="line">/* 表示它是一个摄像头设备 */</div><div class="line">.vidioc_querycap= vidioc_querycap, </div><div class="line"></div><div class="line"></div><div class="line">/* 摄像头数据格式的操作 */</div><div class="line">.vidioc_enum_fmt_vid_cap= vidioc_enum_fmt_vid,     //列举格式</div><div class="line">.vidioc_g_fmt_vid_cap= vidioc_g_fmt_vid_cap,    //获取格式</div><div class="line">.vidioc_try_fmt_vid_cap= vidioc_try_fmt_vid_cap,  //测试格式</div><div class="line">.vidioc_s_fmt_vid_cap= vidioc_s_fmt_vid_cap,    //设置格式</div><div class="line">/* 支持multi-planar */</div><div class="line">.vidioc_enum_fmt_vid_cap_mplane = vidioc_enum_fmt_vid_mplane,</div><div class="line">.vidioc_g_fmt_vid_cap_mplane= vidioc_g_fmt_vid_cap_mplane,</div><div class="line">.vidioc_try_fmt_vid_cap_mplane= vidioc_try_fmt_vid_cap_mplane,</div><div class="line">.vidioc_s_fmt_vid_cap_mplane= vidioc_s_fmt_vid_cap_mplane,</div><div class="line"></div><div class="line">/* 数据输出操作 */</div><div class="line">.vidioc_enum_fmt_vid_out= vidioc_enum_fmt_vid,     //枚举输出格式</div><div class="line">.vidioc_g_fmt_vid_out= vidioc_g_fmt_vid_out,    //获取输出格式</div><div class="line">.vidioc_try_fmt_vid_out= vidioc_try_fmt_vid_out,  //测试输出格式</div><div class="line">.vidioc_s_fmt_vid_out= vidioc_s_fmt_vid_out,    //设置输出格式</div><div class="line">/* 支持multi-planar */</div><div class="line">.vidioc_enum_fmt_vid_out_mplane = vidioc_enum_fmt_vid_mplane,</div><div class="line">.vidioc_g_fmt_vid_out_mplane= vidioc_g_fmt_vid_out_mplane,</div><div class="line">.vidioc_try_fmt_vid_out_mplane= vidioc_try_fmt_vid_out_mplane,</div><div class="line">.vidioc_s_fmt_vid_out_mplane= vidioc_s_fmt_vid_out_mplane,</div><div class="line"></div><div class="line"></div><div class="line">.vidioc_g_selection= vidioc_g_selection,          //获取选择矩形</div><div class="line">.vidioc_s_selection= vidioc_s_selection,          //设置选择矩形</div><div class="line">.vidioc_cropcap= vidioc_cropcap,              //查询裁剪限制</div><div class="line"></div><div class="line">.vidioc_g_fmt_vbi_cap= vidioc_g_fmt_vbi_cap,        //获取指向原始数据VBI的指针</div><div class="line">.vidioc_try_fmt_vbi_cap= vidioc_g_fmt_vbi_cap,</div><div class="line">.vidioc_s_fmt_vbi_cap= vidioc_s_fmt_vbi_cap,</div><div class="line"></div><div class="line">.vidioc_g_fmt_sliced_vbi_cap    = vidioc_g_fmt_sliced_vbi_cap,</div><div class="line">.vidioc_try_fmt_sliced_vbi_cap  = vidioc_try_fmt_sliced_vbi_cap,</div><div class="line">.vidioc_s_fmt_sliced_vbi_cap    = vidioc_s_fmt_sliced_vbi_cap,</div><div class="line">.vidioc_g_sliced_vbi_cap= vidioc_g_sliced_vbi_cap,</div><div class="line"></div><div class="line">.vidioc_g_fmt_vbi_out= vidioc_g_fmt_vbi_out,</div><div class="line">.vidioc_try_fmt_vbi_out= vidioc_g_fmt_vbi_out,</div><div class="line">.vidioc_s_fmt_vbi_out= vidioc_s_fmt_vbi_out,</div><div class="line"></div><div class="line">.vidioc_g_fmt_sliced_vbi_out    = vidioc_g_fmt_sliced_vbi_out,</div><div class="line">.vidioc_try_fmt_sliced_vbi_out  = vidioc_try_fmt_sliced_vbi_out,</div><div class="line">.vidioc_s_fmt_sliced_vbi_out    = vidioc_s_fmt_sliced_vbi_out,</div><div class="line"></div><div class="line">.vidioc_enum_fmt_sdr_cap= vidioc_enum_fmt_sdr_cap,</div><div class="line">.vidioc_g_fmt_sdr_cap= vidioc_g_fmt_sdr_cap,</div><div class="line">.vidioc_try_fmt_sdr_cap= vidioc_try_fmt_sdr_cap,</div><div class="line">.vidioc_s_fmt_sdr_cap= vidioc_s_fmt_sdr_cap,</div><div class="line"></div><div class="line">.vidioc_overlay= vidioc_overlay,</div><div class="line">.vidioc_enum_framesizes= vidioc_enum_framesizes,</div><div class="line">.vidioc_enum_frameintervals= vidioc_enum_frameintervals,</div><div class="line">.vidioc_g_parm= vidioc_g_parm,</div><div class="line">.vidioc_s_parm= vidioc_s_parm,</div><div class="line"></div><div class="line">.vidioc_enum_fmt_vid_overlay= vidioc_enum_fmt_vid_overlay,</div><div class="line">.vidioc_g_fmt_vid_overlay= vidioc_g_fmt_vid_overlay,</div><div class="line">.vidioc_try_fmt_vid_overlay= vidioc_try_fmt_vid_overlay,</div><div class="line">.vidioc_s_fmt_vid_overlay= vidioc_s_fmt_vid_overlay,</div><div class="line">.vidioc_g_fmt_vid_out_overlay= vidioc_g_fmt_vid_out_overlay,</div><div class="line">.vidioc_try_fmt_vid_out_overlay= vidioc_try_fmt_vid_out_overlay,</div><div class="line">.vidioc_s_fmt_vid_out_overlay= vidioc_s_fmt_vid_out_overlay,</div><div class="line">.vidioc_g_fbuf= vidioc_g_fbuf,</div><div class="line">.vidioc_s_fbuf= vidioc_s_fbuf,</div><div class="line"></div><div class="line">/* 缓冲区操作 */</div><div class="line">.vidioc_reqbufs= vb2_ioctl_reqbufs,        //申请</div><div class="line">.vidioc_create_bufs= vb2_ioctl_create_bufs,    //创建</div><div class="line">.vidioc_prepare_buf= vb2_ioctl_prepare_buf,    //准备</div><div class="line">.vidioc_querybuf= vb2_ioctl_querybuf,       //查询</div><div class="line">.vidioc_qbuf= vb2_ioctl_qbuf,           //放入</div><div class="line">.vidioc_dqbuf= vb2_ioctl_dqbuf,          //取出</div><div class="line">.vidioc_expbuf= vb2_ioctl_expbuf,         //导出</div><div class="line">.vidioc_streamon= vb2_ioctl_streamon,       //启动</div><div class="line">.vidioc_streamoff= vb2_ioctl_streamoff,      //停止</div><div class="line">                                                       </div><div class="line">/* 输入源操作 */                                   </div><div class="line">.vidioc_enum_input= vidioc_enum_input,        //枚举输入源</div><div class="line">.vidioc_g_input= vidioc_g_input,           //获取输入源</div><div class="line">.vidioc_s_input= vidioc_s_input,           //设置输入源</div><div class="line">.vidioc_s_audio= vidioc_s_audio,           //设置音频</div><div class="line">.vidioc_g_audio= vidioc_g_audio,           //获取音频</div><div class="line">.vidioc_enumaudio= vidioc_enumaudio,     //枚举音频</div><div class="line">.vidioc_s_frequency= vidioc_s_frequency,     //设置频率</div><div class="line">.vidioc_g_frequency= vidioc_g_frequency,      //获取输入源</div><div class="line">.vidioc_s_tuner= vidioc_s_tuner,           //设置调谐器</div><div class="line">.vidioc_g_tuner= vidioc_g_tuner,           //获取调谐器</div><div class="line">.vidioc_s_modulator= vidioc_s_modulator,     //设置调制器</div><div class="line">.vidioc_g_modulator= vidioc_g_modulator,      //获取调制器</div><div class="line">.vidioc_s_hw_freq_seek= vidioc_s_hw_freq_seek,           //硬件频率搜索</div><div class="line">.vidioc_enum_freq_bands= vidioc_enum_freq_bands,          //枚举调谐器或调制器支持的频段</div><div class="line"></div><div class="line">/* 输出端操作 */</div><div class="line">.vidioc_enum_output= vidioc_enum_output,          //枚举视频输出端</div><div class="line">.vidioc_g_output= vidioc_g_output,             //获取视频输出</div><div class="line">.vidioc_s_output= vidioc_s_output,             //设置视频输出</div><div class="line">.vidioc_s_audout= vidioc_s_audout,             //设置音频输出</div><div class="line">.vidioc_g_audout= vidioc_g_audout,             //获取音频输出</div><div class="line">.vidioc_enumaudout= vidioc_enumaudout,           //枚举视频输出端</div><div class="line"></div><div class="line">/* 制式操作 */</div><div class="line">.vidioc_querystd= vidioc_querystd,             //查询制式</div><div class="line">.vidioc_g_std= vidioc_g_std,                //获取制式</div><div class="line">.vidioc_s_std= vidioc_s_std,                //设置制式</div><div class="line">.vidioc_s_dv_timings= vidioc_s_dv_timings,         //设置DV时序</div><div class="line">.vidioc_g_dv_timings= vidioc_g_dv_timings,         //获取DV时序</div><div class="line">.vidioc_query_dv_timings= vidioc_query_dv_timings,     //查询DV时序</div><div class="line">.vidioc_enum_dv_timings= vidioc_enum_dv_timings,      //枚举DV时序</div><div class="line">.vidioc_dv_timings_cap= vidioc_dv_timings_cap,       //查询DV应用程序功能</div><div class="line">.vidioc_g_edid= vidioc_g_edid,               //获取EDID数据块</div><div class="line">.vidioc_s_edid= vidioc_s_edid,               //设置EDID数据块</div><div class="line"></div><div class="line">/* 调试操作 */</div><div class="line">.vidioc_log_status= vidioc_log_status,           //输出设备状态到内核日志</div><div class="line">.vidioc_subscribe_event= vidioc_subscribe_event,      //订阅V4L2事件</div><div class="line">.vidioc_unsubscribe_event= v4l2_event_unsubscribe,      //取消订阅V4L2事件</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><p>提取出11个必须的<code>ioctl</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">/* 表示它是一个摄像头设备 */</div><div class="line">.vidioc_querycap= vidioc_querycap, </div><div class="line"></div><div class="line">/* 摄像头数据格式的操作 */</div><div class="line">.vidioc_enum_fmt_vid_cap= vidioc_enum_fmt_vid,     //列举格式</div><div class="line">.vidioc_g_fmt_vid_cap= vidioc_g_fmt_vid_cap,    //获取格式</div><div class="line">.vidioc_try_fmt_vid_cap= vidioc_try_fmt_vid_cap,  //测试格式</div><div class="line">.vidioc_s_fmt_vid_cap= vidioc_s_fmt_vid_cap,    //设置格式</div><div class="line"></div><div class="line">/* 缓冲区操作 */</div><div class="line">.vidioc_reqbufs= vb2_ioctl_reqbufs,        //申请</div><div class="line">.vidioc_querybuf= vb2_ioctl_querybuf,       //查询</div><div class="line">.vidioc_qbuf= vb2_ioctl_qbuf,           //放入</div><div class="line">.vidioc_dqbuf= vb2_ioctl_dqbuf,          //取出</div><div class="line">.vidioc_streamon= vb2_ioctl_streamon,       //启动</div><div class="line">.vidioc_streamoff= vb2_ioctl_streamoff,      //停止</div></pre></td></tr></table></figure></p><h2 id="3-4-数据获取过程分析"><a href="#3-4-数据获取过程分析" class="headerlink" title="3.4 数据获取过程分析"></a>3.4 数据获取过程分析</h2><p><strong>1.请求分配缓冲区</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">app:ioctl(fd, VIDIOC_REQBUFS, xx)</div><div class="line">videobuf_reqbufs(vdev-&gt;queue, p-&gt;memory, &amp;p-&gt;count);//没分配真正buf</div></pre></td></tr></table></figure></p><p><strong>2.查询映射缓冲区</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">app:ioctl(fd, VIDIOC_QUERYBUF, xx)</div><div class="line">videobuf_querybuf //获得buf的数据格式、大小、每一行长度、高度</div><div class="line"></div><div class="line">v4l2_mmap</div><div class="line">vb2_fop_mmap</div><div class="line">videobuf_mmap_mapper</div><div class="line">__videobuf_mmap_mapper</div><div class="line">mem-&gt;vaddr = vmalloc_user(pages); //这里分配buf</div></pre></td></tr></table></figure></p><p><strong>3.把缓冲区放入队列</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">app:ioctl(fd, VIDIOC_QBUF, xx)</div><div class="line">videobuf_qbuf</div><div class="line">q-&gt;ops-&gt;buf_prepare(q, buf, field);      //调用驱动程序提供的函数做预处理</div><div class="line">list_add_tail(&amp;buf-&gt;stream, &amp;q-&gt;stream); //把缓冲区放入队列的尾部</div><div class="line">q-&gt;ops-&gt;buf_queue(q, buf);               //用驱动程序提供的&quot;入队列函数&quot;</div></pre></td></tr></table></figure></p><p><strong>4.启动摄像头 </strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">app:ioctl(fd, VIDIOC_STREAMON, xx)</div><div class="line">videobuf_streamon   </div><div class="line">q-&gt;streaming = 1;</div></pre></td></tr></table></figure></p><p><strong>5.用select查询是否有数据</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">v4l2_poll</div><div class="line">vdev-&gt;fops-&gt;poll();</div><div class="line">vivi_poll </div><div class="line">videobuf_poll_stream</div><div class="line">buf = list_entry();  //从队列的头部获得buf</div><div class="line">poll_wait();         //如果没有数据则休眠</div><div class="line"></div><div class="line">vivid_thread_vid_cap                 //内核进程唤醒</div><div class="line">vivid_thread_vid_cap_tick</div><div class="line">vivid_fillbuff //构造数据</div><div class="line">vb2_buffer_done  </div><div class="line">wake_up();   //唤醒进程</div></pre></td></tr></table></figure></p><p><strong>6.有数据后,从队列取出缓冲区</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">app:ioctl(fd, VIDIOC_DQBUF, xx)   //使用VIDIOC_DQBUF获取buf状态</div><div class="line">videobuf_dqbuf</div><div class="line">stream_next_buffer  //在队列里获得有数据的缓冲区</div><div class="line">list_del            //把它从队列中删掉</div><div class="line">videobuf_status     //把这个缓冲区的状态返回给APP</div></pre></td></tr></table></figure></p><p><strong>7.读取对应地址缓冲区</strong><br>应用程序根据VIDIOC_DQBUF所得到缓冲区状态，知道是哪一个缓冲区有数据,就去读对应的地址(该地址来自前面的mmap)    </p><p><strong>调试技巧:</strong></p><blockquote><p>1.得到xawtv进行了哪些系统调用:<br><code>sudo strace -o xawtv.log xawtv</code><br>2.在串口终端下，修改打印等级：<br><code>sudo echo &quot;8 4 1 7&quot; &gt;/proc/sys/kernel/printk</code><br>3.当无串口，即前面方法无效时，在SSH登陆时：<br><code>tail -f /var/log/kern.log &amp;</code><br>可实现内核打印增量显示。  </p></blockquote><h1 id="4-编写vivid"><a href="#4-编写vivid" class="headerlink" title="4.编写vivid"></a>4.编写vivid</h1><p>根据前面的分析，简单记录下虚拟视频驱动的编写流程：</p><blockquote><p>1.注册平台设备和驱动；<br>2.probe()函数：<br>　　a.分配<code>video_device</code>；<br>　　b.设置<code>video_device</code>，包括：<code>release</code>、<code>fops</code>、<code>ioctl_ops</code>、<code>v4l2_dev</code>；<br>　　c.注册设置<code>video_device</code>；<br>　　d.其它：定义/初始化自旋锁/定时器；<br>3.填充操作函数<code>v4l2_file_operations</code>:<br>　　a.<code>open()</code>：初始buf化队列和设置定时器；<br>　　b.<code>close()</code>:删除定时器和释放buf队列；<br>　　c.<code>mmap()</code>:调用<code>videobuf_mmap_mapper</code>开辟虚拟内存；<br>　　d.<code>poll()</code>:调用<code>videobuf_poll_stream</code>实现poll机制非阻塞访问；<br>4.填充操作函数<code>v4l2_ioctl_ops</code>：<br>　　前面介绍的11个必须ioctl，几乎都是调用内核提供的API；<br>5.填充操作函数<code>videobuf_queue_ops</code>：<br>　　对buf进行一些操作；<br>6.填充数据:<br>　　利用定时器，不断产生数据并唤醒进程，实现获取到图像采集数据；</p></blockquote><figure class="highlight c"><figcaption><span>[my_vivid.c]</span><a href="https://github.com/hceng/learn/blob/master/tiny4412/07_vivid/my_vivid/my_vivid.c" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/errno.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/sched.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/slab.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/vmalloc.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/font.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/mutex.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/platform_device.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/videodev2.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/v4l2-dv-timings.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;media/videobuf2-vmalloc.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;media/videobuf2-dma-contig.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;media/v4l2-dv-timings.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;media/v4l2-ioctl.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;media/v4l2-fh.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;media/v4l2-event.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;media/v4l2-device.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;media/videobuf-core.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;media/videobuf-vmalloc.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"fillbuf.c"</span></span></div><div class="line"></div><div class="line"><span class="comment">/* 队列操作a: 定义自旋锁、定时器、buf队列 */</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">spinlock_t</span> my_vivid_queue_slock;</div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> timer_list my_vivid_timer;</div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> videobuf_queue my_vivid_vb_vidqueue;</div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> list_head my_vivid_vb_local_queue;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">my_vivid_timer_function</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> data)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> videobuf_buffer *vb;</div><div class="line">    <span class="keyword">void</span> *vbuf;</div><div class="line">    <span class="keyword">struct</span> timeval ts;</div><div class="line"></div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    <span class="comment">/* 1. 构造数据: 从队列头部取出第1个videobuf, 填充数据 */</span></div><div class="line"></div><div class="line">    <span class="comment">/* 1.1 从本地队列取出第1个videobuf */</span></div><div class="line">    <span class="keyword">if</span> (list_empty(&amp;my_vivid_vb_local_queue))</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">goto</span> out;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    vb = list_entry(my_vivid_vb_local_queue.next,</div><div class="line">                    <span class="keyword">struct</span> videobuf_buffer, <span class="built_in">queue</span>);</div><div class="line"></div><div class="line">    <span class="comment">/* Nobody is waiting on this buffer, return */</span></div><div class="line">    <span class="keyword">if</span> (!waitqueue_active(&amp;vb-&gt;done))</div><div class="line">        <span class="keyword">goto</span> out;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/* 1.2 填充数据 */</span></div><div class="line">    vbuf = videobuf_to_vmalloc(vb);</div><div class="line">    <span class="comment">//memset(vbuf, 0xFF, vb-&gt;size);</span></div><div class="line"></div><div class="line">    my_vivid_fillbuff(vb);</div><div class="line"></div><div class="line">    vb-&gt;field_count++;</div><div class="line">    do_gettimeofday(&amp;ts);</div><div class="line">    vb-&gt;ts = ts;</div><div class="line">    vb-&gt;state = VIDEOBUF_DONE;</div><div class="line"></div><div class="line">    <span class="comment">/* 1.3 把videobuf从本地队列中删除 */</span></div><div class="line">    list_del(&amp;vb-&gt;<span class="built_in">queue</span>);</div><div class="line"></div><div class="line">    <span class="comment">/* 2. 唤醒进程: 唤醒videobuf-&gt;done上的进程 */</span></div><div class="line">    wake_up(&amp;vb-&gt;done);</div><div class="line"></div><div class="line">out:</div><div class="line">    <span class="comment">/* 3. 修改timer的超时时间 : 30fps, 1秒里有30帧数据</span></div><div class="line">     *    每1/30 秒产生一帧数据</div><div class="line">     */</div><div class="line">    mod_timer(&amp;my_vivid_timer, jiffies + HZ / <span class="number">30</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/* 参考documentations/video4linux/v4l2-framework.txt:</span></div><div class="line">       drivers\media\video\videobuf-core.c</div><div class="line"> ops-&gt;buf_setup   - calculates the size of the video buffers and avoid they to waste more than some maximum limit of RAM;</div><div class="line"> ops-&gt;buf_prepare - fills the video buffer structs and calls videobuf_iolock() to alloc and prepare mmaped memory;</div><div class="line"> ops-&gt;buf_queue   - advices the driver that another buffer were requested (by read() or by QBUF);</div><div class="line"> ops-&gt;buf_release - frees any buffer that were allocated.</div><div class="line"> */</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/* videobuf operations */</span></div><div class="line"><span class="comment">//APP调用ioctl VIDIOC_REQBUFS时会导致此函数被调用,它重新调整count和size</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">my_vivid_buffer_setup</span><span class="params">(<span class="keyword">struct</span> videobuf_queue *vq, <span class="keyword">unsigned</span> <span class="keyword">int</span> *count, <span class="keyword">unsigned</span> <span class="keyword">int</span> *size)</span></span></div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    *size = my_vivid_format.fmt.pix.sizeimage;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="number">0</span> == *count)</div><div class="line">        *count = <span class="number">32</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//APP调用ioctlVIDIOC_QBUF时导致此函数被调用,它会填充video_buffer结构体并调用videobuf_iolock来分配内存</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">my_vivid_buffer_prepare</span><span class="params">(<span class="keyword">struct</span> videobuf_queue *vq, <span class="keyword">struct</span> videobuf_buffer *vb,</span></span></div><div class="line">                                   <span class="keyword">enum</span> v4l2_field field)</div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    <span class="comment">/* 1. 设置videobuf */</span></div><div class="line">    vb-&gt;size         = my_vivid_format.fmt.pix.sizeimage;</div><div class="line">    vb-&gt;bytesperline = my_vivid_format.fmt.pix.bytesperline;</div><div class="line">    vb-&gt;width        = my_vivid_format.fmt.pix.width;</div><div class="line">    vb-&gt;height       = my_vivid_format.fmt.pix.height;</div><div class="line">    vb-&gt;field        = field;</div><div class="line"></div><div class="line">    <span class="comment">/* 2. 做些准备工作 */</span></div><div class="line">    my_vivid_precalculate_bars(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="comment">/* 3. 设置状态 */</span></div><div class="line">    vb-&gt;state = VIDEOBUF_PREPARED;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/* APP调用ioctl VIDIOC_QBUF时:</span></div><div class="line"> * 1. 先调用buf_prepare进行一些准备工作</div><div class="line"> * 2. 把buf放入stream队列</div><div class="line"> * 3. 调用buf_queue(起通知、记录作用)</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">my_vivid_buffer_queue</span><span class="params">(<span class="keyword">struct</span> videobuf_queue *vq, <span class="keyword">struct</span> videobuf_buffer *vb)</span></span></div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    vb-&gt;state = VIDEOBUF_QUEUED;</div><div class="line"></div><div class="line">    <span class="comment">/* 把videobuf放入本地一个队列尾部</span></div><div class="line">     * 定时器处理函数就可以从本地队列取出videobuf</div><div class="line">     */</div><div class="line">    list_add_tail(&amp;vb-&gt;<span class="built_in">queue</span>, &amp;my_vivid_vb_local_queue);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* APP不再使用队列时, 用它来释放内存 */</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">my_vivid_buffer_release</span><span class="params">(<span class="keyword">struct</span> videobuf_queue *vq,</span></span></div><div class="line">                                    <span class="keyword">struct</span> videobuf_buffer *vb)</div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    videobuf_vmalloc_free(vb);</div><div class="line"></div><div class="line">    vb-&gt;state = VIDEOBUF_NEEDS_INIT;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> videobuf_queue_ops my_vivid_video_qops =</div><div class="line">&#123;</div><div class="line">    .buf_setup      = my_vivid_buffer_setup, <span class="comment">/* 计算大小以免浪费 */</span></div><div class="line">    .buf_prepare    = my_vivid_buffer_prepare,</div><div class="line">    .buf_queue      = my_vivid_buffer_queue,</div><div class="line">    .buf_release    = my_vivid_buffer_release,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/* v4l2_file_operations */</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">my_vivid_open</span><span class="params">(<span class="keyword">struct</span> file *file)</span></span></div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    <span class="comment">//队列操作c:初始化</span></div><div class="line">    videobuf_queue_vmalloc_init(&amp;my_vivid_vb_vidqueue, &amp;my_vivid_video_qops,</div><div class="line">                                <span class="literal">NULL</span>, &amp;my_vivid_queue_slock, V4L2_BUF_TYPE_VIDEO_CAPTURE, V4L2_FIELD_INTERLACED,</div><div class="line">                                <span class="keyword">sizeof</span>(<span class="keyword">struct</span> videobuf_buffer), <span class="literal">NULL</span>, <span class="literal">NULL</span>); <span class="comment">/* 倒数第3个参数是buffer的头部大小 */</span></div><div class="line"></div><div class="line">    my_vivid_timer.expires = jiffies + <span class="number">1</span>;</div><div class="line">    add_timer(&amp;my_vivid_timer);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">my_vivid_close</span><span class="params">(<span class="keyword">struct</span> file *file)</span></span></div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    del_timer(&amp;my_vivid_timer);</div><div class="line">    videobuf_stop(&amp;my_vivid_vb_vidqueue);</div><div class="line">    videobuf_mmap_free(&amp;my_vivid_vb_vidqueue);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">my_vivid_mmap</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="keyword">struct</span> vm_area_struct *vma)</span></span></div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> videobuf_mmap_mapper(&amp;my_vivid_vb_vidqueue, vma);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">my_vivid_poll</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="keyword">struct</span> poll_table_struct *wait)</span></span></div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> videobuf_poll_stream(file, &amp;my_vivid_vb_vidqueue, wait);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/* v4l2_ioctl_ops */</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">my_vivid_vidioc_querycap</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="keyword">void</span>  *priv,</span></span></div><div class="line">                                    <span class="keyword">struct</span> v4l2_capability *cap)</div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    <span class="built_in">strcpy</span>(cap-&gt;driver, <span class="string">"my_vivid"</span>);</div><div class="line">    <span class="built_in">strcpy</span>(cap-&gt;card, <span class="string">"my_vivid"</span>);</div><div class="line">    cap-&gt;version = <span class="number">0x0001</span>;</div><div class="line"></div><div class="line">    cap-&gt;device_caps  = V4L2_CAP_VIDEO_CAPTURE | V4L2_CAP_STREAMING | V4L2_CAP_DEVICE_CAPS;</div><div class="line">    cap-&gt;capabilities =V4L2_CAP_VIDEO_CAPTURE | V4L2_CAP_STREAMING | V4L2_CAP_DEVICE_CAPS;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">my_vivid_vidioc_enum_fmt_vid_cap</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="keyword">void</span>  *priv,</span></span></div><div class="line">        <span class="keyword">struct</span> v4l2_fmtdesc *f)</div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (f-&gt;index &gt;= <span class="number">1</span>)</div><div class="line">        <span class="keyword">return</span> -EINVAL;</div><div class="line"></div><div class="line">    <span class="built_in">strcpy</span>(f-&gt;description, <span class="string">"4:2:2, packed, YUYV"</span>);</div><div class="line">    f-&gt;pixelformat = V4L2_PIX_FMT_YUYV;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">my_vivid_vidioc_g_fmt_vid_cap</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="keyword">void</span> *priv,</span></span></div><div class="line">        <span class="keyword">struct</span> v4l2_format *f)</div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    <span class="built_in">memcpy</span>(f, &amp;my_vivid_format, <span class="keyword">sizeof</span>(my_vivid_format));</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">my_vivid_vidioc_try_fmt_vid_cap</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="keyword">void</span> *priv,</span></span></div><div class="line">        <span class="keyword">struct</span> v4l2_format *f)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> maxw, maxh;</div><div class="line">    <span class="keyword">enum</span> v4l2_field field;</div><div class="line"></div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (f-&gt;fmt.pix.pixelformat != V4L2_PIX_FMT_YUYV)</div><div class="line">        <span class="keyword">return</span> -EINVAL;</div><div class="line"></div><div class="line">    field = f-&gt;fmt.pix.field;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (field == V4L2_FIELD_ANY)</div><div class="line">    &#123;</div><div class="line">        field = V4L2_FIELD_INTERLACED;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (V4L2_FIELD_INTERLACED != field)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> -EINVAL;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    maxw  = <span class="number">1024</span>;</div><div class="line">    maxh  = <span class="number">768</span>;</div><div class="line"></div><div class="line">    <span class="comment">/* 调整format的width, height,</span></div><div class="line">     * 计算bytesperline, sizeimage</div><div class="line">     */</div><div class="line">    v4l_bound_align_image(&amp;f-&gt;fmt.pix.width, <span class="number">48</span>, maxw, <span class="number">2</span>,</div><div class="line">                          &amp;f-&gt;fmt.pix.height, <span class="number">32</span>, maxh, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">    f-&gt;fmt.pix.bytesperline =</div><div class="line">        (f-&gt;fmt.pix.width * <span class="number">16</span>) &gt;&gt; <span class="number">3</span>;</div><div class="line">    f-&gt;fmt.pix.sizeimage =</div><div class="line">        f-&gt;fmt.pix.height * f-&gt;fmt.pix.bytesperline;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">my_vivid_vidioc_s_fmt_vid_cap</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="keyword">void</span> *priv,</span></span></div><div class="line">        <span class="keyword">struct</span> v4l2_format *f)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> ret;</div><div class="line"></div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    ret = my_vivid_vidioc_try_fmt_vid_cap(file, <span class="literal">NULL</span>, f);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line"></div><div class="line">    <span class="built_in">memcpy</span>(&amp;my_vivid_format, f, <span class="keyword">sizeof</span>(my_vivid_format));</div><div class="line"></div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">my_vivid_vidioc_reqbufs</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="keyword">void</span> *priv,</span></span></div><div class="line">                                   <span class="keyword">struct</span> v4l2_requestbuffers *p)</div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> (videobuf_reqbufs(&amp;my_vivid_vb_vidqueue, p));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">my_vivid_vidioc_querybuf</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="keyword">void</span> *priv, <span class="keyword">struct</span> v4l2_buffer *p)</span></span></div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> (videobuf_querybuf(&amp;my_vivid_vb_vidqueue, p));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">my_vivid_vidioc_qbuf</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="keyword">void</span> *priv, <span class="keyword">struct</span> v4l2_buffer *p)</span></span></div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> (videobuf_qbuf(&amp;my_vivid_vb_vidqueue, p));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">my_vivid_vidioc_dqbuf</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="keyword">void</span> *priv, <span class="keyword">struct</span> v4l2_buffer *p)</span></span></div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> (videobuf_dqbuf(&amp;my_vivid_vb_vidqueue, p, file-&gt;f_flags &amp; O_NONBLOCK));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">my_vivid_vidioc_streamon</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="keyword">void</span> *priv, <span class="keyword">enum</span> v4l2_buf_type i)</span></span></div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> videobuf_streamon(&amp;my_vivid_vb_vidqueue);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">my_vivid_vidioc_streamoff</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="keyword">void</span> *priv, <span class="keyword">enum</span> v4l2_buf_type i)</span></span></div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    videobuf_streamoff(&amp;my_vivid_vb_vidqueue);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">struct</span> v4l2_ioctl_ops my_vivid_ioctl_ops =</div><div class="line">&#123;</div><div class="line">    <span class="comment">// 表示它是一个摄像头设备</span></div><div class="line">    .vidioc_querycap          = my_vivid_vidioc_querycap,</div><div class="line"></div><div class="line">    <span class="comment">/* 用于列举、获得、测试、设置摄像头的数据的格式 */</span></div><div class="line">    .vidioc_enum_fmt_vid_cap  = my_vivid_vidioc_enum_fmt_vid_cap,</div><div class="line">    .vidioc_g_fmt_vid_cap     = my_vivid_vidioc_g_fmt_vid_cap,</div><div class="line">    .vidioc_try_fmt_vid_cap   = my_vivid_vidioc_try_fmt_vid_cap,</div><div class="line">    .vidioc_s_fmt_vid_cap     = my_vivid_vidioc_s_fmt_vid_cap,</div><div class="line"></div><div class="line">    <span class="comment">/* 缓冲区操作: 申请/查询/放入队列/取出队列 */</span></div><div class="line">    .vidioc_reqbufs       = my_vivid_vidioc_reqbufs,</div><div class="line">    .vidioc_querybuf      = my_vivid_vidioc_querybuf,</div><div class="line">    .vidioc_qbuf          = my_vivid_vidioc_qbuf,</div><div class="line">    .vidioc_dqbuf         = my_vivid_vidioc_dqbuf,</div><div class="line"></div><div class="line">    <span class="comment">// 启动/停止</span></div><div class="line">    .vidioc_streamon      = my_vivid_vidioc_streamon,</div><div class="line">    .vidioc_streamoff     = my_vivid_vidioc_streamoff,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">struct</span> v4l2_file_operations my_vivid_fops =</div><div class="line">&#123;</div><div class="line">    .owner    = THIS_MODULE,</div><div class="line">    .open           = my_vivid_open,</div><div class="line">    .release        = my_vivid_close,</div><div class="line">    .mmap           = my_vivid_mmap,</div><div class="line">    .unlocked_ioctl = video_ioctl2, <span class="comment">/* V4L2 ioctl handler */</span></div><div class="line">    .poll           = my_vivid_poll,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> video_device *my_vivid_dev;</div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> v4l2_device v4l2_dev;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">my_vivid_dev_release</span><span class="params">(<span class="keyword">struct</span> video_device *vdev)</span></span></div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">my_vivid_probe</span><span class="params">(<span class="keyword">struct</span> platform_device *pdev)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> ret;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    <span class="comment">/* 1.分配一个video_device结构体 */</span></div><div class="line">    my_vivid_dev = video_device_alloc();</div><div class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == my_vivid_dev)</div><div class="line">    &#123;</div><div class="line">        printk(<span class="string">"Failed to alloc video device (%d)\n"</span>, ret);</div><div class="line">        <span class="keyword">return</span> -ENOMEM;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/* 2.设置 */</span></div><div class="line">    my_vivid_dev-&gt;release   = my_vivid_dev_release;</div><div class="line">    my_vivid_dev-&gt;fops      = &amp;my_vivid_fops;</div><div class="line">    my_vivid_dev-&gt;ioctl_ops = &amp;my_vivid_ioctl_ops;</div><div class="line">    my_vivid_dev-&gt;v4l2_dev  = &amp;v4l2_dev;</div><div class="line"></div><div class="line">    <span class="comment">//队列操作b:初始化自旋锁</span></div><div class="line">    spin_lock_init(&amp;my_vivid_queue_slock);</div><div class="line"></div><div class="line">    <span class="comment">/* 3.注册 */</span></div><div class="line">    ret = video_register_device(my_vivid_dev, VFL_TYPE_GRABBER, <span class="number">-1</span>);</div><div class="line">    <span class="keyword">if</span> (ret)</div><div class="line">    &#123;</div><div class="line">        printk(<span class="string">"Failed to register as video device (%d)\n"</span>, ret);</div><div class="line">        <span class="keyword">goto</span> err_register_dev;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//用定时器产生数据并唤醒进程</span></div><div class="line">    init_timer(&amp;my_vivid_timer);</div><div class="line">    my_vivid_timer.function  = my_vivid_timer_function;</div><div class="line">    INIT_LIST_HEAD(&amp;my_vivid_vb_local_queue);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">err_register_dev:</div><div class="line">    video_device_release(my_vivid_dev);</div><div class="line">    <span class="keyword">return</span> -ENODEV;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">my_vivid_remove</span><span class="params">(<span class="keyword">struct</span> platform_device *pdev)</span></span></div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    v4l2_device_unregister(my_vivid_dev-&gt;v4l2_dev);</div><div class="line">    video_device_release(my_vivid_dev);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">my_vivid_pdev_release</span><span class="params">(<span class="keyword">struct</span> device *dev)</span></span></div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> platform_device my_vivid_pdev =</div><div class="line">&#123;</div><div class="line">    .name = <span class="string">"my_vivid"</span>,</div><div class="line">    .dev.release = my_vivid_pdev_release,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> platform_driver my_vivid_pdrv =</div><div class="line">&#123;</div><div class="line">    .probe= my_vivid_probe,</div><div class="line">    .remove= my_vivid_remove,</div><div class="line">    .driver= &#123;</div><div class="line">        .name= <span class="string">"my_vivid"</span>,</div><div class="line">    &#125;,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">my_vivid_init</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> ret;</div><div class="line"></div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    ret = platform_device_register(&amp;my_vivid_pdev);</div><div class="line">    <span class="keyword">if</span> (ret)</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line"></div><div class="line">    ret = platform_driver_register(&amp;my_vivid_pdrv);</div><div class="line">    <span class="keyword">if</span> (ret)</div><div class="line">        platform_device_unregister(&amp;my_vivid_pdev);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">my_vivid_exit</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    platform_driver_unregister(&amp;my_vivid_pdrv);</div><div class="line">    platform_device_unregister(&amp;my_vivid_pdev);</div><div class="line">&#125;</div><div class="line"></div><div class="line">module_init(my_vivid_init);</div><div class="line">module_exit(my_vivid_exit);</div><div class="line"></div><div class="line">MODULE_LICENSE(<span class="string">"GPL"</span>);</div><div class="line">MODULE_AUTHOR(<span class="string">"hceng &lt;huangcheng.job@foxmail.com&gt;"</span>);</div><div class="line">MODULE_DESCRIPTION(<span class="string">"A Virtual Video Test Code For Learn."</span>);</div><div class="line">MODULE_ALIAS(<span class="string">"My vivid"</span>);</div><div class="line">MODULE_VERSION(<span class="string">"V1.0"</span>);</div></pre></td></tr></table></figure><h1 id="5-测试效果"><a href="#5-测试效果" class="headerlink" title="5.测试效果"></a>5.测试效果</h1><p>重新编译驱动，加载新驱动：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo modprobe vivid     </div><div class="line">sudo rmmod vivid        </div><div class="line">sudo insmod my_vivid.ko</div></pre></td></tr></table></figure></p><p>实测还差两个驱动依赖：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo insmod /lib/modules/4.4.0-116-generic/kernel/drivers/media/v4l2-core/videobuf-core.ko  </div><div class="line">sudo insmod /lib/modules/4.4.0-116-generic/kernel/drivers/media/v4l2-core/videobuf-vmalloc.ko</div></pre></td></tr></table></figure></p><p>运行<code>xawtv</code>：<br><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180308/5.png" alt=""></p><p>参考资料：<br><a href="http://www.100ask.org/index.html" target="_blank" rel="external">韦东山第三期项目视频_摄像头</a></p><hr><p><div align="center"><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本文采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href="http://hceng.cn/" target="_blank" rel="external">hceng’s blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Linux摄像头驱动学习第一篇，对虚拟视频驱动Virtual Video Driver(vivid)进行测试、分析、编写。&lt;br&gt;
    
    </summary>
    
    
      <category term="Linux驱动" scheme="http://yoursite.com/tags/Linux%E9%A9%B1%E5%8A%A8/"/>
    
      <category term="摄像头" scheme="http://yoursite.com/tags/%E6%91%84%E5%83%8F%E5%A4%B4/"/>
    
  </entry>
  
  <entry>
    <title>博客一周年</title>
    <link href="http://yoursite.com/2018/03/01/%E5%8D%9A%E5%AE%A2%E4%B8%80%E5%91%A8%E5%B9%B4/"/>
    <id>http://yoursite.com/2018/03/01/博客一周年/</id>
    <published>2018-03-01T05:02:26.000Z</published>
    <updated>2018-11-04T09:20:34.388Z</updated>
    
    <content type="html"><![CDATA[<p>2017-2018，博客一周年数据统计。<br><a id="more"></a><br><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180301/1.PNG" alt=""></p><p><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180301/2.PNG" alt=""></p><p><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180301/3.PNG" alt=""></p><p><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180301/4.PNG" alt=""></p><p><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180301/5.PNG" alt=""></p><p><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180301/6.PNG" alt=""></p><hr><p><div align="center"><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本文采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href="http://hceng.cn/" target="_blank" rel="external">hceng’s blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2017-2018，博客一周年数据统计。&lt;br&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Linux电源管理</title>
    <link href="http://yoursite.com/2018/01/18/Linux%E7%94%B5%E6%BA%90%E7%AE%A1%E7%90%86/"/>
    <id>http://yoursite.com/2018/01/18/Linux电源管理/</id>
    <published>2018-01-18T06:32:20.000Z</published>
    <updated>2018-11-04T09:19:29.525Z</updated>
    
    <content type="html"><![CDATA[<p>探究Linux电源管理模型，并为Tiny4412的LCD驱动添加电源管理。<br><a id="more"></a><br>这是2018的第一篇博客，选了一个几乎没有接触过的角度作为开篇，希望2018年学习更多，记录更多。</p><h1 id="1-电源管理的两种模型"><a href="#1-电源管理的两种模型" class="headerlink" title="1.电源管理的两种模型"></a>1.电源管理的两种模型</h1><p>以往接触的Linux驱动，没遇到使用电池供电的情况，因此几乎没关注电源的管理。<br>然而实际中，不少使用电池供电的硬件平台，例如手机、POS机等，就需要对电源进行管理，比如在不使用设备的时候，休眠屏幕省电。</p><p>Linux电源管理模型有两种：<strong>系统睡眠模型suspend</strong>和<strong>Runtime电源管理模型</strong>。</p><h2 id="1-1系统睡眠模型Suspend"><a href="#1-1系统睡眠模型Suspend" class="headerlink" title="1.1系统睡眠模型Suspend"></a>1.1系统睡眠模型Suspend</h2><blockquote><p>On (on)　　　　　　　　　　　　　　　　　　S0 -  Working<br>Standby (standby）　　　　　　　　　　　　S1 -  CPU and RAM are powered but not executed<br>Suspend to RAM (mem)　　　　　　　　　　S3 -  RAM is powered and the running content is saved to RAM<br>Suspend to Disk, Hibernation (disk)　　　　S4 -  All content is saved to Disk and power down</p></blockquote><p>S3 aka STR(suspend to ram),挂起到内存，简称待机。计算机将目前的运行状态等数据存放在<strong>内存</strong>，关闭硬盘、外设等设备，进入等待状态。此时内存仍然需要电力维持其数据，但整机<strong>耗电很少</strong>。恢复时计算机从内存读出数据，回到挂起前的状态，<strong>恢复速度较快</strong>。对DDR的耗电情况进行优化是S3性能的关键，大多数手持设备都是用S3待机。</p><p>S4 aka STD(suspend to disk),挂起到硬盘，简称休眠。把运行状态等数据存放在<strong>硬盘</strong>上某个文件或者某个特定的区域，关闭硬盘、外设等设备，进入关机状态。此时计算机完全关闭，<strong>不耗电</strong>。恢复时计算机从休眠文件/分区中读出数据，回到休眠前的状态，<strong>恢复速度较慢</strong>。</p><p>系统休眠模型给我的感觉是以<strong>整机角度</strong>进行省电。<br>S3类似电脑的睡眠，在教长时间不使用电脑后，电脑黑屏，再次敲击键盘迅速显示桌面，原来的工作内容仍不变。<br>S4类似电脑的休眠，在长时间不使用电脑后，电脑黑屏，再次敲击键盘无反应，按下电源键，开机，原来的工作内容仍不变。</p><p>对于嵌入式设备，更多的是使用S3，将数据暂时放在内存里，以实现快速恢复，就像手机的电源键按下黑屏，再次按下迅速亮屏。</p><p>在Linux中，通过<code>cat /sys/power/state</code>可以得知当前设备支持的节能模式，一般情况有如下选项：</p><blockquote><ul><li>freeze:不涉及具体的Hardware或Driver，只是冻结所有的进程，包括用户空间进程及内核线程，能节省的能量较少，使用场景不多；</li><li>standby:前面的S1状态，CPU处于浅睡眠模式，主要针对CPU功耗；</li><li>mem:前面的S3状态，Suspend to RAM；</li><li>disk:前面的S4状态，Suspend to Disk；</li></ul></blockquote><p>需要设置以上模式，只需<code>echo mem &gt; /sys/power/state</code>即可。</p><h2 id="1-2-Runtime电源管理模型"><a href="#1-2-Runtime电源管理模型" class="headerlink" title="1.2 Runtime电源管理模型"></a>1.2 Runtime电源管理模型</h2><p>Runtime电源管理模型给我的感觉是以<strong>模块角度</strong>进行省电。<br>某种程度上是“高内聚和低耦合”的体现。<br>每个设备（包括CPU）都处理好自身的电源管理工作，尽量以最低的能耗完成交代的任务，尽量在不需要工作的时候进入低功耗状态，尽量不和其它模块有过多耦合。每个设备都是最节省的话，整个系统一定是最节省的。</p><h1 id="2-系统睡眠模型suspend"><a href="#2-系统睡眠模型suspend" class="headerlink" title="2. 系统睡眠模型suspend"></a>2. 系统睡眠模型suspend</h1><h2 id="2-1-Suspend流程分析"><a href="#2-1-Suspend流程分析" class="headerlink" title="2.1 Suspend流程分析"></a>2.1 Suspend流程分析</h2><p>suspend的流程还是挺复杂的，向<code>/sys/power/state</code>写入命令后再到唤醒，将进行以下流程：<br><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180118/1.jpg" alt=""></p><ul><li>对源码进行分析，其<strong>休眠过程</strong>如下：<br><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180118/2.png?v=1" alt=""><br>驱动程序里休眠相关的电源管理函数的调用过程:<code>prepare—&gt;suspend—&gt;suspend_late—&gt;suspend_noirq</code></li></ul><ul><li>对源码进行分析，其<strong>唤醒过程</strong>如下：<br><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180118/3.png" alt=""><br>驱动程序里唤醒相关的电源管理函数的调用过程:<code>resume_noirq—&gt;resume_early—&gt;resume-&gt;complete</code></li></ul><p>对于驱动程序，我们主要关心<code>Device PM</code>(针对每一个驱动)和少量<code>Platform dependent PM</code>(针对CPU芯片相关)的内容。</p><h2 id="2-2-使用Suspend功能"><a href="#2-2-使用Suspend功能" class="headerlink" title="2.2 使用Suspend功能"></a>2.2 使用Suspend功能</h2><p>首先将suspend功能加入内核：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Power management options  ---&gt;</div><div class="line">    [*] Suspend to RAM and standby</div></pre></td></tr></table></figure></p><p>这里默认是勾选上了的，就不管了。</p><p>进入Tiny4412内核，尝试休眠<code>echo mem &gt; /sys/power/state</code>，系统提示<strong><code>No wake-up sources!</code></strong>。<br><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180118/4.png" alt=""><br>可见，要进入休眠，必须要有唤醒源，没有唤醒源，休眠也没有意义。</p><h3 id="2-2-1-设置唤醒源"><a href="#2-2-1-设置唤醒源" class="headerlink" title="2.2.1 设置唤醒源"></a>2.2.1 设置唤醒源</h3><p>唤醒源最常见的就是按键中断，就如同手机进入锁屏状态下，按下电源键唤醒一样，因此先写一个按键驱动。</p><ul><li><p>原理图：<br><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180118/5.png" alt=""><br>底板上有四个按键，分别连在GPX3_2、GPX3_3、GPX3_4、GPX3_5，引脚状态常高，按键按下变低电平。</p></li><li><p><a href="ttps://github.com/hceng/learn/blob/master/tiny4412/04_power_management/suspend/exynos4412-tiny4412.dts" target="_blank" rel="external">设备树</a>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">button_interrupt: button_interrupt &#123;</div><div class="line">    compatible         = &quot;tiny4412,button_interrupt&quot;;</div><div class="line">    tiny4412,gpx3_2 = &lt;&amp;gpx3 2 GPIO_ACTIVE_HIGH&gt;;</div><div class="line">    tiny4412,gpx3_3 = &lt;&amp;gpx3 3 GPIO_ACTIVE_HIGH&gt;;</div><div class="line">    tiny4412,gpx3_4 = &lt;&amp;gpx3 4 GPIO_ACTIVE_HIGH&gt;;</div><div class="line">    tiny4412,gpx3_5 = &lt;&amp;gpx3 5 GPIO_ACTIVE_HIGH&gt;;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></li><li><p><a href="ttps://github.com/hceng/learn/blob/master/tiny4412/04_power_management/suspend/button_interrupt.c" target="_blank" rel="external">按键驱动</a>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//设置为中断唤醒源</div><div class="line">irq_set_irq_wake(irq, 1);</div></pre></td></tr></table></figure></li><li><p><a href="https://github.com/hceng/learn/blob/master/tiny4412/04_power_management/suspend/usb4604.c" target="_blank" rel="external">usb4604驱动</a>：<br>前面的<a href="https://hceng.cn/2017/10/31/Exynos4412%E2%80%94%E2%80%94%E7%BD%91%E5%8D%A1%E7%A7%BB%E6%A4%8D%E5%92%8CNFS%E5%90%AF%E5%8A%A8/#more" target="_blank" rel="external">Exynos4412——网卡移植和NFS启动</a>里面，移植USB4604驱动时，删除了电源管理的代码，实际测试中唤醒时USB设备会报错，添加上电源管理相关代码即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">#ifdef CONFIG_PM_SLEEP</div><div class="line">static int usb4604_i2c_suspend(struct device *dev)</div><div class="line">&#123;</div><div class="line">struct i2c_client *client = to_i2c_client(dev);</div><div class="line">struct usb4604 *hub = i2c_get_clientdata(client);</div><div class="line"></div><div class="line">usb4604_switch_mode(hub, USB4604_MODE_STANDBY);</div><div class="line"></div><div class="line">return 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line">static int usb4604_i2c_resume(struct device *dev)</div><div class="line">&#123;</div><div class="line">struct i2c_client *client = to_i2c_client(dev);</div><div class="line">struct usb4604 *hub = i2c_get_clientdata(client);</div><div class="line"></div><div class="line">usb4604_switch_mode(hub, hub-&gt;mode);</div><div class="line"></div><div class="line">return 0;</div><div class="line">&#125;</div><div class="line">#endif</div><div class="line"></div><div class="line">static SIMPLE_DEV_PM_OPS(usb4604_i2c_pm_ops, usb4604_i2c_suspend,</div><div class="line">usb4604_i2c_resume);</div></pre></td></tr></table></figure></li></ul><h3 id="2-2-2-休眠唤醒-未成功"><a href="#2-2-2-休眠唤醒-未成功" class="headerlink" title="2.2.2 休眠唤醒(未成功)"></a>2.2.2 休眠唤醒(未成功)</h3><p>加入中断源后，休眠过程不再提示<code>No wake-up sources!</code>，看样子休眠应该成功了。<br><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180118/6.png" alt=""><br>此时，按下按键，板子并未唤醒，琢磨了一阵，初步怀疑有以下原因：</p><ul><li>唤醒的时候，应该需要uboot配合，uboot读取某个寄存器来判断是正常启动还是唤醒；</li><li>Exynos4412的PMU特性没摸透，可能需要其它额外的操作；</li><li>Exynos4412启动时的BL1和BL2，可能也有影响；</li></ul><p>这里先卡住，继续后面。</p><h2 id="2-3-使驱动支持Suspend"><a href="#2-3-使驱动支持Suspend" class="headerlink" title="2.3 使驱动支持Suspend"></a>2.3 使驱动支持Suspend</h2><h3 id="2-3-1-通知Notifier"><a href="#2-3-1-通知Notifier" class="headerlink" title="2.3.1 通知Notifier"></a>2.3.1 通知Notifier</h3><p>前面的suspend流程分析里面，<br>在<strong>冻结APP之前</strong>,使用<code>pm_notifier_call_chain(PM_SUSPEND_PREPARE)</code>来通知驱动程序;<br>在<strong>重启APP之后</strong>,使用<code>pm_notifier_call_chain(PM_POST_SUSPEND)</code>来通知驱动程序;</p><p>因此，如果驱动程序有事情在上述时机要处理，可以使用<code>notifier</code>机制。<br>使用步骤：</p><p><strong>a.定义notifier_block结构体</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">static struct notifier_block lcd_pm_notif_block = &#123;</div><div class="line">.notifier_call = lcd_suspend_notifier,</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><p><strong>b.notifier操作函数</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">static int lcd_suspend_notifier(struct notifier_block *nb, unsigned long event, void *dummy)</div><div class="line">&#123;</div><div class="line">switch (event) &#123;</div><div class="line">case PM_SUSPEND_PREPARE:</div><div class="line">printk(&quot;lcd suspend notifiler test: PM_SUSPEND_PREPARE\n&quot;);</div><div class="line">return NOTIFY_OK;</div><div class="line">case PM_POST_SUSPEND:</div><div class="line">printk(&quot;lcd suspend notifiler test: PM_POST_SUSPEND\n&quot;);</div><div class="line">return NOTIFY_OK;</div><div class="line"></div><div class="line">default:</div><div class="line">return NOTIFY_DONE;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>c.注册notifier</strong><br>在驱动init()或probe()里注册：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ret = register_pm_notifier(&amp;lcd_pm_notif_block);</div><div class="line">   if(ret) &#123;</div><div class="line">       printk(&quot;failed to register pm notifier.\n&quot;);</div><div class="line">       return  -EINVAL;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p><p>在前面LCD驱动上修改<a href="https://github.com/hceng/learn/blob/master/tiny4412/04_power_management/suspend/lcd_drv.c" target="_blank" rel="external"><code>lcd_drv.c</code></a>，测试如下：<br><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180118/7.png" alt=""></p><h3 id="2-3-2-Suspend和Resume"><a href="#2-3-2-Suspend和Resume" class="headerlink" title="2.3.2 Suspend和Resume"></a>2.3.2 Suspend和Resume</h3><p>前面的<code>notifier</code>只是通知，在<strong>冻结APP之前</strong>和<strong>重启APP之后</strong>通知，<br>而电源管理应该刚好相反，是在<strong>冻结APP之后</strong>和<strong>重启APP之前</strong>对驱动的电源进行控制，<br>这就需要<code>suspend</code>和<code>resume</code>来实现。</p><ul><li><p>a.在<code>platform_driver</code>里的<code>driver</code>里添加<code>pm</code>结构体:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">static struct platform_driver lcd_driver =</div><div class="line">&#123;</div><div class="line">    .driver        = &#123;</div><div class="line">        .name           = &quot;lcd_s702&quot;,</div><div class="line">        .pm             = &amp;lcd_pm,</div><div class="line">        .of_match_table = of_match_ptr(lcd_dt_ids),</div><div class="line">    &#125;,</div><div class="line">    .probe         = lcd_probe,</div><div class="line">    .remove        = lcd_remove,</div><div class="line">&#125;;</div></pre></td></tr></table></figure></li><li><p>b.设置<code>pm</code>成员函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">static struct dev_pm_ops lcd_pm = &#123;</div><div class="line">.suspend = s702_lcd_suspend,</div><div class="line">.resume  = s702_lcd_resume,</div><div class="line">&#125;;</div></pre></td></tr></table></figure></li><li><p>c.编写成员函数:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">s702_lcd_suspend</span><span class="params">(<span class="keyword">struct</span> device *dev)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">//lcd休眠操作</span></div><div class="line">    <span class="comment">//Direct Off: ENVID and ENVID_F are set to "0" simultaneously.</span></div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> temp;</div><div class="line"></div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    temp = readl(lcd_regs_base + VIDCON0);</div><div class="line">    temp &amp;= ~(<span class="number">0x01</span> &lt;&lt; <span class="number">1</span> | <span class="number">0x01</span> &lt;&lt; <span class="number">0</span>);</div><div class="line">    writel(temp, lcd_regs_base + VIDCON0);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">s702_lcd_resume</span><span class="params">(<span class="keyword">struct</span> device *dev)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">//lcd唤醒操作</span></div><div class="line">    <span class="comment">//Display On: ENVID and ENVID_F are set to "1".</span></div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> temp;</div><div class="line"></div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    temp = readl(lcd_regs_base + VIDCON0);</div><div class="line">    writel(temp | (<span class="number">0x01</span> &lt;&lt; <span class="number">1</span>) | (<span class="number">0x01</span> &lt;&lt; <span class="number">0</span>), lcd_regs_base + VIDCON0);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><p>这里只是简单的关闭/打开显示，理论上的操作应该是：<br>休眠时先备份所有LCD相关寄存器，恢复时再恢复所有寄存器，以及其它可能操作，比如重新开启时钟等。</p><p>同理，因为LCD显示和backlight是分开的，因此需要在backlight里也进行类似操作。</p><h1 id="3-Runtime电源管理模型"><a href="#3-Runtime电源管理模型" class="headerlink" title="3.Runtime电源管理模型"></a>3.Runtime电源管理模型</h1><p>前面的suspend系统睡眠模型是将整个系统进行休眠，但如果需要在系统运行时，单独对某个模块进行休眠，就需要Runtime电源管理模型，这两个模型互相协作，才能最大的发挥电源管理的效果。</p><p>Runtime电源管理模型的原理比较简单，就是计数，<br>当该设备驱动被使用时就加1，放弃使用时就减1，<br>计数大于1时，就打开该设备的电源，等于0时就关闭电源。</p><p>Runtime PM相关的函数：<br>a. 使能/禁止 Runtime PM：<code>pm_runtime_enable</code> / <code>pm_runtime_disable</code>  (修改disable_depth变量)<br>b. 增加计数/减少计数：<code>pm_runtime_get_sync</code> / <code>pm_runtime_put_sync</code>   (修改usage_count变量)<br>c. 回调函数 暂停/恢复/空闲：<code>runtime_suspend</code> / <code>runtime_resume</code> / <code>runtime_idle</code></p><h2 id="3-1-Runtime流程分析"><a href="#3-1-Runtime流程分析" class="headerlink" title="3.1 Runtime流程分析"></a>3.1 Runtime流程分析</h2><ul><li><p>调用<code>pm_runtime_get_sync</code>去<strong>增加使用次数以及恢复</strong>的流程如下：<br><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180118/8.png" alt=""></p></li><li><p>调用<code>pm_runtime_put_sync</code>去<strong>减少使用次数以及暂停</strong>的流程如下：<br><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180118/9.png" alt=""></p></li></ul><p>前面的两个流程，只看到了<code>runtime_resume</code>和<code>runtime_idle</code>的调用，没有看到<code>runtime_suspend</code>，<br>实际上，如果设备不提供<code>runtime_idle</code>, 则最终会调用<code>runtime_suspend</code>。</p><h2 id="3-2-使用Runtime功能"><a href="#3-2-使用Runtime功能" class="headerlink" title="3.2 使用Runtime功能"></a>3.2 使用Runtime功能</h2><p>首先将Runtime功能加入内核，但本内核4.13.9里没找到相关选项，应该默认已经加入到内核里面了。</p><ul><li><p><strong>调用方式一</strong>：<br>驱动程序提供接口, APP来调用。<br>在驱动函数的<code>open()</code>、<code>close()</code>里，增加和减少引用计数。<br>APP调用驱动的时候就能相应的恢复、暂停设备。</p></li><li><p><strong>调用方式二</strong>：<br>直接操作应用层文件：<br>恢复：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo on &gt;  /sys/devices/.../power/control</div></pre></td></tr></table></figure></li></ul><p>流程：<code>control_store(drivers\base\power\sysfs.c) -&gt; pm_runtime_forbid -&gt; atomic_inc -&gt; rpm_resume</code></p><p>暂停：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo auto &gt;  /sys/devices/.../power/control</div></pre></td></tr></table></figure></p><p>流程：<code>control_store(drivers\base\power\sysfs.c) -&gt; pm_runtime_allow -&gt; atomic_dec_and_test -&gt; rpm_idle</code></p><h2 id="3-3-使驱动支持Runtime"><a href="#3-3-使驱动支持Runtime" class="headerlink" title="3.3 使驱动支持Runtime"></a>3.3 使驱动支持Runtime</h2><ul><li><p>a.在<code>platform_driver</code>里的<code>driver</code>里添加<code>pm</code>结构体:(和前面的一样，这里就无需操作)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">static struct platform_driver lcd_driver =</div><div class="line">&#123;</div><div class="line">    .driver        = &#123;</div><div class="line">        .name           = &quot;lcd_s702&quot;,</div><div class="line">        .pm             = &amp;lcd_pm,</div><div class="line">        .of_match_table = of_match_ptr(lcd_dt_ids),</div><div class="line">    &#125;,</div><div class="line">    .probe         = lcd_probe,</div><div class="line">    .remove        = lcd_remove,</div><div class="line">&#125;;</div></pre></td></tr></table></figure></li><li><p>b.设置<code>pm</code>成员函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">static struct dev_pm_ops lcd_pm =</div><div class="line">&#123;</div><div class="line">    .suspend = s702_lcd_suspend,</div><div class="line">    .resume  = s702_lcd_resume,</div><div class="line">    .runtime_suspend = s702_lcd_suspend,</div><div class="line">    .runtime_resume  = s702_lcd_resume,</div><div class="line">&#125;;</div></pre></td></tr></table></figure></li></ul><p>添加<code>runtime_suspend</code>和<code>runtime_resume</code>，runtime和suspend的暂停配置是一样的，直接使用前面的。</p><ul><li><p>c.编写成员函数:(和前面的一样，这里就无需操作)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">s702_lcd_suspend</span><span class="params">(<span class="keyword">struct</span> device *dev)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">//lcd休眠操作</span></div><div class="line">    <span class="comment">//Direct Off: ENVID and ENVID_F are set to "0" simultaneously.</span></div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> temp;</div><div class="line"></div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    temp = readl(lcd_regs_base + VIDCON0);</div><div class="line">    temp &amp;= ~(<span class="number">0x01</span> &lt;&lt; <span class="number">1</span> | <span class="number">0x01</span> &lt;&lt; <span class="number">0</span>);</div><div class="line">    writel(temp, lcd_regs_base + VIDCON0);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">s702_lcd_resume</span><span class="params">(<span class="keyword">struct</span> device *dev)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">//lcd唤醒操作</span></div><div class="line">    <span class="comment">//Display On: ENVID and ENVID_F are set to "1".</span></div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> temp;</div><div class="line"></div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    temp = readl(lcd_regs_base + VIDCON0);</div><div class="line">    writel(temp | (<span class="number">0x01</span> &lt;&lt; <span class="number">1</span>) | (<span class="number">0x01</span> &lt;&lt; <span class="number">0</span>), lcd_regs_base + VIDCON0);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>d.使能Runtime:<br>对于Runtime PM,默认状态下设备的状态是Suspended,<br>如果硬件上它是<strong>运行状态</strong>,需要调用<code>pm_runtime_set_active()</code>来修改它的状态,<br>然后调用<code>pm_runtime_enable()</code>来使能Runtime PM。</p></li></ul><p>在<code>probe()</code>函数的后面添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pm_runtime_set_active(&amp;pdev-&gt;dev);</div><div class="line">pm_runtime_enable(&amp;pdev-&gt;dev);</div></pre></td></tr></table></figure></p><p>反之，还要在<code>remove()</code>里禁止：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pm_runtime_disable(&amp;pdev-&gt;dev);</div></pre></td></tr></table></figure></p><ul><li><p>e.修改计数:<br>一般在<code>open()</code>和<code>release()</code>里面增加和减少引用计数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">s702_lcd_open</span><span class="params">(<span class="keyword">struct</span> fb_info *info, <span class="keyword">int</span> user)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> device *dev = info-&gt;dev;</div><div class="line">    <span class="keyword">int</span> ret;</div><div class="line"></div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    ret = pm_runtime_get_sync(dev);</div><div class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span> &amp;&amp; ret != -EACCES)</div><div class="line">    &#123;</div><div class="line">        pm_runtime_put_sync(dev);</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">s702_lcd_release</span><span class="params">(<span class="keyword">struct</span> fb_info *info, <span class="keyword">int</span> user)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> device *dev = info-&gt;dev;</div><div class="line"></div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    pm_runtime_put_sync(dev);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> fb_ops tiny4412_lcdfb_ops =</div><div class="line">&#123;</div><div class="line">    .owner              = THIS_MODULE,</div><div class="line">    .fb_setcolreg       = cfb_setcolreg, <span class="comment">//设置调色板，实现伪颜色表</span></div><div class="line">    .fb_fillrect        = cfb_fillrect,  <span class="comment">//填充矩形</span></div><div class="line">    .fb_copyarea        = cfb_copyarea,  <span class="comment">//数据复制</span></div><div class="line">    .fb_imageblit       = cfb_imageblit, <span class="comment">//图形填充</span></div><div class="line"></div><div class="line">    .fb_open            = s702_lcd_open,</div><div class="line">    .fb_release         = s702_lcd_release</div><div class="line">&#125;;</div></pre></td></tr></table></figure></li><li><p>f.优化——加入延时机制:<br>现在的程序基本完成，测试的时候，先加载backlight驱动<code>insmod backlight_drv.ko</code>，运行背光应用程序设置亮度<code>./app 200</code>；<br>然后加载LCD驱动<code>insmod lcd_drv.ko</code>，运行图片显示应用程序jpg_rgb显示图像<code>./jpg_rgb cq.jpg</code>，结果并没有显示图像，<br>手动的<code>echo on &gt; /sys/devices/platform/11c00000.lcd_s702/power/control</code>才正常显示图像。</p></li></ul><p>上述流程中，运行图片显示应用程序时，先<code>open()</code>了一次，引用计数加1，程序调用完又马上<code>close</code>，引用计数减1，导致看不到显示，<br>重新操作<code>/sys/devices/platform/11c00000.lcd_s702/power/control</code>就立即显示了图像。</p><p>对于正常的使用情景是，运行应用程序，立即图片显示，然后维持显示一段时间，如果有操作继续显示，没有的话再自己熄灭。<br>因此，想要实现上面的功能，还需要加入自动休眠。</p><p>在之前的<code>probe()</code>中加入<code>pm_runtime_use_autosuspend()</code>:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Runtime</span></div><div class="line">pm_runtime_use_autosuspend(&amp;pdev-&gt;dev);<span class="comment">//add autosleep</span></div><div class="line">pm_runtime_set_autosuspend_delay(&amp;pdev-&gt;dev, <span class="number">5000</span>);</div><div class="line"></div><div class="line">pm_runtime_set_active(&amp;pdev-&gt;dev);</div><div class="line">pm_runtime_enable(&amp;pdev-&gt;dev);</div></pre></td></tr></table></figure></p><p>同时，<code>release()</code>也要修改:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">s702_lcd_open</span><span class="params">(<span class="keyword">struct</span> fb_info *info, <span class="keyword">int</span> user)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> device *dev = info-&gt;dev;</div><div class="line">    <span class="keyword">int</span> ret;</div><div class="line"></div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    ret = pm_runtime_get_sync(dev);</div><div class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span> &amp;&amp; ret != -EACCES)</div><div class="line">    &#123;</div><div class="line">        pm_runtime_put_sync(dev);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">s702_lcd_release</span><span class="params">(<span class="keyword">struct</span> fb_info *info, <span class="keyword">int</span> user)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> device *dev = info-&gt;dev;</div><div class="line"></div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    <span class="comment">//pm_runtime_put_sync(dev);</span></div><div class="line">    pm_runtime_mark_last_busy(dev);</div><div class="line">    pm_runtime_put_sync_autosuspend(dev);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>此时，加载驱动后，运行应用程序，屏幕显示，5s后，屏幕自动熄灭，再次运行程序或者修改<code>control</code>来重新显示。</p><p>通过函数<code>pm_runtime_set_autosuspend_delay()</code>或修改<code>echo xx &gt;  /sys/devices/.../power/autosuspend_delay_ms</code>来修改自动休眠时间。</p><p>完整代码见<a href="https://github.com/hceng/learn/tree/master/tiny4412/04_power_management/runtime" target="_blank" rel="external">Github</a>。</p><h1 id="4-regulator系统"><a href="#4-regulator系统" class="headerlink" title="4.regulator系统"></a>4.regulator系统</h1><p>前面的两个电源管理模型偏“软”，regulator系统偏“硬”，<br>在复杂的单板中，有专门的电源管理芯片控制各个模块电源，regulator系统就是为这个电源芯片编写驱动，实现电源管理。</p><h2 id="4-1-regulator框架"><a href="#4-1-regulator框架" class="headerlink" title="4.1 regulator框架"></a>4.1 regulator框架</h2><p><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180118/10.png?v=1" alt=""></p><blockquote><p>①Regulator(稳定器):指可以自动维持恒定电压(voltage)或电流(current)的装置，一般指电源芯片。在嵌入式设备中，基本上每一种电压，都是经过regulator输出的；<br>②③Consumer(使用者):使用电源的装置，Regulator是给Consumer供电的；<br>④Machine(单板):使用软件语言(struct regulator_init_data)，静态的描述regulator在板级的物理现状，包含：<br>　　a.级联关系:Regulator A的输出是Regulator B的输入，Regulator A就是<strong>Supply regulator</strong>，B是<strong>Consumer regulator</strong>；<br>　　b.约束限制:Regulator Constraints，比如电压/电流最大值/最小值、允许的操作等；</p></blockquote><p>从设备驱动的角度看，regulator系统比较简单，<br>Machine提供Supply与Consumer的对应关系、单板相关的约束条件(device)；<br>Regulator提供电源芯片的控制函数，如使能/去能、设置电压/电流等(driver)；<br>Consumer调用Regulator相关函数控制电源的开关、调节(use)；<br>即一个描述关系,一个提供相关函数，一个调用相关函数。</p><h2 id="4-2-regulator流程"><a href="#4-2-regulator流程" class="headerlink" title="4.2 regulator流程"></a>4.2 regulator流程</h2><p><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/180118/11.png?v=1" alt=""></p><h2 id="4-3-regulator驱动"><a href="#4-3-regulator驱动" class="headerlink" title="4.3 regulator驱动"></a>4.3 regulator驱动</h2><p>regulator系统仍然是采用<strong><em>总线设备驱动模型</em></strong>。<br>device采用c文件或设备树的形式，提供硬件相关信息;<br>driver加载后，一但和device名字匹配，就调用<code>probe()</code>函数注册<code>register</code>，并绑定操作函数；</p><p>后面将使用两种实现regulator驱动。<br>这两种方式的核心都是一样的，<br><code>device</code>先提供Supply与Consumer的对应关系、单板相关的约束条件;<br><code>driver</code>提供电源芯片的控制函数，如使能/去能、设置电压/电流等。</p><h3 id="4-3-1-C文件方式"><a href="#4-3-1-C文件方式" class="headerlink" title="4.3.1 C文件方式"></a>4.3.1 C文件方式</h3><ul><li><p>device:<br>在一个单板C文件里，提供级联关系<code>regulator_consumer_supply</code>,约束条件<code>regulator_init_data</code>:</p><figure class="highlight c"><figcaption><span>[machine.c]</span><a href="https://github.com/hceng/learn/blob/master/tiny4412/04_power_management/regulator/use_machine/machine.c" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/err.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/platform_device.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/regulator/driver.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/mfd/core.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/regulator/machine.h&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> 1</span></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> regulator_consumer_supply tiny4412_regulator_supplies[] =</div><div class="line">&#123;</div><div class="line">    REGULATOR_SUPPLY(<span class="string">"VCC_LCD"</span>, <span class="string">"11c00000.lcd_s702"</span>),<span class="comment">//consumer的电源引脚名称;consumer的名字</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> regulator_consumer_supply tiny4412_regulator_supplies[] =</div><div class="line">&#123;</div><div class="line">    REGULATOR_SUPPLY(<span class="string">"VCC_LCD"</span>, <span class="string">"lcd_s702"</span>),</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> regulator_init_data tiny4412_regulator_init_data =</div><div class="line">&#123;</div><div class="line">    .constraints = &#123;</div><div class="line">        <span class="comment">//.name = "tiny4412_regulator",</span></div><div class="line">        .min_uV= <span class="number">1000000</span>,</div><div class="line">        .max_uV= <span class="number">1000000</span>,</div><div class="line">        .valid_modes_mask= REGULATOR_MODE_NORMAL,</div><div class="line">        .valid_ops_mask= REGULATOR_CHANGE_STATUS,</div><div class="line">        .boot_on = <span class="number">0</span>,</div><div class="line">        .always_on = <span class="number">0</span>,</div><div class="line">    &#125;,</div><div class="line">    .num_consumer_supplies= <span class="number">1</span>,</div><div class="line">    .consumer_supplies= tiny4412_regulator_supplies,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tiny4412_regulator_release</span><span class="params">(<span class="keyword">struct</span> device *dev)</span></span></div><div class="line">&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> platform_device tiny4412_regulator_dev =</div><div class="line">&#123;</div><div class="line">    .name         = <span class="string">"tiny4412_regulator"</span>,</div><div class="line">    .id       = <span class="number">-1</span>,</div><div class="line">    .dev = &#123;</div><div class="line">        .release       = tiny4412_regulator_release,</div><div class="line">        .platform_data = &amp;tiny4412_regulator_init_data,</div><div class="line">    &#125;,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">tiny4412_regulator_machine_init</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    platform_device_register(&amp;tiny4412_regulator_dev);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tiny4412_regulator_machine_exit</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    platform_device_unregister(&amp;tiny4412_regulator_dev);</div><div class="line">&#125;</div><div class="line"></div><div class="line">module_init(tiny4412_regulator_machine_init);</div><div class="line">module_exit(tiny4412_regulator_machine_exit);</div><div class="line"></div><div class="line">MODULE_LICENSE(<span class="string">"GPL"</span>);</div><div class="line">MODULE_AUTHOR(<span class="string">"hceng &lt;huangcheng.job@foxmail.com&gt;"</span>);</div><div class="line">MODULE_DESCRIPTION(<span class="string">"Tiny4412 machine driver."</span>);</div><div class="line">MODULE_ALIAS(<span class="string">"Exynos4412_machine"</span>);</div><div class="line">MODULE_VERSION(<span class="string">"V1.0"</span>);</div></pre></td></tr></table></figure></li><li><p>driver<br>提供操作函数并注册<code>regulator</code>:</p><figure class="highlight c"><figcaption><span>[regulator.c]</span><a href="https://github.com/hceng/learn/blob/master/tiny4412/04_power_management/regulator/use_machine/regulator.c" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/err.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/platform_device.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/regulator/driver.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/mfd/core.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/io.h&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">int</span> regulator_states = <span class="number">0</span>;</div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">tiny4412_regulator_enable</span><span class="params">(<span class="keyword">struct</span> regulator_dev *rdev)</span></span></div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    printk(<span class="string">"------LCD Power Open.------\n"</span>);</div><div class="line">    regulator_states = <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">tiny4412_regulator_disable</span><span class="params">(<span class="keyword">struct</span> regulator_dev *rdev)</span></span></div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    printk(<span class="string">"------LCD Power Close.------\n"</span>);</div><div class="line">    regulator_states = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">tiny4412_regulator_is_enabled</span><span class="params">(<span class="keyword">struct</span> regulator_dev *rdev)</span></span></div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    printk(<span class="string">"------LCD Power Test.------\n"</span>);</div><div class="line">    <span class="keyword">if</span> (regulator_states)</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> regulator_ops tiny4412_regulator_ops =</div><div class="line">&#123;</div><div class="line">    .enable= tiny4412_regulator_enable,</div><div class="line">    .disable= tiny4412_regulator_disable,</div><div class="line">    .is_enabled= tiny4412_regulator_is_enabled,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> regulator_desc tiny4412_regulator_desc =</div><div class="line">&#123;</div><div class="line">    .name= <span class="string">"tiny4412_regulator"</span>,</div><div class="line">    .ops= &amp;tiny4412_regulator_ops,</div><div class="line">    .type= REGULATOR_VOLTAGE,<span class="comment">//电压源</span></div><div class="line">    .id    = <span class="number">0</span>,</div><div class="line">    .owner= THIS_MODULE,</div><div class="line">    .n_voltages= <span class="number">1</span>,<span class="comment">//能提供的电压数量</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> regulator_dev *tiny4412_regulator_dev;</div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">tiny4412_regulator_probe</span><span class="params">(<span class="keyword">struct</span> platform_device *pdev)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> regulator_config config = &#123; &#125;;</div><div class="line">    config.dev = &amp;pdev-&gt;dev;</div><div class="line">    config.init_data = dev_get_platdata(&amp;pdev-&gt;dev);</div><div class="line"></div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    tiny4412_regulator_dev = devm_regulator_register(&amp;pdev-&gt;dev, &amp;tiny4412_regulator_desc, &amp;config);</div><div class="line">    <span class="keyword">if</span> (IS_ERR(tiny4412_regulator_dev))</div><div class="line">    &#123;</div><div class="line">        printk(<span class="string">"devm_regulator_register error!\n"</span>);</div><div class="line">        <span class="keyword">return</span> PTR_ERR(tiny4412_regulator_dev);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">tiny4412_regulator_remove</span><span class="params">(<span class="keyword">struct</span> platform_device *pdev)</span></span></div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    devm_regulator_unregister(&amp;pdev-&gt;dev, tiny4412_regulator_dev);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">struct</span> platform_driver tiny4412_regulator_drv =</div><div class="line">&#123;</div><div class="line">    .probe= tiny4412_regulator_probe,</div><div class="line">    .remove= tiny4412_regulator_remove,</div><div class="line">    .driver= &#123;</div><div class="line">        .name= <span class="string">"tiny4412_regulator"</span>,</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">tiny4412_regulator_init</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    platform_driver_register(&amp;tiny4412_regulator_drv);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tiny4412_regulator_exit</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    platform_driver_unregister(&amp;tiny4412_regulator_drv);</div><div class="line">&#125;</div><div class="line"></div><div class="line">module_init(tiny4412_regulator_init);</div><div class="line">module_exit(tiny4412_regulator_exit);</div><div class="line"></div><div class="line">MODULE_LICENSE(<span class="string">"GPL"</span>);</div><div class="line">MODULE_AUTHOR(<span class="string">"hceng &lt;huangcheng.job@foxmail.com&gt;"</span>);</div><div class="line">MODULE_DESCRIPTION(<span class="string">"Tiny4412 regulator driver."</span>);</div><div class="line">MODULE_ALIAS(<span class="string">"Exynos4412_regulator"</span>);</div><div class="line">MODULE_VERSION(<span class="string">"V1.0"</span>);</div></pre></td></tr></table></figure></li><li><p>lcd_drv<br>加载前面的<code>machine.ko</code>和<code>regulator.ko</code>，名字匹配后调用<code>probe()</code>注册<code>regulator</code>。<br>在LCD驱动中，若想使用regulator系统，需要先在LCD驱动的<code>probe()</code>根据名字获取对应<code>regulator</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//regulator</div><div class="line">tiny4412_regulator = regulator_get(&amp;pdev-&gt;dev, &quot;VCC_LCD&quot;);</div><div class="line">if (IS_ERR(tiny4412_regulator))</div><div class="line">&#123;</div><div class="line">    printk(&quot;regulator_get error!\n&quot;);</div><div class="line">    return -EIO;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><p>再在<code>suspend()</code>和<code>resume()</code>封面便调用<code>regulator_disable()</code>和<code>regulator_enable()</code>。</p><p>此时，如果使用 <em>系统睡眠模型</em> 或 <em>Runtime电源模型</em> 进行休眠操作，就会调用到regulator系统的操作函数，实现电源管理芯片的关闭。</p><p>使用完后，释放<code>regulator</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">static int lcd_remove(struct platform_device *pdev)</div><div class="line">&#123;</div><div class="line">    //Direct Off: ENVID and ENVID_F are set to &quot;0&quot; simultaneously.</div><div class="line">    unsigned int temp;</div><div class="line">    </div><div class="line">    temp = readl(lcd_regs_base + VIDCON0);</div><div class="line">    temp &amp;= ~(0x01 &lt;&lt; 1 | 0x01 &lt;&lt; 0);</div><div class="line">    writel(temp, lcd_regs_base + VIDCON0);</div><div class="line"></div><div class="line">    regulator_put(tiny4412_regulator);</div><div class="line"></div><div class="line">    pm_runtime_disable(&amp;pdev-&gt;dev);</div><div class="line"></div><div class="line">    unregister_framebuffer(tiny4412_lcd);</div><div class="line">    dma_free_writecombine(NULL, tiny4412_lcd-&gt;fix.smem_len, tiny4412_lcd-&gt;screen_base, tiny4412_lcd-&gt;fix.smem_start);</div><div class="line">    framebuffer_release(tiny4412_lcd);</div><div class="line"></div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="4-3-2-设备树方式"><a href="#4-3-2-设备树方式" class="headerlink" title="4.3.2 设备树方式"></a>4.3.2 设备树方式</h3><p>与前面的操作几乎一样，只不过是在dts实现<code>device</code>。</p><ul><li>dts<br>在<code>regulators</code>节点下添加新的<code>regulator</code>，设置<strong>约束条件</strong>：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">regulators &#123;</div><div class="line">   compatible = &quot;simple-bus&quot;;</div><div class="line">   #address-cells = &lt;1&gt;;</div><div class="line">   #size-cells = &lt;0&gt;;</div><div class="line"></div><div class="line">       mmc_reg: regulator@0&#123;</div><div class="line">compatible = &quot;regulator-fixed&quot;;</div><div class="line">reg = &lt;0&gt;;</div><div class="line">regulator-name = &quot;VMEM_VDD_2.8V&quot;;</div><div class="line">regulator-min-microvolt = &lt;2800000&gt;;</div><div class="line">regulator-max-microvolt = &lt;2800000&gt;;</div><div class="line">&#125;; </div><div class="line"></div><div class="line">       lcd_reg: regulator@1&#123;</div><div class="line">compatible = &quot;tiny4412,lcd_regulator&quot;;</div><div class="line">regulator-name = &quot;VCC_LCD&quot;;</div><div class="line">regulator-min-microvolt = &lt;1200000&gt;;</div><div class="line">regulator-max-microvolt = &lt;1200000&gt;;</div><div class="line">&#125;;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></li></ul><p>在lcd节点下，添加<strong>级联关系</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">lcd_s702@11C00000 &#123;</div><div class="line">    compatible = &quot;tiny4412, lcd_s702&quot;;</div><div class="line">    reg = &lt;0x11C00000  0x20c0 0x10010210 0x08 0x10023c80 0x04 0x1003c000 0x1000&gt;;</div><div class="line">    pinctrl-names = &quot;default&quot;;</div><div class="line">    pinctrl-0 = &lt;&amp;lcd_s702&gt;;</div><div class="line">    clocks = &lt;&amp;clock CLK_FIMD0 &amp;clock CLK_ACLK160&gt;;</div><div class="line">    clock-names = &quot;fimd0&quot;,&quot;aclk160&quot;;</div><div class="line">    vlcd-supply = &lt;&amp;lcd_reg&gt;;</div><div class="line">    status = &quot;okay&quot;;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><p>其中<code>vlcd-supply</code>与前面的<code>regulator</code>联系了起来。</p><ul><li><p>driver<br>提供操作函数及注册：</p><figure class="highlight c"><figcaption><span>[regulator.c]</span><a href="https://github.com/hceng/learn/blob/master/tiny4412/04_power_management/regulator/use_dts/regulator.c" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/err.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/platform_device.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/regulator/driver.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/mfd/core.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/io.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/of.h&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">int</span> regulator_states = <span class="number">0</span>;</div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">tiny4412_regulator_enable</span><span class="params">(<span class="keyword">struct</span> regulator_dev *rdev)</span></span></div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    printk(<span class="string">"------LCD Power Open.------\n"</span>);</div><div class="line">    regulator_states = <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">tiny4412_regulator_disable</span><span class="params">(<span class="keyword">struct</span> regulator_dev *rdev)</span></span></div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    printk(<span class="string">"------LCD Power Close.------\n"</span>);</div><div class="line">    regulator_states = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">tiny4412_regulator_is_enabled</span><span class="params">(<span class="keyword">struct</span> regulator_dev *rdev)</span></span></div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    printk(<span class="string">"------LCD Power Test.------\n"</span>);</div><div class="line">    <span class="keyword">if</span> (regulator_states)</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> regulator_ops tiny4412_regulator_ops =</div><div class="line">&#123;</div><div class="line">    .enable= tiny4412_regulator_enable,</div><div class="line">    .disable= tiny4412_regulator_disable,</div><div class="line">    .is_enabled= tiny4412_regulator_is_enabled,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> regulator_desc tiny4412_regulator_desc =</div><div class="line">&#123;</div><div class="line">    .name= <span class="string">"tiny4412_regulator_dev"</span>,</div><div class="line">    .ops= &amp;tiny4412_regulator_ops,</div><div class="line">    .type= REGULATOR_VOLTAGE,<span class="comment">//电压源</span></div><div class="line">    .id    = <span class="number">0</span>,</div><div class="line">    .owner= THIS_MODULE,</div><div class="line">    .n_voltages= <span class="number">1</span>,<span class="comment">//能提供的电压数量</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> regulator_dev *tiny4412_regulator_dev;</div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">tiny4412_regulator_probe</span><span class="params">(<span class="keyword">struct</span> platform_device *pdev)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> regulator_config config = &#123; &#125;;</div><div class="line">    config.dev = &amp;pdev-&gt;dev;</div><div class="line">    config.init_data = dev_get_platdata(&amp;pdev-&gt;dev);</div><div class="line"></div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    tiny4412_regulator_dev = devm_regulator_register(&amp;pdev-&gt;dev, &amp;tiny4412_regulator_desc, &amp;config);</div><div class="line">    <span class="keyword">if</span> (IS_ERR(tiny4412_regulator_dev))</div><div class="line">    &#123;</div><div class="line">        printk(<span class="string">"devm_regulator_register error!\n"</span>);</div><div class="line">        <span class="keyword">return</span> PTR_ERR(tiny4412_regulator_dev);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">tiny4412_regulator_remove</span><span class="params">(<span class="keyword">struct</span> platform_device *pdev)</span></span></div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    devm_regulator_unregister(&amp;pdev-&gt;dev, tiny4412_regulator_dev);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">struct</span> of_device_id regulators_of_match[] =</div><div class="line">&#123;</div><div class="line">    &#123; .compatible = <span class="string">"tiny4412,lcd_regulator"</span> &#125;,</div><div class="line">    &#123; &#125;,</div><div class="line">&#125;;</div><div class="line">MODULE_DEVICE_TABLE(of, regulators_of_match);</div><div class="line"></div><div class="line"><span class="keyword">struct</span> platform_driver tiny4412_regulator_drv =</div><div class="line">&#123;</div><div class="line">    .probe= tiny4412_regulator_probe,</div><div class="line">    .remove= tiny4412_regulator_remove,</div><div class="line">    .driver= &#123;</div><div class="line">        .name= <span class="string">"tiny4412_regulator_drv"</span>,</div><div class="line">        .of_match_table = of_match_ptr(regulators_of_match),</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">tiny4412_regulator_init</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    platform_driver_register(&amp;tiny4412_regulator_drv);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tiny4412_regulator_exit</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    platform_driver_unregister(&amp;tiny4412_regulator_drv);</div><div class="line">&#125;</div><div class="line"></div><div class="line">module_init(tiny4412_regulator_init);</div><div class="line">module_exit(tiny4412_regulator_exit);</div><div class="line"></div><div class="line">MODULE_LICENSE(<span class="string">"GPL"</span>);</div><div class="line">MODULE_AUTHOR(<span class="string">"hceng &lt;huangcheng.job@foxmail.com&gt;"</span>);</div><div class="line">MODULE_DESCRIPTION(<span class="string">"Tiny4412 regulator driver."</span>);</div><div class="line">MODULE_ALIAS(<span class="string">"Exynos4412_regulator"</span>);</div><div class="line">MODULE_VERSION(<span class="string">"V1.0"</span>);</div></pre></td></tr></table></figure></li><li><p>lcd_drv<br>和前面的使用完全一致。</p></li></ul><p>参考资料：<br><a href="http://www.100ask.org/" target="_blank" rel="external">韦东山第三期项目视频_电源管理</a><br><a href="http://www.wowotech.net/" target="_blank" rel="external">蜗窝科技</a></p><hr><p><div align="center"><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本文采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href="http://hceng.cn/" target="_blank" rel="external">hceng’s blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;探究Linux电源管理模型，并为Tiny4412的LCD驱动添加电源管理。&lt;br&gt;
    
    </summary>
    
    
      <category term="Linux驱动" scheme="http://yoursite.com/tags/Linux%E9%A9%B1%E5%8A%A8/"/>
    
      <category term="Exynos4412" scheme="http://yoursite.com/tags/Exynos4412/"/>
    
      <category term="电源管理" scheme="http://yoursite.com/tags/%E7%94%B5%E6%BA%90%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>嵌入式Linux网络编程——TCP/UDP</title>
    <link href="http://yoursite.com/2017/12/30/%E5%B5%8C%E5%85%A5%E5%BC%8FLinux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E2%80%94%E2%80%94TCP_UDP/"/>
    <id>http://yoursite.com/2017/12/30/嵌入式Linux网络编程——TCP_UDP/</id>
    <published>2017-12-30T01:55:13.000Z</published>
    <updated>2018-11-04T09:17:43.131Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录TCP/UDP网络编程的基础知识，采用TCP/UDP实现宿主机和目标机之间的网络通信。<br><a id="more"></a><br>回想去年校招那会，笔试题老是出现TCP/UDP相关的内容。<br>那时候的我，熟悉点硬件，勉强会点STM32，哪知道什么TCP/UDP……<br>渐渐的，TCP/UDP似乎就成了一个挥之不去的阴影。<br>赶在今年年底，简单的入下门，明年估计会用上。</p><h1 id="1-目标"><a href="#1-目标" class="headerlink" title="1.目标"></a>1.目标</h1><p>暂时想不出什么好的应用场景，<br>目前想到目标就是实现让两个设备通过网络传输数据，<br>比如开发板和Linux主机之间传数据，<br>以后就可以实现<strong>开发板通过网络上报数据</strong>或者<strong>主机通过网络控制开发板</strong>。</p><p>此外，暂时不想关心具体的网络模型，更注重于网络相关函数的直接使用。</p><h1 id="2-Linux网络编程基础"><a href="#2-Linux网络编程基础" class="headerlink" title="2.Linux网络编程基础"></a>2.Linux网络编程基础</h1><h2 id="2-1-嵌套字"><a href="#2-1-嵌套字" class="headerlink" title="2.1 嵌套字"></a>2.1 嵌套字</h2><p>多个TCP连接或者多个应用程序进程 可能需要同一个TCP端口传输数据。<br>为了区分不同应用程序进程和连接，许多计算机操作系统为应用程序与TCP/IP交互提供了称为<strong>嵌套字(Socket)</strong>的接口。<br>Linux中的网络编程正是通过Socket接口实现的，Socket是一种文件描述符。</p><p>常用的TCP/IP有以下三种类型的嵌套字：</p><ul><li>流式嵌套字（SOCK_STREAM）<br>用于提供面向连接的、可靠的数据传输服务，即使用TCP进行传输。</li><li>数据报嵌套字（SOCK_DGRAM）<br>用于提供无连接的服务，即使用UDP进行传输。</li><li>原始嵌套字（SOCK_RAW）<br>可以读写内核没有处理的IP数据报，而流式嵌套字只能读取TCP的数据，数据报嵌套字只能读取UDP的数据。</li></ul><p>因此，如果要访问其它协议发送的数据必须使用原始嵌套字，它允许对底层协议(如IP或ICMP)直接访问。</p><h2 id="2-2-端口"><a href="#2-2-端口" class="headerlink" title="2.2 端口"></a>2.2 端口</h2><p>TCP/IP协议中的端口，端口号的范围从0~65535。<br>一类是由互联网指派名字和号码公司ICANN负责分配给一些常用的应用程序固定使用的“周知的端口”，其值一般为0~1023。例如http的端口号是80，FTP为21，SSH为22，Telnet为23等。<br>还有一类是用户自己定义的，通常是大于1024的整型值。</p><h2 id="2-3-网络地址"><a href="#2-3-网络地址" class="headerlink" title="2.3 网络地址"></a>2.3 网络地址</h2><p>网络通信，归根到底还是进程间的通信(不同计算机上的进程间通信)。<br>在网络中，每一个节点(计算机或路由)都有一个网络地址，如192.168.1.4，也就是IP地址。<br>两个进程通信时，首先要确定各自所在的网络节点的网络地址。</p><p>但是，网络地址只能确定进程所在的计算机，而一台计算机上很可能同时运行着多个进程，所以仅凭网络地址还不能确定到底是和网络中的哪一个进程进行通信，因此套接口中还需要包括其他的信息，也就是端口号（PORT）。<br>在一台计算机中，一个端口号一次只能分配给一个进程，也就是说，在一台计算机中，端口号和进程之间是一一对应关系。</p><p>所以，<strong>使用端口号和网络地址的组合可以唯一的确定整个网络中的一个网络进程</strong>。</p><p>例如，如网络中某一台计算机的IP为192.168.1.4，操作系统分配给计算机中某一应用程序进程的端口号为1500，则此时<code>192.168.1.4 1500</code>就构成了一个套接口。</p><h3 id="2-3-1-网络地址的格式"><a href="#2-3-1-网络地址的格式" class="headerlink" title="2.3.1 网络地址的格式"></a>2.3.1 网络地址的格式</h3><p>在Socket程序设计中，<code>struct sockaddr</code>用于记录网络地址，其格式如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> sockaddr</div><div class="line">&#123;</div><div class="line">     <span class="keyword">unsigned</span> <span class="keyword">short</span> sa_family; <span class="comment">/*协议族，采用AF_XXX的形式，例如AF_INET(IPv4协议族)*/</span></div><div class="line">     <span class="keyword">char</span> sa_data[<span class="number">14</span>]; <span class="comment">/*14字节的协议地址，包含该socket的IP地址和端口号。*/</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure><br>但在实际编程中，并不针对<code>sockaddr</code>数据结构进行操作，而是用与其等价的<code>sockaddr_in</code>数据结构：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> sockaddr_in</div><div class="line">&#123;</div><div class="line">     <span class="keyword">short</span> <span class="keyword">int</span> sa_family; <span class="comment">/*地址族*/</span></div><div class="line">     <span class="keyword">unsigned</span> <span class="keyword">short</span> <span class="keyword">int</span> sin_port; <span class="comment">/*端口号*/</span></div><div class="line">     <span class="keyword">struct</span> in_addr sin_addr; <span class="comment">/*IP地址*/</span></div><div class="line">     <span class="keyword">unsigned</span> <span class="keyword">char</span> sin_zero[<span class="number">8</span>]; <span class="comment">/*填充0 以保持与struct sockaddr同样大小*/</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><h3 id="2-3-2-网络地址的转换"><a href="#2-3-2-网络地址的转换" class="headerlink" title="2.3.2 网络地址的转换"></a>2.3.2 网络地址的转换</h3><p>IP地址通常用数字加点(如192.168.1.4)表示，而在<code>struct in_addr</code>中使用的式32位整数表示。因此，Linux提供如下函数进行两者之间的转换：</p><ul><li><p>inet_aton()函数：</p><blockquote><p><strong>所需要头文件</strong>：<br><code>#include &lt;sys/socket.h&gt;</code><br><code>#include &lt;netinet/in.h&gt;</code><br><code>#include &lt;arpa/inet.h&gt;</code><br><strong>函数格式</strong>：<br><code>int inet_aton(const char *cp, struct in_addr *inp);</code><br><strong>函数功能</strong>：<br>将a.b.c.d字符串形式的IP地址转换成32位网络序号IP地址；<br>*cp:存放字符串形式的IP地址的指针<br>*inp:存放32位的网络序号IP地址<br><strong>返回值</strong>：<br>转换成功，返回非0，否则返回0；</p></blockquote></li><li><p>inet_ntoa()函数：客户机端:</p><blockquote><p><strong>所需要头文件</strong>：<br><code>#include &lt;sys/socket.h&gt;</code><br><code>#include &lt;netinet/in.h&gt;</code><br><code>#include &lt;arpa/inet.h&gt;</code><br><strong>函数格式</strong>：<br><code>char *inet_ntoa(struct in_addr in);</code><br><strong>函数功能</strong>：<br>将32位网络序号IP地址转换成a.b.c.d字符串形式的IP地址；<br>in：Internet主机地址的结构<br><strong>返回值</strong>：<br>转换成功，返回一个字符指针，否则返回NULL；</p></blockquote></li></ul><h2 id="2-4-字节序"><a href="#2-4-字节序" class="headerlink" title="2.4 字节序"></a>2.4 字节序</h2><p>不同的CPU采用对变量的字节存储顺序可能不同。<br>常用的X86结构是小端模式，很多的ARM，DSP都为小端模式，即内存的低地址存储数据的低字节，高地址存储数据的高字节。<br>而KEIL C51则为大端模式，内存的高地址存储数据的低字节，低地址存储数据高字节。</p><p>对于网络传输来说，数据顺序必须是一致的，网络字节顺序采用大端字节序方式。<br>下面是四个常用的转换函数：</p><p>主机转网络：</p><ul><li><p>htons()函数：</p><blockquote><p><strong>所需要头文件</strong>：<br><code>#include &lt;netinet/in.h&gt;</code><br><strong>函数格式</strong>：<br><code>unsigned short int htons(unsigned short int hostshort)</code><br><strong>函数功能</strong>：<br>将参数指定的16位主机(host)字符顺序转换成网络(net)字符顺序；<br>hostshort：待转换的16位主机字符顺序数<br><strong>返回值</strong>：<br>返回对应的网络字符顺序数；</p></blockquote></li><li><p>htonl()函数：</p><blockquote><p><strong>所需要头文件</strong>：<br><code>#include &lt;netinet/in.h&gt;</code><br><strong>函数格式</strong>：<br><code>unsigned long int htons(unsigned long int hostlong)</code><br><strong>函数功能</strong>：<br>将参数指定的32位主机(host)字符顺序转换成网络(net)字符顺序；<br>hostlong：待转换的32位主机字符顺序数<br><strong>返回值</strong>：<br>返回对应的网络字符顺序数；</p></blockquote></li></ul><hr><p>网络转主机：</p><ul><li><p>ntohs()函数：</p><blockquote><p><strong>所需要头文件</strong>：<br><code>#include &lt;netinet/in.h&gt;</code><br><strong>函数格式</strong>：<br><code>unsigned short int ntohs(unsigned short int netshort)</code><br><strong>函数功能</strong>：<br>将参数指定的16位网络(net)字符顺序转换成主机(host)字符顺序；<br>netshort：待转换的16位网络字符顺序数<br><strong>返回值</strong>：<br>返回对应的主机字符顺序数；</p></blockquote></li><li><p>ntohl()函数：</p><blockquote><p><strong>所需要头文件</strong>：<br><code>#include &lt;netinet/in.h&gt;</code><br><strong>函数格式</strong>：<br><code>unsigned long int ntohl(unsigned long int netlong)</code><br><strong>函数功能</strong>：<br>将参数指定的32位网络(net)字符顺序转换成主机(host)字符顺序；<br>netshort：待转换的32位网络字符顺序数<br><strong>返回值</strong>：<br>返回对应的主机字符顺序数；</p></blockquote></li></ul><h1 id="3-TCP"><a href="#3-TCP" class="headerlink" title="3.TCP"></a>3.TCP</h1><p>TCP有专门的传递保证机制，收到数据时会自动发送确认消息，发送方收到确认消息后才会继续发送消息，否则继续等待。<br>这样的好处是传输的数据是<strong>可靠</strong>的，此外它是<strong>有连接</strong>的传输，大多数网络传输都是用的TCP。</p><h2 id="3-1-TCP流程图"><a href="#3-1-TCP流程图" class="headerlink" title="3.1 TCP流程图"></a>3.1 TCP流程图</h2><p><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/171230/1.jpg" alt=""></p><h2 id="3-2-TCP步骤分析"><a href="#3-2-TCP步骤分析" class="headerlink" title="3.2 TCP步骤分析"></a>3.2 TCP步骤分析</h2><p>程序分为服务器端和客户机端，先从服务器端开始分析。</p><ul><li><strong>服务器端:</strong><br><strong>a. 创建socket</strong><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">sock_fd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);<span class="comment">//AF_INET:IPV4;SOCK_STREAM:TCP</span></div><div class="line"><span class="keyword">if</span> (<span class="number">-1</span> == sock_fd)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"socket error:%s\n\a"</span>, strerror(errno));</div><div class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><blockquote><p><strong>所需要头文件</strong>：<br><code>#include &lt;sys/types.h&gt;</code><br><code>#include &lt;sys/socket.h&gt;</code><br><strong>函数格式</strong>：<br><code>int socket(int domain, int type, int protocol);</code><br><strong>函数功能</strong>：<br>创建一个套接字；<br>domain:协议域(族)，<strong>决定了套接字的地址类型</strong>，例如AF_INET决定了要用IPv4地址(32位)与端口号(16位)的组合。常见的协议族有：<strong>AF_INET</strong>、AF_INET6、AF_LOCAL(或称AF_UNIX)、AF_ROUTE等；<br>type：<strong>指定套接字类型</strong>，<strong>SOCK_STREAM</strong>(TCP)、<strong>SOCK_DGRAM</strong>(UDP)、SOCK_RAW<br>protocol:指定socket所使用的传输协议编号，通常为0<br><strong>返回值</strong>：<br>若成功，返回一个套接字描述符，否则返回-1；</p></blockquote><p>Socket就是一种文件描述符，和普通的打开文件一样，需要检测其返回结果。</p><p><strong>b. 设置socket</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">memset</span>(&amp;server_addr, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> sockaddr_in));<span class="comment">//clear</span></div><div class="line">server_addr.sin_family = AF_INET;</div><div class="line">server_addr.sin_addr.s_addr = htonl(INADDR_ANY);<span class="comment">//INADDR_ANY:This machine all IP</span></div><div class="line">server_addr.sin_port = htons(PORT_NUMBER);</div></pre></td></tr></table></figure><br>设置何种协议族，设置本机IP和端口，也就有了唯一性。</p><p><strong>c. 绑定socket</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">ret = bind(sock_fd, (<span class="keyword">struct</span> sockaddr *)(&amp;server_addr), <span class="keyword">sizeof</span>(<span class="keyword">struct</span> sockaddr));</div><div class="line"><span class="keyword">if</span>(<span class="number">-1</span> == ret)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"bind error:%s\n\a"</span>, strerror(errno));</div><div class="line">    close(sock_fd);</div><div class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><blockquote><p><strong>所需要头文件</strong>：<br><code>#include &lt;sys/types.h&gt;</code><br><code>#include &lt;sys/socket.h&gt;</code><br><strong>函数格式</strong>：<br><code>int bind(int sockfd, struct sockaddr *addr, int addrlen);</code><br><strong>函数功能</strong>：<br>把套接字绑定到本地计算机的某一个端口上；<br>sockfd:待绑定的套接字描述符<br>addr：一个struct sockaddr *指针，指定要绑定给sockfd的协议地址。内容结构由前面的协议族决定。<br>addrlen:地址的长度<br><strong>返回值</strong>：<br>若成功，返回0，否则返回-1，错误信息存在errno中；</p></blockquote><p><strong>d. 开始监听</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">ret = listen(sock_fd, BACKLOG);</div><div class="line"><span class="keyword">if</span> (<span class="number">-1</span> == ret)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"listen error:%s\n\a"</span>, strerror(errno));</div><div class="line">    close(sock_fd);</div><div class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><blockquote><p><strong>所需要头文件</strong>：<br><code>#include &lt;sys/types.h&gt;</code><br><code>#include &lt;sys/socket.h&gt;</code><br><strong>函数格式</strong>：<br><code>int listen(int sockfd, int backlog);</code><br><strong>函数功能</strong>：<br>使服务器的这个端口和IP处于监听状态，等待网络中某一客户机的连接请求，最大连接数量为backlog≤128；<br>sockfd:待监听的套接字描述符<br>backlog：最大可监听和连接的客户端数量<br><strong>返回值</strong>：<br>若成功，返回0，否则返回-1；</p></blockquote><p><strong>e. 阻塞，等待连接</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">addr_len = <span class="keyword">sizeof</span>(<span class="keyword">struct</span> sockaddr);</div><div class="line">new_fd = accept(sock_fd, (<span class="keyword">struct</span> sockaddr *)&amp;client_addr, &amp;addr_len);</div><div class="line"><span class="keyword">if</span> (<span class="number">-1</span> == new_fd)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"accept error:%s\n\a"</span>, strerror(errno));</div><div class="line">    close(sock_fd);</div><div class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>       </p><blockquote><p><strong>所需要头文件</strong>：<br><code>#include &lt;sys/types.h&gt;</code><br><code>#include &lt;sys/socket.h&gt;</code><br><strong>函数格式</strong>：<br><code>int accept(int sockfd, struct sockaddr *addr, int *addrlen);</code><br><strong>函数功能</strong>：<br>接受连接请求，建立起与客户机之间的通信连接。服务器处于监听状态时，如果某时刻获得客户机的连接请求，此时并不是立即处理这个请求，而是将这个请求放在等待队列中，当系统空闲时再处理客户机的连接请求；<br>当accept函数接受一个连接时，会返回一个新的socket标识符，以后的数据传输和读取就要通过这个新的socket编号来处理，原来参数中的socket也可以继续使用，继续监听其它客户机的连接请求；<br>accept连接成功时，参数addr所指的结构体会填入所连接机器的地址数据；<br>sockfd:待监听的套接字描述符<br>addr:指向struct sockaddr的指针，用于返回客户端的协议地址<br>addrlen:协议地址的长度<br><strong>返回值</strong>：<br>若成功，返回一个由内核自动生成的一个全新描述字，代表与返回客户的TCP连接，否则返回-1，错误信息存在errno中；</p></blockquote><p><strong>f. 接收数据</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">recv_len = recv(new_fd, recv_buf, <span class="number">999</span>, <span class="number">0</span>);</div><div class="line"><span class="keyword">if</span> (recv_len &lt;= <span class="number">0</span>)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"recv error:%s\n\a"</span>, strerror(errno))；</div><div class="line">    close(new_fd);</div><div class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line">    recv_buf[recv_len] = <span class="string">'\0'</span>;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Get msg from client%d: %s\n"</span>, client_num, recv_buf);</div><div class="line">&#125;</div></pre></td></tr></table></figure>   </p><blockquote><p><strong>所需要头文件</strong>：<br><code>#include &lt;sys/types.h&gt;</code><br><code>#include &lt;sys/socket.h&gt;</code><br><strong>函数格式</strong>：<br><code>int recv(int sockfd, void *buf, size_t len, int flags);</code><br><strong>函数功能</strong>：<br>用新的套接字来接收远端主机传来的数据，并把数据存到由参数buf指向的内存空间；<br>sockfd:sockfd为前面accept的返回值，即new_fd，也就是新的套接字<br>buf:指明一个缓冲区<br>len:指明缓冲区的长度<br>flags:通常为0<br><strong>返回值</strong>：<br>若成功，返回接收到的字节数，另一端已关闭则返回0，否则返回-1，错误信息存在errno中；</p></blockquote><p><strong>g. 关闭socket</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">close(sock_fd);</div><div class="line"><span class="built_in">exit</span>(<span class="number">0</span>); </div></pre></td></tr></table></figure>   </p><p>为了应对多个连接，并保证它们之间相互独立，实际编程中往往还要加入多进程fork()。<br>让子进程接收数据，父进程继续监听新的连接。</p><ul><li><strong>客户机端:</strong></li></ul><p><strong>a. 创建socket</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">sock_fd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);<span class="comment">//AF_INET:IPV4;SOCK_STREAM:TCP</span></div><div class="line"><span class="keyword">if</span> (<span class="number">-1</span> == sock_fd)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"socket error:%s\n\a"</span>, strerror(errno));</div><div class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>b. 设置socket</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">memset</span>(&amp;server_addr, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> sockaddr_in));<span class="comment">//clear</span></div><div class="line">server_addr.sin_family = AF_INET;</div><div class="line">server_addr.sin_port = htons(PORT_NUMBER);</div></pre></td></tr></table></figure><br>其中注意的是，这里设置的socket内容是指 希望连接的服务器IP和端口号信息，IP地址来自用户的输入，并转换格式得到。因此，这里的设置和服务器的设置，要保持内容上的一致。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">ret = inet_aton(argv[<span class="number">1</span>], &amp;server_addr.sin_addr);</div><div class="line"><span class="keyword">if</span>(<span class="number">0</span> == ret)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"server_ip error.\n"</span>);</div><div class="line">    close(sock_fd);</div><div class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>c. 连接</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">ret = connect(sock_fd, (<span class="keyword">const</span> <span class="keyword">struct</span> sockaddr *)&amp;server_addr, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> sockaddr));</div><div class="line"><span class="keyword">if</span> (<span class="number">-1</span> == ret)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"connect error:%s\n\a"</span>, strerror(errno));</div><div class="line">    close(sock_fd);</div><div class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><blockquote><p><strong>所需要头文件</strong>：<br><code>#include &lt;sys/types.h&gt;</code><br><code>#include &lt;sys/socket.h&gt;</code><br><strong>函数格式</strong>：<br><code>int connect (int sockfd, struct sockaddr *serv_addr, int addrlen);</code><br><strong>函数功能</strong>：<br>用来请求连接远程服务器，将参数sockfd的socket连至参数serv_addr所指定的服务器IP和端口号上去；<br>sockfd:客户端的socket套接字<br>serv_addr:一个struct sockaddr类型的结构体指针变量，存储着远程服务器的IP与端口号信息<br>addrlen:结构体变量的长度<br><strong>返回值</strong>：<br>若成功，返回0，否则返回-1，错误信息存在errno中；</p></blockquote><p><strong>d. 发送</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">send_buf = send(sock_fd, send_buf, <span class="built_in">strlen</span>(send_buf), <span class="number">0</span>);</div><div class="line"><span class="keyword">if</span> (send_buf &lt;= <span class="number">0</span>)</div><div class="line">&#123;</div><div class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"send error:%s\n\a"</span>, strerror(errno));</div><div class="line">close(sock_fd);</div><div class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><blockquote><p><strong>所需要头文件</strong>：<br><code>#include &lt;sys/types.h&gt;</code><br><code>#include &lt;sys/socket.h&gt;</code><br><strong>函数格式</strong>：<br><code>int send(int sockfd, const void *buf, int len, int flags);</code><br><strong>函数功能</strong>：<br>用来发送数据给指定的远端主机；<br>sockfd:客户端的socket套接字<br>buf:指明一个缓冲区<br>len:指明缓冲区的长度<br>flags:通常为0<br><strong>返回值</strong>：<br>若成功，返回发送的字节数，否则返回-1，错误信息存在errno中</p></blockquote><p><strong>d. 关闭socket</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">close(sock_fd);</div><div class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</div></pre></td></tr></table></figure></p><h2 id="3-3-TCP完整代码"><a href="#3-3-TCP完整代码" class="headerlink" title="3.3 TCP完整代码"></a>3.3 TCP完整代码</h2><figure class="highlight c"><figcaption><span>[tcp_server.c]</span><a href="https://github.com/hceng/learn/blob/master/tcp_udp/tcp/tcp_server.c" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">* tcp_server.c</div><div class="line"># Copyright (C) 2017 hceng, &lt;huangcheng.job@foxmail.com&gt;</div><div class="line"># Licensed under terms of GPLv2</div><div class="line">#</div><div class="line"># This program is used for TCP / UDP learning.</div><div class="line"># https://hceng.cn/</div><div class="line">*/</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span>      </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PORT_NUMBER 8888</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BACKLOG     10</span></div><div class="line"></div><div class="line"><span class="comment">/* socket-&gt;bind-&gt;listen-&gt;accept-&gt;send/recv-&gt;close*/</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> sock_fd, new_fd;</div><div class="line">    <span class="keyword">struct</span> sockaddr_in server_addr;</div><div class="line">    <span class="keyword">struct</span> sockaddr_in client_addr;</div><div class="line">    <span class="keyword">int</span> ret;</div><div class="line">    <span class="keyword">int</span> addr_len;</div><div class="line">    <span class="keyword">int</span> recv_len;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> recv_buf[<span class="number">1000</span>];</div><div class="line">    <span class="keyword">int</span> client_num = <span class="number">-1</span>;</div><div class="line">    </div><div class="line">    signal(SIGCHLD,SIG_IGN);</div><div class="line"></div><div class="line">    <span class="comment">/* socket */</span></div><div class="line">    sock_fd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);<span class="comment">//AF_INET:IPV4;SOCK_STREAM:TCP</span></div><div class="line">    <span class="keyword">if</span> (<span class="number">-1</span> == sock_fd)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"socket error:%s\n\a"</span>, strerror(errno));</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/* set server sockaddr_in */</span></div><div class="line">    <span class="built_in">memset</span>(&amp;server_addr, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> sockaddr_in));<span class="comment">//clear</span></div><div class="line">    server_addr.sin_family = AF_INET;</div><div class="line">    server_addr.sin_addr.s_addr = htonl(INADDR_ANY);<span class="comment">//INADDR_ANY:This machine all IP</span></div><div class="line">    server_addr.sin_port = htons(PORT_NUMBER);</div><div class="line"></div><div class="line">    <span class="comment">/* bind */</span></div><div class="line">    ret = bind(sock_fd, (<span class="keyword">struct</span> sockaddr *)(&amp;server_addr), <span class="keyword">sizeof</span>(<span class="keyword">struct</span> sockaddr));</div><div class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == ret)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"bind error:%s\n\a"</span>, strerror(errno));</div><div class="line">        close(sock_fd);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/* listen */</span></div><div class="line">    ret = listen(sock_fd, BACKLOG);</div><div class="line">    <span class="keyword">if</span> (<span class="number">-1</span> == ret)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"listen error:%s\n\a"</span>, strerror(errno));</div><div class="line">        close(sock_fd);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/* accept */</span></div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        addr_len = <span class="keyword">sizeof</span>(<span class="keyword">struct</span> sockaddr);</div><div class="line">        new_fd = accept(sock_fd, (<span class="keyword">struct</span> sockaddr *)&amp;client_addr, &amp;addr_len);</div><div class="line">        <span class="keyword">if</span> (<span class="number">-1</span> == new_fd)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"accept error:%s\n\a"</span>, strerror(errno));</div><div class="line">            close(sock_fd);</div><div class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        client_num++;</div><div class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Server get connetion form client%d: %s\n"</span>, client_num, inet_ntoa(client_addr.sin_addr));</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (!fork())</div><div class="line">&#123;</div><div class="line">            <span class="comment">/* Child process */</span></div><div class="line">            <span class="keyword">while</span> (<span class="number">1</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="comment">/* recv */</span></div><div class="line">                recv_len = recv(new_fd, recv_buf, <span class="number">999</span>, <span class="number">0</span>);</div><div class="line">                <span class="keyword">if</span> (recv_len &lt;= <span class="number">0</span>)</div><div class="line">                &#123;</div><div class="line">                    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"recv error:%s\n\a"</span>, strerror(errno));</div><div class="line">                    close(new_fd);</div><div class="line">                    <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                &#123;</div><div class="line">                    recv_buf[recv_len] = <span class="string">'\0'</span>;</div><div class="line">                    <span class="built_in">printf</span>(<span class="string">"Get msg from client%d: %s\n"</span>, client_num, recv_buf);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            close(new_fd);</div><div class="line">        &#125;   </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/* close */</span></div><div class="line">    close(sock_fd);</div><div class="line">    <span class="built_in">exit</span>(<span class="number">0</span>); </div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight c"><figcaption><span>[tcp_client.c]</span><a href="https://github.com/hceng/learn/blob/master/tcp_udp/tcp/tcp_client.c" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">* tcp_client.c</div><div class="line"># Copyright (C) 2017 hceng, &lt;huangcheng.job@foxmail.com&gt;</div><div class="line"># Licensed under terms of GPLv2</div><div class="line">#</div><div class="line"># This program is used for TCP / UDP learning.</div><div class="line"># https://hceng.cn/</div><div class="line">*/</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netdb.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PORT_NUMBER 8888</span></div><div class="line"></div><div class="line"><span class="comment">/* socket-&gt;connect-&gt;send-&gt;close*/</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> sock_fd;</div><div class="line">    <span class="keyword">struct</span> sockaddr_in server_addr;</div><div class="line">    <span class="keyword">int</span> ret;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> send_buf[<span class="number">1000</span>];</div><div class="line">    <span class="keyword">int</span> send_len;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span>(argc != <span class="number">2</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Usage:%s hostname\n\a"</span>, argv[<span class="number">0</span>]);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/* socket */</span></div><div class="line">    sock_fd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);<span class="comment">//AF_INET:IPV4;SOCK_STREAM:TCP</span></div><div class="line">    <span class="keyword">if</span> (<span class="number">-1</span> == sock_fd)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"socket error:%s\n\a"</span>, strerror(errno));</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/* set sockaddr_in parameter*/</span></div><div class="line">    <span class="built_in">memset</span>(&amp;server_addr, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> sockaddr_in));<span class="comment">//clear</span></div><div class="line">    server_addr.sin_family = AF_INET;</div><div class="line">    server_addr.sin_port = htons(PORT_NUMBER);</div><div class="line">    ret = inet_aton(argv[<span class="number">1</span>], &amp;server_addr.sin_addr);</div><div class="line">    <span class="keyword">if</span>(<span class="number">0</span> == ret)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"server_ip error.\n"</span>);</div><div class="line">        close(sock_fd);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/* connect */</span></div><div class="line">    ret = connect(sock_fd, (<span class="keyword">const</span> <span class="keyword">struct</span> sockaddr *)&amp;server_addr, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> sockaddr));</div><div class="line">    <span class="keyword">if</span> (<span class="number">-1</span> == ret)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"connect error:%s\n\a"</span>, strerror(errno));</div><div class="line">        close(sock_fd);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (fgets(send_buf, <span class="number">999</span>, <span class="built_in">stdin</span>))</div><div class="line">        &#123;</div><div class="line">            <span class="comment">/* send */</span></div><div class="line">            send_len = send(sock_fd, send_buf, <span class="built_in">strlen</span>(send_buf), <span class="number">0</span>);</div><div class="line">            <span class="keyword">if</span> (send_len &lt;= <span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"send error:%s\n\a"</span>, strerror(errno));</div><div class="line">                close(sock_fd);</div><div class="line">                <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/* close */</span></div><div class="line">    close(sock_fd);</div><div class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="3-4-测试结果"><a href="#3-4-测试结果" class="headerlink" title="3.4 测试结果"></a>3.4 测试结果</h2><p>先在Ubuntu主机上交叉编译服务器端代码，再在Ubuntu主机上编译客户端代码。<br>在开发板上运行服务器端代码，在Ubuntu主机先启动tmux分屏，再分别运行客户端代码。</p><ul><li>服务器端<br><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/171230/3.png" alt=""></li><li>客户机端<br><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/171230/2.png?v=1" alt=""></li></ul><h1 id="4-UDP"><a href="#4-UDP" class="headerlink" title="4.UDP"></a>4.UDP</h1><p>UDP没有传递保证机制，如果传输中数据丢失，协议不会有任何的检测或提示。<br>这样的好处是传输的数据是<strong>持续</strong>的，此外它是<strong>无连接</strong>的传输，比如实时视频时，如果采用TCP，中途有一点点数据出错都会卡住，进行等待，产生延时。加入使用UDP，尽管有少量的丢帧，但数据是实时的。</p><h2 id="4-1-UDP流程图"><a href="#4-1-UDP流程图" class="headerlink" title="4.1 UDP流程图"></a>4.1 UDP流程图</h2><p><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/171230/4.jpg" alt=""></p><h2 id="4-2-UDP步骤分析"><a href="#4-2-UDP步骤分析" class="headerlink" title="4.2 UDP步骤分析"></a>4.2 UDP步骤分析</h2><p>从流程图可以看出，UDP比TCP的步骤少多了。</p><ul><li><strong>服务器端:</strong></li></ul><p><strong>a. 创建socket</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">sock_fd = socket(AF_INET, SOCK_DGRAM, <span class="number">0</span>);<span class="comment">//AF_INET:IPV4;SOCK_DGRAM:UDP</span></div><div class="line"><span class="keyword">if</span> (<span class="number">-1</span> == sock_fd)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"socket error:%s\n\a"</span>, strerror(errno));</div><div class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>协议族改成SOCK_DGRAM。</p><p><strong>b. 设置socket</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">memset</span>(&amp;server_addr, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> sockaddr_in));<span class="comment">//clear</span></div><div class="line">server_addr.sin_family = AF_INET;</div><div class="line">server_addr.sin_addr.s_addr = htonl(INADDR_ANY);<span class="comment">//INADDR_ANY:This machine all IP</span></div><div class="line">server_addr.sin_port = htons(PORT_NUMBER);</div></pre></td></tr></table></figure><br>和前面的TCP设置还是一样的。</p><p><strong>c. 绑定socket</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">ret = bind(sock_fd, (<span class="keyword">struct</span> sockaddr *)(&amp;server_addr), <span class="keyword">sizeof</span>(<span class="keyword">struct</span> sockaddr));</div><div class="line"><span class="keyword">if</span>(<span class="number">-1</span> == ret)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"bind error:%s\n\a"</span>, strerror(errno));</div><div class="line">    close(sock_fd);</div><div class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>绑定的操作也没有变。</p><p><strong>d. 接收数据</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">addr_len = <span class="keyword">sizeof</span>(<span class="keyword">struct</span> sockaddr);</div><div class="line">recv_len = recvfrom(sock_fd, recv_buf, <span class="number">999</span>, <span class="number">0</span>, (<span class="keyword">struct</span> sockaddr *)&amp;server_addr, &amp;addr_len);</div><div class="line"><span class="keyword">if</span> (recv_len &lt;= <span class="number">0</span>)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"recvfrom error:%s\n\a"</span>, strerror(errno));</div><div class="line">    close(sock_fd);</div><div class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line">    recv_buf[recv_len] = <span class="string">'\0'</span>;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Get msg from client%d: %s\n"</span>, client_num, recv_buf);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><blockquote><p><strong>所需要头文件</strong>：<br><code>#include &lt;sys/types.h&gt;</code><br><code>#include &lt;sys/socket.h&gt;</code><br><strong>函数格式</strong>：<br><code>int recvfrom(int sockfd, char FAR *buf, int len, int flags, struct sockaddr FAR *from, int FAR *fromlen);</code><br><strong>函数功能</strong>：<br>从套接字上接收一个数据报并保存源地址；<br>sockfd:标识一个已连接套接字的描述符<br>buf:接收数据缓冲区<br>len:接收数据缓冲区长度<br>flags:调用操作方式，由以下零个或多个组成</p><table><thead><tr><th style="text-align:center">flags</th><th style="text-align:center">说明</th><th style="text-align:center">recv</th><th style="text-align:center">send</th></tr></thead><tbody><tr><td style="text-align:center">MSG_DONTROUTE</td><td style="text-align:center">绕过路由表查找</td><td style="text-align:center"></td><td style="text-align:center">•</td></tr><tr><td style="text-align:center">MSG_DONTWAIT</td><td style="text-align:center">仅本操作非阻塞</td><td style="text-align:center">•</td><td style="text-align:center">•</td></tr><tr><td style="text-align:center">MSG_OOB</td><td style="text-align:center">发送或接收带外数据</td><td style="text-align:center">•</td><td style="text-align:center">•</td></tr><tr><td style="text-align:center">MSG_PEEK</td><td style="text-align:center">窥看外来消息</td><td style="text-align:center">•</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">MSG_WAITALL</td><td style="text-align:center">等待所有数据</td><td style="text-align:center">•</td></tr></tbody></table><p>from:(可选)指针，指向装有源地址的缓冲区<br>fromlen:(可选)指针，指向from缓冲区长度值<br><strong>返回值</strong>：<br>若成功，返回读入的字节数，否则返回0；</p></blockquote><p><strong>e. 关闭</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">close(sock_fd);</div><div class="line"><span class="built_in">exit</span>(<span class="number">0</span>); </div></pre></td></tr></table></figure></p><ul><li><strong>客户机端:</strong></li></ul><p><strong>a. 创建socket</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">sock_fd = socket(AF_INET, SOCK_DGRAM, <span class="number">0</span>);<span class="comment">//AF_INET:IPV4;SOCK_DGRAM:UDP</span></div><div class="line"><span class="keyword">if</span> (<span class="number">-1</span> == sock_fd)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"socket error:%s\n\a"</span>, strerror(errno));</div><div class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>协议族改成SOCK_DGRAM。</p><p><strong>b. 设置socket</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">memset</span>(&amp;server_addr, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> sockaddr_in));<span class="comment">//clear</span></div><div class="line">server_addr.sin_family = AF_INET;</div><div class="line">server_addr.sin_port = htons(PORT_NUMBER);</div><div class="line">ret = inet_aton(argv[<span class="number">1</span>], &amp;server_addr.sin_addr);</div><div class="line"><span class="keyword">if</span>(<span class="number">0</span> == ret)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"server_ip error.\n"</span>);</div><div class="line">    close(sock_fd);</div><div class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>c. 发送数据</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">addr_len = <span class="keyword">sizeof</span>(<span class="keyword">struct</span> sockaddr);</div><div class="line">send_len = sendto(sock_fd, send_buf, <span class="built_in">strlen</span>(send_buf), <span class="number">0</span>, (<span class="keyword">const</span> <span class="keyword">struct</span> sockaddr *)&amp;server_addr, addr_len);</div><div class="line"><span class="keyword">if</span> (send_len &lt;= <span class="number">0</span>)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"send error:%s\n\a"</span>, strerror(errno));</div><div class="line">    close(sock_fd);</div><div class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><blockquote><p><strong>所需要头文件</strong>：<br><code>#include &lt;sys/types.h&gt;</code><br><code>#include &lt;sys/socket.h&gt;</code><br><strong>函数格式</strong>：<br><code>int sendto(int sockfd, char FAR *buf, int len, int flags, struct sockaddr FAR *to, int FAR *tolen);</code><br><strong>函数功能</strong>：<br>向一指定目的地发送数据；<br>sockfd:一个标识套接字的描述字<br>buf:发送数据缓冲区<br>len:发送数据缓冲区长度<br>flags:调用方式标志位<br>to:(可选)指针，指向目的的套接字的地址<br>tolen:目的套接字地址的长度<br><strong>返回值</strong>：<br>若成功，返回发送的字节数，如果连接已中止，返回0，如果发生错误，返回-1；</p></blockquote><p><strong>d. 关闭</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">close(sock_fd);</div><div class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</div></pre></td></tr></table></figure><br>UDP传输的客户端少了connect()，原本该在connect()函数里传入服务器地址相关信息，现在变成了在sendto()里传入。</p><h2 id="4-3-UDP完整代码"><a href="#4-3-UDP完整代码" class="headerlink" title="4.3 UDP完整代码"></a>4.3 UDP完整代码</h2><figure class="highlight c"><figcaption><span>[udp_client.c]</span><a href="https://github.com/hceng/learn/blob/master/tcp_udp/udp/udp_server.c" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">* udp_server.c</div><div class="line"># Copyright (C) 2017 hceng, &lt;huangcheng.job@foxmail.com&gt;</div><div class="line"># Licensed under terms of GPLv2</div><div class="line">#</div><div class="line"># This program is used for TCP / UDP learning.</div><div class="line"># https://hceng.cn/</div><div class="line">*/</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span>      </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PORT_NUMBER 8888</span></div><div class="line"></div><div class="line"><span class="comment">/* socket-&gt;bind-&gt;recvfrom/sendto-&gt;close */</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> sock_fd;</div><div class="line">    <span class="keyword">struct</span> sockaddr_in server_addr;</div><div class="line">    <span class="keyword">struct</span> sockaddr_in client_addr;</div><div class="line">    <span class="keyword">int</span> ret;</div><div class="line">    <span class="keyword">int</span> addr_len;</div><div class="line">    <span class="keyword">int</span> recv_len;</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> recv_buf[<span class="number">1000</span>];</div><div class="line">    </div><div class="line">    <span class="comment">/* socket */</span></div><div class="line">    sock_fd = socket(AF_INET, SOCK_DGRAM, <span class="number">0</span>);<span class="comment">//AF_INET:IPV4;SOCK_DGRAM:UDP</span></div><div class="line">    <span class="keyword">if</span> (<span class="number">-1</span> == sock_fd)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"socket error:%s\n\a"</span>, strerror(errno));</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/* set sockaddr_in parameter*/</span></div><div class="line">    <span class="built_in">memset</span>(&amp;server_addr, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> sockaddr_in));<span class="comment">//clear</span></div><div class="line">    server_addr.sin_family = AF_INET;</div><div class="line">    server_addr.sin_addr.s_addr = htonl(INADDR_ANY);<span class="comment">//INADDR_ANY:This machine all IP</span></div><div class="line">    server_addr.sin_port = htons(PORT_NUMBER);</div><div class="line"></div><div class="line">    <span class="comment">/* bind */</span></div><div class="line">    ret = bind(sock_fd, (<span class="keyword">struct</span> sockaddr *)(&amp;server_addr), <span class="keyword">sizeof</span>(<span class="keyword">struct</span> sockaddr));</div><div class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == ret)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"bind error:%s\n\a"</span>, strerror(errno));</div><div class="line">        close(sock_fd);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="comment">/* recvfrom */</span></div><div class="line">        addr_len = <span class="keyword">sizeof</span>(<span class="keyword">struct</span> sockaddr);</div><div class="line">        recv_len = recvfrom(sock_fd, recv_buf, <span class="number">999</span>, <span class="number">0</span>, (<span class="keyword">struct</span> sockaddr *)&amp;client_addr, &amp;addr_len);</div><div class="line">        <span class="keyword">if</span> (recv_len &lt;= <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"recvfrom error:%s\n\a"</span>, strerror(errno));</div><div class="line">            close(sock_fd);</div><div class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            recv_buf[recv_len] = <span class="string">'\0'</span>;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"Get msg from client:%s: %s\n"</span>, inet_ntoa(client_addr.sin_addr), recv_buf);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/* close */</span></div><div class="line">    close(sock_fd);</div><div class="line">    <span class="built_in">exit</span>(<span class="number">0</span>); </div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight c"><figcaption><span>[udp_client.c]</span><a href="https://github.com/hceng/learn/blob/master/tcp_udp/udp/udp_client.c" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">* udp_client.c</div><div class="line"># Copyright (C) 2017 hceng, &lt;huangcheng.job@foxmail.com&gt;</div><div class="line"># Licensed under terms of GPLv2</div><div class="line">#</div><div class="line"># This program is used for TCP / UDP learning.</div><div class="line"># https://hceng.cn/</div><div class="line">*/</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netdb.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PORT_NUMBER 8888</span></div><div class="line"></div><div class="line"><span class="comment">/* socket-&gt;bind-&gt;recvfrom/sendto-&gt;close */</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> sock_fd;</div><div class="line">    <span class="keyword">struct</span> sockaddr_in server_addr;</div><div class="line">    <span class="keyword">int</span> ret;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> send_buf[<span class="number">1000</span>];</div><div class="line">    <span class="keyword">int</span> send_len;</div><div class="line">    <span class="keyword">int</span> addr_len;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span>(argc != <span class="number">2</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Usage:%s hostname\n\a"</span>, argv[<span class="number">0</span>]);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/* socket */</span></div><div class="line">    sock_fd = socket(AF_INET, SOCK_DGRAM, <span class="number">0</span>);<span class="comment">//AF_INET:IPV4;SOCK_DGRAM:UDP</span></div><div class="line">    <span class="keyword">if</span> (<span class="number">-1</span> == sock_fd)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"socket error:%s\n\a"</span>, strerror(errno));</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/* set sockaddr_in parameter*/</span></div><div class="line">    <span class="built_in">memset</span>(&amp;server_addr, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> sockaddr_in));<span class="comment">//clear</span></div><div class="line">    server_addr.sin_family = AF_INET;</div><div class="line">    server_addr.sin_port = htons(PORT_NUMBER);</div><div class="line">    ret = inet_aton(argv[<span class="number">1</span>], &amp;server_addr.sin_addr);</div><div class="line">    <span class="keyword">if</span>(<span class="number">0</span> == ret)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"server_ip error.\n"</span>);</div><div class="line">        close(sock_fd);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (fgets(send_buf, <span class="number">999</span>, <span class="built_in">stdin</span>))</div><div class="line">        &#123;</div><div class="line">            <span class="comment">/* sendto */</span></div><div class="line">            addr_len = <span class="keyword">sizeof</span>(<span class="keyword">struct</span> sockaddr);</div><div class="line">            send_len = sendto(sock_fd, send_buf, <span class="built_in">strlen</span>(send_buf), <span class="number">0</span>, \</div><div class="line">(<span class="keyword">const</span> <span class="keyword">struct</span> sockaddr *)&amp;server_addr, addr_len);</div><div class="line">            <span class="keyword">if</span> (send_len &lt;= <span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"send error:%s\n\a"</span>, strerror(errno));</div><div class="line">                close(sock_fd);</div><div class="line">                <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/* close */</span></div><div class="line">    close(sock_fd);</div><div class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="4-4-测试结果"><a href="#4-4-测试结果" class="headerlink" title="4.4 测试结果"></a>4.4 测试结果</h2><p>和前面TCP测试方式一样，先在Ubuntu主机上交叉编译服务器端代码，再在Ubuntu主机上编译客户端代码。<br>在开发板上运行服务器端代码，在Ubuntu主机先启动tmux分屏，再分别运行客户端代码。</p><ul><li>服务器端<br><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/171230/5.png" alt=""></li><li>客户机端<br><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/171230/6.png" alt=""></li></ul><p>参考资料：<br>博客：<a href="http://www.cnblogs.com/jfyl1573/p/6476607.html" target="_blank" rel="external">很全的linux网络编程技巧</a><br>王粉花. 2016. 嵌入式Linux编程与实践教程.北京: 科学出版社.<br>韦东山第三期项目:第1课第6.1节_一小时学会网络编程_两个简单例子_tcp_udp</p><hr><p><div align="center"><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本文采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href="http://hceng.cn/" target="_blank" rel="external">hceng’s blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要记录TCP/UDP网络编程的基础知识，采用TCP/UDP实现宿主机和目标机之间的网络通信。&lt;br&gt;
    
    </summary>
    
    
      <category term="Linux环境编程" scheme="http://yoursite.com/tags/Linux%E7%8E%AF%E5%A2%83%E7%BC%96%E7%A8%8B/"/>
    
      <category term="TCP/UDP" scheme="http://yoursite.com/tags/TCP-UDP/"/>
    
  </entry>
  
  <entry>
    <title>Exynos4412——触摸屏驱动</title>
    <link href="http://yoursite.com/2017/12/26/Exynos4412%E2%80%94%E2%80%94%E8%A7%A6%E6%91%B8%E5%B1%8F%E9%A9%B1%E5%8A%A8/"/>
    <id>http://yoursite.com/2017/12/26/Exynos4412——触摸屏驱动/</id>
    <published>2017-12-26T01:34:47.000Z</published>
    <updated>2018-11-04T09:16:43.466Z</updated>
    
    <content type="html"><![CDATA[<p>移植Exynos4412的I2C接口触摸屏驱动。<br><a id="more"></a><br>这应该是Exynos4412 LCD部分的最后一部分了。<br>为了去探索LCD驱动，前面做了一系列的准备工作，最后终于完成了LCD驱动，现在只剩下触摸屏这个最后的“尾巴”。</p><h1 id="1-工作原理"><a href="#1-工作原理" class="headerlink" title="1.工作原理"></a>1.工作原理</h1><p>前面<a href="https://hceng.cn/2017/11/22/Exynos4412%E2%80%94%E2%80%94LCD%E4%B9%8Bbackligth/#more" target="_blank" rel="external">LCD之backligth</a>部分说了，友善之臂这个屏，为了改善大尺寸四线电阻触摸屏的性能，外加了一个低成本的MCU去控制专业的触控芯片，将滤波后的稳定数据通过GPIO传回到ARM上。<br>但我的板子LCD是电容屏，查阅相关资料后得知，是通过一个FT5406触摸屏芯片实现的电容触摸功能。</p><p>根据<a href="https://www.newhavendisplay.com/app_notes/FT5x06.pdf" target="_blank" rel="external">FT5x06.pdf</a>手册可得知其工作的框架：<br><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/171226/1.png" alt=""><br>当触摸屏上发生触摸操作时，通过TXn(Transmit output pin)和RXn(Receiver input pins)传输给FT5406，FT5406经过处理后，将坐标信息通过Serial Interface(I2C or SPI)发给Host(开发板)。</p><p>查阅FT5x06.pdf，可以看到FT5x06对外有如下接口：<br><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/171226/2.png" alt=""></p><blockquote><p>I2C/SPI：与主机进行数据交换的接口<br>INT：中断信号接口，通知主处理器触摸数据准备好读取<br>WAKE：主机将FT5x06从休眠模式切换到主动模式的中断信号<br>RST：外部低电平信号复位芯片</p></blockquote><p>因此，开发板至少的有I2C/SPI和INT与FT5x06相连。</p><h1 id="2-原理图"><a href="#2-原理图" class="headerlink" title="2.原理图"></a>2.原理图</h1><ul><li><p>Tiny4412-1412-Schematic.pdf：<br><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/171226/3.png?v=1" alt=""><br>I2C使用I2C1，INT使用GPX1_6引脚。</p></li><li><p>Tiny4412SDK-1506-Schematic.pdf：<br><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/171226/4.png" alt=""><br>在底板上经过一次电平转换引出到LCD1接口上。</p></li><li><p>LCD-S702-1509.pdf：<br><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/171226/6.png" alt=""><br><img src="https://blog-image-1257972744.cos.ap-chongqing.myqcloud.com/hceng/blog_image/171226/5.png" alt=""><br>LCD上并没有FT5x06的相关信息，只提供了一个CON5接口。<br>友善之臂封装好了LCD和触摸屏，对外只提供I2C接口。</p></li></ul><p>对于驱动来说，触摸屏就是一个带中断的信号的I2C设备。</p><h1 id="3-设备树文件"><a href="#3-设备树文件" class="headerlink" title="3. 设备树文件"></a>3. 设备树文件</h1><p>ft5406 作为 i2c_1 的子节点。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&amp;i2c_1 &#123;</div><div class="line">    samsung,i2c-sda-delay = &lt;100&gt;;</div><div class="line">    samsung,i2c-max-bus-freq = &lt;400000&gt;;</div><div class="line">    status = &quot;okay&quot;;</div><div class="line">    polytouch: edt-ft5x06@38 &#123; </div><div class="line">        compatible = &quot;edt,edt-ft5406&quot;, &quot;edt,edt-ft5x06&quot;;</div><div class="line">reg = &lt;0x38&gt;;</div><div class="line">interrupt-parent = &lt;&amp;gpx1&gt;;</div><div class="line">interrupts = &lt;6 IRQ_TYPE_EDGE_FALLING&gt;; </div><div class="line">        touchscreen-size-x = &lt;800&gt;;</div><div class="line">        touchscreen-size-y = &lt;480&gt;;</div><div class="line">    &#125;; </div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><p>内核已经有了ft5x06驱动，所有对应的也会有设备树的描述文件：<br><code>linux-4.13.9/Documentation/devicetree/bindings/input/touchscreen/edt-ft5x06.txt</code><br><code>linux-4.13.9/Documentation/devicetree/bindings/input/touchscreen/touchscreen.txt</code><br>详细介绍了设备树的必要参数和非必要参数。</p><h1 id="4-驱动程序"><a href="#4-驱动程序" class="headerlink" title="4. 驱动程序"></a>4. 驱动程序</h1><p>内核中ft5x06驱动所在路径：<br><code>linux-4.13.9/drivers/input/touchscreen/edt-ft5x06.c</code></p><p>这块的内容，暂时不想分析，涉及I2C子系统和输入子系统，回头再慢慢分析。</p><h1 id="5-测试程序"><a href="#5-测试程序" class="headerlink" title="5. 测试程序"></a>5. 测试程序</h1><figure class="highlight c"><figcaption><span>[app.c]</span><a href="https://github.com/hceng/learn/blob/master/tiny4412/03_touchscreen/app.c" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/input.h&gt;</span>  </span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></div><div class="line">&#123;  </div><div class="line"><span class="keyword">int</span> keys_fd;      </div><div class="line"><span class="keyword">char</span> ret[<span class="number">2</span>];   </div><div class="line"><span class="keyword">struct</span> input_event t;  </div><div class="line"></div><div class="line">keys_fd = open(<span class="string">"/dev/input/event0"</span>, O_RDONLY);    <span class="comment">//打开TP设备  </span></div><div class="line"><span class="keyword">if</span>(keys_fd&lt;=<span class="number">0</span>)&#123;  </div><div class="line"><span class="built_in">printf</span>(<span class="string">"open /dev/input/event0 device error!\n"</span>);  </div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;  </div><div class="line"></div><div class="line"><span class="keyword">while</span>(<span class="number">1</span>)  </div><div class="line">&#123;     </div><div class="line"><span class="keyword">if</span>(read(keys_fd, &amp;t, <span class="keyword">sizeof</span>(t))==<span class="keyword">sizeof</span>(t)) </div><div class="line">        &#123;  </div><div class="line"><span class="keyword">if</span> (t.type == EV_KEY)</div><div class="line">            &#123;  </div><div class="line"><span class="built_in">printf</span>(<span class="string">"  type: EV_KEY, event = %s, value = %d \r\n"</span>,   </div><div class="line">t.code == BTN_TOUCH ? <span class="string">"BTN_TOUCH"</span> : <span class="string">"Unkown"</span>, t.value);   </div><div class="line">&#125;  </div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span>(t.type == EV_ABS)</div><div class="line">            &#123;  </div><div class="line"><span class="built_in">printf</span>(<span class="string">"  type: EV_ABS, event = %s, value = %d \r\n"</span>,   </div><div class="line">t.code == ABS_X ? <span class="string">"ABS_X"</span> :   </div><div class="line">t.code == ABS_Y ? <span class="string">"ABS_Y"</span> :   </div><div class="line">t.code == ABS_PRESSURE ? <span class="string">"ABS_PRESSURE"</span> :<span class="string">"Unkown"</span>, t.value); </div><div class="line">&#125;  </div><div class="line">&#125;  </div><div class="line">&#125;     </div><div class="line">close(keys_fd);  </div><div class="line"></div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125; </div></pre></td></tr></table></figure><p>参考博客：<a href="http://blog.csdn.net/sir_zeng/article/details/8561829" target="_blank" rel="external">Linux和android下测试键盘和触摸屏</a></p><hr><p><div align="center"><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本文采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href="http://hceng.cn/" target="_blank" rel="external">hceng’s blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;移植Exynos4412的I2C接口触摸屏驱动。&lt;br&gt;
    
    </summary>
    
    
      <category term="Linux驱动" scheme="http://yoursite.com/tags/Linux%E9%A9%B1%E5%8A%A8/"/>
    
      <category term="Exynos4412" scheme="http://yoursite.com/tags/Exynos4412/"/>
    
      <category term="触摸屏" scheme="http://yoursite.com/tags/%E8%A7%A6%E6%91%B8%E5%B1%8F/"/>
    
  </entry>
  
</feed>
