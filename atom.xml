<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>hceng blog</title>
  
  <subtitle>嵌入式/Linux驱动</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-03-30T17:47:54.938Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>hceng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iMX6ULL上手体验</title>
    <link href="http://yoursite.com/2018/03/28/iMX6ULL%E4%B8%8A%E6%89%8B%E4%BD%93%E9%AA%8C/"/>
    <id>http://yoursite.com/2018/03/28/iMX6ULL上手体验/</id>
    <published>2018-03-28T06:12:36.000Z</published>
    <updated>2018-03-30T17:47:54.938Z</updated>
    
    <content type="html"><![CDATA[<p>第一次接触NXP/Freescale的SOC，记录拿到板子后快速上手的技巧和思维的方式。<br><a id="more"></a><br>iMX6ULL感觉还是很有优势的，除了之前接触的NanoPi(全志H3)，就没见过几个运行Linux，只卖100多元的开发板。<br>Cortex-A7架构，主频528MHz，一些普通的嵌入式Linux应用领域足够了。<br>感觉未来几年，运行Linux的板子会越来越便宜，嵌入式Linux会越来越普及。</p><h1 id="1-准备资料"><a href="#1-准备资料" class="headerlink" title="1.准备资料"></a>1.准备资料</h1><p>对于一个陌生的SOC，首先就是要准备相关的资料，核心的就是<strong>参考手册</strong>和<strong>电路图</strong>。<br>资料的来源无非有三个：</p><ul><li><p>芯片官网<br>官网是<strong>参考手册</strong>的来源；<br>NXP的官网做得还是比较清晰，很容易就找到了i.MX6ULL提供的<a href="https://www.nxp.com/cn/products/processors-and-microcontrollers/applications-processors/i.mx-applications-processors/i.mx-6-processors/i.mx-6ull-single-core-processor-with-arm-cortex-a7-core:i.MX6ULL?tab=Documentation_Tab" target="_blank" rel="external">文档</a>。</p></li><li><p>开发板提供厂家<br>开发板厂家一般都提供所有的资料，包括<strong>参考手册</strong>、<strong>电路图</strong>、<strong>使用手册</strong>、<strong>工具</strong>、<strong>系统</strong>等；<br>我这使用的是米尔科技的板子，官网的资料路径不好找，直接问客服要<a href="http://down.myir-tech.com/MYS-6ULX/" target="_blank" rel="external">资料链接</a>更快。</p></li><li><p>网络<br>Google/Baidu用于搜索相关博文的一些细节资料，比如某一块别人的分析。<br>随便提一下，科学上网是基本素养。</p></li></ul><h1 id="2-观察开发板"><a href="#2-观察开发板" class="headerlink" title="2.观察开发板"></a>2.观察开发板</h1><p>拿到一个板子，首先是观察板子上大致有什么资源。<br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/180328/1.png" alt=""><br>比如看到SOC附近有两个芯片，一般一个是RAM，一个Flash；<br>有个TF卡接口和拨动开关，多半是TF卡启动和Flash的启动选择；<br>一个网口、USB接口、Micro USB接口、电源接口，USB接口可能用于下载或串口或供电；<br>三组排针，其中三针上的丝印有RX、TX、GND，肯定是串口接口；<br>两个按键和几个LED灯，背后还有一个FPC插座，多半是接显示屏；<br>以及我的是IOT版，还有一个WIFI天线。</p><p>再查看厂家提供的资料，验证一些猜想。<br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/180328/2.jpg" alt=""></p><p>上面的猜想几乎八九不离十，现在知道了可以通过“Boot Select”来TF/Nand启动。</p><p>现在有三个方向，</p><ul><li>一是做应用，比如搞个微型服务器，此时插上电源、串口、网络，基本就可以直接使用了，无需再关心板子硬件细节；</li><li>二是做驱动，比如试试写个iMX6ULL的LED驱动，这就需要部署开发环境，在Ubuntu里安装交叉编译工具链、编译提供内核、编写驱动等；</li><li>三是做裸机，比如试试在裸机上点个LED灯，这就需要编写裸机程序，然后启动验证；</li></ul><p>其实，这三个领域，都能玩，但都比较尴尬，</p><ul><li>做应用，感觉没有好项目，树莓派还在吃灰；</li><li>做驱动，手里的Tiny4412还在研究，没必要另起炉灶，也没工作的需求；</li><li>做裸机，应该没人拿跑Linux的板子做裸机吧，单片机可选的一大堆；</li></ul><p>既然这样，就做无任何资料的裸机吧，开启hard模式。</p><h1 id="3-系统更新"><a href="#3-系统更新" class="headerlink" title="3.系统更新"></a>3.系统更新</h1><p>确定了方向，先是做裸机，<br>首先就需要知道如何将裸机代码放到存储介质(Nand或TF卡)，然后启动裸机代码。</p><p>如何下手呢？<br>我也不知道，跟着厂家提供的资料，重新烧写一遍系统，这个过程中肯定包含Uboot，Uboot就是一个大裸机程序，只要炮制Uboot的烧写方式烧写裸机即可。</p><p>i.MX6ULL系统更新使用两种方法，<strong>MfgTool更新</strong>和<strong>SD卡更新</strong>。</p><ul><li>MFGTools</li></ul><p>MFGTools是NXP官方推荐的一个使用OTG来升级镜像的软件。可以用来升级Linux、升级Android；单独刷写某一系统分区，如 android的boot.img分区等；独立地刷写spi nor、emmc 等等；<br>操作方式按着厂商的操作即可。</p><p>另外，MfgTool的文件更新有两个部分：<strong>firmware</strong>和<strong>files</strong>。<br>firmware是烧写系统的镜像文件(<strong>作为媒介用途的镜像</strong>)，路径为”MYS-6ULXmfgtools/<br>Profiles/Linux/OS Firmware/firmware/“。<br>files目录下为烧写的目标镜像文件(<strong>真正烧录到emmc或者nand的镜像文件</strong>)，路径为”MYS-6ULX-mfgtools/Profiles/Linux/OS<br>Firmware/files/“。<br>之所以存着这两种镜像，是因为MFGTools的烧写<strong>原理是先将媒介镜像下载到到ddr内存里面，然后启动linux，再通过这个启动的linux把目标镜像固化到emmc或者nand里</strong><br>因此，当更新系统的分区大小或烧写方式时才需要更新firmware中的文件。</p><p>更新完，重新启动开开发板即是新系统。</p><ul><li>SD卡更新<br>和前面的原理类似，即先将一个媒介镜像烧写到SD卡上，SD卡启动后，再通过SD卡的系统烧写Nand，从而更新系统。<br>因此需要先做一个“用于SD启动更新的镜像”，使用厂商提供的<code>build-sdcard.sh</code>脚本即可。<br>同样的，“firmware”目录下是烧写系统的镜像文件(<strong>作为媒介用途的镜像</strong>)，一般情况下不需要修改。<br>”mfgimages-mys-imx6ull-ddr256m-nand256m“目录下是烧写的目标镜像文件(<strong>真正烧录到emmc或者nand的镜像文件</strong>)。<br>使用脚本后，会生成一个<code>.sdcard</code>后缀的文件，即是“用于SD启动更新的镜像”，下面需要将它烧到SD卡上，可以使用Linux下的<code>dd</code>命令。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo dd if=mys6ull-xx.rootfs.sdcard of=/dev/sdb conv=fsync</div></pre></td></tr></table></figure></li></ul><p>然后改为SD卡启动，就可以进入SD卡的系统，并在系统里自动的烧写Nand。<br>完成后，改为Nand启动，即可进入新系统。</p><p>综上两个方法，都可以实现烧写Uboot到Nand上，但却都是通过进入“媒介系统”完成的烧写，看来直接烧写裸机到Nand是比较麻烦的。<br>反观SD卡启动，是通过先使用脚本制作一个<code>.sdcard</code>后缀的文件，再通过<code>dd</code>命令，完整的复制到SD卡上。<br>因此只需要分析下脚本如何操作即可。</p><p>通过过脚本<code>build-sdcard.sh</code>进行分析:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dd if=$&#123;FIRMWARE_DIR&#125;/u-boot-$&#123;MACHINE&#125;.$&#123;UBOOT_SUFFIX_SDCARD&#125; of=$&#123;SDCARD&#125; conv=notrunc seek=2 bs=512</div></pre></td></tr></table></figure></p><p>以及<a href="https://blog.csdn.net/wofeile880_jian/article/details/64444029" target="_blank" rel="external">博客</a>参考。<br>确定了Uboot是被放在了SD卡开始的512x2=1K处。<br>即，<strong>裸机代码必须放在SD卡的偏移地址1K位置处</strong>。</p><h1 id="4-裸机文件加头"><a href="#4-裸机文件加头" class="headerlink" title="4.裸机文件加头"></a>4.裸机文件加头</h1><p>这时候，按理说下一步是编写个LED裸机程序，使用<code>dd</code>命令放在偏移地址1K位置处。<br>但是，如厂商提供资料文档里说的：</p><blockquote><p>由于i.MX6ULL/i.MX6UL烧写bootloaer时需要使用kobs-ng工具添加头部信<br>息，需要在操作系统上才可以烧写。</p></blockquote><p>同时，Uboot文件名为<code>*.imx</code>后缀，因此这里的裸机文件还需要先加一个头。</p><p>那么问题来了，这个头怎么加？<br>肯定还是从Uboot切入，使用厂家提供Uboot，重新编译生成Uboot，在这个过程中，肯定会将<code>u-boot.bin</code>变为<code>u-boot.imx</code>。</p><p>编译Uboot的过程参考厂家文档，先安装交叉编译工具链，再指定配置文件编译即可。<br>这里编译完后，是不会有什么提示信息的，这里就需要<code>--just-print</code>编译参数，将整个编译过程打印出来：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- --just-print  &gt; 123.txt</div></pre></td></tr></table></figure></p><p>在生成的<code>123.txt</code>里搜索<code>u-boot.bin</code>，很快就能定位到加头操作附近：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo &apos;  MKIMAGE u-boot.imx&apos;; ./tools/mkimage -n board/myir/mys_imx6ull/imximage.cfg.cfgtmp -T imximage -e 0x87800000 -d u-boot.bin u-boot.imx  &gt;/dev/null;</div></pre></td></tr></table></figure></p><p>这里的<code>./tools/mkimage -n board/myir/mys_imx6ull/imximage.cfg.cfgtmp -T imximage -e 0x87800000 -d u-boot.bin u-boot.imx</code>命令就是加头操作。<br>需要<code>mkimage</code>工具和<code>imximage.cfg.cfgtmp</code>配置文件，而且这几个文件路径也可以从命令得知。</p><p>此时，将编译好的<code>u-boot.bin</code>，使用上面的命令完成加头操作，得到自己的<code>u-boot.imx</code>，尝试烧到SD卡上，看能否启动。</p><p>这里的烧写有一个坑，当使用<code>dd</code>命令进行烧写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo dd if=u-boot.imx of=/dev/sdb bs=512 seek=2 conv=fsync</div></pre></td></tr></table></figure></p><p>还是先介绍下<code>dd</code>命令，<code>dd</code>是对块进行操作，<code>cp</code>是对文件操作，<br>比如复制一个数据从A-&gt;B，<code>dd</code>是放在指定的位置，<code>cp</code>是放在空闲的位置。</p><p>同时结合SD卡的分区简图：<br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/180328/3.jpg" alt=""></p><p>可以看出，烧写到SD卡上，是无法直观的从SD上得知是否烧写成功的，烧写的偏移地址1K位置处，无法从SD卡的分区剩余大小上判断。</p><p>解决方法是，通过<code>dd</code>命令读取出数据，再将读取的数据和烧写的数据进行简单比较，因此烧写完成后，要使用以下命令进行检查，判断是否烧写成功：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo dd if=/dev/sdb of=read_uboot.bin  bs=512 skip=2 count=2</div><div class="line"></div><div class="line">hexdump u-boot.imx | more</div><div class="line">hexdump read_uboot.bin | more</div></pre></td></tr></table></figure></p><p>比较两者前面部分数据相同即可。</p><p>然后把SD卡插上开发板，设置为SD卡启动，成功启动Uboot，且打印的Uboot生成日期是当前日期，证明裸机文件加头的方式是正确的。</p><h1 id="5-运行LED"><a href="#5-运行LED" class="headerlink" title="5.运行LED"></a>5.运行LED</h1><p>知道了怎么加头，怎么烧写到SD卡，就可以编写裸机程序了，第一个裸机当然是最简单的点灯。<br>在点灯之前，一般都需要关看门狗、初始化时钟、初始化SDRAM/DDR等。<br>上面的操作不一定都是必须的，比如看门狗可能默认时间很长，对于点灯来说，无所谓。<br>又比如SDRAM/DDR在点灯这个小程序上，没必要用到。</p><p>因此，最基本的肯定是设置GPIO引脚，控制LED灯。<br>点灯一般需要使能引脚时钟、设置引脚功能为GPIO功能、引脚设值等。<br>在设置了引脚方向寄存器和引脚数据寄存器后，抱着试一试的心态编译、加头后烧写了进去，居然成功亮灯。<br>确实很惊讶，这应该是遇到的步骤最少的亮灯代码。<br>看门狗、时钟什么的，猜测应该被初始化了。</p><p>而且，还有更大的惊喜。<br>在前面加头的操作，就很纳闷有个参数是<code>-e 0x87800000</code>，应该是个地址，这个地址处于：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Start address 　　End address 　　　　Size　　　 　Description</div><div class="line">8000_0000  　　　　FFFF_FFFF 　　　　　2048 MB 　　MMDC—x16 DDR Controller.</div></pre></td></tr></table></figure></p><p>也就是DDR的位置，难道DDR也被初始化了?<br>写个测试函数，尝试读写DDR所在的0x80000000：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span>    DDR_ADDRESS       (*(volatile unsigned long *)0x80000000)  <span class="comment">//P175 ARM Platform Memory Map</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>    DDR_ADDR(offset)  (*(volatile unsigned long *)(0x80000000+offset))  </span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>    TEST_SIZE   (1024*1024)</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_ddr</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> i;</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> offset;</div><div class="line"><span class="keyword">int</span> equal_flag = <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="comment">//写寄存器</span></div><div class="line">offset = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;TEST_SIZE; i++)</div><div class="line">&#123;</div><div class="line">DDR_ADDR(offset) = i;</div><div class="line">offset = offset + <span class="number">4</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//读寄存器并判断</span></div><div class="line">offset = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;TEST_SIZE; i++)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span>( i != DDR_ADDR(offset) ) </div><div class="line">&#123;</div><div class="line">equal_flag = <span class="number">0</span>;</div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line">offset = offset + <span class="number">4</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//显示</span></div><div class="line"><span class="comment">/*</span></div><div class="line">if(equal_flag)</div><div class="line">led_mode(3);</div><div class="line">else</div><div class="line">led_mode(2);</div><div class="line">*/</div><div class="line"></div><div class="line"><span class="keyword">if</span>(DDR_ADDR(<span class="number">0</span>) == <span class="number">1</span>)  </div><div class="line">led_mode(<span class="number">1</span>);</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span>(DDR_ADDR(<span class="number">4</span>*<span class="number">8</span>) == <span class="number">8</span>)</div><div class="line">led_mode(<span class="number">3</span>);</div><div class="line"><span class="keyword">else</span> </div><div class="line">led_mode(<span class="number">2</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>结果发现居然能正确读取出来，看来DDR也被初始化了。</p><p>不得不说，很强，很完美。(●’◡’●)</p><p>倒回来想，不应能初始化DDR，不同的板子，DDR型号不一定相同，不可能做到适配所有的DDR。<br>整个过程，就做了加头操作，答案应该在加头操作里面。</p><p>打开<code>imximage.cfg.cfgtmp</code>可以看到一堆寄存器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">…………</div><div class="line">DATA 4 0x021B0000 0x84180000</div><div class="line">DATA 4 0x021B0890 0x00400000</div><div class="line">…………</div></pre></td></tr></table></figure></p><p>这里的<code>0x021B0000</code>刚好是DDR的寄存器：MMDC Core Control Register (MMDC_MDCTL)；<br>其上电复位值是0x00，尝试读取寄存器值是不是为0，就知道是否真的被设置了：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">read_ddr_reg</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> reg_value = <span class="number">0</span>;</div><div class="line"></div><div class="line">reg_value = MMDC_MDCTL;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (reg_value &amp; (<span class="number">0x01</span>&lt;&lt;<span class="number">30</span>)) <span class="comment">//SDE_1</span></div><div class="line">led_mode(<span class="number">1</span>);</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> (reg_value &amp; (<span class="number">0x01</span>&lt;&lt;<span class="number">31</span>)) <span class="comment">//SDE_0</span></div><div class="line">led_mode(<span class="number">2</span>);<span class="comment">//结果亮</span></div><div class="line"></div><div class="line"><span class="keyword">while</span>(<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>结果其31位，还真是1，和<code>imximage.cfg.cfgtmp</code>的<code>DATA 4 0x021B0000 0x84180000</code>里的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">0x84180000 = ‭10000100000110000000000000000000‬</div></pre></td></tr></table></figure></p><p>最高为1是吻合的。</p><h1 id="6-移植串口"><a href="#6-移植串口" class="headerlink" title="6.移植串口"></a>6.移植串口</h1><p>点灯很轻松的被解决了，其它常规的初始化也被完成了。<br>尝试加点难度，移植下串口，为什么是移植呢？<br>不想从头去看参考手册的详细说明，直接移植Uboot里的串口操作即可。</p><p>Uboot里面一堆<code>start.S</code>，哪一个才是本开发板的呢？<br>笨方法是根据芯片型号分类去慢慢找，聪明的方法是一个命令解决：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">find -name start.o</div></pre></td></tr></table></figure></p><p>得到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./arch/arm/cpu/armv7/start.o</div></pre></td></tr></table></figure></p><p>因为前面根据本开发板配置文件编译过Uboot，理论上现在生成的所有<code>*.o</code>文件都是本开发板所使用的，这样就可以直接找到用到的<code>start.S</code>。</p><p>对<code>start.S</code>进行分析，没发现里面有串口相关的调用操作。</p><p>茫茫代码，如何找到需要的“uart”相关代码呢。<br>既然所有<code>*.o</code>才是用到的，就先找出所有<code>*.o</code>，再在对应的C文件搜索<code>uart</code>即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">find -name &quot;.o&quot;</div></pre></td></tr></table></figure></p><p>将得到的结果里面所有的文件名改为<code>.*</code>，再作为参数传给<code>grep</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">grep -nr &quot;uart&quot; ./test/dm/cmd_dm.* \</div><div class="line">./test/dm/built-in.* \</div><div class="line">./test/built-in.* \</div><div class="line">./common/image-fdt.* \</div><div class="line">./common/env_attr.* \</div><div class="line">…………</div></pre></td></tr></table></figure></p><p>可以得到如下结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">./common/console.c:10:#include &lt;debug_uart.h&gt;</div><div class="line"></div><div class="line">./board/myir/mys_imx6ull/mys_imx6ull.c:330:static iomux_v3_cfg_t const uart1_pads[] = &#123;</div><div class="line">./board/myir/mys_imx6ull/mys_imx6ull.c:400:static void setup_iomux_uart(void)</div><div class="line">./board/myir/mys_imx6ull/mys_imx6ull.c:402:     imx_iomux_v3_setup_multiple_pads(uart1_pads, ARRAY_SIZE(uart1_pads));</div><div class="line">./board/myir/mys_imx6ull/mys_imx6ull.c:850:     setup_iomux_uart();</div><div class="line"></div><div class="line"></div><div class="line">./tools/kwbimage.c:34:  &#123; 0x69, &quot;uart&quot; &#125;,</div><div class="line"></div><div class="line">./arch/arm/cpu/armv7/mx6/soc.c:448:static void set_uart_from_osc(void)</div><div class="line">./arch/arm/cpu/armv7/mx6/soc.c:452:     /* set uart clk to OSC */</div><div class="line">./arch/arm/cpu/armv7/mx6/soc.c:578:             set_uart_from_osc();</div><div class="line"></div><div class="line">./arch/arm/cpu/armv7/mx6/clock.c:132:void enable_uart_clk(unsigned char enable)</div><div class="line">./arch/arm/cpu/armv7/mx6/clock.c:412:static u32 get_uart_clk(void)</div><div class="line">./arch/arm/cpu/armv7/mx6/clock.c:414:   u32 reg, uart_podf;</div><div class="line">./arch/arm/cpu/armv7/mx6/clock.c:426:   uart_podf = reg &gt;&gt; MXC_CCM_CSCDR1_UART_CLK_PODF_OFFSET;</div><div class="line">./arch/arm/cpu/armv7/mx6/clock.c:428:   return freq / (uart_podf + 1);</div><div class="line">./arch/arm/cpu/armv7/mx6/clock.c:1049:u32 imx_get_uartclk(void)</div><div class="line">./arch/arm/cpu/armv7/mx6/clock.c:1051:  return get_uart_clk();</div><div class="line">./arch/arm/cpu/armv7/mx6/clock.c:1269:          return get_uart_clk();</div><div class="line"></div><div class="line">./arch/arm/cpu/armv7/mx6/clock.su:3:clock.c:412:12:get_uart_clk 16      static</div><div class="line">./arch/arm/cpu/armv7/mx6/clock.su:10:clock.c:132:6:enable_uart_clk      8      static</div><div class="line">./arch/arm/cpu/armv7/mx6/clock.su:20:clock.c:1049:5:imx_get_uartclk     0      static</div><div class="line">./drivers/serial/serial_mxc.c:145:      u32 clk = imx_get_uartclk();</div><div class="line">./drivers/serial/serial_mxc.c:241:struct mxc_uart &#123;</div><div class="line">./drivers/serial/serial_mxc.c:270:      struct mxc_uart *const uart = plat-&gt;reg;</div><div class="line">./drivers/serial/serial_mxc.c:271:      u32 clk = imx_get_uartclk();</div><div class="line">./drivers/serial/serial_mxc.c:273:      writel(4 &lt;&lt; 7, &amp;uart-&gt;fcr); /* divide input clock by 2 */</div><div class="line">./drivers/serial/serial_mxc.c:274:      writel(0xf, &amp;uart-&gt;bir);</div><div class="line">./drivers/serial/serial_mxc.c:275:      writel(clk / (2 * baudrate), &amp;uart-&gt;bmr);</div><div class="line">./drivers/serial/serial_mxc.c:278:             &amp;uart-&gt;cr2);</div><div class="line">./drivers/serial/serial_mxc.c:279:      writel(UCR1_UARTEN, &amp;uart-&gt;cr1);</div><div class="line">./drivers/serial/serial_mxc.c:287:      struct mxc_uart *const uart = plat-&gt;reg;</div><div class="line">./drivers/serial/serial_mxc.c:289:      writel(0, &amp;uart-&gt;cr1);</div><div class="line">./drivers/serial/serial_mxc.c:290:      writel(0, &amp;uart-&gt;cr2);</div><div class="line">./drivers/serial/serial_mxc.c:291:      while (!(readl(&amp;uart-&gt;cr2) &amp; UCR2_SRST));</div><div class="line">./drivers/serial/serial_mxc.c:292:      writel(0x704 | UCR3_ADNIMP, &amp;uart-&gt;cr3);</div><div class="line">./drivers/serial/serial_mxc.c:293:      writel(0x8000, &amp;uart-&gt;cr4);</div><div class="line">./drivers/serial/serial_mxc.c:294:      writel(0x2b, &amp;uart-&gt;esc);</div><div class="line">./drivers/serial/serial_mxc.c:295:      writel(0, &amp;uart-&gt;tim);</div><div class="line">./drivers/serial/serial_mxc.c:296:      writel(0, &amp;uart-&gt;ts);</div><div class="line">./drivers/serial/serial_mxc.c:304:      struct mxc_uart *const uart = plat-&gt;reg;</div><div class="line">./drivers/serial/serial_mxc.c:306:      if (readl(&amp;uart-&gt;ts) &amp; UTS_RXEMPTY)</div><div class="line">./drivers/serial/serial_mxc.c:309:      return readl(&amp;uart-&gt;rxd) &amp; URXD_RX_DATA;</div><div class="line">./drivers/serial/serial_mxc.c:315:      struct mxc_uart *const uart = plat-&gt;reg;</div><div class="line">./drivers/serial/serial_mxc.c:317:      if (!(readl(&amp;uart-&gt;ts) &amp; UTS_TXEMPTY))</div><div class="line">./drivers/serial/serial_mxc.c:320:      writel(ch, &amp;uart-&gt;txd);</div><div class="line">./drivers/serial/serial_mxc.c:328:      struct mxc_uart *const uart = plat-&gt;reg;</div><div class="line">./drivers/serial/serial_mxc.c:329:      uint32_t sr2 = readl(&amp;uart-&gt;sr2);</div><div class="line"></div><div class="line">./drivers/serial/serial.c:143:serial_initfunc(mxs_auart_initialize);</div><div class="line">./drivers/serial/serial.c:156:serial_initfunc(uartlite_serial_initialize);</div><div class="line">./drivers/serial/serial.c:234:  mxs_auart_initialize();</div><div class="line">./drivers/serial/serial.c:247:  uartlite_serial_initialize();</div><div class="line">./drivers/serial/serial.c:525: * uart_post_test() - Test the currently selected serial port using POST</div><div class="line">./drivers/serial/serial.c:535:/* Mark weak until post/cpu/.../uart.c migrate over */</div><div class="line">./drivers/serial/serial.c:537:int uart_post_test(int flags)</div></pre></td></tr></table></figure></p><p>可以看到分别是初始化<code>uart</code>引脚、时钟、设置相关寄存器等函数。<br>非常的清晰，很容易就移植过来：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">uart1_clock_enable</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line"><span class="comment">//uart时钟</span></div><div class="line">CCM_CSCDR1 |= (<span class="number">0x01</span>&lt;&lt;<span class="number">6</span>); <span class="comment">//P676 Selector for the UART clock multiplexor:1 derive clock from osc_clk</span></div><div class="line">CCM_CCGR5  |= (<span class="number">0x03</span>&lt;&lt;<span class="number">24</span>); <span class="comment">//uart1 clock (uart1_clk_enable)</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">uart1_iomux</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line"><span class="comment">//uart引脚复用</span></div><div class="line">IOMUXC_UART1_TX |=  (<span class="number">0x01</span>&lt;&lt;<span class="number">16</span> | <span class="number">0x02</span>&lt;&lt;<span class="number">14</span> | <span class="number">0x01</span>&lt;&lt;<span class="number">13</span> | <span class="number">0x01</span>&lt;&lt;<span class="number">12</span> | <span class="number">0x02</span>&lt;&lt;<span class="number">6</span> | <span class="number">0x06</span>&lt;&lt;<span class="number">3</span> | <span class="number">0x01</span>&lt;&lt;<span class="number">0</span>);</div><div class="line">IOMUXC_UART1_RX |=  (<span class="number">0x01</span>&lt;&lt;<span class="number">16</span> | <span class="number">0x02</span>&lt;&lt;<span class="number">14</span> | <span class="number">0x01</span>&lt;&lt;<span class="number">13</span> | <span class="number">0x01</span>&lt;&lt;<span class="number">12</span> | <span class="number">0x02</span>&lt;&lt;<span class="number">6</span> | <span class="number">0x06</span>&lt;&lt;<span class="number">3</span> | <span class="number">0x01</span>&lt;&lt;<span class="number">0</span>);</div><div class="line"> </div><div class="line">IOMUXC_UART1_TX &amp;= ~(<span class="number">0x0F</span>&lt;&lt;<span class="number">0</span>); <span class="comment">//P1578  0000 ALT0 — Select mux mode: ALT0 mux port: UART1_TX of instance: uart1</span></div><div class="line">IOMUXC_UART1_RX &amp;= ~(<span class="number">0x0F</span>&lt;&lt;<span class="number">0</span>); <span class="comment">//P1579  0000 ALT0 — Select mux mode: ALT0 mux port: UART1_RX of instance: uart1</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">raise</span> <span class="params">(<span class="keyword">int</span> sig_nr)</span></span></div><div class="line">&#123;</div><div class="line">;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">get_uart_clk</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> reg, uart_podf;</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> freq, div;</div><div class="line"></div><div class="line"><span class="comment">//div = CCM_ANALOG_PLL_USB1;</span></div><div class="line">div = CCM_CACRR;</div><div class="line">div &amp;= <span class="number">0x00000003</span>;</div><div class="line">freq = <span class="number">26000000</span> * (<span class="number">20</span> + (div &lt;&lt; <span class="number">1</span>));</div><div class="line"></div><div class="line">reg = CCM_CSCDR1;</div><div class="line"><span class="keyword">if</span> (reg &amp; (<span class="number">1</span>&lt;&lt;<span class="number">6</span>))</div><div class="line">freq = <span class="number">26000000</span>;</div><div class="line"></div><div class="line"></div><div class="line">reg &amp;= <span class="number">0x3F</span>; </div><div class="line">uart_podf = reg &gt;&gt; <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="keyword">return</span> freq / (uart_podf + <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//uart配置</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">uart1_config</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> clk;</div><div class="line"></div><div class="line">UART1_UCR1 = <span class="number">0</span>;</div><div class="line">UART1_UCR2 = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span>(!(UART1_UCR2 &amp; (<span class="number">1</span>&lt;&lt;<span class="number">0</span>)));</div><div class="line">UART1_UCR3 = (<span class="number">0x704</span> | (<span class="number">1</span>&lt;&lt;<span class="number">7</span>));</div><div class="line">UART1_UCR4 = (<span class="number">0x8000</span>);</div><div class="line">UART1_UESC = (<span class="number">0x2b</span>);</div><div class="line">UART1_UTIM = (<span class="number">0</span>);</div><div class="line">UART1_UTS  = (<span class="number">0</span>);</div><div class="line"></div><div class="line">clk = get_uart_clk(); <span class="comment">//实测是25952384</span></div><div class="line">UART1_UFCR = (<span class="number">4</span>&lt;&lt;<span class="number">7</span> | <span class="number">2</span>&lt;&lt;<span class="number">10</span> | <span class="number">1</span>&lt;&lt;<span class="number">0</span>);</div><div class="line"><span class="comment">//UART1_UFCR = (4&lt;&lt;7);</span></div><div class="line">UART1_UBIR = (<span class="number">0xf</span>);</div><div class="line">UART1_UBMR = (clk / (<span class="number">2</span> * <span class="number">125000</span>));<span class="comment">//115200 - 9.42     125000 - 8.75</span></div><div class="line"></div><div class="line">UART1_UCR2 = (<span class="number">1</span>&lt;&lt;<span class="number">5</span> | <span class="number">1</span>&lt;&lt;<span class="number">14</span> | <span class="number">1</span>&lt;&lt;<span class="number">1</span> | <span class="number">1</span>&lt;&lt;<span class="number">2</span> | <span class="number">1</span>&lt;&lt;<span class="number">0</span>);</div><div class="line">UART1_UCR1 = (<span class="number">1</span>&lt;&lt;<span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span>  <span class="title">uart_init</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">uart1_clock_enable();</div><div class="line"></div><div class="line">uart1_iomux();</div><div class="line"></div><div class="line">uart1_config();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span>  <span class="title">uart_PutChar</span><span class="params">(<span class="keyword">char</span>  c)</span></span></div><div class="line">&#123;</div><div class="line">UART1_UTXD = c;</div><div class="line"><span class="keyword">while</span>(!(UART1_UTS &amp; (<span class="number">1</span>&lt;&lt;<span class="number">6</span>)));</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">uart_PutString</span><span class="params">(<span class="keyword">char</span> *ptr)</span></span></div><div class="line">&#123;</div><div class="line"> </div><div class="line"><span class="keyword">while</span>(*ptr != <span class="string">'\0'</span>)</div><div class="line">&#123;          </div><div class="line">uart_PutChar(*ptr++);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>这里的移植后遇到两个问题：<br>1.程序里打印<code>45</code>，实际打印出<code>tu</code>，通过ASCLL表和逻辑分析仪发现数据有点错位，代码里的<code>115200</code>波特率对应的脉宽宽了，这里直接把程序里的波特率改为<code>125000</code>，再用逻辑分析仪看就很“正”了。</p><p>2.前面的<code>get_uart_clk()</code>函数涉及到了除法，交叉编译工具链是不支持硬件除法的。解决方法有两个：</p><ul><li><p>在Makefile添加含除法的GCC库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># Add GCC lib</div><div class="line">PLATFORM_LIBS += -L $(shell dirname `$(CC) $(CFLAGS) -print-libgcc-file-name`) -lgcc</div></pre></td></tr></table></figure></li><li><p>打印出get_uart_clk()的返回值，直接赋值。</p></li></ul><h1 id="7-重定位"><a href="#7-重定位" class="headerlink" title="7.重定位"></a>7.重定位</h1><p>前面的uart程序，后面实测发现一些问题，很大概率打印的数据是错误或者无法打印，研究后发现，是没有重定位的原因。</p><p>原来，开发板上电后，会从Flash中复制代码到SRAM，在SRAM里面一句一句的执行指令(此时运行的地址是硬件决定的)。<br>实际上，我们更多的是希望他在SDRAM上运行，因为SDRAM的空间更大，于是在链接脚本中，指定它应该运行的地址。<br>于是代码开始时实际运行的地址和期望运行的地址一般是不一样的，就需要<strong>重定位</strong>代码到链接脚本指定的地址。<br>不然的话，假如一个数据，在链接脚本里指定放在了高地址某处，但实际代码运行在低地址附近。代码执行时，需要读取高地址位置的数据，但高地址的数据并没有任何东西，一但读取就很可能发生异常。</p><p>首先编写链接脚本：<br><figure class="highlight plain"><figcaption><span>[imx6ul.lds]</span><a href="https://github.com/hceng/learn/blob/master/imx6ull/hardware/uart/imx6ul.lds" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">SECTIONS &#123;</div><div class="line">    . = 0x80000000;</div><div class="line">    .text : &#123; start.o(.text)</div><div class="line">  main.o(.text)</div><div class="line">              led.o(.text)</div><div class="line">              uart.o(.text)</div><div class="line">  printf.o(.text)</div><div class="line">              *(.text) </div><div class="line">            &#125;</div><div class="line">    .rodata ALIGN(4) : &#123;*(.rodata*)&#125; </div><div class="line">    .data   ALIGN(4) : &#123; *(.data) &#125;</div><div class="line">    __bss_start = .;</div><div class="line">    .bss ALIGN(4)  : &#123; *(.bss)  *(COMMON) &#125;</div><div class="line">    __bss_end = .;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>这是一个比较通用的链接脚本，指定了代码段、只读数据段、数据段、BSS段等的位置。<br>开始的<code>0x80000000</code>就是我们期望它运行的地址，一般都是SDRAM中的某个地址，如果这个地址和代码实际运行的地址相同，就没必要重定位了。</p><p>然后在<code>start.S</code>里重定位操作：<br><figure class="highlight plain"><figcaption><span>[start.S]</span><a href="https://github.com/hceng/learn/blob/master/imx6ull/hardware/uart/start.S" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">.text</div><div class="line">.global  _start</div><div class="line">_start: </div><div class="line"></div><div class="line">@设置栈</div><div class="line">ldr  sp,=0x90000000@设置栈</div><div class="line"></div><div class="line">bl relocate      @重定位</div><div class="line">@bl clean_bss     @清BSS段</div><div class="line"></div><div class="line">@adr r0, _start @可用于获取当前代码的地址,作为参数传给main,main里面再打印出来&quot;int main(int addr)&quot;</div><div class="line">@ldr  pc, =main @如果没重定位,这样直接跳到main代码的位置(链接脚本的期望地址),那个位置的数据未知,肯定出错</div><div class="line">bl main          @bl相对跳转,不管有没有重定位,都能到main的位置</div><div class="line"></div><div class="line">halt:</div><div class="line">b  halt </div><div class="line"></div><div class="line">relocate:</div><div class="line">    adr r0, _start  @r0:代码当前被放在的位置,由硬件特性决定</div><div class="line">ldr r1, =_start @r1:代码期望被放在的位置,即链接脚本里的地址,用户想放在的位置,比如SDRAM</div><div class="line">@当两者相同则不用重定位,否则需要重定位</div><div class="line">cmp r0, r1      @比较r0和r1</div><div class="line">moveq pc,lr     @相等则pc=lr,即跳回到调用relocate的位置;不相等跳过执行下面的指令</div><div class="line"></div><div class="line">ldr r2, =__bss_start @r2等于链接脚本里的__bss_start,即代码段、只读数据段、数据段的结束位置</div><div class="line">cpy:</div><div class="line">ldr r3, [r0], #4 @将r0地址的数据放到r3,r0往后再移动一个字节</div><div class="line">str r3, [r1], #4 @将r3的数据放到r1,r1往后再移动一个字节</div><div class="line">                 @这两句完成了代码从当前位置复制到期望的链接地址位置的操作</div><div class="line">    cmp r1, r2       @判断是不是复制完了</div><div class="line">    bne cpy          @不相等继续复制   </div><div class="line"></div><div class="line">mov pc, lr     @pc=lr,即跳回到调用relocate的位置;</div><div class="line"></div><div class="line">clean_bss:</div><div class="line">ldr r0, =__bss_start @r0=bss段开始位置</div><div class="line">ldr r1, =__bss_end   @r1=bss段结束位置</div><div class="line">mov r2, #0           @r0=0,填充0用</div><div class="line">clean_loop:  </div><div class="line">str r2, [r0], #4     @将0写到bss段开始位置,并r0向后移一个字节</div><div class="line">cmp r0, r1           @比较bss段是不是完了</div><div class="line">bne clean_loop       @不相等则继续清0</div><div class="line"></div><div class="line">mov pc, lr     @pc=lr,即跳回到调用clean_bss的位置;</div></pre></td></tr></table></figure></p><p>开始的栈地址，选择SDRAM的最高地址即可。其它没什么说的了，注释写的很清楚，目的就是把当前位置的代码(一般是SRAM)复制到期望运行的地址(一般是SDRAM)。</p><h1 id="8-移植printf"><a href="#8-移植printf" class="headerlink" title="8.移植printf"></a>8.移植printf</h1><p>移植printf就很简单了，搞定了uart打印字符的函数后，利用以下框架即可：</p><ul><li>复制提供的<code>printf.c</code>和<code>printf.h</code>；</li><li>将<code>printf.h</code>里定义的<code>__out_putchar</code>宏改为uart里打印字符的函数即可；</li></ul><p>实测效果：<br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/180328/3.png" alt=""></p><h1 id="9-其它"><a href="#9-其它" class="headerlink" title="9.其它"></a>9.其它</h1><p>以上就是拿到一个全新的板子，如何快速上手板子的过程。</p><p>将以上思路，应用于RK3288，发现完全适用，也是先编译Uboot，得知加头的方式，然后得知下载方式，点灯，重定位，仅仅半天就可以实现串口的打印。<br>对RK3288的操作就不详细写了，思路上是完全一摸一样的，相关代码在文章最后。</p><p>后续有时间的话，可能会尝试去移植Nand，这些后续再看情况。</p><p>对iMX6ULL的初步上手就差不多了，感觉这SOC做得还是很不错，上手很快，价格低廉。</p><p>相关代码Github地址：<br><a href="https://github.com/hceng/learn/tree/master/imx6ull/hardware" target="_blank" rel="external">IMX6ULL</a><br><a href="https://github.com/hceng/learn/tree/master/rk3288/hardware" target="_blank" rel="external">RK3288</a></p><hr><p><div align="center"><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本文采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href="http://hceng.cn/" target="_blank" rel="external">hceng’s blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第一次接触NXP/Freescale的SOC，记录拿到板子后快速上手的技巧和思维的方式。&lt;br&gt;
    
    </summary>
    
    
      <category term="裸机" scheme="http://yoursite.com/tags/%E8%A3%B8%E6%9C%BA/"/>
    
      <category term="i.MX6ULL" scheme="http://yoursite.com/tags/i-MX6ULL/"/>
    
  </entry>
  
  <entry>
    <title>Linux摄像头驱动2——UVC</title>
    <link href="http://yoursite.com/2018/03/23/Linux%E6%91%84%E5%83%8F%E5%A4%B4%E9%A9%B1%E5%8A%A82%E2%80%94%E2%80%94UVC/"/>
    <id>http://yoursite.com/2018/03/23/Linux摄像头驱动2——UVC/</id>
    <published>2018-03-23T12:18:08.000Z</published>
    <updated>2018-03-23T01:23:27.144Z</updated>
    
    <content type="html"><![CDATA[<p>Linux摄像头驱动学习第二篇，对USB摄像头驱动USB video class(UVC)进行详细分析、编写。<br><a id="more"></a><br>这次要写一个真正的摄像头驱动，内容有点多，要是放在以前，心态肯定崩了，坚持不下去。<br>但现在不一样了，学习的“惯性”让我越学越快，一口气拿下UVC!</p><h1 id="1-UVC概况"><a href="#1-UVC概况" class="headerlink" title="1.UVC概况"></a>1.UVC概况</h1><h1 id="2-移植摄像头驱动"><a href="#2-移植摄像头驱动" class="headerlink" title="2.移植摄像头驱动"></a>2.移植摄像头驱动</h1><h1 id="3-USB描述符"><a href="#3-USB描述符" class="headerlink" title="3.USB描述符"></a>3.USB描述符</h1><h1 id="4-编写UVC驱动"><a href="#4-编写UVC驱动" class="headerlink" title="4.编写UVC驱动"></a>4.编写UVC驱动</h1><hr><p><div align="center"><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本文采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href="http://hceng.cn/" target="_blank" rel="external">hceng’s blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Linux摄像头驱动学习第二篇，对USB摄像头驱动USB video class(UVC)进行详细分析、编写。&lt;br&gt;
    
    </summary>
    
    
      <category term="Linux驱动" scheme="http://yoursite.com/tags/Linux%E9%A9%B1%E5%8A%A8/"/>
    
      <category term="摄像头" scheme="http://yoursite.com/tags/%E6%91%84%E5%83%8F%E5%A4%B4/"/>
    
  </entry>
  
  <entry>
    <title>Linux摄像头驱动1——vivid</title>
    <link href="http://yoursite.com/2018/03/08/Linux%E6%91%84%E5%83%8F%E5%A4%B4%E9%A9%B1%E5%8A%A81%E2%80%94%E2%80%94vivid/"/>
    <id>http://yoursite.com/2018/03/08/Linux摄像头驱动1——vivid/</id>
    <published>2018-03-08T07:59:30.000Z</published>
    <updated>2018-03-14T07:04:10.361Z</updated>
    
    <content type="html"><![CDATA[<p>Linux摄像头驱动学习第一篇，对虚拟视频驱动Virtual Video Driver(vivid)进行测试、分析、编写。<br><a id="more"></a></p><p>V4L2(Video for Linux two)是Linux内核中关于<strong>视频设备</strong>的内核<strong>驱动框架</strong>，为上层的访问底层的视频设备提供了统一的接口。</p><p>V4L2可以支持多种设备,它可以有以下几种接口: </p><blockquote><ol><li>Video capture interface(视频采集接口):从摄像头等设备上获取视频数据,是V4L2设计最初功能；</li><li>Video output interface(视频输出接口):驱动计算机的外围视频、图像显示设备；</li><li>Video overlay interface(直接传输视频接口):把从视频采集设备采集过来的信号直接输出到输出设备之上,而不用经过CPU；</li><li>Video output overlay device(视频输出覆盖设备):也被称为OSD(On-Screen Display),即在显示画面上叠加一层显示，比如菜单设置界面；</li><li>VBI interface(视频间隔消隐信号接口):提供对VBI(Vertical Blanking Interval)数据的控制,它可以使应用可以访问传输消隐期的视频信号；</li><li>Radio interface(收音机接口):处理从AM或FM高频头设备接收来的音频流；</li></ol></blockquote><h1 id="1-V4L2框架分析"><a href="#1-V4L2框架分析" class="headerlink" title="1.V4L2框架分析"></a>1.V4L2框架分析</h1><p><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/180308/4.jpg" alt=""></p><h1 id="2-测试vivid"><a href="#2-测试vivid" class="headerlink" title="2.测试vivid"></a>2.测试vivid</h1><p>这里目的先加载vivid驱动，然后运行应用程序调用vivid驱动，初步体验效果。</p><h2 id="2-1加载驱动"><a href="#2-1加载驱动" class="headerlink" title="2.1加载驱动"></a>2.1加载驱动</h2><p>先在Ubuntu16.04上输入<code>uname -a</code>，可以得到当前Ubuntu内核版本号：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Linux ubuntu 4.4.0-116-generic #140-Ubuntu SMP Mon Feb 12 21:23:04 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux</div></pre></td></tr></table></figure></p><p>当前内核版本是<code>4.4.0-116-generic</code>，然后去<a href="https://www.kernel.org/pub/linux/kernel/v4.x/" target="_blank" rel="external">Linux内核官网</a>下载对应的内核，提取出其中的<code>linux-4.13.9/drivers/media/</code>文件夹。</p><p>修改<code>media/platform/vivid/</code>下的<code>Makefile</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">KERN_DIR = /usr/src/linux-headers-4.4.0-116-generic</div><div class="line"></div><div class="line">vivid-objs := vivid-core.o vivid-ctrls.o vivid-vid-common.o vivid-vbi-gen.o \</div><div class="line">vivid-vid-cap.o vivid-vid-out.o vivid-kthread-cap.o vivid-kthread-out.o \</div><div class="line">vivid-radio-rx.o vivid-radio-tx.o vivid-radio-common.o \</div><div class="line">vivid-rds-gen.o vivid-sdr-cap.o vivid-vbi-cap.o vivid-vbi-out.o \</div><div class="line">vivid-osd.o vivid-tpg.o vivid-tpg-colors.o</div><div class="line"></div><div class="line">all:</div><div class="line">make -C $(KERN_DIR) M=`pwd` modules </div><div class="line"></div><div class="line">clean:</div><div class="line">make -C $(KERN_DIR) M=`pwd` modules clean</div><div class="line">rm -rf modules.order</div><div class="line"></div><div class="line">obj-$(CONFIG_VIDEO_VIVID) += vivid.o</div></pre></td></tr></table></figure></p><p>然后执行<code>make</code>编译，获得<code>vivid.ko</code><br>此时加载模块<code>sudo insmod vivid.ko</code>，发现报错如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">insmod: ERROR: could not insert module vivid.ko: Unknown symbol in module</div></pre></td></tr></table></figure></p><p>原因是模块中的一些依赖函数的模块，没有加载，通过<code>dmesg</code>命令，可以看到很多函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[  488.786285] vivid: Unknown symbol vb2_queue_init (err 0)</div><div class="line">[  488.786295] vivid: Unknown symbol v4l2_ctrl_poll (err 0)</div><div class="line">[  488.786304] vivid: Unknown symbol v4l2_enum_dv_timings_cap (err 0)</div><div class="line">[  488.786314] vivid: Unknown symbol video_ioctl2 (err 0)</div><div class="line">[  488.786364] vivid: Unknown symbol v4l2_get_timestamp (err 0)</div><div class="line">[  488.786389] vivid: Unknown symbol v4l2_device_put (err 0)</div><div class="line">[  488.786418] vivid: Unknown symbol vb2_ioctl_streamoff (err 0)</div><div class="line">…………</div></pre></td></tr></table></figure></p><p>需要先加载这些函数所在的模块才行。<br>这里有两个方法：<br>一是找到函数对应的文件，修改<code>Makefile</code>，编译出来，先加载。<br>二是找到函数对应的文件，其实模块都已经编译好了，路径在<code>/lib/modules/4.4.0-116-generic/kernel/drivers/media/v4l2-core/</code>里面，直接加载即可。</p><p>这两种方式都需要慢慢找对应的文件，比较麻烦，直接:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo modprobe vivid     //安装自带vivid及依赖</div><div class="line">sudo rmmod vivid        //卸载自带的vivid</div><div class="line">sudo insmod ./vivid.ko  //安装自己编译的vivid.ko</div></pre></td></tr></table></figure></p><p>这里先使用<code>modprobr</code>加载vivid，会将其依赖一并加载，然后再卸载vivid，最后加载上我们编译的<code>vivid.ko</code>。</p><p>这里为什么使用自己编译的<code>vivid.ko</code>，而不使用自带的？<br>因为后面修改vivid源码后，重新加载修改后的驱动，才知道修改后的效果。</p><h2 id="2-2应用程序"><a href="#2-2应用程序" class="headerlink" title="2.2应用程序"></a>2.2应用程序</h2><p>Linux摄像头测试软件webcam、spcaview、luvcview、xawtv等，经测试，<code>luvcview</code>和<code>xawtv</code>比较靠谱。</p><ul><li><p><a href="https://packages.ubuntu.com/zh-cn/source/trusty/luvcview" target="_blank" rel="external">luvcview</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">luvcview -h             //帮助信息</div><div class="line">luvcview -d /dev/videoX //指定设备</div><div class="line">luvcview -L             //查询当前摄像头所支持的所有数据格式以及分辨率信息 </div><div class="line">luvcview                //运行摄像头</div></pre></td></tr></table></figure></li><li><p><a href="https://linuxtv.org/downloads/xawtv/" target="_blank" rel="external">xawtv</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">xawtv -h                //帮助信息</div><div class="line">xawtv -c /dev/videoX    //指定设备</div><div class="line">xawtv -noalsa           //关闭声卡启动</div><div class="line">xawtv                   //运行摄像头</div></pre></td></tr></table></figure></li></ul><p>这里加载vivid驱动后，运行xawtv效果如下：<br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/180308/3.png" alt=""></p><h1 id="3-分析vivid"><a href="#3-分析vivid" class="headerlink" title="3.分析vivid"></a>3.分析vivid</h1><p>第一次接触V4L2，直接对内核提供的Virtual Video Driver(vivid)进行分析，只要熟悉了vivid，后续再对摄像头再进行分析，就会轻松很多。</p><p>vivid是内核提供的一个虚拟机的视频设备驱动，内核提供的vivid源码在<code>linux-4.13.9/drivers/media/platform/vivid/</code>。</p><h2 id="3-1-初始化、注册分析"><a href="#3-1-初始化、注册分析" class="headerlink" title="3.1 初始化、注册分析"></a>3.1 初始化、注册分析</h2><p>在<code>vivid_init()</code>里分别注册了<code>vivid_pdev</code>和<code>vivid_pdrv</code>，注册后，由于两者<code>name</code>一致，则会调用<code>probe()</code>。在<code>probe()</code>里面主要进行初始化、注册等相关流程。</p><p><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/180308/1.png" alt=""></p><p>可以看到，在<code>probe()</code>里，会调用<code>vivid_create_instance()</code>，让后在里面先<strong>分配</strong>一个<code>video_device</code>，然后<strong>设置</strong><code>video_device</code>，包括操作函数<code>ops</code>，<code>ioctl</code>操作函数，设备等。<br>然后对<code>ctrl</code>属性进行详细的设置，最后<strong>注册</strong><code>video_device</code>，和进行常规的字符设备注册。</p><p>因此，写摄像头驱动程序的流程如下:   </p><blockquote><ol><li>分配<code>video_device</code>:<code>video_device_alloc()</code>或<code>kzalloc()</code>；</li><li>设置<code>video_device</code>:<code>.fops</code>、<code>.ioctl_ops</code>、<code>dev</code>；</li><li>注册<code>video_device</code>: <code>video_register_device()</code>；</li></ol></blockquote><h2 id="3-2-操作函数分析"><a href="#3-2-操作函数分析" class="headerlink" title="3.2 操作函数分析"></a>3.2 操作函数分析</h2><p>再来看看操作函数是如何调用的：<br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/180308/2.png" alt=""></p><p>当应用层<code>open()</code>/<code>read()</code>/<code>write()</code>操作<code>/dev/videox</code>时，先找到<code>v4l2_fops</code>，<br>然后调用<code>v4l2_open</code>/<code>v4l2_read</code>/<code>v4l2_write</code>(<code>drivers/media/v4l2-core/v4l2-dev.c</code>)，<br>再通过<code>video_devdata</code>根据次设备号从数组中得到<code>video_device</code>，再找到<code>vivid_fops</code>里对应的操作函数。</p><p><code>ioctl</code>的前面流程类似，后面通过<code>video_usercopy()</code>获取传入的<code>ioctl</code>类型，找到对应<code>ioctl_ops</code>，调用不同的<code>ioctl</code>。</p><h2 id="3-3-ioctl-ops分析"><a href="#3-3-ioctl-ops分析" class="headerlink" title="3.3 ioctl_ops分析"></a>3.3 ioctl_ops分析</h2><p>摄像头驱动有众多的<code>ioctl</code>，这些<code>ioctl</code>实现了对设备的控制：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div></pre></td><td class="code"><pre><div class="line">static const struct v4l2_ioctl_ops vivid_ioctl_ops = &#123;</div><div class="line">/* 表示它是一个摄像头设备 */</div><div class="line">.vidioc_querycap= vidioc_querycap, </div><div class="line"></div><div class="line"></div><div class="line">/* 摄像头数据格式的操作 */</div><div class="line">.vidioc_enum_fmt_vid_cap= vidioc_enum_fmt_vid,     //列举格式</div><div class="line">.vidioc_g_fmt_vid_cap= vidioc_g_fmt_vid_cap,    //获取格式</div><div class="line">.vidioc_try_fmt_vid_cap= vidioc_try_fmt_vid_cap,  //测试格式</div><div class="line">.vidioc_s_fmt_vid_cap= vidioc_s_fmt_vid_cap,    //设置格式</div><div class="line">/* 支持multi-planar */</div><div class="line">.vidioc_enum_fmt_vid_cap_mplane = vidioc_enum_fmt_vid_mplane,</div><div class="line">.vidioc_g_fmt_vid_cap_mplane= vidioc_g_fmt_vid_cap_mplane,</div><div class="line">.vidioc_try_fmt_vid_cap_mplane= vidioc_try_fmt_vid_cap_mplane,</div><div class="line">.vidioc_s_fmt_vid_cap_mplane= vidioc_s_fmt_vid_cap_mplane,</div><div class="line"></div><div class="line">/* 数据输出操作 */</div><div class="line">.vidioc_enum_fmt_vid_out= vidioc_enum_fmt_vid,     //枚举输出格式</div><div class="line">.vidioc_g_fmt_vid_out= vidioc_g_fmt_vid_out,    //获取输出格式</div><div class="line">.vidioc_try_fmt_vid_out= vidioc_try_fmt_vid_out,  //测试输出格式</div><div class="line">.vidioc_s_fmt_vid_out= vidioc_s_fmt_vid_out,    //设置输出格式</div><div class="line">/* 支持multi-planar */</div><div class="line">.vidioc_enum_fmt_vid_out_mplane = vidioc_enum_fmt_vid_mplane,</div><div class="line">.vidioc_g_fmt_vid_out_mplane= vidioc_g_fmt_vid_out_mplane,</div><div class="line">.vidioc_try_fmt_vid_out_mplane= vidioc_try_fmt_vid_out_mplane,</div><div class="line">.vidioc_s_fmt_vid_out_mplane= vidioc_s_fmt_vid_out_mplane,</div><div class="line"></div><div class="line"></div><div class="line">.vidioc_g_selection= vidioc_g_selection,          //获取选择矩形</div><div class="line">.vidioc_s_selection= vidioc_s_selection,          //设置选择矩形</div><div class="line">.vidioc_cropcap= vidioc_cropcap,              //查询裁剪限制</div><div class="line"></div><div class="line">.vidioc_g_fmt_vbi_cap= vidioc_g_fmt_vbi_cap,        //获取指向原始数据VBI的指针</div><div class="line">.vidioc_try_fmt_vbi_cap= vidioc_g_fmt_vbi_cap,</div><div class="line">.vidioc_s_fmt_vbi_cap= vidioc_s_fmt_vbi_cap,</div><div class="line"></div><div class="line">.vidioc_g_fmt_sliced_vbi_cap    = vidioc_g_fmt_sliced_vbi_cap,</div><div class="line">.vidioc_try_fmt_sliced_vbi_cap  = vidioc_try_fmt_sliced_vbi_cap,</div><div class="line">.vidioc_s_fmt_sliced_vbi_cap    = vidioc_s_fmt_sliced_vbi_cap,</div><div class="line">.vidioc_g_sliced_vbi_cap= vidioc_g_sliced_vbi_cap,</div><div class="line"></div><div class="line">.vidioc_g_fmt_vbi_out= vidioc_g_fmt_vbi_out,</div><div class="line">.vidioc_try_fmt_vbi_out= vidioc_g_fmt_vbi_out,</div><div class="line">.vidioc_s_fmt_vbi_out= vidioc_s_fmt_vbi_out,</div><div class="line"></div><div class="line">.vidioc_g_fmt_sliced_vbi_out    = vidioc_g_fmt_sliced_vbi_out,</div><div class="line">.vidioc_try_fmt_sliced_vbi_out  = vidioc_try_fmt_sliced_vbi_out,</div><div class="line">.vidioc_s_fmt_sliced_vbi_out    = vidioc_s_fmt_sliced_vbi_out,</div><div class="line"></div><div class="line">.vidioc_enum_fmt_sdr_cap= vidioc_enum_fmt_sdr_cap,</div><div class="line">.vidioc_g_fmt_sdr_cap= vidioc_g_fmt_sdr_cap,</div><div class="line">.vidioc_try_fmt_sdr_cap= vidioc_try_fmt_sdr_cap,</div><div class="line">.vidioc_s_fmt_sdr_cap= vidioc_s_fmt_sdr_cap,</div><div class="line"></div><div class="line">.vidioc_overlay= vidioc_overlay,</div><div class="line">.vidioc_enum_framesizes= vidioc_enum_framesizes,</div><div class="line">.vidioc_enum_frameintervals= vidioc_enum_frameintervals,</div><div class="line">.vidioc_g_parm= vidioc_g_parm,</div><div class="line">.vidioc_s_parm= vidioc_s_parm,</div><div class="line"></div><div class="line">.vidioc_enum_fmt_vid_overlay= vidioc_enum_fmt_vid_overlay,</div><div class="line">.vidioc_g_fmt_vid_overlay= vidioc_g_fmt_vid_overlay,</div><div class="line">.vidioc_try_fmt_vid_overlay= vidioc_try_fmt_vid_overlay,</div><div class="line">.vidioc_s_fmt_vid_overlay= vidioc_s_fmt_vid_overlay,</div><div class="line">.vidioc_g_fmt_vid_out_overlay= vidioc_g_fmt_vid_out_overlay,</div><div class="line">.vidioc_try_fmt_vid_out_overlay= vidioc_try_fmt_vid_out_overlay,</div><div class="line">.vidioc_s_fmt_vid_out_overlay= vidioc_s_fmt_vid_out_overlay,</div><div class="line">.vidioc_g_fbuf= vidioc_g_fbuf,</div><div class="line">.vidioc_s_fbuf= vidioc_s_fbuf,</div><div class="line"></div><div class="line">/* 缓冲区操作 */</div><div class="line">.vidioc_reqbufs= vb2_ioctl_reqbufs,        //申请</div><div class="line">.vidioc_create_bufs= vb2_ioctl_create_bufs,    //创建</div><div class="line">.vidioc_prepare_buf= vb2_ioctl_prepare_buf,    //准备</div><div class="line">.vidioc_querybuf= vb2_ioctl_querybuf,       //查询</div><div class="line">.vidioc_qbuf= vb2_ioctl_qbuf,           //放入</div><div class="line">.vidioc_dqbuf= vb2_ioctl_dqbuf,          //取出</div><div class="line">.vidioc_expbuf= vb2_ioctl_expbuf,         //导出</div><div class="line">.vidioc_streamon= vb2_ioctl_streamon,       //启动</div><div class="line">.vidioc_streamoff= vb2_ioctl_streamoff,      //停止</div><div class="line">                                                       </div><div class="line">/* 输入源操作 */                                   </div><div class="line">.vidioc_enum_input= vidioc_enum_input,        //枚举输入源</div><div class="line">.vidioc_g_input= vidioc_g_input,           //获取输入源</div><div class="line">.vidioc_s_input= vidioc_s_input,           //设置输入源</div><div class="line">.vidioc_s_audio= vidioc_s_audio,           //设置音频</div><div class="line">.vidioc_g_audio= vidioc_g_audio,           //获取音频</div><div class="line">.vidioc_enumaudio= vidioc_enumaudio,     //枚举音频</div><div class="line">.vidioc_s_frequency= vidioc_s_frequency,     //设置频率</div><div class="line">.vidioc_g_frequency= vidioc_g_frequency,      //获取输入源</div><div class="line">.vidioc_s_tuner= vidioc_s_tuner,           //设置调谐器</div><div class="line">.vidioc_g_tuner= vidioc_g_tuner,           //获取调谐器</div><div class="line">.vidioc_s_modulator= vidioc_s_modulator,     //设置调制器</div><div class="line">.vidioc_g_modulator= vidioc_g_modulator,      //获取调制器</div><div class="line">.vidioc_s_hw_freq_seek= vidioc_s_hw_freq_seek,           //硬件频率搜索</div><div class="line">.vidioc_enum_freq_bands= vidioc_enum_freq_bands,          //枚举调谐器或调制器支持的频段</div><div class="line"></div><div class="line">/* 输出端操作 */</div><div class="line">.vidioc_enum_output= vidioc_enum_output,          //枚举视频输出端</div><div class="line">.vidioc_g_output= vidioc_g_output,             //获取视频输出</div><div class="line">.vidioc_s_output= vidioc_s_output,             //设置视频输出</div><div class="line">.vidioc_s_audout= vidioc_s_audout,             //设置音频输出</div><div class="line">.vidioc_g_audout= vidioc_g_audout,             //获取音频输出</div><div class="line">.vidioc_enumaudout= vidioc_enumaudout,           //枚举视频输出端</div><div class="line"></div><div class="line">/* 制式操作 */</div><div class="line">.vidioc_querystd= vidioc_querystd,             //查询制式</div><div class="line">.vidioc_g_std= vidioc_g_std,                //获取制式</div><div class="line">.vidioc_s_std= vidioc_s_std,                //设置制式</div><div class="line">.vidioc_s_dv_timings= vidioc_s_dv_timings,         //设置DV时序</div><div class="line">.vidioc_g_dv_timings= vidioc_g_dv_timings,         //获取DV时序</div><div class="line">.vidioc_query_dv_timings= vidioc_query_dv_timings,     //查询DV时序</div><div class="line">.vidioc_enum_dv_timings= vidioc_enum_dv_timings,      //枚举DV时序</div><div class="line">.vidioc_dv_timings_cap= vidioc_dv_timings_cap,       //查询DV应用程序功能</div><div class="line">.vidioc_g_edid= vidioc_g_edid,               //获取EDID数据块</div><div class="line">.vidioc_s_edid= vidioc_s_edid,               //设置EDID数据块</div><div class="line"></div><div class="line">/* 调试操作 */</div><div class="line">.vidioc_log_status= vidioc_log_status,           //输出设备状态到内核日志</div><div class="line">.vidioc_subscribe_event= vidioc_subscribe_event,      //订阅V4L2事件</div><div class="line">.vidioc_unsubscribe_event= v4l2_event_unsubscribe,      //取消订阅V4L2事件</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><p>提取出11个必须的<code>ioctl</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">/* 表示它是一个摄像头设备 */</div><div class="line">.vidioc_querycap= vidioc_querycap, </div><div class="line"></div><div class="line">/* 摄像头数据格式的操作 */</div><div class="line">.vidioc_enum_fmt_vid_cap= vidioc_enum_fmt_vid,     //列举格式</div><div class="line">.vidioc_g_fmt_vid_cap= vidioc_g_fmt_vid_cap,    //获取格式</div><div class="line">.vidioc_try_fmt_vid_cap= vidioc_try_fmt_vid_cap,  //测试格式</div><div class="line">.vidioc_s_fmt_vid_cap= vidioc_s_fmt_vid_cap,    //设置格式</div><div class="line"></div><div class="line">/* 缓冲区操作 */</div><div class="line">.vidioc_reqbufs= vb2_ioctl_reqbufs,        //申请</div><div class="line">.vidioc_querybuf= vb2_ioctl_querybuf,       //查询</div><div class="line">.vidioc_qbuf= vb2_ioctl_qbuf,           //放入</div><div class="line">.vidioc_dqbuf= vb2_ioctl_dqbuf,          //取出</div><div class="line">.vidioc_streamon= vb2_ioctl_streamon,       //启动</div><div class="line">.vidioc_streamoff= vb2_ioctl_streamoff,      //停止</div></pre></td></tr></table></figure></p><h2 id="3-4-数据获取过程分析"><a href="#3-4-数据获取过程分析" class="headerlink" title="3.4 数据获取过程分析"></a>3.4 数据获取过程分析</h2><p><strong>1.请求分配缓冲区</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">app:ioctl(fd, VIDIOC_REQBUFS, xx)</div><div class="line">videobuf_reqbufs(vdev-&gt;queue, p-&gt;memory, &amp;p-&gt;count);//没分配真正buf</div></pre></td></tr></table></figure></p><p><strong>2.查询映射缓冲区</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">app:ioctl(fd, VIDIOC_QUERYBUF, xx)</div><div class="line">videobuf_querybuf //获得buf的数据格式、大小、每一行长度、高度</div><div class="line"></div><div class="line">v4l2_mmap</div><div class="line">vb2_fop_mmap</div><div class="line">videobuf_mmap_mapper</div><div class="line">__videobuf_mmap_mapper</div><div class="line">mem-&gt;vaddr = vmalloc_user(pages); //这里分配buf</div></pre></td></tr></table></figure></p><p><strong>3.把缓冲区放入队列</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">app:ioctl(fd, VIDIOC_QBUF, xx)</div><div class="line">videobuf_qbuf</div><div class="line">q-&gt;ops-&gt;buf_prepare(q, buf, field);      //调用驱动程序提供的函数做预处理</div><div class="line">list_add_tail(&amp;buf-&gt;stream, &amp;q-&gt;stream); //把缓冲区放入队列的尾部</div><div class="line">q-&gt;ops-&gt;buf_queue(q, buf);               //用驱动程序提供的&quot;入队列函数&quot;</div></pre></td></tr></table></figure></p><p><strong>4.启动摄像头 </strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">app:ioctl(fd, VIDIOC_STREAMON, xx)</div><div class="line">videobuf_streamon   </div><div class="line">q-&gt;streaming = 1;</div></pre></td></tr></table></figure></p><p><strong>5.用select查询是否有数据</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">v4l2_poll</div><div class="line">vdev-&gt;fops-&gt;poll();</div><div class="line">vivi_poll </div><div class="line">videobuf_poll_stream</div><div class="line">buf = list_entry();  //从队列的头部获得buf</div><div class="line">poll_wait();         //如果没有数据则休眠</div><div class="line"></div><div class="line">vivid_thread_vid_cap                 //内核进程唤醒</div><div class="line">vivid_thread_vid_cap_tick</div><div class="line">vivid_fillbuff //构造数据</div><div class="line">vb2_buffer_done  </div><div class="line">wake_up();   //唤醒进程</div></pre></td></tr></table></figure></p><p><strong>6.有数据后,从队列取出缓冲区</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">app:ioctl(fd, VIDIOC_DQBUF, xx)   //使用VIDIOC_DQBUF获取buf状态</div><div class="line">videobuf_dqbuf</div><div class="line">stream_next_buffer  //在队列里获得有数据的缓冲区</div><div class="line">list_del            //把它从队列中删掉</div><div class="line">videobuf_status     //把这个缓冲区的状态返回给APP</div></pre></td></tr></table></figure></p><p><strong>7.读取对应地址缓冲区</strong><br>应用程序根据VIDIOC_DQBUF所得到缓冲区状态，知道是哪一个缓冲区有数据,就去读对应的地址(该地址来自前面的mmap)    </p><p><strong>调试技巧:</strong></p><blockquote><p>1.得到xawtv进行了哪些系统调用:<br><code>sudo strace -o xawtv.log xawtv</code><br>2.在串口终端下，修改打印等级：<br><code>sudo echo &quot;8 4 1 7&quot; &gt;/proc/sys/kernel/printk</code><br>3.当无串口，即前面方法无效时，在SSH登陆时：<br><code>tail -f /var/log/kern.log &amp;</code><br>可实现内核打印增量显示。  </p></blockquote><h1 id="4-编写vivid"><a href="#4-编写vivid" class="headerlink" title="4.编写vivid"></a>4.编写vivid</h1><p>根据前面的分析，简单记录下虚拟视频驱动的编写流程：</p><blockquote><p>1.注册平台设备和驱动；<br>2.probe()函数：<br>　　a.分配<code>video_device</code>；<br>　　b.设置<code>video_device</code>，包括：<code>release</code>、<code>fops</code>、<code>ioctl_ops</code>、<code>v4l2_dev</code>；<br>　　c.注册设置<code>video_device</code>；<br>　　d.其它：定义/初始化自旋锁/定时器；<br>3.填充操作函数<code>v4l2_file_operations</code>:<br>　　a.<code>open()</code>：初始buf化队列和设置定时器；<br>　　b.<code>close()</code>:删除定时器和释放buf队列；<br>　　c.<code>mmap()</code>:调用<code>videobuf_mmap_mapper</code>开辟虚拟内存；<br>　　d.<code>poll()</code>:调用<code>videobuf_poll_stream</code>实现poll机制非阻塞访问；<br>4.填充操作函数<code>v4l2_ioctl_ops</code>：<br>　　前面介绍的11个必须ioctl，几乎都是调用内核提供的API；<br>5.填充操作函数<code>videobuf_queue_ops</code>：<br>　　对buf进行一些操作；<br>6.填充数据:<br>　　利用定时器，不断产生数据并唤醒进程，实现获取到图像采集数据；</p></blockquote><figure class="highlight c"><figcaption><span>[my_vivid.c]</span><a href="https://github.com/hceng/learn/blob/master/tiny4412/07_vivid/my_vivid/my_vivid.c" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/errno.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/sched.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/slab.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/vmalloc.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/font.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/mutex.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/platform_device.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/videodev2.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/v4l2-dv-timings.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;media/videobuf2-vmalloc.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;media/videobuf2-dma-contig.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;media/v4l2-dv-timings.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;media/v4l2-ioctl.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;media/v4l2-fh.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;media/v4l2-event.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;media/v4l2-device.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;media/videobuf-core.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;media/videobuf-vmalloc.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"fillbuf.c"</span></span></div><div class="line"></div><div class="line"><span class="comment">/* 队列操作a: 定义自旋锁、定时器、buf队列 */</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">spinlock_t</span> my_vivid_queue_slock;</div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> timer_list my_vivid_timer;</div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> videobuf_queue my_vivid_vb_vidqueue;</div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> list_head my_vivid_vb_local_queue;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">my_vivid_timer_function</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> data)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> videobuf_buffer *vb;</div><div class="line">    <span class="keyword">void</span> *vbuf;</div><div class="line">    <span class="keyword">struct</span> timeval ts;</div><div class="line"></div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    <span class="comment">/* 1. 构造数据: 从队列头部取出第1个videobuf, 填充数据 */</span></div><div class="line"></div><div class="line">    <span class="comment">/* 1.1 从本地队列取出第1个videobuf */</span></div><div class="line">    <span class="keyword">if</span> (list_empty(&amp;my_vivid_vb_local_queue))</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">goto</span> out;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    vb = list_entry(my_vivid_vb_local_queue.next,</div><div class="line">                    <span class="keyword">struct</span> videobuf_buffer, <span class="built_in">queue</span>);</div><div class="line"></div><div class="line">    <span class="comment">/* Nobody is waiting on this buffer, return */</span></div><div class="line">    <span class="keyword">if</span> (!waitqueue_active(&amp;vb-&gt;done))</div><div class="line">        <span class="keyword">goto</span> out;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/* 1.2 填充数据 */</span></div><div class="line">    vbuf = videobuf_to_vmalloc(vb);</div><div class="line">    <span class="comment">//memset(vbuf, 0xFF, vb-&gt;size);</span></div><div class="line"></div><div class="line">    my_vivid_fillbuff(vb);</div><div class="line"></div><div class="line">    vb-&gt;field_count++;</div><div class="line">    do_gettimeofday(&amp;ts);</div><div class="line">    vb-&gt;ts = ts;</div><div class="line">    vb-&gt;state = VIDEOBUF_DONE;</div><div class="line"></div><div class="line">    <span class="comment">/* 1.3 把videobuf从本地队列中删除 */</span></div><div class="line">    list_del(&amp;vb-&gt;<span class="built_in">queue</span>);</div><div class="line"></div><div class="line">    <span class="comment">/* 2. 唤醒进程: 唤醒videobuf-&gt;done上的进程 */</span></div><div class="line">    wake_up(&amp;vb-&gt;done);</div><div class="line"></div><div class="line">out:</div><div class="line">    <span class="comment">/* 3. 修改timer的超时时间 : 30fps, 1秒里有30帧数据</span></div><div class="line">     *    每1/30 秒产生一帧数据</div><div class="line">     */</div><div class="line">    mod_timer(&amp;my_vivid_timer, jiffies + HZ / <span class="number">30</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/* 参考documentations/video4linux/v4l2-framework.txt:</span></div><div class="line">       drivers\media\video\videobuf-core.c</div><div class="line"> ops-&gt;buf_setup   - calculates the size of the video buffers and avoid they to waste more than some maximum limit of RAM;</div><div class="line"> ops-&gt;buf_prepare - fills the video buffer structs and calls videobuf_iolock() to alloc and prepare mmaped memory;</div><div class="line"> ops-&gt;buf_queue   - advices the driver that another buffer were requested (by read() or by QBUF);</div><div class="line"> ops-&gt;buf_release - frees any buffer that were allocated.</div><div class="line"> */</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/* videobuf operations */</span></div><div class="line"><span class="comment">//APP调用ioctl VIDIOC_REQBUFS时会导致此函数被调用,它重新调整count和size</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">my_vivid_buffer_setup</span><span class="params">(<span class="keyword">struct</span> videobuf_queue *vq, <span class="keyword">unsigned</span> <span class="keyword">int</span> *count, <span class="keyword">unsigned</span> <span class="keyword">int</span> *size)</span></span></div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    *size = my_vivid_format.fmt.pix.sizeimage;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="number">0</span> == *count)</div><div class="line">        *count = <span class="number">32</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//APP调用ioctlVIDIOC_QBUF时导致此函数被调用,它会填充video_buffer结构体并调用videobuf_iolock来分配内存</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">my_vivid_buffer_prepare</span><span class="params">(<span class="keyword">struct</span> videobuf_queue *vq, <span class="keyword">struct</span> videobuf_buffer *vb,</span></span></div><div class="line">                                   <span class="keyword">enum</span> v4l2_field field)</div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    <span class="comment">/* 1. 设置videobuf */</span></div><div class="line">    vb-&gt;size         = my_vivid_format.fmt.pix.sizeimage;</div><div class="line">    vb-&gt;bytesperline = my_vivid_format.fmt.pix.bytesperline;</div><div class="line">    vb-&gt;width        = my_vivid_format.fmt.pix.width;</div><div class="line">    vb-&gt;height       = my_vivid_format.fmt.pix.height;</div><div class="line">    vb-&gt;field        = field;</div><div class="line"></div><div class="line">    <span class="comment">/* 2. 做些准备工作 */</span></div><div class="line">    my_vivid_precalculate_bars(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="comment">/* 3. 设置状态 */</span></div><div class="line">    vb-&gt;state = VIDEOBUF_PREPARED;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/* APP调用ioctl VIDIOC_QBUF时:</span></div><div class="line"> * 1. 先调用buf_prepare进行一些准备工作</div><div class="line"> * 2. 把buf放入stream队列</div><div class="line"> * 3. 调用buf_queue(起通知、记录作用)</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">my_vivid_buffer_queue</span><span class="params">(<span class="keyword">struct</span> videobuf_queue *vq, <span class="keyword">struct</span> videobuf_buffer *vb)</span></span></div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    vb-&gt;state = VIDEOBUF_QUEUED;</div><div class="line"></div><div class="line">    <span class="comment">/* 把videobuf放入本地一个队列尾部</span></div><div class="line">     * 定时器处理函数就可以从本地队列取出videobuf</div><div class="line">     */</div><div class="line">    list_add_tail(&amp;vb-&gt;<span class="built_in">queue</span>, &amp;my_vivid_vb_local_queue);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* APP不再使用队列时, 用它来释放内存 */</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">my_vivid_buffer_release</span><span class="params">(<span class="keyword">struct</span> videobuf_queue *vq,</span></span></div><div class="line">                                    <span class="keyword">struct</span> videobuf_buffer *vb)</div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    videobuf_vmalloc_free(vb);</div><div class="line"></div><div class="line">    vb-&gt;state = VIDEOBUF_NEEDS_INIT;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> videobuf_queue_ops my_vivid_video_qops =</div><div class="line">&#123;</div><div class="line">    .buf_setup      = my_vivid_buffer_setup, <span class="comment">/* 计算大小以免浪费 */</span></div><div class="line">    .buf_prepare    = my_vivid_buffer_prepare,</div><div class="line">    .buf_queue      = my_vivid_buffer_queue,</div><div class="line">    .buf_release    = my_vivid_buffer_release,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/* v4l2_file_operations */</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">my_vivid_open</span><span class="params">(<span class="keyword">struct</span> file *file)</span></span></div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    <span class="comment">//队列操作c:初始化</span></div><div class="line">    videobuf_queue_vmalloc_init(&amp;my_vivid_vb_vidqueue, &amp;my_vivid_video_qops,</div><div class="line">                                <span class="literal">NULL</span>, &amp;my_vivid_queue_slock, V4L2_BUF_TYPE_VIDEO_CAPTURE, V4L2_FIELD_INTERLACED,</div><div class="line">                                <span class="keyword">sizeof</span>(<span class="keyword">struct</span> videobuf_buffer), <span class="literal">NULL</span>, <span class="literal">NULL</span>); <span class="comment">/* 倒数第3个参数是buffer的头部大小 */</span></div><div class="line"></div><div class="line">    my_vivid_timer.expires = jiffies + <span class="number">1</span>;</div><div class="line">    add_timer(&amp;my_vivid_timer);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">my_vivid_close</span><span class="params">(<span class="keyword">struct</span> file *file)</span></span></div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    del_timer(&amp;my_vivid_timer);</div><div class="line">    videobuf_stop(&amp;my_vivid_vb_vidqueue);</div><div class="line">    videobuf_mmap_free(&amp;my_vivid_vb_vidqueue);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">my_vivid_mmap</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="keyword">struct</span> vm_area_struct *vma)</span></span></div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> videobuf_mmap_mapper(&amp;my_vivid_vb_vidqueue, vma);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">my_vivid_poll</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="keyword">struct</span> poll_table_struct *wait)</span></span></div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> videobuf_poll_stream(file, &amp;my_vivid_vb_vidqueue, wait);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/* v4l2_ioctl_ops */</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">my_vivid_vidioc_querycap</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="keyword">void</span>  *priv,</span></span></div><div class="line">                                    <span class="keyword">struct</span> v4l2_capability *cap)</div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    <span class="built_in">strcpy</span>(cap-&gt;driver, <span class="string">"my_vivid"</span>);</div><div class="line">    <span class="built_in">strcpy</span>(cap-&gt;card, <span class="string">"my_vivid"</span>);</div><div class="line">    cap-&gt;version = <span class="number">0x0001</span>;</div><div class="line"></div><div class="line">    cap-&gt;device_caps  = V4L2_CAP_VIDEO_CAPTURE | V4L2_CAP_STREAMING | V4L2_CAP_DEVICE_CAPS;</div><div class="line">    cap-&gt;capabilities =V4L2_CAP_VIDEO_CAPTURE | V4L2_CAP_STREAMING | V4L2_CAP_DEVICE_CAPS;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">my_vivid_vidioc_enum_fmt_vid_cap</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="keyword">void</span>  *priv,</span></span></div><div class="line">        <span class="keyword">struct</span> v4l2_fmtdesc *f)</div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (f-&gt;index &gt;= <span class="number">1</span>)</div><div class="line">        <span class="keyword">return</span> -EINVAL;</div><div class="line"></div><div class="line">    <span class="built_in">strcpy</span>(f-&gt;description, <span class="string">"4:2:2, packed, YUYV"</span>);</div><div class="line">    f-&gt;pixelformat = V4L2_PIX_FMT_YUYV;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">my_vivid_vidioc_g_fmt_vid_cap</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="keyword">void</span> *priv,</span></span></div><div class="line">        <span class="keyword">struct</span> v4l2_format *f)</div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    <span class="built_in">memcpy</span>(f, &amp;my_vivid_format, <span class="keyword">sizeof</span>(my_vivid_format));</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">my_vivid_vidioc_try_fmt_vid_cap</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="keyword">void</span> *priv,</span></span></div><div class="line">        <span class="keyword">struct</span> v4l2_format *f)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> maxw, maxh;</div><div class="line">    <span class="keyword">enum</span> v4l2_field field;</div><div class="line"></div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (f-&gt;fmt.pix.pixelformat != V4L2_PIX_FMT_YUYV)</div><div class="line">        <span class="keyword">return</span> -EINVAL;</div><div class="line"></div><div class="line">    field = f-&gt;fmt.pix.field;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (field == V4L2_FIELD_ANY)</div><div class="line">    &#123;</div><div class="line">        field = V4L2_FIELD_INTERLACED;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (V4L2_FIELD_INTERLACED != field)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> -EINVAL;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    maxw  = <span class="number">1024</span>;</div><div class="line">    maxh  = <span class="number">768</span>;</div><div class="line"></div><div class="line">    <span class="comment">/* 调整format的width, height,</span></div><div class="line">     * 计算bytesperline, sizeimage</div><div class="line">     */</div><div class="line">    v4l_bound_align_image(&amp;f-&gt;fmt.pix.width, <span class="number">48</span>, maxw, <span class="number">2</span>,</div><div class="line">                          &amp;f-&gt;fmt.pix.height, <span class="number">32</span>, maxh, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">    f-&gt;fmt.pix.bytesperline =</div><div class="line">        (f-&gt;fmt.pix.width * <span class="number">16</span>) &gt;&gt; <span class="number">3</span>;</div><div class="line">    f-&gt;fmt.pix.sizeimage =</div><div class="line">        f-&gt;fmt.pix.height * f-&gt;fmt.pix.bytesperline;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">my_vivid_vidioc_s_fmt_vid_cap</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="keyword">void</span> *priv,</span></span></div><div class="line">        <span class="keyword">struct</span> v4l2_format *f)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> ret;</div><div class="line"></div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    ret = my_vivid_vidioc_try_fmt_vid_cap(file, <span class="literal">NULL</span>, f);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line"></div><div class="line">    <span class="built_in">memcpy</span>(&amp;my_vivid_format, f, <span class="keyword">sizeof</span>(my_vivid_format));</div><div class="line"></div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">my_vivid_vidioc_reqbufs</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="keyword">void</span> *priv,</span></span></div><div class="line">                                   <span class="keyword">struct</span> v4l2_requestbuffers *p)</div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> (videobuf_reqbufs(&amp;my_vivid_vb_vidqueue, p));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">my_vivid_vidioc_querybuf</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="keyword">void</span> *priv, <span class="keyword">struct</span> v4l2_buffer *p)</span></span></div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> (videobuf_querybuf(&amp;my_vivid_vb_vidqueue, p));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">my_vivid_vidioc_qbuf</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="keyword">void</span> *priv, <span class="keyword">struct</span> v4l2_buffer *p)</span></span></div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> (videobuf_qbuf(&amp;my_vivid_vb_vidqueue, p));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">my_vivid_vidioc_dqbuf</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="keyword">void</span> *priv, <span class="keyword">struct</span> v4l2_buffer *p)</span></span></div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> (videobuf_dqbuf(&amp;my_vivid_vb_vidqueue, p, file-&gt;f_flags &amp; O_NONBLOCK));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">my_vivid_vidioc_streamon</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="keyword">void</span> *priv, <span class="keyword">enum</span> v4l2_buf_type i)</span></span></div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> videobuf_streamon(&amp;my_vivid_vb_vidqueue);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">my_vivid_vidioc_streamoff</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="keyword">void</span> *priv, <span class="keyword">enum</span> v4l2_buf_type i)</span></span></div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    videobuf_streamoff(&amp;my_vivid_vb_vidqueue);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">struct</span> v4l2_ioctl_ops my_vivid_ioctl_ops =</div><div class="line">&#123;</div><div class="line">    <span class="comment">// 表示它是一个摄像头设备</span></div><div class="line">    .vidioc_querycap          = my_vivid_vidioc_querycap,</div><div class="line"></div><div class="line">    <span class="comment">/* 用于列举、获得、测试、设置摄像头的数据的格式 */</span></div><div class="line">    .vidioc_enum_fmt_vid_cap  = my_vivid_vidioc_enum_fmt_vid_cap,</div><div class="line">    .vidioc_g_fmt_vid_cap     = my_vivid_vidioc_g_fmt_vid_cap,</div><div class="line">    .vidioc_try_fmt_vid_cap   = my_vivid_vidioc_try_fmt_vid_cap,</div><div class="line">    .vidioc_s_fmt_vid_cap     = my_vivid_vidioc_s_fmt_vid_cap,</div><div class="line"></div><div class="line">    <span class="comment">/* 缓冲区操作: 申请/查询/放入队列/取出队列 */</span></div><div class="line">    .vidioc_reqbufs       = my_vivid_vidioc_reqbufs,</div><div class="line">    .vidioc_querybuf      = my_vivid_vidioc_querybuf,</div><div class="line">    .vidioc_qbuf          = my_vivid_vidioc_qbuf,</div><div class="line">    .vidioc_dqbuf         = my_vivid_vidioc_dqbuf,</div><div class="line"></div><div class="line">    <span class="comment">// 启动/停止</span></div><div class="line">    .vidioc_streamon      = my_vivid_vidioc_streamon,</div><div class="line">    .vidioc_streamoff     = my_vivid_vidioc_streamoff,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">struct</span> v4l2_file_operations my_vivid_fops =</div><div class="line">&#123;</div><div class="line">    .owner    = THIS_MODULE,</div><div class="line">    .open           = my_vivid_open,</div><div class="line">    .release        = my_vivid_close,</div><div class="line">    .mmap           = my_vivid_mmap,</div><div class="line">    .unlocked_ioctl = video_ioctl2, <span class="comment">/* V4L2 ioctl handler */</span></div><div class="line">    .poll           = my_vivid_poll,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> video_device *my_vivid_dev;</div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> v4l2_device v4l2_dev;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">my_vivid_dev_release</span><span class="params">(<span class="keyword">struct</span> video_device *vdev)</span></span></div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">my_vivid_probe</span><span class="params">(<span class="keyword">struct</span> platform_device *pdev)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> ret;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    <span class="comment">/* 1.分配一个video_device结构体 */</span></div><div class="line">    my_vivid_dev = video_device_alloc();</div><div class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == my_vivid_dev)</div><div class="line">    &#123;</div><div class="line">        printk(<span class="string">"Failed to alloc video device (%d)\n"</span>, ret);</div><div class="line">        <span class="keyword">return</span> -ENOMEM;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/* 2.设置 */</span></div><div class="line">    my_vivid_dev-&gt;release   = my_vivid_dev_release;</div><div class="line">    my_vivid_dev-&gt;fops      = &amp;my_vivid_fops;</div><div class="line">    my_vivid_dev-&gt;ioctl_ops = &amp;my_vivid_ioctl_ops;</div><div class="line">    my_vivid_dev-&gt;v4l2_dev  = &amp;v4l2_dev;</div><div class="line"></div><div class="line">    <span class="comment">//队列操作b:初始化自旋锁</span></div><div class="line">    spin_lock_init(&amp;my_vivid_queue_slock);</div><div class="line"></div><div class="line">    <span class="comment">/* 3.注册 */</span></div><div class="line">    ret = video_register_device(my_vivid_dev, VFL_TYPE_GRABBER, <span class="number">-1</span>);</div><div class="line">    <span class="keyword">if</span> (ret)</div><div class="line">    &#123;</div><div class="line">        printk(<span class="string">"Failed to register as video device (%d)\n"</span>, ret);</div><div class="line">        <span class="keyword">goto</span> err_register_dev;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//用定时器产生数据并唤醒进程</span></div><div class="line">    init_timer(&amp;my_vivid_timer);</div><div class="line">    my_vivid_timer.function  = my_vivid_timer_function;</div><div class="line">    INIT_LIST_HEAD(&amp;my_vivid_vb_local_queue);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">err_register_dev:</div><div class="line">    video_device_release(my_vivid_dev);</div><div class="line">    <span class="keyword">return</span> -ENODEV;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">my_vivid_remove</span><span class="params">(<span class="keyword">struct</span> platform_device *pdev)</span></span></div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    v4l2_device_unregister(my_vivid_dev-&gt;v4l2_dev);</div><div class="line">    video_device_release(my_vivid_dev);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">my_vivid_pdev_release</span><span class="params">(<span class="keyword">struct</span> device *dev)</span></span></div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> platform_device my_vivid_pdev =</div><div class="line">&#123;</div><div class="line">    .name = <span class="string">"my_vivid"</span>,</div><div class="line">    .dev.release = my_vivid_pdev_release,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> platform_driver my_vivid_pdrv =</div><div class="line">&#123;</div><div class="line">    .probe= my_vivid_probe,</div><div class="line">    .remove= my_vivid_remove,</div><div class="line">    .driver= &#123;</div><div class="line">        .name= <span class="string">"my_vivid"</span>,</div><div class="line">    &#125;,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">my_vivid_init</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> ret;</div><div class="line"></div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    ret = platform_device_register(&amp;my_vivid_pdev);</div><div class="line">    <span class="keyword">if</span> (ret)</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line"></div><div class="line">    ret = platform_driver_register(&amp;my_vivid_pdrv);</div><div class="line">    <span class="keyword">if</span> (ret)</div><div class="line">        platform_device_unregister(&amp;my_vivid_pdev);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">my_vivid_exit</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    platform_driver_unregister(&amp;my_vivid_pdrv);</div><div class="line">    platform_device_unregister(&amp;my_vivid_pdev);</div><div class="line">&#125;</div><div class="line"></div><div class="line">module_init(my_vivid_init);</div><div class="line">module_exit(my_vivid_exit);</div><div class="line"></div><div class="line">MODULE_LICENSE(<span class="string">"GPL"</span>);</div><div class="line">MODULE_AUTHOR(<span class="string">"hceng &lt;huangcheng.job@foxmail.com&gt;"</span>);</div><div class="line">MODULE_DESCRIPTION(<span class="string">"A Virtual Video Test Code For Learn."</span>);</div><div class="line">MODULE_ALIAS(<span class="string">"My vivid"</span>);</div><div class="line">MODULE_VERSION(<span class="string">"V1.0"</span>);</div></pre></td></tr></table></figure><h1 id="5-测试效果"><a href="#5-测试效果" class="headerlink" title="5.测试效果"></a>5.测试效果</h1><p>重新编译驱动，加载新驱动：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo modprobe vivid     </div><div class="line">sudo rmmod vivid        </div><div class="line">sudo insmod my_vivid.ko</div></pre></td></tr></table></figure></p><p>实测还差两个驱动依赖：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo insmod /lib/modules/4.4.0-116-generic/kernel/drivers/media/v4l2-core/videobuf-core.ko  </div><div class="line">sudo insmod /lib/modules/4.4.0-116-generic/kernel/drivers/media/v4l2-core/videobuf-vmalloc.ko</div></pre></td></tr></table></figure></p><p>运行<code>xawtv</code>：<br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/180308/5.png" alt=""></p><p>参考资料：<br><a href="http://www.100ask.org/index.html" target="_blank" rel="external">韦东山第三期项目视频_摄像头</a></p><hr><p><div align="center"><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本文采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href="http://hceng.cn/" target="_blank" rel="external">hceng’s blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Linux摄像头驱动学习第一篇，对虚拟视频驱动Virtual Video Driver(vivid)进行测试、分析、编写。&lt;br&gt;
    
    </summary>
    
    
      <category term="Linux驱动" scheme="http://yoursite.com/tags/Linux%E9%A9%B1%E5%8A%A8/"/>
    
      <category term="摄像头" scheme="http://yoursite.com/tags/%E6%91%84%E5%83%8F%E5%A4%B4/"/>
    
  </entry>
  
  <entry>
    <title>博客一周年</title>
    <link href="http://yoursite.com/2018/03/01/%E5%8D%9A%E5%AE%A2%E4%B8%80%E5%91%A8%E5%B9%B4/"/>
    <id>http://yoursite.com/2018/03/01/博客一周年/</id>
    <published>2018-03-01T05:02:26.000Z</published>
    <updated>2018-03-01T05:16:28.372Z</updated>
    
    <content type="html"><![CDATA[<p>2017-2018，博客一周年数据统计。<br><a id="more"></a><br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/180301/1.PNG" alt=""></p><p><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/180301/2.PNG" alt=""></p><p><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/180301/3.PNG" alt=""></p><p><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/180301/4.PNG" alt=""></p><p><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/180301/5.PNG" alt=""></p><p><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/180301/6.PNG" alt=""></p><hr><p><div align="center"><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本文采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href="http://hceng.cn/" target="_blank" rel="external">hceng’s blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2017-2018，博客一周年数据统计。&lt;br&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Linux电源管理</title>
    <link href="http://yoursite.com/2018/01/18/Linux%E7%94%B5%E6%BA%90%E7%AE%A1%E7%90%86/"/>
    <id>http://yoursite.com/2018/01/18/Linux电源管理/</id>
    <published>2018-01-18T06:32:20.000Z</published>
    <updated>2018-02-23T08:05:37.938Z</updated>
    
    <content type="html"><![CDATA[<p>探究Linux电源管理模型，并为Tiny4412的LCD驱动添加电源管理。<br><a id="more"></a><br>这是2018的第一篇博客，选了一个几乎没有接触过的角度作为开篇，希望2018年学习更多，记录更多。</p><h1 id="1-电源管理的两种模型"><a href="#1-电源管理的两种模型" class="headerlink" title="1.电源管理的两种模型"></a>1.电源管理的两种模型</h1><p>以往接触的Linux驱动，没遇到使用电池供电的情况，因此几乎没关注电源的管理。<br>然而实际中，不少使用电池供电的硬件平台，例如手机、POS机等，就需要对电源进行管理，比如在不使用设备的时候，休眠屏幕省电。</p><p>Linux电源管理模型有两种：<strong>系统睡眠模型suspend</strong>和<strong>Runtime电源管理模型</strong>。</p><h2 id="1-1系统睡眠模型Suspend"><a href="#1-1系统睡眠模型Suspend" class="headerlink" title="1.1系统睡眠模型Suspend"></a>1.1系统睡眠模型Suspend</h2><blockquote><p>On (on)　　　　　　　　　　　　　　　　　　S0 -  Working<br>Standby (standby）　　　　　　　　　　　　S1 -  CPU and RAM are powered but not executed<br>Suspend to RAM (mem)　　　　　　　　　　S3 -  RAM is powered and the running content is saved to RAM<br>Suspend to Disk, Hibernation (disk)　　　　S4 -  All content is saved to Disk and power down</p></blockquote><p>S3 aka STR(suspend to ram),挂起到内存，简称待机。计算机将目前的运行状态等数据存放在<strong>内存</strong>，关闭硬盘、外设等设备，进入等待状态。此时内存仍然需要电力维持其数据，但整机<strong>耗电很少</strong>。恢复时计算机从内存读出数据，回到挂起前的状态，<strong>恢复速度较快</strong>。对DDR的耗电情况进行优化是S3性能的关键，大多数手持设备都是用S3待机。</p><p>S4 aka STD(suspend to disk),挂起到硬盘，简称休眠。把运行状态等数据存放在<strong>硬盘</strong>上某个文件或者某个特定的区域，关闭硬盘、外设等设备，进入关机状态。此时计算机完全关闭，<strong>不耗电</strong>。恢复时计算机从休眠文件/分区中读出数据，回到休眠前的状态，<strong>恢复速度较慢</strong>。</p><p>系统休眠模型给我的感觉是以<strong>整机角度</strong>进行省电。<br>S3类似电脑的睡眠，在教长时间不使用电脑后，电脑黑屏，再次敲击键盘迅速显示桌面，原来的工作内容仍不变。<br>S4类似电脑的休眠，在长时间不使用电脑后，电脑黑屏，再次敲击键盘无反应，按下电源键，开机，原来的工作内容仍不变。</p><p>对于嵌入式设备，更多的是使用S3，将数据暂时放在内存里，以实现快速恢复，就像手机的电源键按下黑屏，再次按下迅速亮屏。</p><p>在Linux中，通过<code>cat /sys/power/state</code>可以得知当前设备支持的节能模式，一般情况有如下选项：</p><blockquote><ul><li>freeze:不涉及具体的Hardware或Driver，只是冻结所有的进程，包括用户空间进程及内核线程，能节省的能量较少，使用场景不多；</li><li>standby:前面的S1状态，CPU处于浅睡眠模式，主要针对CPU功耗；</li><li>mem:前面的S3状态，Suspend to RAM；</li><li>disk:前面的S4状态，Suspend to Disk；</li></ul></blockquote><p>需要设置以上模式，只需<code>echo mem &gt; /sys/power/state</code>即可。</p><h2 id="1-2-Runtime电源管理模型"><a href="#1-2-Runtime电源管理模型" class="headerlink" title="1.2 Runtime电源管理模型"></a>1.2 Runtime电源管理模型</h2><p>Runtime电源管理模型给我的感觉是以<strong>模块角度</strong>进行省电。<br>某种程度上是“高内聚和低耦合”的体现。<br>每个设备（包括CPU）都处理好自身的电源管理工作，尽量以最低的能耗完成交代的任务，尽量在不需要工作的时候进入低功耗状态，尽量不和其它模块有过多耦合。每个设备都是最节省的话，整个系统一定是最节省的。</p><h1 id="2-系统睡眠模型suspend"><a href="#2-系统睡眠模型suspend" class="headerlink" title="2. 系统睡眠模型suspend"></a>2. 系统睡眠模型suspend</h1><h2 id="2-1-Suspend流程分析"><a href="#2-1-Suspend流程分析" class="headerlink" title="2.1 Suspend流程分析"></a>2.1 Suspend流程分析</h2><p>suspend的流程还是挺复杂的，向<code>/sys/power/state</code>写入命令后再到唤醒，将进行以下流程：<br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/180118/1.jpg" alt=""></p><ul><li>对源码进行分析，其<strong>休眠过程</strong>如下：<br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/180118/2.png?v=1" alt=""><br>驱动程序里休眠相关的电源管理函数的调用过程:<code>prepare—&gt;suspend—&gt;suspend_late—&gt;suspend_noirq</code></li></ul><ul><li>对源码进行分析，其<strong>唤醒过程</strong>如下：<br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/180118/3.png" alt=""><br>驱动程序里唤醒相关的电源管理函数的调用过程:<code>resume_noirq—&gt;resume_early—&gt;resume-&gt;complete</code></li></ul><p>对于驱动程序，我们主要关心<code>Device PM</code>(针对每一个驱动)和少量<code>Platform dependent PM</code>(针对CPU芯片相关)的内容。</p><h2 id="2-2-使用Suspend功能"><a href="#2-2-使用Suspend功能" class="headerlink" title="2.2 使用Suspend功能"></a>2.2 使用Suspend功能</h2><p>首先将suspend功能加入内核：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Power management options  ---&gt;</div><div class="line">    [*] Suspend to RAM and standby</div></pre></td></tr></table></figure></p><p>这里默认是勾选上了的，就不管了。</p><p>进入Tiny4412内核，尝试休眠<code>echo mem &gt; /sys/power/state</code>，系统提示<strong><code>No wake-up sources!</code></strong>。<br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/180118/4.png" alt=""><br>可见，要进入休眠，必须要有唤醒源，没有唤醒源，休眠也没有意义。</p><h3 id="2-2-1-设置唤醒源"><a href="#2-2-1-设置唤醒源" class="headerlink" title="2.2.1 设置唤醒源"></a>2.2.1 设置唤醒源</h3><p>唤醒源最常见的就是按键中断，就如同手机进入锁屏状态下，按下电源键唤醒一样，因此先写一个按键驱动。</p><ul><li><p>原理图：<br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/180118/5.png" alt=""><br>底板上有四个按键，分别连在GPX3_2、GPX3_3、GPX3_4、GPX3_5，引脚状态常高，按键按下变低电平。</p></li><li><p><a href="ttps://github.com/hceng/learn/blob/master/tiny4412/04_power_management/suspend/exynos4412-tiny4412.dts" target="_blank" rel="external">设备树</a>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">button_interrupt: button_interrupt &#123;</div><div class="line">    compatible         = &quot;tiny4412,button_interrupt&quot;;</div><div class="line">    tiny4412,gpx3_2 = &lt;&amp;gpx3 2 GPIO_ACTIVE_HIGH&gt;;</div><div class="line">    tiny4412,gpx3_3 = &lt;&amp;gpx3 3 GPIO_ACTIVE_HIGH&gt;;</div><div class="line">    tiny4412,gpx3_4 = &lt;&amp;gpx3 4 GPIO_ACTIVE_HIGH&gt;;</div><div class="line">    tiny4412,gpx3_5 = &lt;&amp;gpx3 5 GPIO_ACTIVE_HIGH&gt;;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></li><li><p><a href="ttps://github.com/hceng/learn/blob/master/tiny4412/04_power_management/suspend/button_interrupt.c" target="_blank" rel="external">按键驱动</a>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//设置为中断唤醒源</div><div class="line">irq_set_irq_wake(irq, 1);</div></pre></td></tr></table></figure></li><li><p><a href="https://github.com/hceng/learn/blob/master/tiny4412/04_power_management/suspend/usb4604.c" target="_blank" rel="external">usb4604驱动</a>：<br>前面的<a href="https://hceng.cn/2017/10/31/Exynos4412%E2%80%94%E2%80%94%E7%BD%91%E5%8D%A1%E7%A7%BB%E6%A4%8D%E5%92%8CNFS%E5%90%AF%E5%8A%A8/#more" target="_blank" rel="external">Exynos4412——网卡移植和NFS启动</a>里面，移植USB4604驱动时，删除了电源管理的代码，实际测试中唤醒时USB设备会报错，添加上电源管理相关代码即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">#ifdef CONFIG_PM_SLEEP</div><div class="line">static int usb4604_i2c_suspend(struct device *dev)</div><div class="line">&#123;</div><div class="line">struct i2c_client *client = to_i2c_client(dev);</div><div class="line">struct usb4604 *hub = i2c_get_clientdata(client);</div><div class="line"></div><div class="line">usb4604_switch_mode(hub, USB4604_MODE_STANDBY);</div><div class="line"></div><div class="line">return 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line">static int usb4604_i2c_resume(struct device *dev)</div><div class="line">&#123;</div><div class="line">struct i2c_client *client = to_i2c_client(dev);</div><div class="line">struct usb4604 *hub = i2c_get_clientdata(client);</div><div class="line"></div><div class="line">usb4604_switch_mode(hub, hub-&gt;mode);</div><div class="line"></div><div class="line">return 0;</div><div class="line">&#125;</div><div class="line">#endif</div><div class="line"></div><div class="line">static SIMPLE_DEV_PM_OPS(usb4604_i2c_pm_ops, usb4604_i2c_suspend,</div><div class="line">usb4604_i2c_resume);</div></pre></td></tr></table></figure></li></ul><h3 id="2-2-2-休眠唤醒-未成功"><a href="#2-2-2-休眠唤醒-未成功" class="headerlink" title="2.2.2 休眠唤醒(未成功)"></a>2.2.2 休眠唤醒(未成功)</h3><p>加入中断源后，休眠过程不再提示<code>No wake-up sources!</code>，看样子休眠应该成功了。<br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/180118/6.png" alt=""><br>此时，按下按键，板子并未唤醒，琢磨了一阵，初步怀疑有以下原因：</p><ul><li>唤醒的时候，应该需要uboot配合，uboot读取某个寄存器来判断是正常启动还是唤醒；</li><li>Exynos4412的PMU特性没摸透，可能需要其它额外的操作；</li><li>Exynos4412启动时的BL1和BL2，可能也有影响；</li></ul><p>这里先卡住，继续后面。</p><h2 id="2-3-使驱动支持Suspend"><a href="#2-3-使驱动支持Suspend" class="headerlink" title="2.3 使驱动支持Suspend"></a>2.3 使驱动支持Suspend</h2><h3 id="2-3-1-通知Notifier"><a href="#2-3-1-通知Notifier" class="headerlink" title="2.3.1 通知Notifier"></a>2.3.1 通知Notifier</h3><p>前面的suspend流程分析里面，<br>在<strong>冻结APP之前</strong>,使用<code>pm_notifier_call_chain(PM_SUSPEND_PREPARE)</code>来通知驱动程序;<br>在<strong>重启APP之后</strong>,使用<code>pm_notifier_call_chain(PM_POST_SUSPEND)</code>来通知驱动程序;</p><p>因此，如果驱动程序有事情在上述时机要处理，可以使用<code>notifier</code>机制。<br>使用步骤：</p><p><strong>a.定义notifier_block结构体</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">static struct notifier_block lcd_pm_notif_block = &#123;</div><div class="line">.notifier_call = lcd_suspend_notifier,</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><p><strong>b.notifier操作函数</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">static int lcd_suspend_notifier(struct notifier_block *nb, unsigned long event, void *dummy)</div><div class="line">&#123;</div><div class="line">switch (event) &#123;</div><div class="line">case PM_SUSPEND_PREPARE:</div><div class="line">printk(&quot;lcd suspend notifiler test: PM_SUSPEND_PREPARE\n&quot;);</div><div class="line">return NOTIFY_OK;</div><div class="line">case PM_POST_SUSPEND:</div><div class="line">printk(&quot;lcd suspend notifiler test: PM_POST_SUSPEND\n&quot;);</div><div class="line">return NOTIFY_OK;</div><div class="line"></div><div class="line">default:</div><div class="line">return NOTIFY_DONE;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>c.注册notifier</strong><br>在驱动init()或probe()里注册：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ret = register_pm_notifier(&amp;lcd_pm_notif_block);</div><div class="line">   if(ret) &#123;</div><div class="line">       printk(&quot;failed to register pm notifier.\n&quot;);</div><div class="line">       return  -EINVAL;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p><p>在前面LCD驱动上修改<a href="https://github.com/hceng/learn/blob/master/tiny4412/04_power_management/suspend/lcd_drv.c" target="_blank" rel="external"><code>lcd_drv.c</code></a>，测试如下：<br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/180118/7.png" alt=""></p><h3 id="2-3-2-Suspend和Resume"><a href="#2-3-2-Suspend和Resume" class="headerlink" title="2.3.2 Suspend和Resume"></a>2.3.2 Suspend和Resume</h3><p>前面的<code>notifier</code>只是通知，在<strong>冻结APP之前</strong>和<strong>重启APP之后</strong>通知，<br>而电源管理应该刚好相反，是在<strong>冻结APP之后</strong>和<strong>重启APP之前</strong>对驱动的电源进行控制，<br>这就需要<code>suspend</code>和<code>resume</code>来实现。</p><ul><li><p>a.在<code>platform_driver</code>里的<code>driver</code>里添加<code>pm</code>结构体:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">static struct platform_driver lcd_driver =</div><div class="line">&#123;</div><div class="line">    .driver        = &#123;</div><div class="line">        .name           = &quot;lcd_s702&quot;,</div><div class="line">        .pm             = &amp;lcd_pm,</div><div class="line">        .of_match_table = of_match_ptr(lcd_dt_ids),</div><div class="line">    &#125;,</div><div class="line">    .probe         = lcd_probe,</div><div class="line">    .remove        = lcd_remove,</div><div class="line">&#125;;</div></pre></td></tr></table></figure></li><li><p>b.设置<code>pm</code>成员函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">static struct dev_pm_ops lcd_pm = &#123;</div><div class="line">.suspend = s702_lcd_suspend,</div><div class="line">.resume  = s702_lcd_resume,</div><div class="line">&#125;;</div></pre></td></tr></table></figure></li><li><p>c.编写成员函数:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">s702_lcd_suspend</span><span class="params">(<span class="keyword">struct</span> device *dev)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">//lcd休眠操作</span></div><div class="line">    <span class="comment">//Direct Off: ENVID and ENVID_F are set to "0" simultaneously.</span></div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> temp;</div><div class="line"></div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    temp = readl(lcd_regs_base + VIDCON0);</div><div class="line">    temp &amp;= ~(<span class="number">0x01</span> &lt;&lt; <span class="number">1</span> | <span class="number">0x01</span> &lt;&lt; <span class="number">0</span>);</div><div class="line">    writel(temp, lcd_regs_base + VIDCON0);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">s702_lcd_resume</span><span class="params">(<span class="keyword">struct</span> device *dev)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">//lcd唤醒操作</span></div><div class="line">    <span class="comment">//Display On: ENVID and ENVID_F are set to "1".</span></div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> temp;</div><div class="line"></div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    temp = readl(lcd_regs_base + VIDCON0);</div><div class="line">    writel(temp | (<span class="number">0x01</span> &lt;&lt; <span class="number">1</span>) | (<span class="number">0x01</span> &lt;&lt; <span class="number">0</span>), lcd_regs_base + VIDCON0);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><p>这里只是简单的关闭/打开显示，理论上的操作应该是：<br>休眠时先备份所有LCD相关寄存器，恢复时再恢复所有寄存器，以及其它可能操作，比如重新开启时钟等。</p><p>同理，因为LCD显示和backlight是分开的，因此需要在backlight里也进行类似操作。</p><h1 id="3-Runtime电源管理模型"><a href="#3-Runtime电源管理模型" class="headerlink" title="3.Runtime电源管理模型"></a>3.Runtime电源管理模型</h1><p>前面的suspend系统睡眠模型是将整个系统进行休眠，但如果需要在系统运行时，单独对某个模块进行休眠，就需要Runtime电源管理模型，这两个模型互相协作，才能最大的发挥电源管理的效果。</p><p>Runtime电源管理模型的原理比较简单，就是计数，<br>当该设备驱动被使用时就加1，放弃使用时就减1，<br>计数大于1时，就打开该设备的电源，等于0时就关闭电源。</p><p>Runtime PM相关的函数：<br>a. 使能/禁止 Runtime PM：<code>pm_runtime_enable</code> / <code>pm_runtime_disable</code>  (修改disable_depth变量)<br>b. 增加计数/减少计数：<code>pm_runtime_get_sync</code> / <code>pm_runtime_put_sync</code>   (修改usage_count变量)<br>c. 回调函数 暂停/恢复/空闲：<code>runtime_suspend</code> / <code>runtime_resume</code> / <code>runtime_idle</code></p><h2 id="3-1-Runtime流程分析"><a href="#3-1-Runtime流程分析" class="headerlink" title="3.1 Runtime流程分析"></a>3.1 Runtime流程分析</h2><ul><li><p>调用<code>pm_runtime_get_sync</code>去<strong>增加使用次数以及恢复</strong>的流程如下：<br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/180118/8.png" alt=""></p></li><li><p>调用<code>pm_runtime_put_sync</code>去<strong>减少使用次数以及暂停</strong>的流程如下：<br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/180118/9.png" alt=""></p></li></ul><p>前面的两个流程，只看到了<code>runtime_resume</code>和<code>runtime_idle</code>的调用，没有看到<code>runtime_suspend</code>，<br>实际上，如果设备不提供<code>runtime_idle</code>, 则最终会调用<code>runtime_suspend</code>。</p><h2 id="3-2-使用Runtime功能"><a href="#3-2-使用Runtime功能" class="headerlink" title="3.2 使用Runtime功能"></a>3.2 使用Runtime功能</h2><p>首先将Runtime功能加入内核，但本内核4.13.9里没找到相关选项，应该默认已经加入到内核里面了。</p><ul><li><p><strong>调用方式一</strong>：<br>驱动程序提供接口, APP来调用。<br>在驱动函数的<code>open()</code>、<code>close()</code>里，增加和减少引用计数。<br>APP调用驱动的时候就能相应的恢复、暂停设备。</p></li><li><p><strong>调用方式二</strong>：<br>直接操作应用层文件：<br>恢复：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo on &gt;  /sys/devices/.../power/control</div></pre></td></tr></table></figure></li></ul><p>流程：<code>control_store(drivers\base\power\sysfs.c) -&gt; pm_runtime_forbid -&gt; atomic_inc -&gt; rpm_resume</code></p><p>暂停：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo auto &gt;  /sys/devices/.../power/control</div></pre></td></tr></table></figure></p><p>流程：<code>control_store(drivers\base\power\sysfs.c) -&gt; pm_runtime_allow -&gt; atomic_dec_and_test -&gt; rpm_idle</code></p><h2 id="3-3-使驱动支持Runtime"><a href="#3-3-使驱动支持Runtime" class="headerlink" title="3.3 使驱动支持Runtime"></a>3.3 使驱动支持Runtime</h2><ul><li><p>a.在<code>platform_driver</code>里的<code>driver</code>里添加<code>pm</code>结构体:(和前面的一样，这里就无需操作)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">static struct platform_driver lcd_driver =</div><div class="line">&#123;</div><div class="line">    .driver        = &#123;</div><div class="line">        .name           = &quot;lcd_s702&quot;,</div><div class="line">        .pm             = &amp;lcd_pm,</div><div class="line">        .of_match_table = of_match_ptr(lcd_dt_ids),</div><div class="line">    &#125;,</div><div class="line">    .probe         = lcd_probe,</div><div class="line">    .remove        = lcd_remove,</div><div class="line">&#125;;</div></pre></td></tr></table></figure></li><li><p>b.设置<code>pm</code>成员函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">static struct dev_pm_ops lcd_pm =</div><div class="line">&#123;</div><div class="line">    .suspend = s702_lcd_suspend,</div><div class="line">    .resume  = s702_lcd_resume,</div><div class="line">    .runtime_suspend = s702_lcd_suspend,</div><div class="line">    .runtime_resume  = s702_lcd_resume,</div><div class="line">&#125;;</div></pre></td></tr></table></figure></li></ul><p>添加<code>runtime_suspend</code>和<code>runtime_resume</code>，runtime和suspend的暂停配置是一样的，直接使用前面的。</p><ul><li><p>c.编写成员函数:(和前面的一样，这里就无需操作)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">s702_lcd_suspend</span><span class="params">(<span class="keyword">struct</span> device *dev)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">//lcd休眠操作</span></div><div class="line">    <span class="comment">//Direct Off: ENVID and ENVID_F are set to "0" simultaneously.</span></div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> temp;</div><div class="line"></div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    temp = readl(lcd_regs_base + VIDCON0);</div><div class="line">    temp &amp;= ~(<span class="number">0x01</span> &lt;&lt; <span class="number">1</span> | <span class="number">0x01</span> &lt;&lt; <span class="number">0</span>);</div><div class="line">    writel(temp, lcd_regs_base + VIDCON0);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">s702_lcd_resume</span><span class="params">(<span class="keyword">struct</span> device *dev)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">//lcd唤醒操作</span></div><div class="line">    <span class="comment">//Display On: ENVID and ENVID_F are set to "1".</span></div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> temp;</div><div class="line"></div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    temp = readl(lcd_regs_base + VIDCON0);</div><div class="line">    writel(temp | (<span class="number">0x01</span> &lt;&lt; <span class="number">1</span>) | (<span class="number">0x01</span> &lt;&lt; <span class="number">0</span>), lcd_regs_base + VIDCON0);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>d.使能Runtime:<br>对于Runtime PM,默认状态下设备的状态是Suspended,<br>如果硬件上它是<strong>运行状态</strong>,需要调用<code>pm_runtime_set_active()</code>来修改它的状态,<br>然后调用<code>pm_runtime_enable()</code>来使能Runtime PM。</p></li></ul><p>在<code>probe()</code>函数的后面添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pm_runtime_set_active(&amp;pdev-&gt;dev);</div><div class="line">pm_runtime_enable(&amp;pdev-&gt;dev);</div></pre></td></tr></table></figure></p><p>反之，还要在<code>remove()</code>里禁止：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pm_runtime_disable(&amp;pdev-&gt;dev);</div></pre></td></tr></table></figure></p><ul><li><p>e.修改计数:<br>一般在<code>open()</code>和<code>release()</code>里面增加和减少引用计数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">s702_lcd_open</span><span class="params">(<span class="keyword">struct</span> fb_info *info, <span class="keyword">int</span> user)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> device *dev = info-&gt;dev;</div><div class="line">    <span class="keyword">int</span> ret;</div><div class="line"></div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    ret = pm_runtime_get_sync(dev);</div><div class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span> &amp;&amp; ret != -EACCES)</div><div class="line">    &#123;</div><div class="line">        pm_runtime_put_sync(dev);</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">s702_lcd_release</span><span class="params">(<span class="keyword">struct</span> fb_info *info, <span class="keyword">int</span> user)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> device *dev = info-&gt;dev;</div><div class="line"></div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    pm_runtime_put_sync(dev);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> fb_ops tiny4412_lcdfb_ops =</div><div class="line">&#123;</div><div class="line">    .owner              = THIS_MODULE,</div><div class="line">    .fb_setcolreg       = cfb_setcolreg, <span class="comment">//设置调色板，实现伪颜色表</span></div><div class="line">    .fb_fillrect        = cfb_fillrect,  <span class="comment">//填充矩形</span></div><div class="line">    .fb_copyarea        = cfb_copyarea,  <span class="comment">//数据复制</span></div><div class="line">    .fb_imageblit       = cfb_imageblit, <span class="comment">//图形填充</span></div><div class="line"></div><div class="line">    .fb_open            = s702_lcd_open,</div><div class="line">    .fb_release         = s702_lcd_release</div><div class="line">&#125;;</div></pre></td></tr></table></figure></li><li><p>f.优化——加入延时机制:<br>现在的程序基本完成，测试的时候，先加载backlight驱动<code>insmod backlight_drv.ko</code>，运行背光应用程序设置亮度<code>./app 200</code>；<br>然后加载LCD驱动<code>insmod lcd_drv.ko</code>，运行图片显示应用程序jpg_rgb显示图像<code>./jpg_rgb cq.jpg</code>，结果并没有显示图像，<br>手动的<code>echo on &gt; /sys/devices/platform/11c00000.lcd_s702/power/control</code>才正常显示图像。</p></li></ul><p>上述流程中，运行图片显示应用程序时，先<code>open()</code>了一次，引用计数加1，程序调用完又马上<code>close</code>，引用计数减1，导致看不到显示，<br>重新操作<code>/sys/devices/platform/11c00000.lcd_s702/power/control</code>就立即显示了图像。</p><p>对于正常的使用情景是，运行应用程序，立即图片显示，然后维持显示一段时间，如果有操作继续显示，没有的话再自己熄灭。<br>因此，想要实现上面的功能，还需要加入自动休眠。</p><p>在之前的<code>probe()</code>中加入<code>pm_runtime_use_autosuspend()</code>:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Runtime</span></div><div class="line">pm_runtime_use_autosuspend(&amp;pdev-&gt;dev);<span class="comment">//add autosleep</span></div><div class="line">pm_runtime_set_autosuspend_delay(&amp;pdev-&gt;dev, <span class="number">5000</span>);</div><div class="line"></div><div class="line">pm_runtime_set_active(&amp;pdev-&gt;dev);</div><div class="line">pm_runtime_enable(&amp;pdev-&gt;dev);</div></pre></td></tr></table></figure></p><p>同时，<code>release()</code>也要修改:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">s702_lcd_open</span><span class="params">(<span class="keyword">struct</span> fb_info *info, <span class="keyword">int</span> user)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> device *dev = info-&gt;dev;</div><div class="line">    <span class="keyword">int</span> ret;</div><div class="line"></div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    ret = pm_runtime_get_sync(dev);</div><div class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span> &amp;&amp; ret != -EACCES)</div><div class="line">    &#123;</div><div class="line">        pm_runtime_put_sync(dev);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">s702_lcd_release</span><span class="params">(<span class="keyword">struct</span> fb_info *info, <span class="keyword">int</span> user)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> device *dev = info-&gt;dev;</div><div class="line"></div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    <span class="comment">//pm_runtime_put_sync(dev);</span></div><div class="line">    pm_runtime_mark_last_busy(dev);</div><div class="line">    pm_runtime_put_sync_autosuspend(dev);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>此时，加载驱动后，运行应用程序，屏幕显示，5s后，屏幕自动熄灭，再次运行程序或者修改<code>control</code>来重新显示。</p><p>通过函数<code>pm_runtime_set_autosuspend_delay()</code>或修改<code>echo xx &gt;  /sys/devices/.../power/autosuspend_delay_ms</code>来修改自动休眠时间。</p><p>完整代码见<a href="https://github.com/hceng/learn/tree/master/tiny4412/04_power_management/runtime" target="_blank" rel="external">Github</a>。</p><h1 id="4-regulator系统"><a href="#4-regulator系统" class="headerlink" title="4.regulator系统"></a>4.regulator系统</h1><p>前面的两个电源管理模型偏“软”，regulator系统偏“硬”，<br>在复杂的单板中，有专门的电源管理芯片控制各个模块电源，regulator系统就是为这个电源芯片编写驱动，实现电源管理。</p><h2 id="4-1-regulator框架"><a href="#4-1-regulator框架" class="headerlink" title="4.1 regulator框架"></a>4.1 regulator框架</h2><p><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/180118/10.png?v=1" alt=""></p><blockquote><p>①Regulator(稳定器):指可以自动维持恒定电压(voltage)或电流(current)的装置，一般指电源芯片。在嵌入式设备中，基本上每一种电压，都是经过regulator输出的；<br>②③Consumer(使用者):使用电源的装置，Regulator是给Consumer供电的；<br>④Machine(单板):使用软件语言(struct regulator_init_data)，静态的描述regulator在板级的物理现状，包含：<br>　　a.级联关系:Regulator A的输出是Regulator B的输入，Regulator A就是<strong>Supply regulator</strong>，B是<strong>Consumer regulator</strong>；<br>　　b.约束限制:Regulator Constraints，比如电压/电流最大值/最小值、允许的操作等；</p></blockquote><p>从设备驱动的角度看，regulator系统比较简单，<br>Machine提供Supply与Consumer的对应关系、单板相关的约束条件(device)；<br>Regulator提供电源芯片的控制函数，如使能/去能、设置电压/电流等(driver)；<br>Consumer调用Regulator相关函数控制电源的开关、调节(use)；<br>即一个描述关系,一个提供相关函数，一个调用相关函数。</p><h2 id="4-2-regulator流程"><a href="#4-2-regulator流程" class="headerlink" title="4.2 regulator流程"></a>4.2 regulator流程</h2><p><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/180118/11.png?v=1" alt=""></p><h2 id="4-3-regulator驱动"><a href="#4-3-regulator驱动" class="headerlink" title="4.3 regulator驱动"></a>4.3 regulator驱动</h2><p>regulator系统仍然是采用<strong><em>总线设备驱动模型</em></strong>。<br>device采用c文件或设备树的形式，提供硬件相关信息;<br>driver加载后，一但和device名字匹配，就调用<code>probe()</code>函数注册<code>register</code>，并绑定操作函数；</p><p>后面将使用两种实现regulator驱动。<br>这两种方式的核心都是一样的，<br><code>device</code>先提供Supply与Consumer的对应关系、单板相关的约束条件;<br><code>driver</code>提供电源芯片的控制函数，如使能/去能、设置电压/电流等。</p><h3 id="4-3-1-C文件方式"><a href="#4-3-1-C文件方式" class="headerlink" title="4.3.1 C文件方式"></a>4.3.1 C文件方式</h3><ul><li><p>device:<br>在一个单板C文件里，提供级联关系<code>regulator_consumer_supply</code>,约束条件<code>regulator_init_data</code>:</p><figure class="highlight c"><figcaption><span>[machine.c]</span><a href="https://github.com/hceng/learn/blob/master/tiny4412/04_power_management/regulator/use_machine/machine.c" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/err.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/platform_device.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/regulator/driver.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/mfd/core.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/regulator/machine.h&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> 1</span></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> regulator_consumer_supply tiny4412_regulator_supplies[] =</div><div class="line">&#123;</div><div class="line">    REGULATOR_SUPPLY(<span class="string">"VCC_LCD"</span>, <span class="string">"11c00000.lcd_s702"</span>),<span class="comment">//consumer的电源引脚名称;consumer的名字</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> regulator_consumer_supply tiny4412_regulator_supplies[] =</div><div class="line">&#123;</div><div class="line">    REGULATOR_SUPPLY(<span class="string">"VCC_LCD"</span>, <span class="string">"lcd_s702"</span>),</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> regulator_init_data tiny4412_regulator_init_data =</div><div class="line">&#123;</div><div class="line">    .constraints = &#123;</div><div class="line">        <span class="comment">//.name = "tiny4412_regulator",</span></div><div class="line">        .min_uV= <span class="number">1000000</span>,</div><div class="line">        .max_uV= <span class="number">1000000</span>,</div><div class="line">        .valid_modes_mask= REGULATOR_MODE_NORMAL,</div><div class="line">        .valid_ops_mask= REGULATOR_CHANGE_STATUS,</div><div class="line">        .boot_on = <span class="number">0</span>,</div><div class="line">        .always_on = <span class="number">0</span>,</div><div class="line">    &#125;,</div><div class="line">    .num_consumer_supplies= <span class="number">1</span>,</div><div class="line">    .consumer_supplies= tiny4412_regulator_supplies,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tiny4412_regulator_release</span><span class="params">(<span class="keyword">struct</span> device *dev)</span></span></div><div class="line">&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> platform_device tiny4412_regulator_dev =</div><div class="line">&#123;</div><div class="line">    .name         = <span class="string">"tiny4412_regulator"</span>,</div><div class="line">    .id       = <span class="number">-1</span>,</div><div class="line">    .dev = &#123;</div><div class="line">        .release       = tiny4412_regulator_release,</div><div class="line">        .platform_data = &amp;tiny4412_regulator_init_data,</div><div class="line">    &#125;,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">tiny4412_regulator_machine_init</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    platform_device_register(&amp;tiny4412_regulator_dev);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tiny4412_regulator_machine_exit</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    platform_device_unregister(&amp;tiny4412_regulator_dev);</div><div class="line">&#125;</div><div class="line"></div><div class="line">module_init(tiny4412_regulator_machine_init);</div><div class="line">module_exit(tiny4412_regulator_machine_exit);</div><div class="line"></div><div class="line">MODULE_LICENSE(<span class="string">"GPL"</span>);</div><div class="line">MODULE_AUTHOR(<span class="string">"hceng &lt;huangcheng.job@foxmail.com&gt;"</span>);</div><div class="line">MODULE_DESCRIPTION(<span class="string">"Tiny4412 machine driver."</span>);</div><div class="line">MODULE_ALIAS(<span class="string">"Exynos4412_machine"</span>);</div><div class="line">MODULE_VERSION(<span class="string">"V1.0"</span>);</div></pre></td></tr></table></figure></li><li><p>driver<br>提供操作函数并注册<code>regulator</code>:</p><figure class="highlight c"><figcaption><span>[regulator.c]</span><a href="https://github.com/hceng/learn/blob/master/tiny4412/04_power_management/regulator/use_machine/regulator.c" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/err.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/platform_device.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/regulator/driver.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/mfd/core.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/io.h&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">int</span> regulator_states = <span class="number">0</span>;</div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">tiny4412_regulator_enable</span><span class="params">(<span class="keyword">struct</span> regulator_dev *rdev)</span></span></div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    printk(<span class="string">"------LCD Power Open.------\n"</span>);</div><div class="line">    regulator_states = <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">tiny4412_regulator_disable</span><span class="params">(<span class="keyword">struct</span> regulator_dev *rdev)</span></span></div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    printk(<span class="string">"------LCD Power Close.------\n"</span>);</div><div class="line">    regulator_states = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">tiny4412_regulator_is_enabled</span><span class="params">(<span class="keyword">struct</span> regulator_dev *rdev)</span></span></div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    printk(<span class="string">"------LCD Power Test.------\n"</span>);</div><div class="line">    <span class="keyword">if</span> (regulator_states)</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> regulator_ops tiny4412_regulator_ops =</div><div class="line">&#123;</div><div class="line">    .enable= tiny4412_regulator_enable,</div><div class="line">    .disable= tiny4412_regulator_disable,</div><div class="line">    .is_enabled= tiny4412_regulator_is_enabled,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> regulator_desc tiny4412_regulator_desc =</div><div class="line">&#123;</div><div class="line">    .name= <span class="string">"tiny4412_regulator"</span>,</div><div class="line">    .ops= &amp;tiny4412_regulator_ops,</div><div class="line">    .type= REGULATOR_VOLTAGE,<span class="comment">//电压源</span></div><div class="line">    .id    = <span class="number">0</span>,</div><div class="line">    .owner= THIS_MODULE,</div><div class="line">    .n_voltages= <span class="number">1</span>,<span class="comment">//能提供的电压数量</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> regulator_dev *tiny4412_regulator_dev;</div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">tiny4412_regulator_probe</span><span class="params">(<span class="keyword">struct</span> platform_device *pdev)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> regulator_config config = &#123; &#125;;</div><div class="line">    config.dev = &amp;pdev-&gt;dev;</div><div class="line">    config.init_data = dev_get_platdata(&amp;pdev-&gt;dev);</div><div class="line"></div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    tiny4412_regulator_dev = devm_regulator_register(&amp;pdev-&gt;dev, &amp;tiny4412_regulator_desc, &amp;config);</div><div class="line">    <span class="keyword">if</span> (IS_ERR(tiny4412_regulator_dev))</div><div class="line">    &#123;</div><div class="line">        printk(<span class="string">"devm_regulator_register error!\n"</span>);</div><div class="line">        <span class="keyword">return</span> PTR_ERR(tiny4412_regulator_dev);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">tiny4412_regulator_remove</span><span class="params">(<span class="keyword">struct</span> platform_device *pdev)</span></span></div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    devm_regulator_unregister(&amp;pdev-&gt;dev, tiny4412_regulator_dev);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">struct</span> platform_driver tiny4412_regulator_drv =</div><div class="line">&#123;</div><div class="line">    .probe= tiny4412_regulator_probe,</div><div class="line">    .remove= tiny4412_regulator_remove,</div><div class="line">    .driver= &#123;</div><div class="line">        .name= <span class="string">"tiny4412_regulator"</span>,</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">tiny4412_regulator_init</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    platform_driver_register(&amp;tiny4412_regulator_drv);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tiny4412_regulator_exit</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    platform_driver_unregister(&amp;tiny4412_regulator_drv);</div><div class="line">&#125;</div><div class="line"></div><div class="line">module_init(tiny4412_regulator_init);</div><div class="line">module_exit(tiny4412_regulator_exit);</div><div class="line"></div><div class="line">MODULE_LICENSE(<span class="string">"GPL"</span>);</div><div class="line">MODULE_AUTHOR(<span class="string">"hceng &lt;huangcheng.job@foxmail.com&gt;"</span>);</div><div class="line">MODULE_DESCRIPTION(<span class="string">"Tiny4412 regulator driver."</span>);</div><div class="line">MODULE_ALIAS(<span class="string">"Exynos4412_regulator"</span>);</div><div class="line">MODULE_VERSION(<span class="string">"V1.0"</span>);</div></pre></td></tr></table></figure></li><li><p>lcd_drv<br>加载前面的<code>machine.ko</code>和<code>regulator.ko</code>，名字匹配后调用<code>probe()</code>注册<code>regulator</code>。<br>在LCD驱动中，若想使用regulator系统，需要先在LCD驱动的<code>probe()</code>根据名字获取对应<code>regulator</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//regulator</div><div class="line">tiny4412_regulator = regulator_get(&amp;pdev-&gt;dev, &quot;VCC_LCD&quot;);</div><div class="line">if (IS_ERR(tiny4412_regulator))</div><div class="line">&#123;</div><div class="line">    printk(&quot;regulator_get error!\n&quot;);</div><div class="line">    return -EIO;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><p>再在<code>suspend()</code>和<code>resume()</code>封面便调用<code>regulator_disable()</code>和<code>regulator_enable()</code>。</p><p>此时，如果使用 <em>系统睡眠模型</em> 或 <em>Runtime电源模型</em> 进行休眠操作，就会调用到regulator系统的操作函数，实现电源管理芯片的关闭。</p><p>使用完后，释放<code>regulator</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">static int lcd_remove(struct platform_device *pdev)</div><div class="line">&#123;</div><div class="line">    //Direct Off: ENVID and ENVID_F are set to &quot;0&quot; simultaneously.</div><div class="line">    unsigned int temp;</div><div class="line">    </div><div class="line">    temp = readl(lcd_regs_base + VIDCON0);</div><div class="line">    temp &amp;= ~(0x01 &lt;&lt; 1 | 0x01 &lt;&lt; 0);</div><div class="line">    writel(temp, lcd_regs_base + VIDCON0);</div><div class="line"></div><div class="line">    regulator_put(tiny4412_regulator);</div><div class="line"></div><div class="line">    pm_runtime_disable(&amp;pdev-&gt;dev);</div><div class="line"></div><div class="line">    unregister_framebuffer(tiny4412_lcd);</div><div class="line">    dma_free_writecombine(NULL, tiny4412_lcd-&gt;fix.smem_len, tiny4412_lcd-&gt;screen_base, tiny4412_lcd-&gt;fix.smem_start);</div><div class="line">    framebuffer_release(tiny4412_lcd);</div><div class="line"></div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="4-3-2-设备树方式"><a href="#4-3-2-设备树方式" class="headerlink" title="4.3.2 设备树方式"></a>4.3.2 设备树方式</h3><p>与前面的操作几乎一样，只不过是在dts实现<code>device</code>。</p><ul><li>dts<br>在<code>regulators</code>节点下添加新的<code>regulator</code>，设置<strong>约束条件</strong>：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">regulators &#123;</div><div class="line">   compatible = &quot;simple-bus&quot;;</div><div class="line">   #address-cells = &lt;1&gt;;</div><div class="line">   #size-cells = &lt;0&gt;;</div><div class="line"></div><div class="line">       mmc_reg: regulator@0&#123;</div><div class="line">compatible = &quot;regulator-fixed&quot;;</div><div class="line">reg = &lt;0&gt;;</div><div class="line">regulator-name = &quot;VMEM_VDD_2.8V&quot;;</div><div class="line">regulator-min-microvolt = &lt;2800000&gt;;</div><div class="line">regulator-max-microvolt = &lt;2800000&gt;;</div><div class="line">&#125;; </div><div class="line"></div><div class="line">       lcd_reg: regulator@1&#123;</div><div class="line">compatible = &quot;tiny4412,lcd_regulator&quot;;</div><div class="line">regulator-name = &quot;VCC_LCD&quot;;</div><div class="line">regulator-min-microvolt = &lt;1200000&gt;;</div><div class="line">regulator-max-microvolt = &lt;1200000&gt;;</div><div class="line">&#125;;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></li></ul><p>在lcd节点下，添加<strong>级联关系</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">lcd_s702@11C00000 &#123;</div><div class="line">    compatible = &quot;tiny4412, lcd_s702&quot;;</div><div class="line">    reg = &lt;0x11C00000  0x20c0 0x10010210 0x08 0x10023c80 0x04 0x1003c000 0x1000&gt;;</div><div class="line">    pinctrl-names = &quot;default&quot;;</div><div class="line">    pinctrl-0 = &lt;&amp;lcd_s702&gt;;</div><div class="line">    clocks = &lt;&amp;clock CLK_FIMD0 &amp;clock CLK_ACLK160&gt;;</div><div class="line">    clock-names = &quot;fimd0&quot;,&quot;aclk160&quot;;</div><div class="line">    vlcd-supply = &lt;&amp;lcd_reg&gt;;</div><div class="line">    status = &quot;okay&quot;;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><p>其中<code>vlcd-supply</code>与前面的<code>regulator</code>联系了起来。</p><ul><li><p>driver<br>提供操作函数及注册：</p><figure class="highlight c"><figcaption><span>[regulator.c]</span><a href="https://github.com/hceng/learn/blob/master/tiny4412/04_power_management/regulator/use_dts/regulator.c" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/err.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/platform_device.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/regulator/driver.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/mfd/core.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/io.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/of.h&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">int</span> regulator_states = <span class="number">0</span>;</div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">tiny4412_regulator_enable</span><span class="params">(<span class="keyword">struct</span> regulator_dev *rdev)</span></span></div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    printk(<span class="string">"------LCD Power Open.------\n"</span>);</div><div class="line">    regulator_states = <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">tiny4412_regulator_disable</span><span class="params">(<span class="keyword">struct</span> regulator_dev *rdev)</span></span></div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    printk(<span class="string">"------LCD Power Close.------\n"</span>);</div><div class="line">    regulator_states = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">tiny4412_regulator_is_enabled</span><span class="params">(<span class="keyword">struct</span> regulator_dev *rdev)</span></span></div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    printk(<span class="string">"------LCD Power Test.------\n"</span>);</div><div class="line">    <span class="keyword">if</span> (regulator_states)</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> regulator_ops tiny4412_regulator_ops =</div><div class="line">&#123;</div><div class="line">    .enable= tiny4412_regulator_enable,</div><div class="line">    .disable= tiny4412_regulator_disable,</div><div class="line">    .is_enabled= tiny4412_regulator_is_enabled,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> regulator_desc tiny4412_regulator_desc =</div><div class="line">&#123;</div><div class="line">    .name= <span class="string">"tiny4412_regulator_dev"</span>,</div><div class="line">    .ops= &amp;tiny4412_regulator_ops,</div><div class="line">    .type= REGULATOR_VOLTAGE,<span class="comment">//电压源</span></div><div class="line">    .id    = <span class="number">0</span>,</div><div class="line">    .owner= THIS_MODULE,</div><div class="line">    .n_voltages= <span class="number">1</span>,<span class="comment">//能提供的电压数量</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> regulator_dev *tiny4412_regulator_dev;</div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">tiny4412_regulator_probe</span><span class="params">(<span class="keyword">struct</span> platform_device *pdev)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> regulator_config config = &#123; &#125;;</div><div class="line">    config.dev = &amp;pdev-&gt;dev;</div><div class="line">    config.init_data = dev_get_platdata(&amp;pdev-&gt;dev);</div><div class="line"></div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    tiny4412_regulator_dev = devm_regulator_register(&amp;pdev-&gt;dev, &amp;tiny4412_regulator_desc, &amp;config);</div><div class="line">    <span class="keyword">if</span> (IS_ERR(tiny4412_regulator_dev))</div><div class="line">    &#123;</div><div class="line">        printk(<span class="string">"devm_regulator_register error!\n"</span>);</div><div class="line">        <span class="keyword">return</span> PTR_ERR(tiny4412_regulator_dev);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">tiny4412_regulator_remove</span><span class="params">(<span class="keyword">struct</span> platform_device *pdev)</span></span></div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    devm_regulator_unregister(&amp;pdev-&gt;dev, tiny4412_regulator_dev);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">struct</span> of_device_id regulators_of_match[] =</div><div class="line">&#123;</div><div class="line">    &#123; .compatible = <span class="string">"tiny4412,lcd_regulator"</span> &#125;,</div><div class="line">    &#123; &#125;,</div><div class="line">&#125;;</div><div class="line">MODULE_DEVICE_TABLE(of, regulators_of_match);</div><div class="line"></div><div class="line"><span class="keyword">struct</span> platform_driver tiny4412_regulator_drv =</div><div class="line">&#123;</div><div class="line">    .probe= tiny4412_regulator_probe,</div><div class="line">    .remove= tiny4412_regulator_remove,</div><div class="line">    .driver= &#123;</div><div class="line">        .name= <span class="string">"tiny4412_regulator_drv"</span>,</div><div class="line">        .of_match_table = of_match_ptr(regulators_of_match),</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">tiny4412_regulator_init</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    platform_driver_register(&amp;tiny4412_regulator_drv);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tiny4412_regulator_exit</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line"></div><div class="line">    platform_driver_unregister(&amp;tiny4412_regulator_drv);</div><div class="line">&#125;</div><div class="line"></div><div class="line">module_init(tiny4412_regulator_init);</div><div class="line">module_exit(tiny4412_regulator_exit);</div><div class="line"></div><div class="line">MODULE_LICENSE(<span class="string">"GPL"</span>);</div><div class="line">MODULE_AUTHOR(<span class="string">"hceng &lt;huangcheng.job@foxmail.com&gt;"</span>);</div><div class="line">MODULE_DESCRIPTION(<span class="string">"Tiny4412 regulator driver."</span>);</div><div class="line">MODULE_ALIAS(<span class="string">"Exynos4412_regulator"</span>);</div><div class="line">MODULE_VERSION(<span class="string">"V1.0"</span>);</div></pre></td></tr></table></figure></li><li><p>lcd_drv<br>和前面的使用完全一致。</p></li></ul><p>参考资料：<br><a href="http://www.100ask.org/" target="_blank" rel="external">韦东山第三期项目视频_电源管理</a><br><a href="http://www.wowotech.net/" target="_blank" rel="external">蜗窝科技</a></p><hr><p><div align="center"><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本文采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href="http://hceng.cn/" target="_blank" rel="external">hceng’s blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;探究Linux电源管理模型，并为Tiny4412的LCD驱动添加电源管理。&lt;br&gt;
    
    </summary>
    
    
      <category term="Linux驱动" scheme="http://yoursite.com/tags/Linux%E9%A9%B1%E5%8A%A8/"/>
    
      <category term="Exynos4412" scheme="http://yoursite.com/tags/Exynos4412/"/>
    
      <category term="电源管理" scheme="http://yoursite.com/tags/%E7%94%B5%E6%BA%90%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>嵌入式Linux网络编程——TCP/UDP</title>
    <link href="http://yoursite.com/2017/12/30/%E5%B5%8C%E5%85%A5%E5%BC%8FLinux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E2%80%94%E2%80%94TCP_UDP/"/>
    <id>http://yoursite.com/2017/12/30/嵌入式Linux网络编程——TCP_UDP/</id>
    <published>2017-12-30T01:55:13.000Z</published>
    <updated>2018-01-03T02:55:50.237Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录TCP/UDP网络编程的基础知识，采用TCP/UDP实现宿主机和目标机之间的网络通信。<br><a id="more"></a><br>回想去年校招那会，笔试题老是出现TCP/UDP相关的内容。<br>那时候的我，熟悉点硬件，勉强会点STM32，哪知道什么TCP/UDP……<br>渐渐的，TCP/UDP似乎就成了一个挥之不去的阴影。<br>赶在今年年底，简单的入下门，明年估计会用上。</p><h1 id="1-目标"><a href="#1-目标" class="headerlink" title="1.目标"></a>1.目标</h1><p>暂时想不出什么好的应用场景，<br>目前想到目标就是实现让两个设备通过网络传输数据，<br>比如开发板和Linux主机之间传数据，<br>以后就可以实现<strong>开发板通过网络上报数据</strong>或者<strong>主机通过网络控制开发板</strong>。</p><p>此外，暂时不想关心具体的网络模型，更注重于网络相关函数的直接使用。</p><h1 id="2-Linux网络编程基础"><a href="#2-Linux网络编程基础" class="headerlink" title="2.Linux网络编程基础"></a>2.Linux网络编程基础</h1><h2 id="2-1-嵌套字"><a href="#2-1-嵌套字" class="headerlink" title="2.1 嵌套字"></a>2.1 嵌套字</h2><p>多个TCP连接或者多个应用程序进程 可能需要同一个TCP端口传输数据。<br>为了区分不同应用程序进程和连接，许多计算机操作系统为应用程序与TCP/IP交互提供了称为<strong>嵌套字(Socket)</strong>的接口。<br>Linux中的网络编程正是通过Socket接口实现的，Socket是一种文件描述符。</p><p>常用的TCP/IP有以下三种类型的嵌套字：</p><ul><li>流式嵌套字（SOCK_STREAM）<br>用于提供面向连接的、可靠的数据传输服务，即使用TCP进行传输。</li><li>数据报嵌套字（SOCK_DGRAM）<br>用于提供无连接的服务，即使用UDP进行传输。</li><li>原始嵌套字（SOCK_RAW）<br>可以读写内核没有处理的IP数据报，而流式嵌套字只能读取TCP的数据，数据报嵌套字只能读取UDP的数据。</li></ul><p>因此，如果要访问其它协议发送的数据必须使用原始嵌套字，它允许对底层协议(如IP或ICMP)直接访问。</p><h2 id="2-2-端口"><a href="#2-2-端口" class="headerlink" title="2.2 端口"></a>2.2 端口</h2><p>TCP/IP协议中的端口，端口号的范围从0~65535。<br>一类是由互联网指派名字和号码公司ICANN负责分配给一些常用的应用程序固定使用的“周知的端口”，其值一般为0~1023。例如http的端口号是80，FTP为21，SSH为22，Telnet为23等。<br>还有一类是用户自己定义的，通常是大于1024的整型值。</p><h2 id="2-3-网络地址"><a href="#2-3-网络地址" class="headerlink" title="2.3 网络地址"></a>2.3 网络地址</h2><p>网络通信，归根到底还是进程间的通信(不同计算机上的进程间通信)。<br>在网络中，每一个节点(计算机或路由)都有一个网络地址，如192.168.1.4，也就是IP地址。<br>两个进程通信时，首先要确定各自所在的网络节点的网络地址。</p><p>但是，网络地址只能确定进程所在的计算机，而一台计算机上很可能同时运行着多个进程，所以仅凭网络地址还不能确定到底是和网络中的哪一个进程进行通信，因此套接口中还需要包括其他的信息，也就是端口号（PORT）。<br>在一台计算机中，一个端口号一次只能分配给一个进程，也就是说，在一台计算机中，端口号和进程之间是一一对应关系。</p><p>所以，<strong>使用端口号和网络地址的组合可以唯一的确定整个网络中的一个网络进程</strong>。</p><p>例如，如网络中某一台计算机的IP为192.168.1.4，操作系统分配给计算机中某一应用程序进程的端口号为1500，则此时<code>192.168.1.4 1500</code>就构成了一个套接口。</p><h3 id="2-2-1-网络地址的格式"><a href="#2-2-1-网络地址的格式" class="headerlink" title="2.2.1 网络地址的格式"></a>2.2.1 网络地址的格式</h3><p>在Socket程序设计中，<code>struct sockaddr</code>用于记录网络地址，其格式如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> sockaddr</div><div class="line">&#123;</div><div class="line">     <span class="keyword">unsigned</span> <span class="keyword">short</span> sa_family; <span class="comment">/*协议族，采用AF_XXX的形式，例如AF_INET(IPv4协议族)*/</span></div><div class="line">     <span class="keyword">char</span> sa_data[<span class="number">14</span>]; <span class="comment">/*14字节的协议地址，包含该socket的IP地址和端口号。*/</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure><br>但在实际编程中，并不针对<code>sockaddr</code>数据结构进行操作，而是用与其等价的<code>sockaddr_in</code>数据结构：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> sockaddr_in</div><div class="line">&#123;</div><div class="line">     <span class="keyword">short</span> <span class="keyword">int</span> sa_family; <span class="comment">/*地址族*/</span></div><div class="line">     <span class="keyword">unsigned</span> <span class="keyword">short</span> <span class="keyword">int</span> sin_port; <span class="comment">/*端口号*/</span></div><div class="line">     <span class="keyword">struct</span> in_addr sin_addr; <span class="comment">/*IP地址*/</span></div><div class="line">     <span class="keyword">unsigned</span> <span class="keyword">char</span> sin_zero[<span class="number">8</span>]; <span class="comment">/*填充0 以保持与struct sockaddr同样大小*/</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><h3 id="2-2-1-网络地址的转换"><a href="#2-2-1-网络地址的转换" class="headerlink" title="2.2.1 网络地址的转换"></a>2.2.1 网络地址的转换</h3><p>IP地址通常用数字加点(如192.168.1.4)表示，而在<code>struct in_addr</code>中使用的式32位整数表示。因此，Linux提供如下函数进行两者之间的转换：</p><ul><li><p>inet_aton()函数：</p><blockquote><p><strong>所需要头文件</strong>：<br><code>#include &lt;sys/socket.h&gt;</code><br><code>#include &lt;netinet/in.h&gt;</code><br><code>#include &lt;arpa/inet.h&gt;</code><br><strong>函数格式</strong>：<br><code>int inet_aton(const char *cp, struct in_addr *inp);</code><br><strong>函数功能</strong>：<br>将a.b.c.d字符串形式的IP地址转换成32位网络序号IP地址；<br>*cp:存放字符串形式的IP地址的指针<br>*inp:存放32位的网络序号IP地址<br><strong>返回值</strong>：<br>转换成功，返回非0，否则返回0；</p></blockquote></li><li><p>inet_ntoa()函数：客户机端:</p><blockquote><p><strong>所需要头文件</strong>：<br><code>#include &lt;sys/socket.h&gt;</code><br><code>#include &lt;netinet/in.h&gt;</code><br><code>#include &lt;arpa/inet.h&gt;</code><br><strong>函数格式</strong>：<br><code>char *inet_ntoa(struct in_addr in);</code><br><strong>函数功能</strong>：<br>将32位网络序号IP地址转换成a.b.c.d字符串形式的IP地址；<br>in：Internet主机地址的结构<br><strong>返回值</strong>：<br>转换成功，返回一个字符指针，否则返回NULL；</p></blockquote></li></ul><h2 id="2-4-字节序"><a href="#2-4-字节序" class="headerlink" title="2.4 字节序"></a>2.4 字节序</h2><p>不同的CPU采用对变量的字节存储顺序可能不同。<br>常用的X86结构是小端模式，很多的ARM，DSP都为小端模式，即内存的低地址存储数据的低字节，高地址存储数据的高字节。<br>而KEIL C51则为大端模式，内存的高地址存储数据的低字节，低地址存储数据高字节。</p><p>对于网络传输来说，数据顺序必须是一致的，网络字节顺序采用大端字节序方式。<br>下面是四个常用的转换函数：</p><p>主机转网络：</p><ul><li><p>htons()函数：</p><blockquote><p><strong>所需要头文件</strong>：<br><code>#include &lt;netinet/in.h&gt;</code><br><strong>函数格式</strong>：<br><code>unsigned short int htons(unsigned short int hostshort)</code><br><strong>函数功能</strong>：<br>将参数指定的16位主机(host)字符顺序转换成网络(net)字符顺序；<br>hostshort：待转换的16位主机字符顺序数<br><strong>返回值</strong>：<br>返回对应的网络字符顺序数；</p></blockquote></li><li><p>htonl()函数：</p><blockquote><p><strong>所需要头文件</strong>：<br><code>#include &lt;netinet/in.h&gt;</code><br><strong>函数格式</strong>：<br><code>unsigned long int htons(unsigned long int hostlong)</code><br><strong>函数功能</strong>：<br>将参数指定的32位主机(host)字符顺序转换成网络(net)字符顺序；<br>hostlong：待转换的32位主机字符顺序数<br><strong>返回值</strong>：<br>返回对应的网络字符顺序数；</p></blockquote></li></ul><hr><p>网络转主机：</p><ul><li><p>ntohs()函数：</p><blockquote><p><strong>所需要头文件</strong>：<br><code>#include &lt;netinet/in.h&gt;</code><br><strong>函数格式</strong>：<br><code>unsigned short int ntohs(unsigned short int netshort)</code><br><strong>函数功能</strong>：<br>将参数指定的16位网络(net)字符顺序转换成主机(host)字符顺序；<br>netshort：待转换的16位网络字符顺序数<br><strong>返回值</strong>：<br>返回对应的主机字符顺序数；</p></blockquote></li><li><p>ntohl()函数：</p><blockquote><p><strong>所需要头文件</strong>：<br><code>#include &lt;netinet/in.h&gt;</code><br><strong>函数格式</strong>：<br><code>unsigned long int ntohl(unsigned long int netlong)</code><br><strong>函数功能</strong>：<br>将参数指定的32位网络(net)字符顺序转换成主机(host)字符顺序；<br>netshort：待转换的32位网络字符顺序数<br><strong>返回值</strong>：<br>返回对应的主机字符顺序数；</p></blockquote></li></ul><h1 id="3-TCP"><a href="#3-TCP" class="headerlink" title="3.TCP"></a>3.TCP</h1><p>TCP有专门的传递保证机制，收到数据时会自动发送确认消息，发送方收到确认消息后才会继续发送消息，否则继续等待。<br>这样的好处是传输的数据是<strong>可靠</strong>的，此外它是<strong>有连接</strong>的传输，大多数网络传输都是用的TCP。</p><h2 id="3-1-TCP流程图"><a href="#3-1-TCP流程图" class="headerlink" title="3.1 TCP流程图"></a>3.1 TCP流程图</h2><p><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/171230/1.jpg?v=3" alt=""></p><h2 id="3-2-TCP步骤分析"><a href="#3-2-TCP步骤分析" class="headerlink" title="3.2 TCP步骤分析"></a>3.2 TCP步骤分析</h2><p>程序分为服务器端和客户机端，先从服务器端开始分析。</p><ul><li><strong>服务器端:</strong><br><strong>a. 创建socket</strong><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">sock_fd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);<span class="comment">//AF_INET:IPV4;SOCK_STREAM:TCP</span></div><div class="line"><span class="keyword">if</span> (<span class="number">-1</span> == sock_fd)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"socket error:%s\n\a"</span>, strerror(errno));</div><div class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><blockquote><p><strong>所需要头文件</strong>：<br><code>#include &lt;sys/types.h&gt;</code><br><code>#include &lt;sys/socket.h&gt;</code><br><strong>函数格式</strong>：<br><code>int socket(int domain, int type, int protocol);</code><br><strong>函数功能</strong>：<br>创建一个套接字；<br>domain:协议域(族)，<strong>决定了套接字的地址类型</strong>，例如AF_INET决定了要用IPv4地址(32位)与端口号(16位)的组合。常见的协议族有：<strong>AF_INET</strong>、AF_INET6、AF_LOCAL(或称AF_UNIX)、AF_ROUTE等；<br>type：<strong>指定套接字类型</strong>，<strong>SOCK_STREAM</strong>(TCP)、<strong>SOCK_DGRAM</strong>(UDP)、SOCK_RAW<br>protocol:指定socket所使用的传输协议编号，通常为0<br><strong>返回值</strong>：<br>若成功，返回一个套接字描述符，否则返回-1；</p></blockquote><p>Socket就是一种文件描述符，和普通的打开文件一样，需要检测其返回结果。</p><p><strong>b. 设置socket</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">memset</span>(&amp;server_addr, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> sockaddr_in));<span class="comment">//clear</span></div><div class="line">server_addr.sin_family = AF_INET;</div><div class="line">server_addr.sin_addr.s_addr = htonl(INADDR_ANY);<span class="comment">//INADDR_ANY:This machine all IP</span></div><div class="line">server_addr.sin_port = htons(PORT_NUMBER);</div></pre></td></tr></table></figure><br>设置何种协议族，设置本机IP和端口，也就有了唯一性。</p><p><strong>c. 绑定socket</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">ret = bind(sock_fd, (<span class="keyword">struct</span> sockaddr *)(&amp;server_addr), <span class="keyword">sizeof</span>(<span class="keyword">struct</span> sockaddr));</div><div class="line"><span class="keyword">if</span>(<span class="number">-1</span> == ret)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"bind error:%s\n\a"</span>, strerror(errno));</div><div class="line">    close(sock_fd);</div><div class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><blockquote><p><strong>所需要头文件</strong>：<br><code>#include &lt;sys/types.h&gt;</code><br><code>#include &lt;sys/socket.h&gt;</code><br><strong>函数格式</strong>：<br><code>int bind(int sockfd, struct sockaddr *addr, int addrlen);</code><br><strong>函数功能</strong>：<br>把套接字绑定到本地计算机的某一个端口上；<br>sockfd:待绑定的套接字描述符<br>addr：一个struct sockaddr *指针，指定要绑定给sockfd的协议地址。内容结构由前面的协议族决定。<br>addrlen:地址的长度<br><strong>返回值</strong>：<br>若成功，返回0，否则返回-1，错误信息存在errno中；</p></blockquote><p><strong>d. 开始监听</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">ret = listen(sock_fd, BACKLOG);</div><div class="line"><span class="keyword">if</span> (<span class="number">-1</span> == ret)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"listen error:%s\n\a"</span>, strerror(errno));</div><div class="line">    close(sock_fd);</div><div class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><blockquote><p><strong>所需要头文件</strong>：<br><code>#include &lt;sys/types.h&gt;</code><br><code>#include &lt;sys/socket.h&gt;</code><br><strong>函数格式</strong>：<br><code>int listen(int sockfd, int backlog);</code><br><strong>函数功能</strong>：<br>使服务器的这个端口和IP处于监听状态，等待网络中某一客户机的连接请求，最大连接数量为backlog≤128；<br>sockfd:待监听的套接字描述符<br>backlog：最大可监听和连接的客户端数量<br><strong>返回值</strong>：<br>若成功，返回0，否则返回-1；</p></blockquote><p><strong>e. 阻塞，等待连接</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">addr_len = <span class="keyword">sizeof</span>(<span class="keyword">struct</span> sockaddr);</div><div class="line">new_fd = accept(sock_fd, (<span class="keyword">struct</span> sockaddr *)&amp;client_addr, &amp;addr_len);</div><div class="line"><span class="keyword">if</span> (<span class="number">-1</span> == new_fd)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"accept error:%s\n\a"</span>, strerror(errno));</div><div class="line">    close(sock_fd);</div><div class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>       </p><blockquote><p><strong>所需要头文件</strong>：<br><code>#include &lt;sys/types.h&gt;</code><br><code>#include &lt;sys/socket.h&gt;</code><br><strong>函数格式</strong>：<br><code>int accept(int sockfd, struct sockaddr *addr, int *addrlen);</code><br><strong>函数功能</strong>：<br>接受连接请求，建立起与客户机之间的通信连接。服务器处于监听状态时，如果某时刻获得客户机的连接请求，此时并不是立即处理这个请求，而是将这个请求放在等待队列中，当系统空闲时再处理客户机的连接请求；<br>当accept函数接受一个连接时，会返回一个新的socket标识符，以后的数据传输和读取就要通过这个新的socket编号来处理，原来参数中的socket也可以继续使用，继续监听其它客户机的连接请求；<br>accept连接成功时，参数addr所指的结构体会填入所连接机器的地址数据；<br>sockfd:待监听的套接字描述符<br>addr:指向struct sockaddr的指针，用于返回客户端的协议地址<br>addrlen:协议地址的长度<br><strong>返回值</strong>：<br>若成功，返回一个由内核自动生成的一个全新描述字，代表与返回客户的TCP连接，否则返回-1，错误信息存在errno中；</p></blockquote><p><strong>f. 接收数据</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">recv_len = recv(new_fd, recv_buf, <span class="number">999</span>, <span class="number">0</span>);</div><div class="line"><span class="keyword">if</span> (recv_len &lt;= <span class="number">0</span>)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"recv error:%s\n\a"</span>, strerror(errno))；</div><div class="line">    close(new_fd);</div><div class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line">    recv_buf[recv_len] = <span class="string">'\0'</span>;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Get msg from client%d: %s\n"</span>, client_num, recv_buf);</div><div class="line">&#125;</div></pre></td></tr></table></figure>   </p><blockquote><p><strong>所需要头文件</strong>：<br><code>#include &lt;sys/types.h&gt;</code><br><code>#include &lt;sys/socket.h&gt;</code><br><strong>函数格式</strong>：<br><code>int recv(int sockfd, void *buf, size_t len, int flags);</code><br><strong>函数功能</strong>：<br>用新的套接字来接收远端主机传来的数据，并把数据存到由参数buf指向的内存空间；<br>sockfd:sockfd为前面accept的返回值，即new_fd，也就是新的套接字<br>buf:指明一个缓冲区<br>len:指明缓冲区的长度<br>flags:通常为0<br><strong>返回值</strong>：<br>若成功，返回接收到的字节数，另一端已关闭则返回0，否则返回-1，错误信息存在errno中；</p></blockquote><p><strong>g. 关闭socket</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">close(sock_fd);</div><div class="line"><span class="built_in">exit</span>(<span class="number">0</span>); </div></pre></td></tr></table></figure>   </p><p>为了应对多个连接，并保证它们之间相互独立，实际编程中往往还要加入多进程fork()。<br>让子进程接收数据，父进程继续监听新的连接。</p><ul><li><strong>客户机端:</strong></li></ul><p><strong>a. 创建socket</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">sock_fd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);<span class="comment">//AF_INET:IPV4;SOCK_STREAM:TCP</span></div><div class="line"><span class="keyword">if</span> (<span class="number">-1</span> == sock_fd)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"socket error:%s\n\a"</span>, strerror(errno));</div><div class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>b. 设置socket</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">memset</span>(&amp;server_addr, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> sockaddr_in));<span class="comment">//clear</span></div><div class="line">server_addr.sin_family = AF_INET;</div><div class="line">server_addr.sin_port = htons(PORT_NUMBER);</div></pre></td></tr></table></figure><br>其中注意的是，这里设置的socket内容是指 希望连接的服务器IP和端口号信息，IP地址来自用户的输入，并转换格式得到。因此，这里的设置和服务器的设置，要保持内容上的一致。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">ret = inet_aton(argv[<span class="number">1</span>], &amp;server_addr.sin_addr);</div><div class="line"><span class="keyword">if</span>(<span class="number">0</span> == ret)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"server_ip error.\n"</span>);</div><div class="line">    close(sock_fd);</div><div class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>c. 连接</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">ret = connect(sock_fd, (<span class="keyword">const</span> <span class="keyword">struct</span> sockaddr *)&amp;server_addr, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> sockaddr));</div><div class="line"><span class="keyword">if</span> (<span class="number">-1</span> == ret)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"connect error:%s\n\a"</span>, strerror(errno));</div><div class="line">    close(sock_fd);</div><div class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><blockquote><p><strong>所需要头文件</strong>：<br><code>#include &lt;sys/types.h&gt;</code><br><code>#include &lt;sys/socket.h&gt;</code><br><strong>函数格式</strong>：<br><code>int connect (int sockfd, struct sockaddr *serv_addr, int addrlen);</code><br><strong>函数功能</strong>：<br>用来请求连接远程服务器，将参数sockfd的socket连至参数serv_addr所指定的服务器IP和端口号上去；<br>sockfd:客户端的socket套接字<br>serv_addr:一个struct sockaddr类型的结构体指针变量，存储着远程服务器的IP与端口号信息<br>addrlen:结构体变量的长度<br><strong>返回值</strong>：<br>若成功，返回0，否则返回-1，错误信息存在errno中；</p></blockquote><p><strong>d. 发送</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">send_buf = send(sock_fd, send_buf, <span class="built_in">strlen</span>(send_buf), <span class="number">0</span>);</div><div class="line"><span class="keyword">if</span> (send_buf &lt;= <span class="number">0</span>)</div><div class="line">&#123;</div><div class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"send error:%s\n\a"</span>, strerror(errno));</div><div class="line">close(sock_fd);</div><div class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><blockquote><p><strong>所需要头文件</strong>：<br><code>#include &lt;sys/types.h&gt;</code><br><code>#include &lt;sys/socket.h&gt;</code><br><strong>函数格式</strong>：<br><code>int send(int sockfd, const void *buf, int len, int flags);</code><br><strong>函数功能</strong>：<br>用来发送数据给指定的远端主机；<br>sockfd:客户端的socket套接字<br>buf:指明一个缓冲区<br>len:指明缓冲区的长度<br>flags:通常为0<br><strong>返回值</strong>：<br>若成功，返回发送的字节数，否则返回-1，错误信息存在errno中</p></blockquote><p><strong>d. 关闭socket</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">close(sock_fd);</div><div class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</div></pre></td></tr></table></figure></p><h2 id="3-3-TCP完整代码"><a href="#3-3-TCP完整代码" class="headerlink" title="3.3 TCP完整代码"></a>3.3 TCP完整代码</h2><figure class="highlight c"><figcaption><span>[tcp_server.c]</span><a href="https://github.com/hceng/learn/blob/master/tcp_udp/tcp/tcp_server.c" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">* tcp_server.c</div><div class="line"># Copyright (C) 2017 hceng, &lt;huangcheng.job@foxmail.com&gt;</div><div class="line"># Licensed under terms of GPLv2</div><div class="line">#</div><div class="line"># This program is used for TCP / UDP learning.</div><div class="line"># https://hceng.cn/</div><div class="line">*/</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span>      </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PORT_NUMBER 8888</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BACKLOG     10</span></div><div class="line"></div><div class="line"><span class="comment">/* socket-&gt;bind-&gt;listen-&gt;accept-&gt;send/recv-&gt;close*/</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> sock_fd, new_fd;</div><div class="line">    <span class="keyword">struct</span> sockaddr_in server_addr;</div><div class="line">    <span class="keyword">struct</span> sockaddr_in client_addr;</div><div class="line">    <span class="keyword">int</span> ret;</div><div class="line">    <span class="keyword">int</span> addr_len;</div><div class="line">    <span class="keyword">int</span> recv_len;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> recv_buf[<span class="number">1000</span>];</div><div class="line">    <span class="keyword">int</span> client_num = <span class="number">-1</span>;</div><div class="line">    </div><div class="line">    signal(SIGCHLD,SIG_IGN);</div><div class="line"></div><div class="line">    <span class="comment">/* socket */</span></div><div class="line">    sock_fd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);<span class="comment">//AF_INET:IPV4;SOCK_STREAM:TCP</span></div><div class="line">    <span class="keyword">if</span> (<span class="number">-1</span> == sock_fd)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"socket error:%s\n\a"</span>, strerror(errno));</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/* set server sockaddr_in */</span></div><div class="line">    <span class="built_in">memset</span>(&amp;server_addr, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> sockaddr_in));<span class="comment">//clear</span></div><div class="line">    server_addr.sin_family = AF_INET;</div><div class="line">    server_addr.sin_addr.s_addr = htonl(INADDR_ANY);<span class="comment">//INADDR_ANY:This machine all IP</span></div><div class="line">    server_addr.sin_port = htons(PORT_NUMBER);</div><div class="line"></div><div class="line">    <span class="comment">/* bind */</span></div><div class="line">    ret = bind(sock_fd, (<span class="keyword">struct</span> sockaddr *)(&amp;server_addr), <span class="keyword">sizeof</span>(<span class="keyword">struct</span> sockaddr));</div><div class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == ret)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"bind error:%s\n\a"</span>, strerror(errno));</div><div class="line">        close(sock_fd);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/* listen */</span></div><div class="line">    ret = listen(sock_fd, BACKLOG);</div><div class="line">    <span class="keyword">if</span> (<span class="number">-1</span> == ret)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"listen error:%s\n\a"</span>, strerror(errno));</div><div class="line">        close(sock_fd);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/* accept */</span></div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        addr_len = <span class="keyword">sizeof</span>(<span class="keyword">struct</span> sockaddr);</div><div class="line">        new_fd = accept(sock_fd, (<span class="keyword">struct</span> sockaddr *)&amp;client_addr, &amp;addr_len);</div><div class="line">        <span class="keyword">if</span> (<span class="number">-1</span> == new_fd)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"accept error:%s\n\a"</span>, strerror(errno));</div><div class="line">            close(sock_fd);</div><div class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        client_num++;</div><div class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Server get connetion form client%d: %s\n"</span>, client_num, inet_ntoa(client_addr.sin_addr));</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (!fork())</div><div class="line">&#123;</div><div class="line">            <span class="comment">/* Child process */</span></div><div class="line">            <span class="keyword">while</span> (<span class="number">1</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="comment">/* recv */</span></div><div class="line">                recv_len = recv(new_fd, recv_buf, <span class="number">999</span>, <span class="number">0</span>);</div><div class="line">                <span class="keyword">if</span> (recv_len &lt;= <span class="number">0</span>)</div><div class="line">                &#123;</div><div class="line">                    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"recv error:%s\n\a"</span>, strerror(errno));</div><div class="line">                    close(new_fd);</div><div class="line">                    <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                &#123;</div><div class="line">                    recv_buf[recv_len] = <span class="string">'\0'</span>;</div><div class="line">                    <span class="built_in">printf</span>(<span class="string">"Get msg from client%d: %s\n"</span>, client_num, recv_buf);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            close(new_fd);</div><div class="line">        &#125;   </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/* close */</span></div><div class="line">    close(sock_fd);</div><div class="line">    <span class="built_in">exit</span>(<span class="number">0</span>); </div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight c"><figcaption><span>[tcp_client.c]</span><a href="https://github.com/hceng/learn/blob/master/tcp_udp/tcp/tcp_client.c" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">* tcp_client.c</div><div class="line"># Copyright (C) 2017 hceng, &lt;huangcheng.job@foxmail.com&gt;</div><div class="line"># Licensed under terms of GPLv2</div><div class="line">#</div><div class="line"># This program is used for TCP / UDP learning.</div><div class="line"># https://hceng.cn/</div><div class="line">*/</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netdb.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PORT_NUMBER 8888</span></div><div class="line"></div><div class="line"><span class="comment">/* socket-&gt;connect-&gt;send-&gt;close*/</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> sock_fd;</div><div class="line">    <span class="keyword">struct</span> sockaddr_in server_addr;</div><div class="line">    <span class="keyword">int</span> ret;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> send_buf[<span class="number">1000</span>];</div><div class="line">    <span class="keyword">int</span> send_len;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span>(argc != <span class="number">2</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Usage:%s hostname\n\a"</span>, argv[<span class="number">0</span>]);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/* socket */</span></div><div class="line">    sock_fd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);<span class="comment">//AF_INET:IPV4;SOCK_STREAM:TCP</span></div><div class="line">    <span class="keyword">if</span> (<span class="number">-1</span> == sock_fd)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"socket error:%s\n\a"</span>, strerror(errno));</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/* set sockaddr_in parameter*/</span></div><div class="line">    <span class="built_in">memset</span>(&amp;server_addr, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> sockaddr_in));<span class="comment">//clear</span></div><div class="line">    server_addr.sin_family = AF_INET;</div><div class="line">    server_addr.sin_port = htons(PORT_NUMBER);</div><div class="line">    ret = inet_aton(argv[<span class="number">1</span>], &amp;server_addr.sin_addr);</div><div class="line">    <span class="keyword">if</span>(<span class="number">0</span> == ret)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"server_ip error.\n"</span>);</div><div class="line">        close(sock_fd);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/* connect */</span></div><div class="line">    ret = connect(sock_fd, (<span class="keyword">const</span> <span class="keyword">struct</span> sockaddr *)&amp;server_addr, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> sockaddr));</div><div class="line">    <span class="keyword">if</span> (<span class="number">-1</span> == ret)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"connect error:%s\n\a"</span>, strerror(errno));</div><div class="line">        close(sock_fd);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (fgets(send_buf, <span class="number">999</span>, <span class="built_in">stdin</span>))</div><div class="line">        &#123;</div><div class="line">            <span class="comment">/* send */</span></div><div class="line">            send_len = send(sock_fd, send_buf, <span class="built_in">strlen</span>(send_buf), <span class="number">0</span>);</div><div class="line">            <span class="keyword">if</span> (send_len &lt;= <span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"send error:%s\n\a"</span>, strerror(errno));</div><div class="line">                close(sock_fd);</div><div class="line">                <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/* close */</span></div><div class="line">    close(sock_fd);</div><div class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="3-4-测试结果"><a href="#3-4-测试结果" class="headerlink" title="3.4 测试结果"></a>3.4 测试结果</h2><p>先在Ubuntu主机上交叉编译服务器端代码，再在Ubuntu主机上编译客户端代码。<br>在开发板上运行服务器端代码，在Ubuntu主机先启动tmux分屏，再分别运行客户端代码。</p><ul><li>服务器端<br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/171230/3.png" alt=""></li><li>客户机端<br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/171230/2.png?v=1" alt=""></li></ul><h1 id="4-UDP"><a href="#4-UDP" class="headerlink" title="4.UDP"></a>4.UDP</h1><p>UDP没有传递保证机制，如果传输中数据丢失，协议不会有任何的检测或提示。<br>这样的好处是传输的数据是<strong>持续</strong>的，此外它是<strong>无连接</strong>的传输，比如实时视频时，如果采用TCP，中途有一点点数据出错都会卡住，进行等待，产生延时。加入使用UDP，尽管有少量的丢帧，但数据是实时的。</p><h2 id="4-1-UDP流程图"><a href="#4-1-UDP流程图" class="headerlink" title="4.1 UDP流程图"></a>4.1 UDP流程图</h2><p><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/171230/4.jpg" alt=""></p><h2 id="4-2-UDP步骤分析"><a href="#4-2-UDP步骤分析" class="headerlink" title="4.2 UDP步骤分析"></a>4.2 UDP步骤分析</h2><p>从流程图可以看出，UDP比TCP的步骤少多了。</p><ul><li><strong>服务器端:</strong></li></ul><p><strong>a. 创建socket</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">sock_fd = socket(AF_INET, SOCK_DGRAM, <span class="number">0</span>);<span class="comment">//AF_INET:IPV4;SOCK_DGRAM:UDP</span></div><div class="line"><span class="keyword">if</span> (<span class="number">-1</span> == sock_fd)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"socket error:%s\n\a"</span>, strerror(errno));</div><div class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>协议族改成SOCK_DGRAM。</p><p><strong>b. 设置socket</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">memset</span>(&amp;server_addr, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> sockaddr_in));<span class="comment">//clear</span></div><div class="line">server_addr.sin_family = AF_INET;</div><div class="line">server_addr.sin_addr.s_addr = htonl(INADDR_ANY);<span class="comment">//INADDR_ANY:This machine all IP</span></div><div class="line">server_addr.sin_port = htons(PORT_NUMBER);</div></pre></td></tr></table></figure><br>和前面的TCP设置还是一样的。</p><p><strong>c. 绑定socket</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">ret = bind(sock_fd, (<span class="keyword">struct</span> sockaddr *)(&amp;server_addr), <span class="keyword">sizeof</span>(<span class="keyword">struct</span> sockaddr));</div><div class="line"><span class="keyword">if</span>(<span class="number">-1</span> == ret)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"bind error:%s\n\a"</span>, strerror(errno));</div><div class="line">    close(sock_fd);</div><div class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>绑定的操作也没有变。</p><p><strong>d. 接收数据</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">addr_len = <span class="keyword">sizeof</span>(<span class="keyword">struct</span> sockaddr);</div><div class="line">recv_len = recvfrom(sock_fd, recv_buf, <span class="number">999</span>, <span class="number">0</span>, (<span class="keyword">struct</span> sockaddr *)&amp;server_addr, &amp;addr_len);</div><div class="line"><span class="keyword">if</span> (recv_len &lt;= <span class="number">0</span>)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"recvfrom error:%s\n\a"</span>, strerror(errno));</div><div class="line">    close(sock_fd);</div><div class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line">    recv_buf[recv_len] = <span class="string">'\0'</span>;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Get msg from client%d: %s\n"</span>, client_num, recv_buf);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><blockquote><p><strong>所需要头文件</strong>：<br><code>#include &lt;sys/types.h&gt;</code><br><code>#include &lt;sys/socket.h&gt;</code><br><strong>函数格式</strong>：<br><code>int recvfrom(int sockfd, char FAR *buf, int len, int flags, struct sockaddr FAR *from, int FAR *fromlen);</code><br><strong>函数功能</strong>：<br>从套接字上接收一个数据报并保存源地址；<br>sockfd:标识一个已连接套接字的描述符<br>buf:接收数据缓冲区<br>len:接收数据缓冲区长度<br>flags:调用操作方式，由以下零个或多个组成</p><table><thead><tr><th style="text-align:center">flags</th><th style="text-align:center">说明</th><th style="text-align:center">recv</th><th style="text-align:center">send</th></tr></thead><tbody><tr><td style="text-align:center">MSG_DONTROUTE</td><td style="text-align:center">绕过路由表查找</td><td style="text-align:center"></td><td style="text-align:center">•</td></tr><tr><td style="text-align:center">MSG_DONTWAIT</td><td style="text-align:center">仅本操作非阻塞</td><td style="text-align:center">•</td><td style="text-align:center">•</td></tr><tr><td style="text-align:center">MSG_OOB</td><td style="text-align:center">发送或接收带外数据</td><td style="text-align:center">•</td><td style="text-align:center">•</td></tr><tr><td style="text-align:center">MSG_PEEK</td><td style="text-align:center">窥看外来消息</td><td style="text-align:center">•</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">MSG_WAITALL</td><td style="text-align:center">等待所有数据</td><td style="text-align:center">•</td></tr></tbody></table><p>from:(可选)指针，指向装有源地址的缓冲区<br>fromlen:(可选)指针，指向from缓冲区长度值<br><strong>返回值</strong>：<br>若成功，返回读入的字节数，否则返回0；</p></blockquote><p><strong>e. 关闭</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">close(sock_fd);</div><div class="line"><span class="built_in">exit</span>(<span class="number">0</span>); </div></pre></td></tr></table></figure></p><ul><li><strong>客户机端:</strong></li></ul><p><strong>a. 创建socket</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">sock_fd = socket(AF_INET, SOCK_DGRAM, <span class="number">0</span>);<span class="comment">//AF_INET:IPV4;SOCK_DGRAM:UDP</span></div><div class="line"><span class="keyword">if</span> (<span class="number">-1</span> == sock_fd)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"socket error:%s\n\a"</span>, strerror(errno));</div><div class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>协议族改成SOCK_DGRAM。</p><p><strong>b. 设置socket</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">memset</span>(&amp;server_addr, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> sockaddr_in));<span class="comment">//clear</span></div><div class="line">server_addr.sin_family = AF_INET;</div><div class="line">server_addr.sin_port = htons(PORT_NUMBER);</div><div class="line">ret = inet_aton(argv[<span class="number">1</span>], &amp;server_addr.sin_addr);</div><div class="line"><span class="keyword">if</span>(<span class="number">0</span> == ret)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"server_ip error.\n"</span>);</div><div class="line">    close(sock_fd);</div><div class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>c. 发送数据</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">addr_len = <span class="keyword">sizeof</span>(<span class="keyword">struct</span> sockaddr);</div><div class="line">send_len = sendto(sock_fd, send_buf, <span class="built_in">strlen</span>(send_buf), <span class="number">0</span>, (<span class="keyword">const</span> <span class="keyword">struct</span> sockaddr *)&amp;server_addr, addr_len);</div><div class="line"><span class="keyword">if</span> (send_len &lt;= <span class="number">0</span>)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"send error:%s\n\a"</span>, strerror(errno));</div><div class="line">    close(sock_fd);</div><div class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><blockquote><p><strong>所需要头文件</strong>：<br><code>#include &lt;sys/types.h&gt;</code><br><code>#include &lt;sys/socket.h&gt;</code><br><strong>函数格式</strong>：<br><code>int sendto(int sockfd, char FAR *buf, int len, int flags, struct sockaddr FAR *to, int FAR *tolen);</code><br><strong>函数功能</strong>：<br>向一指定目的地发送数据；<br>sockfd:一个标识套接字的描述字<br>buf:发送数据缓冲区<br>len:发送数据缓冲区长度<br>flags:调用方式标志位<br>to:(可选)指针，指向目的的套接字的地址<br>tolen:目的套接字地址的长度<br><strong>返回值</strong>：<br>若成功，返回发送的字节数，如果连接已中止，返回0，如果发生错误，返回-1；</p></blockquote><p><strong>d. 关闭</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">close(sock_fd);</div><div class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</div></pre></td></tr></table></figure><br>UDP传输的客户端少了connect()，原本该在connect()函数里传入服务器地址相关信息，现在变成了在sendto()里传入。</p><h2 id="4-3-UDP完整代码"><a href="#4-3-UDP完整代码" class="headerlink" title="4.3 UDP完整代码"></a>4.3 UDP完整代码</h2><figure class="highlight c"><figcaption><span>[udp_client.c]</span><a href="https://github.com/hceng/learn/blob/master/tcp_udp/udp/udp_server.c" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">* udp_server.c</div><div class="line"># Copyright (C) 2017 hceng, &lt;huangcheng.job@foxmail.com&gt;</div><div class="line"># Licensed under terms of GPLv2</div><div class="line">#</div><div class="line"># This program is used for TCP / UDP learning.</div><div class="line"># https://hceng.cn/</div><div class="line">*/</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span>      </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PORT_NUMBER 8888</span></div><div class="line"></div><div class="line"><span class="comment">/* socket-&gt;bind-&gt;recvfrom/sendto-&gt;close */</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> sock_fd;</div><div class="line">    <span class="keyword">struct</span> sockaddr_in server_addr;</div><div class="line">    <span class="keyword">struct</span> sockaddr_in client_addr;</div><div class="line">    <span class="keyword">int</span> ret;</div><div class="line">    <span class="keyword">int</span> addr_len;</div><div class="line">    <span class="keyword">int</span> recv_len;</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> recv_buf[<span class="number">1000</span>];</div><div class="line">    </div><div class="line">    <span class="comment">/* socket */</span></div><div class="line">    sock_fd = socket(AF_INET, SOCK_DGRAM, <span class="number">0</span>);<span class="comment">//AF_INET:IPV4;SOCK_DGRAM:UDP</span></div><div class="line">    <span class="keyword">if</span> (<span class="number">-1</span> == sock_fd)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"socket error:%s\n\a"</span>, strerror(errno));</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/* set sockaddr_in parameter*/</span></div><div class="line">    <span class="built_in">memset</span>(&amp;server_addr, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> sockaddr_in));<span class="comment">//clear</span></div><div class="line">    server_addr.sin_family = AF_INET;</div><div class="line">    server_addr.sin_addr.s_addr = htonl(INADDR_ANY);<span class="comment">//INADDR_ANY:This machine all IP</span></div><div class="line">    server_addr.sin_port = htons(PORT_NUMBER);</div><div class="line"></div><div class="line">    <span class="comment">/* bind */</span></div><div class="line">    ret = bind(sock_fd, (<span class="keyword">struct</span> sockaddr *)(&amp;server_addr), <span class="keyword">sizeof</span>(<span class="keyword">struct</span> sockaddr));</div><div class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == ret)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"bind error:%s\n\a"</span>, strerror(errno));</div><div class="line">        close(sock_fd);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="comment">/* recvfrom */</span></div><div class="line">        addr_len = <span class="keyword">sizeof</span>(<span class="keyword">struct</span> sockaddr);</div><div class="line">        recv_len = recvfrom(sock_fd, recv_buf, <span class="number">999</span>, <span class="number">0</span>, (<span class="keyword">struct</span> sockaddr *)&amp;client_addr, &amp;addr_len);</div><div class="line">        <span class="keyword">if</span> (recv_len &lt;= <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"recvfrom error:%s\n\a"</span>, strerror(errno));</div><div class="line">            close(sock_fd);</div><div class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            recv_buf[recv_len] = <span class="string">'\0'</span>;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"Get msg from client:%s: %s\n"</span>, inet_ntoa(client_addr.sin_addr), recv_buf);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/* close */</span></div><div class="line">    close(sock_fd);</div><div class="line">    <span class="built_in">exit</span>(<span class="number">0</span>); </div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight c"><figcaption><span>[udp_client.c]</span><a href="https://github.com/hceng/learn/blob/master/tcp_udp/udp/udp_client.c" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">* udp_client.c</div><div class="line"># Copyright (C) 2017 hceng, &lt;huangcheng.job@foxmail.com&gt;</div><div class="line"># Licensed under terms of GPLv2</div><div class="line">#</div><div class="line"># This program is used for TCP / UDP learning.</div><div class="line"># https://hceng.cn/</div><div class="line">*/</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netdb.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PORT_NUMBER 8888</span></div><div class="line"></div><div class="line"><span class="comment">/* socket-&gt;bind-&gt;recvfrom/sendto-&gt;close */</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> sock_fd;</div><div class="line">    <span class="keyword">struct</span> sockaddr_in server_addr;</div><div class="line">    <span class="keyword">int</span> ret;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> send_buf[<span class="number">1000</span>];</div><div class="line">    <span class="keyword">int</span> send_len;</div><div class="line">    <span class="keyword">int</span> addr_len;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span>(argc != <span class="number">2</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Usage:%s hostname\n\a"</span>, argv[<span class="number">0</span>]);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/* socket */</span></div><div class="line">    sock_fd = socket(AF_INET, SOCK_DGRAM, <span class="number">0</span>);<span class="comment">//AF_INET:IPV4;SOCK_DGRAM:UDP</span></div><div class="line">    <span class="keyword">if</span> (<span class="number">-1</span> == sock_fd)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"socket error:%s\n\a"</span>, strerror(errno));</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/* set sockaddr_in parameter*/</span></div><div class="line">    <span class="built_in">memset</span>(&amp;server_addr, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> sockaddr_in));<span class="comment">//clear</span></div><div class="line">    server_addr.sin_family = AF_INET;</div><div class="line">    server_addr.sin_port = htons(PORT_NUMBER);</div><div class="line">    ret = inet_aton(argv[<span class="number">1</span>], &amp;server_addr.sin_addr);</div><div class="line">    <span class="keyword">if</span>(<span class="number">0</span> == ret)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"server_ip error.\n"</span>);</div><div class="line">        close(sock_fd);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (fgets(send_buf, <span class="number">999</span>, <span class="built_in">stdin</span>))</div><div class="line">        &#123;</div><div class="line">            <span class="comment">/* sendto */</span></div><div class="line">            addr_len = <span class="keyword">sizeof</span>(<span class="keyword">struct</span> sockaddr);</div><div class="line">            send_len = sendto(sock_fd, send_buf, <span class="built_in">strlen</span>(send_buf), <span class="number">0</span>, \</div><div class="line">(<span class="keyword">const</span> <span class="keyword">struct</span> sockaddr *)&amp;server_addr, addr_len);</div><div class="line">            <span class="keyword">if</span> (send_len &lt;= <span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"send error:%s\n\a"</span>, strerror(errno));</div><div class="line">                close(sock_fd);</div><div class="line">                <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/* close */</span></div><div class="line">    close(sock_fd);</div><div class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="4-4-测试结果"><a href="#4-4-测试结果" class="headerlink" title="4.4 测试结果"></a>4.4 测试结果</h2><p>和前面TCP测试方式一样，先在Ubuntu主机上交叉编译服务器端代码，再在Ubuntu主机上编译客户端代码。<br>在开发板上运行服务器端代码，在Ubuntu主机先启动tmux分屏，再分别运行客户端代码。</p><ul><li>服务器端<br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/171230/5.png" alt=""></li><li>客户机端<br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/171230/6.png" alt=""></li></ul><p>参考资料：<br>博客：<a href="http://www.cnblogs.com/jfyl1573/p/6476607.html" target="_blank" rel="external">很全的linux网络编程技巧</a><br>王粉花. 2016. 嵌入式Linux编程与实践教程.北京: 科学出版社.<br>韦东山第三期项目:第1课第6.1节_一小时学会网络编程_两个简单例子_tcp_udp</p><hr><p><div align="center"><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本文采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href="http://hceng.cn/" target="_blank" rel="external">hceng’s blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要记录TCP/UDP网络编程的基础知识，采用TCP/UDP实现宿主机和目标机之间的网络通信。&lt;br&gt;
    
    </summary>
    
    
      <category term="Linux环境编程" scheme="http://yoursite.com/tags/Linux%E7%8E%AF%E5%A2%83%E7%BC%96%E7%A8%8B/"/>
    
      <category term="TCP/UDP" scheme="http://yoursite.com/tags/TCP-UDP/"/>
    
  </entry>
  
  <entry>
    <title>Exynos4412——触摸屏驱动</title>
    <link href="http://yoursite.com/2017/12/26/Exynos4412%E2%80%94%E2%80%94%E8%A7%A6%E6%91%B8%E5%B1%8F%E9%A9%B1%E5%8A%A8/"/>
    <id>http://yoursite.com/2017/12/26/Exynos4412——触摸屏驱动/</id>
    <published>2017-12-26T01:34:47.000Z</published>
    <updated>2018-01-23T08:04:15.945Z</updated>
    
    <content type="html"><![CDATA[<p>移植Exynos4412的I2C接口触摸屏驱动。<br><a id="more"></a><br>这应该是Exynos4412 LCD部分的最后一部分了。<br>为了去探索LCD驱动，前面做了一系列的准备工作，最后终于完成了LCD驱动，现在只剩下触摸屏这个最后的“尾巴”。</p><h1 id="1-工作原理"><a href="#1-工作原理" class="headerlink" title="1.工作原理"></a>1.工作原理</h1><p>前面<a href="https://hceng.cn/2017/11/22/Exynos4412%E2%80%94%E2%80%94LCD%E4%B9%8Bbackligth/#more" target="_blank" rel="external">LCD之backligth</a>部分说了，友善之臂这个屏，为了改善大尺寸四线电阻触摸屏的性能，外加了一个低成本的MCU去控制专业的触控芯片，将滤波后的稳定数据通过GPIO传回到ARM上。<br>但我的板子LCD是电容屏，查阅相关资料后得知，是通过一个FT5406触摸屏芯片实现的电容触摸功能。</p><p>根据<a href="https://www.newhavendisplay.com/app_notes/FT5x06.pdf" target="_blank" rel="external">FT5x06.pdf</a>手册可得知其工作的框架：<br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/171226/1.png" alt=""><br>当触摸屏上发生触摸操作时，通过TXn(Transmit output pin)和RXn(Receiver input pins)传输给FT5406，FT5406经过处理后，将坐标信息通过Serial Interface(I2C or SPI)发给Host(开发板)。</p><p>查阅FT5x06.pdf，可以看到FT5x06对外有如下接口：<br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/171226/2.png" alt=""></p><blockquote><p>I2C/SPI：与主机进行数据交换的接口<br>INT：中断信号接口，通知主处理器触摸数据准备好读取<br>WAKE：主机将FT5x06从休眠模式切换到主动模式的中断信号<br>RST：外部低电平信号复位芯片</p></blockquote><p>因此，开发板至少的有I2C/SPI和INT与FT5x06相连。</p><h1 id="2-原理图"><a href="#2-原理图" class="headerlink" title="2.原理图"></a>2.原理图</h1><ul><li><p>Tiny4412-1412-Schematic.pdf：<br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/171226/3.png?v=1" alt=""><br>I2C使用I2C1，INT使用GPX1_6引脚。</p></li><li><p>Tiny4412SDK-1506-Schematic.pdf：<br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/171226/4.png" alt=""><br>在底板上经过一次电平转换引出到LCD1接口上。</p></li><li><p>LCD-S702-1509.pdf：<br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/171226/6.png" alt=""><br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/171226/5.png" alt=""><br>LCD上并没有FT5x06的相关信息，只提供了一个CON5接口。<br>友善之臂封装好了LCD和触摸屏，对外只提供I2C接口。</p></li></ul><p>对于驱动来说，触摸屏就是一个带中断的信号的I2C设备。</p><h1 id="3-设备树文件"><a href="#3-设备树文件" class="headerlink" title="3. 设备树文件"></a>3. 设备树文件</h1><p>ft5406 作为 i2c_1 的子节点。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&amp;i2c_1 &#123;</div><div class="line">    samsung,i2c-sda-delay = &lt;100&gt;;</div><div class="line">    samsung,i2c-max-bus-freq = &lt;400000&gt;;</div><div class="line">    status = &quot;okay&quot;;</div><div class="line">    polytouch: edt-ft5x06@38 &#123; </div><div class="line">        compatible = &quot;edt,edt-ft5406&quot;, &quot;edt,edt-ft5x06&quot;;</div><div class="line">reg = &lt;0x38&gt;;</div><div class="line">interrupt-parent = &lt;&amp;gpx1&gt;;</div><div class="line">interrupts = &lt;6 IRQ_TYPE_EDGE_FALLING&gt;; </div><div class="line">        touchscreen-size-x = &lt;800&gt;;</div><div class="line">        touchscreen-size-y = &lt;480&gt;;</div><div class="line">    &#125;; </div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><p>内核已经有了ft5x06驱动，所有对应的也会有设备树的描述文件：<br><code>linux-4.13.9/Documentation/devicetree/bindings/input/touchscreen/edt-ft5x06.txt</code><br><code>linux-4.13.9/Documentation/devicetree/bindings/input/touchscreen/touchscreen.txt</code><br>详细介绍了设备树的必要参数和非必要参数。</p><h1 id="4-驱动程序"><a href="#4-驱动程序" class="headerlink" title="4. 驱动程序"></a>4. 驱动程序</h1><p>内核中ft5x06驱动所在路径：<br><code>linux-4.13.9/drivers/input/touchscreen/edt-ft5x06.c</code></p><p>这块的内容，暂时不想分析，涉及I2C子系统和输入子系统，回头再慢慢分析。</p><h1 id="5-测试程序"><a href="#5-测试程序" class="headerlink" title="5. 测试程序"></a>5. 测试程序</h1><figure class="highlight c"><figcaption><span>[app.c]</span><a href="https://github.com/hceng/learn/blob/master/tiny4412/03_touchscreen/app.c" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/input.h&gt;</span>  </span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></div><div class="line">&#123;  </div><div class="line"><span class="keyword">int</span> keys_fd;      </div><div class="line"><span class="keyword">char</span> ret[<span class="number">2</span>];   </div><div class="line"><span class="keyword">struct</span> input_event t;  </div><div class="line"></div><div class="line">keys_fd = open(<span class="string">"/dev/input/event0"</span>, O_RDONLY);    <span class="comment">//打开TP设备  </span></div><div class="line"><span class="keyword">if</span>(keys_fd&lt;=<span class="number">0</span>)&#123;  </div><div class="line"><span class="built_in">printf</span>(<span class="string">"open /dev/input/event0 device error!\n"</span>);  </div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;  </div><div class="line"></div><div class="line"><span class="keyword">while</span>(<span class="number">1</span>)  </div><div class="line">&#123;     </div><div class="line"><span class="keyword">if</span>(read(keys_fd, &amp;t, <span class="keyword">sizeof</span>(t))==<span class="keyword">sizeof</span>(t)) </div><div class="line">        &#123;  </div><div class="line"><span class="keyword">if</span> (t.type == EV_KEY)</div><div class="line">            &#123;  </div><div class="line"><span class="built_in">printf</span>(<span class="string">"  type: EV_KEY, event = %s, value = %d \r\n"</span>,   </div><div class="line">t.code == BTN_TOUCH ? <span class="string">"BTN_TOUCH"</span> : <span class="string">"Unkown"</span>, t.value);   </div><div class="line">&#125;  </div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span>(t.type == EV_ABS)</div><div class="line">            &#123;  </div><div class="line"><span class="built_in">printf</span>(<span class="string">"  type: EV_ABS, event = %s, value = %d \r\n"</span>,   </div><div class="line">t.code == ABS_X ? <span class="string">"ABS_X"</span> :   </div><div class="line">t.code == ABS_Y ? <span class="string">"ABS_Y"</span> :   </div><div class="line">t.code == ABS_PRESSURE ? <span class="string">"ABS_PRESSURE"</span> :<span class="string">"Unkown"</span>, t.value); </div><div class="line">&#125;  </div><div class="line">&#125;  </div><div class="line">&#125;     </div><div class="line">close(keys_fd);  </div><div class="line"></div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125; </div></pre></td></tr></table></figure><p>参考博客：<a href="http://blog.csdn.net/sir_zeng/article/details/8561829" target="_blank" rel="external">Linux和android下测试键盘和触摸屏</a></p><hr><p><div align="center"><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本文采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href="http://hceng.cn/" target="_blank" rel="external">hceng’s blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;移植Exynos4412的I2C接口触摸屏驱动。&lt;br&gt;
    
    </summary>
    
    
      <category term="Linux驱动" scheme="http://yoursite.com/tags/Linux%E9%A9%B1%E5%8A%A8/"/>
    
      <category term="Exynos4412" scheme="http://yoursite.com/tags/Exynos4412/"/>
    
      <category term="触摸屏" scheme="http://yoursite.com/tags/%E8%A7%A6%E6%91%B8%E5%B1%8F/"/>
    
  </entry>
  
  <entry>
    <title>Exynos4412——LCD驱动</title>
    <link href="http://yoursite.com/2017/12/22/Exynos4412%E2%80%94%E2%80%94LCD%E9%A9%B1%E5%8A%A8/"/>
    <id>http://yoursite.com/2017/12/22/Exynos4412——LCD驱动/</id>
    <published>2017-12-22T12:15:29.000Z</published>
    <updated>2018-02-23T02:48:56.381Z</updated>
    
    <content type="html"><![CDATA[<p>Exynos4412的LCD驱动。<br><a id="more"></a><br>终于迎来了LCD驱动，本该10月初就搞定的事，一直拖到了12月份。<br>不过，晚来总比不来好，完成这个<strong>心结</strong>，才好进入下一个阶段。</p><h1 id="1-基础知识"><a href="#1-基础知识" class="headerlink" title="1. 基础知识"></a>1. 基础知识</h1><p>开发板的液晶屏型号S702，7寸电容型TFT触摸屏，分辨率为800X480。</p><p>先记录下一些图像显示的基本知识。</p><h2 id="1-1-颜色的量化"><a href="#1-1-颜色的量化" class="headerlink" title="1.1 颜色的量化"></a>1.1 颜色的量化</h2><p>显示器的颜色一般采用RGB标准，通过对红(RED)、绿(GREEN)，蓝(BLUE)三个颜色相互叠加得到各种不同的颜色。<br>1）通过对颜色的编码来对颜色进行量化（即转换成数字量，RGB是一种编码方式）；<br>2）每种颜色根据RGB格式不同，每种颜色的量化位不相同；<br>3) 常见的RGB格式有RGB565/RGB888，即:<br>　　RGB565: red :5  green : 6 blue:5（16BPP）<br>　　RGB888: red :8  green : 8 blue:8（24BPP）<br>4）有的还会有个alpha参数，用于实现图形渐变效果，以及半透明效果，0xFFF=全透明，0x0=不透明；</p><h2 id="1-2-图像的构成"><a href="#1-2-图像的构成" class="headerlink" title="1.2 图像的构成"></a>1.2 图像的构成</h2><p><strong>像素：</strong><br>显示的最小单位；<br>用若干位数据来表示一个像素，比如使用R8、G8、B8共24位来表示一个像素，这个也称为像素深度，单位为BPP 常见的有16BPP/24BPP；<br>像素越高，则一个像素点所显示的颜色就越多，所显示的颜色更广；</p><p><strong>帧：</strong><br>一幅图像被称为一帧，<br>每帧里面由行列排列的像素组成；</p><p><strong>调色板：</strong><br>画油画的时候，通常先在调色板里配好想要的颜色，再用画笔沾到画布上作画。<br>LCD控制器里也借用了这个概念，从FrameBuffer获得数据，这个数据作为索引从调色板获得对应数据，再发给电子枪显示出来。<br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/171201/0_0.jpg" alt=""><br>如图，假如是16BPP的数据，LCD控制器从FB取出16bit数据，显示到LCD上。<br>当如果想节约内存，对颜色要求也没那么高，就可以采用调色板的方式，调色板里存放了256个16bit的数据，FB只存放每个像素的索引，根据索引去调色板找到对应的数据传给LCD控制器，再通过电子枪显示出来。         </p><h2 id="1-3-LCD显示原理"><a href="#1-3-LCD显示原理" class="headerlink" title="1.3 LCD显示原理"></a>1.3 LCD显示原理</h2><p>常见的TFT显示屏幕都会有如下控制信号：<br>1)使用HSYNC信号来控制一行的显示；<br>2)使用VSYNC信号来控制一帧(列)的显示；<br>3)使用VCLK信号来控制一个像素的显示；<br>4)使用VDEN信号来控制数据的输出；<br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/171201/0.jpg" alt=""><br>想象每个像素点是由电子枪发射出来的，电子枪依次扫描整个LCD界面，就显示了一副完整的图像。<br>当发出一个HSYNC信号后，电子枪就会从行末花费HBP时长移动到行首；然后在VCLK时钟下，在图中阴影区域显示像素；等到了行末后，再等待HFP时长待HSYNC信号到来，再移动到行首，如此往复。因此，HBP和HFP分别决定了左边和右边的黑框。<br>同理，当发出一个VSYNC信号后，电子枪就会从列末花费VBP时长移动到列首；然后在VCLK时钟下，在图中阴影区域显示像素；等到了列末后，再等待VFP时长待VSYNC信号到来，再移动到列首，如此往复。因此，VBP和VFP分别决定了上边和下边的黑框。<br>真实显示区域为图中阴影部分。</p><h2 id="1-4-LCD硬件控制思路"><a href="#1-4-LCD硬件控制思路" class="headerlink" title="1.4 LCD硬件控制思路"></a>1.4 LCD硬件控制思路</h2><ol><li>查看LCD芯片手册，查看相关的时间参数、分辨率、引脚极性等；</li><li>根据以上信息设置LCD控制器寄存器，让其发出正确信号；</li><li>在内存里面分配一个FrameBuffer，在里面用若干位表示一个像素，再把首地址告诉LCD控制器；</li></ol><p>之后LCD控制器就能周而复始取出FrameBuffer里面的像素数据，配合其它控制信号，发送给电子枪，电子枪再让在LCD上显示出来。以后我们想显示图像，只需要编写程序向FrameBuffer填入相应数据即可，硬件会自动的完成显示操作。</p><h2 id="1-5-LCD驱动框架"><a href="#1-5-LCD驱动框架" class="headerlink" title="1.5 LCD驱动框架"></a>1.5 LCD驱动框架</h2><p><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/171201/1221_1.png" alt=""><br>LCD框架的<code>fbmem.c</code>已经帮我们完成了日常驱动程序的工作，如：注册字符设备、分配设备号、创建类等。<br>也有了操作函数<code>fb_fops</code>，但它只是一个框架，在具体执行的时候需要知道硬件具体的一些参数，比如分辨率、数据基地址等信息。<br>因此，我们要利用这一框架，就得构造一个<code>fb_info</code>结构体，完成硬件初始化，设置相关参数等操作，再使用<code>register_framebuffer()</code>将<code>fb_info</code>向上注册。<br>这样，<code>fbmem.c</code>就可以从<code>registered_fb[]</code>这个数组获得<code>fb_info</code>参数，进行相关的硬件操作。<br>比如：应用层app想<code>read()</code>，就会调用<code>fbmem.c</code>的<code>fb_read()</code>，在<code>fb_read</code>里面会先尝试使用<code>xxfb.c</code>提供的<code>read()</code>操作函数，如果没有，再根据<code>fb_info</code><br>信息得到数据基地址，将基地址开始的数据，返回给应用层，实现读操作。</p><h1 id="2-原理图"><a href="#2-原理图" class="headerlink" title="2. 原理图"></a>2. 原理图</h1><ul><li>Tiny4412SDK-1506-Schematic.pdf：<br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/171122/1.png" alt=""></li></ul><p>从上到下，接口依次是：</p><table><thead><tr><th style="text-align:center">接口</th><th style="text-align:center">引脚</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">1. 图像数据信号接口</td><td style="text-align:center">B[0:7]</td><td style="text-align:center">蓝色数据信号线</td></tr><tr><td style="text-align:center">-</td><td style="text-align:center">G[0:7]</td><td style="text-align:center">绿色数据信号线</td></tr><tr><td style="text-align:center">-</td><td style="text-align:center">R[0:7]</td><td style="text-align:center">红色数据信号线</td></tr><tr><td style="text-align:center">2. “一线触摸”接口</td><td style="text-align:center">XEINT10_OUT</td><td style="text-align:center">用于 触摸/背光 控制</td></tr><tr><td style="text-align:center">3. 时序信号控制接口</td><td style="text-align:center">DEN</td><td style="text-align:center">数据使能信号</td></tr><tr><td style="text-align:center">-</td><td style="text-align:center">VSYNC</td><td style="text-align:center">垂直同步信号</td></tr><tr><td style="text-align:center">-</td><td style="text-align:center">HSYNC</td><td style="text-align:center">水平同步信号</td></tr><tr><td style="text-align:center">-</td><td style="text-align:center">VLCK</td><td style="text-align:center">LCD时钟信号</td></tr><tr><td style="text-align:center">4. I2C接口</td><td style="text-align:center">i2cSCL1_OUT/i2cSDA1_OUT</td><td style="text-align:center">用于实现I2C接口的触摸屏驱动</td></tr></tbody></table><ul><li>Tiny4412-1412-Schematic.pdf：<br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/171201/1.png" alt=""><br>LCD数据和控制部分使用了GPF0_0-GPF0_7、GPF1_0-GPF1_7、GPF2_0-GPF2_7、GPF3_0-GPF3_5，共3*8+4=28个引脚。</li></ul><h1 id="3-设备树文件"><a href="#3-设备树文件" class="headerlink" title="3. 设备树文件"></a>3. 设备树文件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">lcd_s702@11C00000 &#123;</div><div class="line">    compatible = &quot;tiny4412, lcd_s702&quot;;</div><div class="line">    reg = &lt;0x11C00000  0x20c0 0x10010210 0x08 0x10023c80 0x04 0x1003c000 0x1000&gt;;</div><div class="line">    pinctrl-names = &quot;default&quot;;</div><div class="line">    pinctrl-0 = &lt;&amp;lcd_s702&gt;;</div><div class="line">    clocks = &lt;&amp;clock CLK_FIMD0 &amp;clock CLK_ACLK160&gt;;</div><div class="line">    clock-names = &quot;fimd0&quot;,&quot;aclk160&quot;;</div><div class="line">&#125;;</div><div class="line">&amp;pinctrl_0 &#123;</div><div class="line">    lcd_s702:lcd &#123;</div><div class="line">        samsung,pins = &quot;gpf0-0&quot;, &quot;gpf0-1&quot;, &quot;gpf0-2&quot;, &quot;gpf0-3&quot;, &quot;gpf0-4&quot;,</div><div class="line">        &quot;gpf0-5&quot;, &quot;gpf0-6&quot;,&quot;gpf0-7&quot;, &quot;gpf1-0&quot;, &quot;gpf1-1&quot;,</div><div class="line">        &quot;gpf1-2&quot;, &quot;gpf1-3&quot;, &quot;gpf1-4&quot;, &quot;gpf1-5&quot;, &quot;gpf1-6&quot;,</div><div class="line">        &quot;gpf1-7&quot;, &quot;gpf2-0&quot;, &quot;gpf2-1&quot;, &quot;gpf2-2&quot;, &quot;gpf2-3&quot;, </div><div class="line">        &quot;gpf2-4&quot;, &quot;gpf2-5&quot;, &quot;gpf2-6&quot;,&quot;gpf2-7&quot;, &quot;gpf3-0&quot;,</div><div class="line">        &quot;gpf3-1&quot;, &quot;gpf3-2&quot;, &quot;gpf3-3&quot;;</div><div class="line">        samsung,pin-function = &lt;2&gt;;</div><div class="line">        samsung,pin-pud = &lt;0&gt;;</div><div class="line">        samsung,pin-drv = &lt;0&gt;;</div><div class="line">    &#125;;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>其中，<br>0x11C00000是LCD寄存器基地址；<br>0x10010210是LCD时钟寄存器基地址；<br>0x10023c80是LCD时钟寄存器基地址；<br>0x10023c80是LCD时钟寄存器基地址；</p><p>Samsung GPIO and Pin Mux/Config controller摘录：</p><blockquote><p> “samsung,pins” property of the child node. The following pin configuration properties are supported.</p><ul><li>samsung,pin-val: Initial value of pin output buffer.</li><li>samsung,pin-pud: Pull up/down configuration.</li><li>samsung,pin-drv: Drive strength configuration.</li><li>samsung,pin-pud-pdn: Pull up/down configuration in power down mode.</li><li>samsung,pin-drv-pdn: Drive strength configuration in power down mode.</li></ul></blockquote><h1 id="4-驱动分析"><a href="#4-驱动分析" class="headerlink" title="4. 驱动分析"></a>4. 驱动分析</h1><p>LCD驱动也属于字符驱动，框架和其它字符驱动差不多，难点是LCD的众多硬件配置。</p><p>和以往的框架一样，加载驱动后调用<code>lcd_init()</code>函数，然后<code>lcd_init()</code>调用<code>platform_driver_register(&amp;lcd_driver)</code>注册平台设备，<code>lcd_driver</code>结构体里面的<code>.compatible</code>与设备树里面的<code>compatible</code>进行字符串比较，匹配成功则调用核心的<code>lcd_probe()</code>函数。<br>下面对<code>lcd_probe()</code>函数里面的内容进行详细介绍。</p><h2 id="4-1-lcd-probe"><a href="#4-1-lcd-probe" class="headerlink" title="4.1 lcd_probe"></a>4.1 lcd_probe</h2><p><code>lcd_probe()</code>需要的配置如下：</p><blockquote><p>1.分配一个fb_info<br>2.设置fb_info<br>　2.1 设置 fix 固定的参数<br>　2.2 设置 var 可变的参数<br>　2.3 设置操作函数<br>　2.4 其他的设置<br>3.硬件相关的操作<br>　3.1 配置GPIO用于LCD<br>　3.2 根据LCD手册设置LCD控制器, 比如VCLK的频率等<br>　3.3 分配显存(framebuffer), 并把地址告诉LCD控制器<br>4.注册fb_info</p></blockquote><hr><h3 id="4-1-1-分配一个fb-info"><a href="#4-1-1-分配一个fb-info" class="headerlink" title="4.1.1 分配一个fb_info"></a>4.1.1 分配一个fb_info</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">tiny4412_lcd = framebuffer_alloc(<span class="number">0</span>, <span class="literal">NULL</span>); <span class="comment">//不要额外空间设置私有数据</span></div><div class="line"><span class="keyword">if</span>(!tiny4412_lcd) &#123;</div><div class="line">    <span class="keyword">return</span>  -ENOMEM;</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h3 id="4-1-2-设置fb-info"><a href="#4-1-2-设置fb-info" class="headerlink" title="4.1.2 设置fb_info"></a>4.1.2 设置fb_info</h3><h4 id="4-1-2-1-设置-fix-固定的参数"><a href="#4-1-2-1-设置-fix-固定的参数" class="headerlink" title="4.1.2.1 设置 fix 固定的参数"></a>4.1.2.1 设置 fix 固定的参数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">strcpy</span>(tiny4412_lcd-&gt;fix.id, <span class="string">"s702"</span>);                              <span class="comment">//设置fix名称</span></div><div class="line">tiny4412_lcd-&gt;fix.smem_len = LCD_LENTH*LCD_WIDTH*BITS_PER_PIXEL/<span class="number">8</span>; <span class="comment">//显存的长度=分辨率*每象素字节数</span></div><div class="line">tiny4412_lcd-&gt;fix.type     = FB_TYPE_PACKED_PIXELS;                <span class="comment">//类型:填充式像素(常用在TFT屏幕)</span></div><div class="line">tiny4412_lcd-&gt;fix.visual   = FB_VISUAL_TRUECOLOR;                  <span class="comment">//TFT 真彩色</span></div><div class="line">tiny4412_lcd-&gt;fix.line_length = LCD_LENTH*BITS_PER_PIXEL/<span class="number">8</span>;        <span class="comment">//每行的长度，以字节为单位</span></div></pre></td></tr></table></figure><h4 id="4-1-2-2-设置-var-可变的参数"><a href="#4-1-2-2-设置-var-可变的参数" class="headerlink" title="4.1.2.2 设置 var 可变的参数"></a>4.1.2.2 设置 var 可变的参数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">tiny4412_lcd-&gt;var.xres           = LCD_LENTH;                      <span class="comment">//x方向分辨率</span></div><div class="line">tiny4412_lcd-&gt;var.yres           = LCD_WIDTH;                      <span class="comment">//y方向分辨率</span></div><div class="line">tiny4412_lcd-&gt;var.xres_virtual   = LCD_LENTH;                      <span class="comment">//x方向虚拟分辨率</span></div><div class="line">tiny4412_lcd-&gt;var.yres_virtual   = LCD_WIDTH;                      <span class="comment">//y方向虚拟分辨率</span></div><div class="line">tiny4412_lcd-&gt;var.xoffset        = <span class="number">0</span>;                              <span class="comment">//x方向真实值和虚拟值得差值</span></div><div class="line">tiny4412_lcd-&gt;var.yoffset        = <span class="number">0</span>;                              <span class="comment">//y方向真实值和虚拟值得差值</span></div><div class="line">tiny4412_lcd-&gt;var.bits_per_pixel = BITS_PER_PIXEL;                 <span class="comment">//每个像素占多少位</span></div><div class="line"><span class="comment">/* RGB:888 */</span></div><div class="line">tiny4412_lcd-&gt;var.red.length     = <span class="number">8</span>;</div><div class="line">tiny4412_lcd-&gt;var.red.offset     = <span class="number">16</span>;   <span class="comment">//红</span></div><div class="line">tiny4412_lcd-&gt;var.green.length   = <span class="number">8</span>;</div><div class="line">tiny4412_lcd-&gt;var.green.offset   = <span class="number">8</span>;    <span class="comment">//绿</span></div><div class="line">tiny4412_lcd-&gt;var.blue.length    = <span class="number">8</span>;</div><div class="line">tiny4412_lcd-&gt;var.blue.offset    = <span class="number">0</span>;    <span class="comment">//蓝</span></div><div class="line">tiny4412_lcd-&gt;var.activate       = FB_ACTIVATE_NOW;      <span class="comment">//使设置的值立即生效  </span></div></pre></td></tr></table></figure><h4 id="4-1-2-3-设置操作函数"><a href="#4-1-2-3-设置操作函数" class="headerlink" title="4.1.2.3 设置操作函数"></a>4.1.2.3 设置操作函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tiny4412_lcd-&gt;fbops              = &amp;tiny4412_lcdfb_ops;  <span class="comment">//绑定操作函数</span></div></pre></td></tr></table></figure><p>这里的绑定的操作函数有：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> fb_ops tiny4412_lcdfb_ops =</div><div class="line">&#123;</div><div class="line">    .owner              = THIS_MODULE,</div><div class="line">    .fb_setcolreg       = cfb_setcolreg, <span class="comment">//设置RGB颜色，实现伪颜色表 </span></div><div class="line">    .fb_fillrect        = cfb_fillrect,  <span class="comment">//矩形填充</span></div><div class="line">    .fb_copyarea        = cfb_copyarea,  <span class="comment">//数据复制</span></div><div class="line">    .fb_imageblit       = cfb_imageblit, <span class="comment">//图形填充</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure><br>除了<code>cfb_setcolreg()</code>，其它三个函数内核都提供了具体的实现。</p><h4 id="4-1-2-4-其他的设置"><a href="#4-1-2-4-其他的设置" class="headerlink" title="4.1.2.4 其他的设置"></a>4.1.2.4 其他的设置</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">tiny4412_lcd-&gt;pseudo_palette     = pseudo_palette;       <span class="comment">//存放调色板所调颜色的数组</span></div><div class="line">tiny4412_lcd-&gt;screen_size        = LCD_LENTH * LCD_WIDTH * BITS_PER_PIXEL / <span class="number">8</span>;   <span class="comment">//显存大小</span></div></pre></td></tr></table></figure><hr><h3 id="4-1-3-硬件相关的操作"><a href="#4-1-3-硬件相关的操作" class="headerlink" title="4.1.3 硬件相关的操作"></a>4.1.3 硬件相关的操作</h3><h4 id="4-1-3-1-配置GPIO用于LCD"><a href="#4-1-3-1-配置GPIO用于LCD" class="headerlink" title="4.1.3.1 配置GPIO用于LCD"></a>4.1.3.1 配置GPIO用于LCD</h4><p>在设备树中，将 GPF0_0-GPF0_7、GPF1_0-GPF1_7、GPF2_0-GPF2_7、GPF3_0-GPF3_3配置为了复用第二功能(LCD)，禁止内部上拉，驱动强度配置设置为0，因此这里就不需要任何设置了。</p><h4 id="4-1-3-2-根据LCD手册设置LCD控制器-比如VCLK的频率等"><a href="#4-1-3-2-根据LCD手册设置LCD控制器-比如VCLK的频率等" class="headerlink" title="4.1.3.2 根据LCD手册设置LCD控制器, 比如VCLK的频率等"></a>4.1.3.2 根据LCD手册设置LCD控制器, 比如VCLK的频率等</h4><p><strong>a. 首先是获取设备树中的寄存器资源，并进行映射：</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line">    res0 = platform_get_resource(pdev, IORESOURCE_MEM, <span class="number">0</span>);</div><div class="line">   <span class="keyword">if</span> (res0 == <span class="literal">NULL</span>)</div><div class="line">   &#123;</div><div class="line">       printk(<span class="string">"platform_get_resource error.\n"</span>);</div><div class="line">       <span class="keyword">return</span> -EINVAL;</div><div class="line">   &#125;</div><div class="line">   lcd_regs_base = devm_ioremap_resource(&amp;pdev-&gt;dev, res0);</div><div class="line">   <span class="keyword">if</span> (lcd_regs_base == <span class="literal">NULL</span>)</div><div class="line">   &#123;</div><div class="line">       printk(<span class="string">"devm_ioremap_resource error.\n"</span>);</div><div class="line">       <span class="keyword">return</span> -EINVAL;</div><div class="line">   &#125;</div><div class="line">   </div><div class="line">   res1 = platform_get_resource(pdev, IORESOURCE_MEM, <span class="number">1</span>);</div><div class="line">   <span class="keyword">if</span> (res1 == <span class="literal">NULL</span>)</div><div class="line">   &#123;</div><div class="line">       printk(<span class="string">"platform_get_resource error.\n"</span>);</div><div class="line">       <span class="keyword">return</span> -EINVAL;</div><div class="line">   &#125;</div><div class="line">   lcdblk_regs_base = devm_ioremap_resource(&amp;pdev-&gt;dev, res1);</div><div class="line">   <span class="keyword">if</span> (lcdblk_regs_base == <span class="literal">NULL</span>)</div><div class="line">   &#123;</div><div class="line">       printk(<span class="string">"devm_ioremap_resource error.\n"</span>);</div><div class="line">       <span class="keyword">return</span> -EINVAL;</div><div class="line">   &#125;</div><div class="line">   </div><div class="line">   res2 = platform_get_resource(pdev, IORESOURCE_MEM, <span class="number">2</span>);</div><div class="line">   <span class="keyword">if</span> (res2 == <span class="literal">NULL</span>)</div><div class="line">   &#123;</div><div class="line">       printk(<span class="string">"platform_get_resource error.\n"</span>);</div><div class="line">       <span class="keyword">return</span> -EINVAL;</div><div class="line">   &#125;</div><div class="line">   <span class="comment">//bug：</span></div><div class="line">   <span class="comment">/*</span></div><div class="line">   devm_ioremap()和devm_ioremap_resource()区别：</div><div class="line">   devm_ioremap()可以重复map相同的地址空间，devm_ioremap_resource()不可以。</div><div class="line">   一般SoC的中，各个硬件模块各自的memory region都有严格的划分(比如说USB host的地址空间绝对不会和flash host冲突)， </div><div class="line">   所以一般的driver使用devm_ioremap()和devm_ioremap_resource()都行。 </div><div class="line">   但这里，应该系统已经映射过一次了，所以使用devm_ioremap_resource()会报错。</div><div class="line">   */</div><div class="line">   <span class="comment">//lcd0_configuration = devm_ioremap_resource(&amp;pdev-&gt;dev, res2);  </span></div><div class="line">   lcd0_configuration = devm_ioremap(&amp;pdev-&gt;dev, res2-&gt;start, resource_size(res2));  </div><div class="line">   <span class="keyword">if</span> (lcd0_configuration == <span class="literal">NULL</span>)</div><div class="line">   &#123;</div><div class="line">       printk(<span class="string">"devm_ioremap_resource error.\n"</span>);</div><div class="line">       <span class="keyword">return</span> -EINVAL;</div><div class="line">   &#125;</div><div class="line">   *(<span class="keyword">unsigned</span> <span class="keyword">long</span> *)lcd0_configuration = <span class="number">7</span>; <span class="comment">//Reset Value = 0x00000007</span></div><div class="line">       </div><div class="line">   res3 = platform_get_resource(pdev, IORESOURCE_MEM, <span class="number">3</span>);</div><div class="line">   <span class="keyword">if</span> (res3 == <span class="literal">NULL</span>)</div><div class="line">   &#123;</div><div class="line">       printk(<span class="string">"platform_get_resource error.\n"</span>);</div><div class="line">       <span class="keyword">return</span> -EINVAL;</div><div class="line">   &#125;</div><div class="line">   <span class="comment">//clk_regs_base = devm_ioremap_resource(&amp;pdev-&gt;dev, res3);</span></div><div class="line">clk_regs_base = devm_ioremap(&amp;pdev-&gt;dev, res3-&gt;start, resource_size(res3));  </div><div class="line">   <span class="keyword">if</span> (clk_regs_base == <span class="literal">NULL</span>)</div><div class="line">   &#123;</div><div class="line">       printk(<span class="string">"devm_ioremap_resource error.\n"</span>);</div><div class="line">       <span class="keyword">return</span> -EINVAL;</div><div class="line">   &#125;</div></pre></td></tr></table></figure><br>这里后期测试出一个bug:</p><blockquote><p> devm_ioremap()和devm_ioremap_resource()区别：<br>devm_ioremap()可以重复map相同的地址空间，devm_ioremap_resource()不可以。<br>一般SoC的中，各个硬件模块各自的memory region都有严格的划分(比如说USB host的地址空间绝对不会和flash host冲突)，<br>所以一般的driver使用devm_ioremap()和devm_ioremap_resource()都行。<br>但这里，应该系统已经映射过一次了，所以使用devm_ioremap_resource()会报错。</p></blockquote><p><strong>b. 设置时钟</strong><br>时钟部分还是有点乱，没有从头开始去分析，当这里的目的是生成VCLK，因此配置出VCLK即可：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//时钟源选择\使能时钟</span></div><div class="line"><span class="comment">//Selects clock source for LCD_BLK</span></div><div class="line"><span class="comment">//FIMD0_SEL:bit[3:0]=0110=SCLKMPLL_USER_T=800M</span></div><div class="line">temp = readl(clk_regs_base + CLK_SRC_LCD0);</div><div class="line">temp &amp;= ~(<span class="number">0x0F</span>&lt;&lt;<span class="number">0</span>);</div><div class="line">temp |= (<span class="number">0x3</span>&lt;&lt;<span class="number">1</span>);</div><div class="line">writel(temp, clk_regs_base + CLK_SRC_LCD0);</div><div class="line"></div><div class="line"><span class="comment">//Clock source mask for LCD_BLK    </span></div><div class="line"><span class="comment">//FIMD0_MASK:Mask output clock of MUXFIMD0 (1=Unmask)</span></div><div class="line">temp = readl(clk_regs_base + CLK_SRC_MASK_LCD);</div><div class="line">temp |= (<span class="number">0x01</span>&lt;&lt;<span class="number">0</span>);</div><div class="line">writel(temp, clk_regs_base + CLK_SRC_MASK_LCD);</div><div class="line"></div><div class="line"><span class="comment">//Clock source mask for LCD_BLK    </span></div><div class="line"><span class="comment">//SCLK_FIMD0 = MOUTFIMD0/(FIMD0_RATIO + 1),分频比 1/1</span></div><div class="line">temp = readl(clk_regs_base + CLK_DIV_LCD);</div><div class="line">temp &amp;= ~(<span class="number">0x0F</span>&lt;&lt;<span class="number">0</span>);</div><div class="line">writel(temp, clk_regs_base + CLK_DIV_LCD);</div><div class="line"></div><div class="line"><span class="comment">//Controls IP clock gating for LCD_BLK   </span></div><div class="line"><span class="comment">//CLK_FIMD0:Gating all clocks for FIMD0 (1=Pass)</span></div><div class="line">temp = readl(clk_regs_base + CLK_GATE_IP_LCD);</div><div class="line">temp |= (<span class="number">0x01</span>&lt;&lt;<span class="number">0</span>);</div><div class="line">writel(temp, clk_regs_base + CLK_GATE_IP_LCD);</div><div class="line"></div><div class="line"><span class="comment">//FIMDBYPASS_LBLK0:FIMD of LBLK0 Bypass Selection (1=FIMD Bypass)</span></div><div class="line">temp = readl(lcdblk_regs_base + LCDBLK_CFG);</div><div class="line">temp |= (<span class="number">0x01</span>&lt;&lt;<span class="number">1</span>);</div><div class="line">writel(temp, lcdblk_regs_base + LCDBLK_CFG);</div><div class="line"></div><div class="line"><span class="comment">//MIE0_DISPON:MIE0_DISPON: PWM output control (1=PWM outpupt enable)</span></div><div class="line">temp = readl(lcdblk_regs_base + LCDBLK_CFG2);</div><div class="line">temp |= (<span class="number">0x01</span>&lt;&lt;<span class="number">0</span>);</div><div class="line">writel(temp, lcdblk_regs_base + LCDBLK_CFG2);</div><div class="line"></div><div class="line">mdelay(<span class="number">1000</span>);</div><div class="line"></div><div class="line"><span class="comment">//LCD时钟:  VCLK=FIMD*SCLK/(CLKVAL+1), where CLKVAL&gt;=1</span></div><div class="line"><span class="comment">//800/(19+1) == 40M&lt;80M</span></div><div class="line">temp = readl(lcd_regs_base + VIDCON0);</div><div class="line">temp |= (<span class="number">19</span>&lt;&lt;<span class="number">6</span>);</div><div class="line">writel(temp, lcd_regs_base + VIDCON0);</div></pre></td></tr></table></figure><br>思路就是选择时钟源，然后启用时钟源，再分频得到所需VCLK。</p><p><strong>c. 设置引脚极性和时序</strong></p><ul><li>LCD手册“S702-AT070TN92.pdf”中的时序图和时间参数：<br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/171201/1220_1.png" alt=""><br>(PS:手册图片做得真烂，源PDF都模糊)<br>上半部分为水平输入时序图，下半部分为垂直方向输入时序图。</li></ul><p>然后是图中的时间参数：<br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/171201/1220_2.png" alt=""></p><ul><li>Exynos 4412手册“Exynos 4412 SCP_Users Manual.pdf”中的时序图：<br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/171201/1220_3.png" alt=""></li></ul><p>我的经验就是<strong>结合LCD的时序图和控制器的时序图，对比两者的时序得出关系式和极性</strong>。<br>因此，可以得出：<br><strong>极性方面：</strong><br>VS与VSYNC极性相反，<br>HS与HSYNC极性相反，<br>DE与VDEN极性一致，<br>DCLK是在上升沿触发。</p><p>对于寄存器VIDCON1：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * VIDTCON1:</div><div class="line"> * [5]:IVSYNC  ===&gt; 1 : Inverted(反转)</div><div class="line"> * [6]:IHSYNC  ===&gt; 1 : Inverted(反转)</div><div class="line"> * [7]:IVCLK   ===&gt; 1 : Fetches video data at VCLK rising edge (上降沿触发)</div><div class="line"> * [10:9]:FIXVCLK  ====&gt; 01 : VCLK running</div><div class="line"> */</div><div class="line">temp = readl(lcd_regs_base + VIDCON1);</div><div class="line">temp |= (<span class="number">1</span> &lt;&lt; <span class="number">9</span>) | (<span class="number">1</span> &lt;&lt; <span class="number">7</span>) | (<span class="number">1</span> &lt;&lt; <span class="number">5</span>) | (<span class="number">1</span> &lt;&lt; <span class="number">6</span>);</div><div class="line">writel(temp, lcd_regs_base + VIDCON1);</div></pre></td></tr></table></figure></p><p><strong>时序方面：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">VSPW+1=tvpw=1~20(暂取11) --&gt; VSPW=10</div><div class="line">VBPD+1=tvb-tvpw=23-11=12 --&gt; VBPD=11</div><div class="line">VFPD+1=tvfp=22 --&gt; VFPD=21</div><div class="line"></div><div class="line">HSPW+1=hpw=1~40(暂取21) --&gt; HSPW=20</div><div class="line">HBPD+1=thb-hpw=46-21=25 --&gt; HBPD=24</div><div class="line">HOZVAL+1=thd=800 --&gt; HOZVAL=799</div><div class="line">HFPD+1=thfp=210 --&gt; HFPD=209</div></pre></td></tr></table></figure></p><p>对于寄存器VIDTCON0：<br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/171201/1220_4.png" alt=""><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * VIDTCON0:</div><div class="line"> * [23:16]:  VBPD+1=tvb-tvpw=23-11=12 --&gt; VBPD=11</div><div class="line"> * [15:8] :  VFPD+1=tvfp=22 --&gt; VFPD=21</div><div class="line"> * [7:0]  :  VSPW+1=tvpw=1~20(暂取11) --&gt; VSPW=10</div><div class="line"> */</div><div class="line">temp = readl(lcd_regs_base + VIDTCON0);</div><div class="line">temp |= (<span class="number">11</span> &lt;&lt; <span class="number">16</span>) | (<span class="number">21</span> &lt;&lt; <span class="number">8</span>) | (<span class="number">10</span> &lt;&lt; <span class="number">0</span>);</div><div class="line">writel(temp, lcd_regs_base + VIDTCON0);</div></pre></td></tr></table></figure></p><p>对于寄存器VIDTCON1：<br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/171201/1220_5.png" alt=""><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * VIDTCON1:</div><div class="line"> * [23:16]:  HBPD+1=thb-hpw=46-21=25 --&gt; HBPD=24</div><div class="line"> * [15:8] :  HFPD+1=thfp=210 --&gt; HFPD=209</div><div class="line"> * [7:0]  :  HSPW+1=hpw=1~40(暂取21) --&gt; HSPW=20</div><div class="line"> */</div><div class="line">temp = readl(lcd_regs_base + VIDTCON1);</div><div class="line">temp |= (<span class="number">24</span> &lt;&lt; <span class="number">16</span>) | (<span class="number">209</span> &lt;&lt; <span class="number">8</span>)  | (<span class="number">20</span> &lt;&lt; <span class="number">0</span>);</div><div class="line">writel(temp, lcd_regs_base + VIDTCON1);</div></pre></td></tr></table></figure></p><p><strong>d. 设置分辨率</strong><br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/171201/1220_6.png" alt=""><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * HOZVAL = (Horizontal display size) - 1 and LINEVAL = (Vertical display size) - 1.</div><div class="line"> * Horizontal(水平) display size : 800</div><div class="line"> * Vertical(垂直) display size : 480</div><div class="line"> */</div><div class="line">temp = ((LCD_WIDTH<span class="number">-1</span>) &lt;&lt; <span class="number">11</span>) | (LCD_LENTH &lt;&lt; <span class="number">0</span>);</div><div class="line">writel(temp, lcd_regs_base + VIDTCON2);</div></pre></td></tr></table></figure></p><p><strong>e. 设置数据格式</strong><br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/171201/1220_7.png?v=1" alt=""><br>如前面可变参数所设置的一样，本次采用的是24BPP格式，每个像素占用32位(实际使用24位)。<br>当使能字节交换时(BSWP=0, HWSWP=0, WSWP=1)，则低位像素存放在低字节，即[23:0]放像素1，[31:24]空，[55:32]放第二个像素，[63:56]空，依次类推，这种存放方式更符合日常习惯。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * WINCON0:</div><div class="line"> * [15]:Specifies Word swap control bit.  1 = Enables swap 低位像素存放在低字节</div><div class="line"> * [5:2]: Selects Bits Per Pixel (BPP) mode for Window image : 1101 ===&gt; Unpacked 25 BPP (non-palletized A:1-R:8-G:8-B:8)</div><div class="line"> * [0]:Enables/disables video output   1 = Enables</div><div class="line"> */</div><div class="line">temp = readl(lcd_regs_base + WINCON0);</div><div class="line">temp &amp;= ~(<span class="number">0x0F</span> &lt;&lt; <span class="number">2</span>);</div><div class="line">temp |= (<span class="number">0X01</span> &lt;&lt; <span class="number">15</span>) | (<span class="number">0x0D</span> &lt;&lt; <span class="number">2</span>) | (<span class="number">0x01</span>&lt;&lt;<span class="number">0</span>);</div><div class="line">writel(temp, lcd_regs_base + WINCON0);</div></pre></td></tr></table></figure></p><p><strong>f. 设置/使能显示窗口</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Enables Channel 0.</span></div><div class="line">temp = readl(lcd_regs_base + SHADOWCON);</div><div class="line">writel(temp | <span class="number">0x01</span>, lcd_regs_base + SHADOWCON);</div><div class="line"><span class="comment">//Selects Channel 0</span></div><div class="line">temp = readl(lcd_regs_base + WINCHMAP2);</div><div class="line">temp &amp;= ~(<span class="number">7</span> &lt;&lt; <span class="number">16</span>);</div><div class="line">temp |= (<span class="number">0x01</span> &lt;&lt; <span class="number">16</span>);<span class="comment">//CH0FISEL:Selects Channel 0's channel.001 = Window 0</span></div><div class="line">temp &amp;= ~(<span class="number">7</span> &lt;&lt; <span class="number">0</span>);</div><div class="line">temp |= (<span class="number">0x01</span> &lt;&lt; <span class="number">0</span>);<span class="comment">//W0FISEL:Selects Window 0's channel.001 = Channel 0</span></div><div class="line">writel(temp, lcd_regs_base + WINCHMAP2);</div></pre></td></tr></table></figure></p><p><strong>g. 设置OSD功能</strong></p><blockquote><p>注：OSD是on-screen display的简称，即屏幕菜单式调节方式。即在当前显示上叠加一层显示，就像显示器的调节菜单。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//设置OSD显示大小</span></div><div class="line"><span class="comment">//Window Size For example. Height *  Width (number of word)</span></div><div class="line">temp = (LCD_LENTH * LCD_WIDTH) &gt;&gt; <span class="number">1</span>;</div><div class="line">writel(temp, lcd_regs_base + VIDOSD0C);</div><div class="line"><span class="comment">/*</span></div><div class="line"> * bit0-10 : 指定OSD图像左上像素的垂直屏幕坐标</div><div class="line"> * bit11-21: 指定OSD图像左上像素的水平屏幕坐标</div><div class="line"> */</div><div class="line">writel(<span class="number">0</span>, lcd_regs_base + VIDOSD0A);</div><div class="line"><span class="comment">/*</span></div><div class="line"> * bit0-10 : 指定OSD图像右下像素的垂直屏幕坐标</div><div class="line"> * bit11-21: 指定OSD图像右下像素的水平屏幕坐标</div><div class="line"> */</div><div class="line">writel(((LCD_LENTH<span class="number">-1</span>) &lt;&lt; <span class="number">11</span>) | (LCD_WIDTH<span class="number">-1</span>), lcd_regs_base + VIDOSD0B);</div></pre></td></tr></table></figure><p><strong>f. 启动显示</strong></p><blockquote><p>Display On: ENVID and ENVID_F are set to “1”.<br>Direct Off: ENVID and ENVID_F are set to “0” simultaneously.<br>Per Frame Off: ENVID_F is set to “0” and ENVID is set to “1”.</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Display On: ENVID and ENVID_F are set to "1".</span></div><div class="line">temp = readl(lcd_regs_base + VIDCON0);</div><div class="line">writel(temp | (<span class="number">0x01</span>&lt;&lt;<span class="number">0</span>) | (<span class="number">0x01</span>&lt;&lt;<span class="number">1</span>), lcd_regs_base + VIDCON0);</div></pre></td></tr></table></figure><h4 id="4-1-3-3-分配显存-framebuffer-并把地址告诉LCD控制器"><a href="#4-1-3-3-分配显存-framebuffer-并把地址告诉LCD控制器" class="headerlink" title="4.1.3.3 分配显存(framebuffer), 并把地址告诉LCD控制器"></a>4.1.3.3 分配显存(framebuffer), 并把地址告诉LCD控制器</h4><p>这里因为分配的显存要是连续的，因此不能使用传统的<code>kalloc()</code>函数，这里使用<code>dma_alloc_writecombine()</code>。<br>先用物理地址映射出一块虚拟内存，以后对该虚拟内存操作，就等同于对物理地址数据进行操作。<br>然后把物理地址的起始/结束地址告诉LCD控制器，以后LCD控制器就会去物理地址不断获取显示数据。<br>这样就实现了操作虚拟内存，更新图像数据的效果。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// tiny4412_lcd-&gt;screen_base         显存虚拟地址</span></div><div class="line"><span class="comment">// tiny4412_lcd-&gt;fix.smem_len        显存大小，前面计算的</span></div><div class="line"><span class="comment">// tiny4412_lcd-&gt;fix.smem_start      显存物理地址</span></div><div class="line">tiny4412_lcd-&gt;screen_base = dma_alloc_writecombine(<span class="literal">NULL</span>, tiny4412_lcd-&gt;fix.smem_len, (<span class="keyword">dma_addr_t</span> *)&amp;tiny4412_lcd-&gt;fix.smem_start, GFP_KERNEL);</div><div class="line"><span class="comment">//显存起始地址</span></div><div class="line">writel(tiny4412_lcd-&gt;fix.smem_start, lcd_regs_base + VIDW00ADD0B0);</div><div class="line"><span class="comment">//显存结束地址</span></div><div class="line">writel(tiny4412_lcd-&gt;fix.smem_start + tiny4412_lcd-&gt;fix.smem_len, lcd_regs_base + VIDW00ADD1B0);</div></pre></td></tr></table></figure></p><h3 id="4-1-4-注册fb-info"><a href="#4-1-4-注册fb-info" class="headerlink" title="4.1.4 注册fb_info"></a>4.1.4 注册fb_info</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ret = register_framebuffer(tiny4412_lcd);</div><div class="line"><span class="keyword">return</span> ret;</div></pre></td></tr></table></figure><h2 id="4-2-cfb-setcolreg"><a href="#4-2-cfb-setcolreg" class="headerlink" title="4.2 cfb_setcolreg"></a>4.2 cfb_setcolreg</h2><p>前面绑定的操作函数中，<code>cfb_fillrect()</code>，<code>cfb_copyarea()</code>、<code>cfb_imageblit()</code>都在内核的其它文件中实现了，无需再构造，剩下的<code>cfb_setcolreg()</code>是和调色板相关的函数，是为了兼容8BPP模式。<br>我们这里一直使用的24BPP，不提供这个函数的实现也行。<br>调色板的介绍前面说过了，就是为了减少数据量，fb只存放数据索引，根据索引再去内存找到对应的颜色数据传给LCD控制器，LCD控制器再控制时序和数据在LCD上显示出来。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">static inline unsigned int chan_to_field(unsigned int chan, struct fb_bitfield *bf)</div><div class="line">&#123;</div><div class="line">    chan &amp;= 0xFFFF;//保留低16位</div><div class="line">    chan &gt;&gt;= 16 - bf-&gt;length;//保留高bf-&gt;length位</div><div class="line">    return chan &lt;&lt; bf-&gt;offset;//返回保留的位，且在原位置</div><div class="line">&#125;</div><div class="line">static int cfb_setcolreg(unsigned int regno, unsigned int red,</div><div class="line">                               unsigned int green, unsigned int blue,</div><div class="line">                               unsigned int transp, struct fb_info *info)</div><div class="line">&#123;</div><div class="line"></div><div class="line">    unsigned int color = 0;</div><div class="line">    uint32_t *p;</div><div class="line">    color  = chan_to_field(red,   &amp;info-&gt;var.red);</div><div class="line">    color |= chan_to_field(green, &amp;info-&gt;var.green);</div><div class="line">    color |= chan_to_field(blue,  &amp;info-&gt;var.blue);</div><div class="line">    </div><div class="line">    p = info-&gt;pseudo_palette;  </div><div class="line">    p[regno] = color;</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="4-3-lcd-remove"><a href="#4-3-lcd-remove" class="headerlink" title="4.3 lcd_remove"></a>4.3 lcd_remove</h2><p>需要关闭LCD，注销和释放framebuffer，释放显存：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">lcd_remove</span><span class="params">(<span class="keyword">struct</span> platform_device *pdev)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">//Direct Off: ENVID and ENVID_F are set to "0" simultaneously. </span></div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> temp;</div><div class="line">    temp = readl(lcd_regs_base + VIDCON0);</div><div class="line">    temp &amp;= ~(<span class="number">0x01</span>&lt;&lt;<span class="number">1</span> | <span class="number">0x01</span>&lt;&lt;<span class="number">0</span>); </div><div class="line">    writel(temp, lcd_regs_base + VIDCON0);</div><div class="line"></div><div class="line">    unregister_framebuffer(tiny4412_lcd);</div><div class="line">    dma_free_writecombine(<span class="literal">NULL</span>, tiny4412_lcd-&gt;fix.smem_len, tiny4412_lcd-&gt;screen_base, tiny4412_lcd-&gt;fix.smem_start);</div><div class="line">    framebuffer_release(tiny4412_lcd);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="4-4-完整驱动代码"><a href="#4-4-完整驱动代码" class="headerlink" title="4.4 完整驱动代码"></a>4.4 完整驱动代码</h2><figure class="highlight c"><figcaption><span>[lcd_drv.c]</span><a href="https://github.com/hceng/learn/blob/master/tiny4412/02_lcd_drv/lcd_drv.c" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/errno.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/mm.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/slab.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/delay.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/fb.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/dma-mapping.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/interrupt.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/workqueue.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/wait.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/platform_device.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/clk.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/io.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/io.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/uaccess.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/div64.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/mach/map.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/fb.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/types.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>         VIDCON0                 0x00</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>         VIDCON1                 0x04</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>         VIDTCON0                0x10</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>         VIDTCON1                0x14</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>         VIDTCON2                0x18</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>         WINCON0                 0x20</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>         VIDOSD0C                0x48</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>         SHADOWCON               0x34</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>         WINCHMAP2               0x3c</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>         VIDOSD0A                0x40</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>         VIDOSD0B                0x44</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>         VIDW00ADD0B0            0xA0</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>         VIDW00ADD1B0            0xD0</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>         CLK_SRC_LCD0            0x234</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>         CLK_SRC_MASK_LCD        0x334</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>         CLK_DIV_LCD             0x534</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>         CLK_GATE_IP_LCD         0x934</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>         LCDBLK_CFG              0x00</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>         LCDBLK_CFG2             0x04</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>         LCD_LENTH               800</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>         LCD_WIDTH               480</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>         BITS_PER_PIXEL          32</span></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> fb_info *tiny4412_lcd;</div><div class="line"><span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">void</span> __iomem *lcd_regs_base;</div><div class="line"><span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">void</span> __iomem *lcdblk_regs_base;</div><div class="line"><span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">void</span> __iomem *lcd0_configuration;<span class="comment">//Configures power mode of LCD0.0x10020000+0x3C80</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">void</span> __iomem *clk_regs_base;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">static</span> u32 pseudo_palette[<span class="number">16</span>];</div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> resource  *res0, *res1, *res2, *res3;</div><div class="line"></div><div class="line"><span class="comment">/* from pxafb.c */</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">chan_to_field</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> chan, <span class="keyword">struct</span> fb_bitfield *bf)</span></span></div><div class="line">&#123;</div><div class="line">    chan &amp;= <span class="number">0xFFFF</span>;<span class="comment">//保留低16位</span></div><div class="line">    chan &gt;&gt;= <span class="number">16</span> - bf-&gt;length;<span class="comment">//保留高bf-&gt;length位</span></div><div class="line">    <span class="keyword">return</span> chan &lt;&lt; bf-&gt;offset;<span class="comment">//返回保留的位，且在原位置</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">cfb_setcolreg</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> regno, <span class="keyword">unsigned</span> <span class="keyword">int</span> red,</span></span></div><div class="line">                               <span class="keyword">unsigned</span> <span class="keyword">int</span> green, <span class="keyword">unsigned</span> <span class="keyword">int</span> blue,</div><div class="line">                               <span class="keyword">unsigned</span> <span class="keyword">int</span> transp, <span class="keyword">struct</span> fb_info *info)</div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> color = <span class="number">0</span>;</div><div class="line">    <span class="keyword">uint32_t</span> *p;</div><div class="line">    color  = chan_to_field(red,   &amp;info-&gt;var.red);</div><div class="line">    color |= chan_to_field(green, &amp;info-&gt;var.green);</div><div class="line">    color |= chan_to_field(blue,  &amp;info-&gt;var.blue);</div><div class="line">    </div><div class="line">    p = info-&gt;pseudo_palette;  </div><div class="line">    p[regno] = color;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> fb_ops tiny4412_lcdfb_ops =</div><div class="line">&#123;</div><div class="line">    .owner              = THIS_MODULE,</div><div class="line">    .fb_setcolreg       = cfb_setcolreg, <span class="comment">//设置调色板，实现伪颜色表 </span></div><div class="line">    .fb_fillrect        = cfb_fillrect,  <span class="comment">//填充矩形</span></div><div class="line">    .fb_copyarea        = cfb_copyarea,  <span class="comment">//数据复制</span></div><div class="line">    .fb_imageblit       = cfb_imageblit, <span class="comment">//图形填充</span></div><div class="line">&#125;;</div><div class="line">                            </div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">lcd_probe</span><span class="params">(<span class="keyword">struct</span> platform_device *pdev)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> ret;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> temp;</div><div class="line">    </div><div class="line">    <span class="comment">/* 1. 分配一个fb_info */</span></div><div class="line">    tiny4412_lcd = framebuffer_alloc(<span class="number">0</span>, <span class="literal">NULL</span>);                        <span class="comment">//不要额外空间设置私有数据</span></div><div class="line">    <span class="keyword">if</span>(!tiny4412_lcd) &#123;</div><div class="line">        <span class="keyword">return</span>  -ENOMEM;</div><div class="line">    &#125;</div><div class="line">   </div><div class="line">    <span class="comment">/* 2. 设置 */</span></div><div class="line">    <span class="comment">/* 2.1 设置 fix 固定的参数 */</span></div><div class="line">    <span class="built_in">strcpy</span>(tiny4412_lcd-&gt;fix.id, <span class="string">"s702"</span>);                              <span class="comment">//设置fix名称</span></div><div class="line">    tiny4412_lcd-&gt;fix.smem_len = LCD_LENTH*LCD_WIDTH*BITS_PER_PIXEL/<span class="number">8</span>; <span class="comment">//显存的长度=分辨率*每象素字节数</span></div><div class="line">    tiny4412_lcd-&gt;fix.type     = FB_TYPE_PACKED_PIXELS;                <span class="comment">//类型:填充式像素(常用在TFT屏幕)</span></div><div class="line">    tiny4412_lcd-&gt;fix.visual   = FB_VISUAL_TRUECOLOR;                  <span class="comment">//TFT 真彩色</span></div><div class="line">    tiny4412_lcd-&gt;fix.line_length = LCD_LENTH*BITS_PER_PIXEL/<span class="number">8</span>;        <span class="comment">//每行的长度，以字节为单位</span></div><div class="line">    <span class="comment">/* 2.2 设置 var 可变的参数 */</span></div><div class="line">    tiny4412_lcd-&gt;var.xres           = LCD_LENTH;                      <span class="comment">//x方向分辨率</span></div><div class="line">    tiny4412_lcd-&gt;var.yres           = LCD_WIDTH;                      <span class="comment">//y方向分辨率</span></div><div class="line">    tiny4412_lcd-&gt;var.xres_virtual   = LCD_LENTH;                      <span class="comment">//x方向虚拟分辨率</span></div><div class="line">    tiny4412_lcd-&gt;var.yres_virtual   = LCD_WIDTH;                      <span class="comment">//y方向虚拟分辨率</span></div><div class="line">    tiny4412_lcd-&gt;var.xoffset        = <span class="number">0</span>;                              <span class="comment">//x方向真实值和虚拟值得差值</span></div><div class="line">    tiny4412_lcd-&gt;var.yoffset        = <span class="number">0</span>;                              <span class="comment">//y方向真实值和虚拟值得差值</span></div><div class="line">    tiny4412_lcd-&gt;var.bits_per_pixel = BITS_PER_PIXEL;                 <span class="comment">//每个像素占多少位</span></div><div class="line">    <span class="comment">/* RGB:888 */</span></div><div class="line">    tiny4412_lcd-&gt;var.red.length     = <span class="number">8</span>;</div><div class="line">    tiny4412_lcd-&gt;var.red.offset     = <span class="number">16</span>;   <span class="comment">//红</span></div><div class="line">    tiny4412_lcd-&gt;var.green.length   = <span class="number">8</span>;</div><div class="line">    tiny4412_lcd-&gt;var.green.offset   = <span class="number">8</span>;    <span class="comment">//绿</span></div><div class="line">    tiny4412_lcd-&gt;var.blue.length    = <span class="number">8</span>;</div><div class="line">    tiny4412_lcd-&gt;var.blue.offset    = <span class="number">0</span>;    <span class="comment">//蓝</span></div><div class="line">    tiny4412_lcd-&gt;var.activate       = FB_ACTIVATE_NOW;      <span class="comment">//使设置的值立即生效  </span></div><div class="line">    <span class="comment">/* 2.3 设置操作函数 */</span></div><div class="line">    tiny4412_lcd-&gt;fbops              = &amp;tiny4412_lcdfb_ops;  <span class="comment">//绑定操作函数</span></div><div class="line">    <span class="comment">/* 2.4 其他的设置 */</span></div><div class="line">    tiny4412_lcd-&gt;pseudo_palette     = pseudo_palette;       <span class="comment">//存放调色板所调颜色的数组</span></div><div class="line">    tiny4412_lcd-&gt;screen_size        = LCD_LENTH * LCD_WIDTH * BITS_PER_PIXEL / <span class="number">8</span>;   <span class="comment">//显存大小</span></div><div class="line"></div><div class="line">    <span class="comment">/* 3. 硬件相关的操作 */</span></div><div class="line">    <span class="comment">/* 3.1 配置GPIO用于LCD */</span></div><div class="line">    <span class="comment">//在设备树中，将 GPF0_0-GPF0_7、GPF1_0-GPF1_7、GPF2_0-GPF2_7、GPF3_0-GPF3_3</span></div><div class="line">    <span class="comment">//配置为了复用第二功能(LCD)，禁止内部上拉，驱动强度配置设置为0;</span></div><div class="line">    <span class="comment">/* 3.2 根据LCD手册设置LCD控制器, 比如VCLK的频率等 */</span></div><div class="line">    <span class="comment">//寄存器映射</span></div><div class="line">    res0 = platform_get_resource(pdev, IORESOURCE_MEM, <span class="number">0</span>);</div><div class="line">    <span class="keyword">if</span> (res0 == <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        printk(<span class="string">"platform_get_resource error.\n"</span>);</div><div class="line">        <span class="keyword">return</span> -EINVAL;</div><div class="line">    &#125;</div><div class="line">    lcd_regs_base = devm_ioremap_resource(&amp;pdev-&gt;dev, res0);</div><div class="line">    <span class="keyword">if</span> (lcd_regs_base == <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        printk(<span class="string">"devm_ioremap_resource error.\n"</span>);</div><div class="line">        <span class="keyword">return</span> -EINVAL;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    res1 = platform_get_resource(pdev, IORESOURCE_MEM, <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (res1 == <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        printk(<span class="string">"platform_get_resource error.\n"</span>);</div><div class="line">        <span class="keyword">return</span> -EINVAL;</div><div class="line">    &#125;</div><div class="line">    lcdblk_regs_base = devm_ioremap_resource(&amp;pdev-&gt;dev, res1);</div><div class="line">    <span class="keyword">if</span> (lcdblk_regs_base == <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        printk(<span class="string">"devm_ioremap_resource error.\n"</span>);</div><div class="line">        <span class="keyword">return</span> -EINVAL;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    res2 = platform_get_resource(pdev, IORESOURCE_MEM, <span class="number">2</span>);</div><div class="line">    <span class="keyword">if</span> (res2 == <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        printk(<span class="string">"platform_get_resource error.\n"</span>);</div><div class="line">        <span class="keyword">return</span> -EINVAL;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//bug：</span></div><div class="line">    <span class="comment">/*</span></div><div class="line">    devm_ioremap()和devm_ioremap_resource()区别：</div><div class="line">    devm_ioremap()可以重复map相同的地址空间，devm_ioremap_resource()不可以。</div><div class="line">    一般SoC的中，各个硬件模块各自的memory region都有严格的划分(比如说USB host的地址空间绝对不会和flash host冲突)， </div><div class="line">    所以一般的driver使用devm_ioremap()和devm_ioremap_resource()都行。 </div><div class="line">    但这里，应该系统已经映射过一次了，所以使用devm_ioremap_resource()会报错。</div><div class="line">    */</div><div class="line">    <span class="comment">//lcd0_configuration = devm_ioremap_resource(&amp;pdev-&gt;dev, res2);  </span></div><div class="line">    lcd0_configuration = devm_ioremap(&amp;pdev-&gt;dev, res2-&gt;start, resource_size(res2));  </div><div class="line">    <span class="keyword">if</span> (lcd0_configuration == <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        printk(<span class="string">"devm_ioremap_resource error.\n"</span>);</div><div class="line">        <span class="keyword">return</span> -EINVAL;</div><div class="line">    &#125;</div><div class="line">    *(<span class="keyword">unsigned</span> <span class="keyword">long</span> *)lcd0_configuration = <span class="number">7</span>; <span class="comment">//Reset Value = 0x00000007</span></div><div class="line">        </div><div class="line">    res3 = platform_get_resource(pdev, IORESOURCE_MEM, <span class="number">3</span>);</div><div class="line">    <span class="keyword">if</span> (res3 == <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        printk(<span class="string">"platform_get_resource error.\n"</span>);</div><div class="line">        <span class="keyword">return</span> -EINVAL;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//clk_regs_base = devm_ioremap_resource(&amp;pdev-&gt;dev, res3);</span></div><div class="line">clk_regs_base = devm_ioremap(&amp;pdev-&gt;dev, res3-&gt;start, resource_size(res3));  </div><div class="line">    <span class="keyword">if</span> (clk_regs_base == <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        printk(<span class="string">"devm_ioremap_resource error.\n"</span>);</div><div class="line">        <span class="keyword">return</span> -EINVAL;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//时钟源选择\使能时钟</span></div><div class="line">    <span class="comment">//Selects clock source for LCD_BLK</span></div><div class="line">    <span class="comment">//FIMD0_SEL:bit[3:0]=0110=SCLKMPLL_USER_T=800M</span></div><div class="line">    temp = readl(clk_regs_base + CLK_SRC_LCD0);</div><div class="line">    temp &amp;= ~(<span class="number">0x0F</span>&lt;&lt;<span class="number">0</span>);</div><div class="line">    temp |= (<span class="number">0x3</span>&lt;&lt;<span class="number">1</span>);</div><div class="line">    writel(temp, clk_regs_base + CLK_SRC_LCD0);</div><div class="line"></div><div class="line">    <span class="comment">//Clock source mask for LCD_BLK    </span></div><div class="line">    <span class="comment">//FIMD0_MASK:Mask output clock of MUXFIMD0 (1=Unmask)</span></div><div class="line">    temp = readl(clk_regs_base + CLK_SRC_MASK_LCD);</div><div class="line">    temp |= (<span class="number">0x01</span>&lt;&lt;<span class="number">0</span>);</div><div class="line">    writel(temp, clk_regs_base + CLK_SRC_MASK_LCD);</div><div class="line"></div><div class="line">    <span class="comment">//Clock source mask for LCD_BLK    </span></div><div class="line">    <span class="comment">//SCLK_FIMD0 = MOUTFIMD0/(FIMD0_RATIO + 1),分频比 1/1</span></div><div class="line">    temp = readl(clk_regs_base + CLK_DIV_LCD);</div><div class="line">    temp &amp;= ~(<span class="number">0x0F</span>&lt;&lt;<span class="number">0</span>);</div><div class="line">    writel(temp, clk_regs_base + CLK_DIV_LCD);</div><div class="line"></div><div class="line">    <span class="comment">//Controls IP clock gating for LCD_BLK   </span></div><div class="line">    <span class="comment">//CLK_FIMD0:Gating all clocks for FIMD0 (1=Pass)</span></div><div class="line">    temp = readl(clk_regs_base + CLK_GATE_IP_LCD);</div><div class="line">    temp |= (<span class="number">0x01</span>&lt;&lt;<span class="number">0</span>);</div><div class="line">    writel(temp, clk_regs_base + CLK_GATE_IP_LCD);</div><div class="line">    </div><div class="line">    <span class="comment">//FIMDBYPASS_LBLK0:FIMD of LBLK0 Bypass Selection (1=FIMD Bypass)</span></div><div class="line">    temp = readl(lcdblk_regs_base + LCDBLK_CFG);</div><div class="line">    temp |= (<span class="number">0x01</span>&lt;&lt;<span class="number">1</span>);</div><div class="line">    writel(temp, lcdblk_regs_base + LCDBLK_CFG);</div><div class="line"></div><div class="line">    <span class="comment">//MIE0_DISPON:MIE0_DISPON: PWM output control (1=PWM outpupt enable)</span></div><div class="line">    temp = readl(lcdblk_regs_base + LCDBLK_CFG2);</div><div class="line">    temp |= (<span class="number">0x01</span>&lt;&lt;<span class="number">0</span>);</div><div class="line">    writel(temp, lcdblk_regs_base + LCDBLK_CFG2);</div><div class="line">    </div><div class="line">    mdelay(<span class="number">1000</span>);</div><div class="line">    </div><div class="line">    <span class="comment">//LCD时钟:  VCLK=FIMD*SCLK/(CLKVAL+1), where CLKVAL&gt;=1</span></div><div class="line">    <span class="comment">//800/(19+1) == 40M&lt;80M</span></div><div class="line">    temp = readl(lcd_regs_base + VIDCON0);</div><div class="line">    temp |= (<span class="number">19</span>&lt;&lt;<span class="number">6</span>);</div><div class="line">    writel(temp, lcd_regs_base + VIDCON0);</div><div class="line">    </div><div class="line">    <span class="comment">/*</span></div><div class="line">     * VIDTCON1:</div><div class="line">     * [5]:IVSYNC  ===&gt; 1 : Inverted(反转)</div><div class="line">     * [6]:IHSYNC  ===&gt; 1 : Inverted(反转)</div><div class="line">     * [7]:IVCLK   ===&gt; 1 : Fetches video data at VCLK rising edge (上降沿触发)</div><div class="line">     * [10:9]:FIXVCLK  ====&gt; 01 : VCLK running</div><div class="line">     */</div><div class="line">    temp = readl(lcd_regs_base + VIDCON1);</div><div class="line">    temp |= (<span class="number">1</span> &lt;&lt; <span class="number">9</span>) | (<span class="number">1</span> &lt;&lt; <span class="number">7</span>) | (<span class="number">1</span> &lt;&lt; <span class="number">5</span>) | (<span class="number">1</span> &lt;&lt; <span class="number">6</span>);</div><div class="line">    writel(temp, lcd_regs_base + VIDCON1);</div><div class="line">    </div><div class="line">    <span class="comment">/*</span></div><div class="line">     * VIDTCON0:</div><div class="line">     * [23:16]:  VBPD+1=tvb-tvpw=23-11=12 --&gt; VBPD=11</div><div class="line">     * [15:8] :  VFPD+1=tvfp=22 --&gt; VFPD=21</div><div class="line">     * [7:0]  :  VSPW+1=tvpw=1~20(暂取11) --&gt; VSPW=10</div><div class="line">     */</div><div class="line">    temp = readl(lcd_regs_base + VIDTCON0);</div><div class="line">    temp |= (<span class="number">11</span> &lt;&lt; <span class="number">16</span>) | (<span class="number">21</span> &lt;&lt; <span class="number">8</span>) | (<span class="number">10</span> &lt;&lt; <span class="number">0</span>);</div><div class="line">    writel(temp, lcd_regs_base + VIDTCON0);</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">     * VIDTCON1:</div><div class="line">     * [23:16]:  HBPD+1=thb-hpw=46-21=25 --&gt; HBPD=24</div><div class="line">     * [15:8] :  HFPD+1=thfp=210 --&gt; HFPD=209</div><div class="line">     * [7:0]  :  HSPW+1=hpw=1~40(暂取21) --&gt; HSPW=20</div><div class="line">     */</div><div class="line">    temp = readl(lcd_regs_base + VIDTCON1);</div><div class="line">    temp |= (<span class="number">24</span> &lt;&lt; <span class="number">16</span>) | (<span class="number">209</span> &lt;&lt; <span class="number">8</span>)  | (<span class="number">20</span> &lt;&lt; <span class="number">0</span>);</div><div class="line">    writel(temp, lcd_regs_base + VIDTCON1);</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">     * HOZVAL = (Horizontal display size) - 1 and LINEVAL = (Vertical display size) - 1.</div><div class="line">     * Horizontal(水平) display size : 800</div><div class="line">     * Vertical(垂直) display size : 480</div><div class="line">     */</div><div class="line">    temp = ((LCD_WIDTH<span class="number">-1</span>) &lt;&lt; <span class="number">11</span>) | (LCD_LENTH &lt;&lt; <span class="number">0</span>);</div><div class="line">    writel(temp, lcd_regs_base + VIDTCON2);</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">     * WINCON0:</div><div class="line">     * [15]:Specifies Word swap control bit.  1 = Enables swap 低位像素存放在低字节</div><div class="line">     * [5:2]: Selects Bits Per Pixel (BPP) mode for Window image : 1101 ===&gt; Unpacked 25 BPP (non-palletized A:1-R:8-G:8-B:8)</div><div class="line">     * [0]:Enables/disables video output   1 = Enables</div><div class="line">     */</div><div class="line">    temp = readl(lcd_regs_base + WINCON0);</div><div class="line">    temp &amp;= ~(<span class="number">0x0F</span> &lt;&lt; <span class="number">2</span>);</div><div class="line">    temp |= (<span class="number">0X01</span> &lt;&lt; <span class="number">15</span>) | (<span class="number">0x0D</span> &lt;&lt; <span class="number">2</span>) | (<span class="number">0x01</span>&lt;&lt;<span class="number">0</span>);</div><div class="line">    writel(temp, lcd_regs_base + WINCON0);</div><div class="line"></div><div class="line">    <span class="comment">//Enables Channel 0.</span></div><div class="line">    temp = readl(lcd_regs_base + SHADOWCON);</div><div class="line">    writel(temp | <span class="number">0x01</span>, lcd_regs_base + SHADOWCON);</div><div class="line">    <span class="comment">//Selects Channel 0</span></div><div class="line">    temp = readl(lcd_regs_base + WINCHMAP2);</div><div class="line">    temp &amp;= ~(<span class="number">7</span> &lt;&lt; <span class="number">16</span>);</div><div class="line">    temp |= (<span class="number">0x01</span> &lt;&lt; <span class="number">16</span>);<span class="comment">//CH0FISEL:Selects Channel 0's channel.001 = Window 0</span></div><div class="line">    temp &amp;= ~(<span class="number">7</span> &lt;&lt; <span class="number">0</span>);</div><div class="line">    temp |= (<span class="number">0x01</span> &lt;&lt; <span class="number">0</span>);<span class="comment">//W0FISEL:Selects Window 0's channel.001 = Channel 0</span></div><div class="line">    writel(temp, lcd_regs_base + WINCHMAP2);</div><div class="line"></div><div class="line">    <span class="comment">//设置OSD显示大小</span></div><div class="line">    <span class="comment">//Window Size For example. Height *  Width (number of word)</span></div><div class="line">    temp = (LCD_LENTH * LCD_WIDTH) &gt;&gt; <span class="number">1</span>;</div><div class="line">    writel(temp, lcd_regs_base + VIDOSD0C);</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * bit0-10 : 指定OSD图像左上像素的垂直屏幕坐标</div><div class="line">     * bit11-21: 指定OSD图像左上像素的水平屏幕坐标</div><div class="line">     */</div><div class="line">    writel(<span class="number">0</span>, lcd_regs_base + VIDOSD0A);</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * bit0-10 : 指定OSD图像右下像素的垂直屏幕坐标</div><div class="line">     * bit11-21: 指定OSD图像右下像素的水平屏幕坐标</div><div class="line">     */</div><div class="line">    writel(((LCD_LENTH<span class="number">-1</span>) &lt;&lt; <span class="number">11</span>) | (LCD_WIDTH<span class="number">-1</span>), lcd_regs_base + VIDOSD0B);</div><div class="line">    </div><div class="line">    <span class="comment">//Display On: ENVID and ENVID_F are set to "1".</span></div><div class="line">    temp = readl(lcd_regs_base + VIDCON0);</div><div class="line">    writel(temp | (<span class="number">0x01</span>&lt;&lt;<span class="number">1</span>) | (<span class="number">0x01</span>&lt;&lt;<span class="number">0</span>), lcd_regs_base + VIDCON0);</div><div class="line">    </div><div class="line">    <span class="comment">/* 3.3 分配显存(framebuffer), 并把地址告诉LCD控制器 */</span></div><div class="line">    <span class="comment">// tiny4412_lcd-&gt;screen_base         显存虚拟地址</span></div><div class="line">    <span class="comment">// tiny4412_lcd-&gt;fix.smem_len        显存大小，前面计算的</span></div><div class="line">    <span class="comment">// tiny4412_lcd-&gt;fix.smem_start      显存物理地址</span></div><div class="line">    tiny4412_lcd-&gt;screen_base = dma_alloc_writecombine(<span class="literal">NULL</span>, tiny4412_lcd-&gt;fix.smem_len, (<span class="keyword">dma_addr_t</span> *)&amp;tiny4412_lcd-&gt;fix.smem_start, GFP_KERNEL);</div><div class="line">    <span class="comment">//显存起始地址</span></div><div class="line">    writel(tiny4412_lcd-&gt;fix.smem_start, lcd_regs_base + VIDW00ADD0B0);</div><div class="line">    <span class="comment">//显存结束地址</span></div><div class="line">    writel(tiny4412_lcd-&gt;fix.smem_start + tiny4412_lcd-&gt;fix.smem_len, lcd_regs_base + VIDW00ADD1B0);</div><div class="line"></div><div class="line">    <span class="comment">/* 4. 注册 */</span></div><div class="line">    ret = register_framebuffer(tiny4412_lcd);</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">lcd_remove</span><span class="params">(<span class="keyword">struct</span> platform_device *pdev)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">//Direct Off: ENVID and ENVID_F are set to "0" simultaneously. </span></div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> temp;</div><div class="line">    temp = readl(lcd_regs_base + VIDCON0);</div><div class="line">    temp &amp;= ~(<span class="number">0x01</span>&lt;&lt;<span class="number">1</span> | <span class="number">0x01</span>&lt;&lt;<span class="number">0</span>); </div><div class="line">    writel(temp, lcd_regs_base + VIDCON0);</div><div class="line"></div><div class="line">    unregister_framebuffer(tiny4412_lcd);</div><div class="line">    dma_free_writecombine(<span class="literal">NULL</span>, tiny4412_lcd-&gt;fix.smem_len, tiny4412_lcd-&gt;screen_base, tiny4412_lcd-&gt;fix.smem_start);</div><div class="line">    framebuffer_release(tiny4412_lcd);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">struct</span> of_device_id lcd_dt_ids[] =</div><div class="line">&#123;</div><div class="line">    &#123; .compatible = <span class="string">"tiny4412, lcd_s702"</span>, &#125;,</div><div class="line">    &#123;&#125;,</div><div class="line">&#125;;</div><div class="line">MODULE_DEVICE_TABLE(of, lcd_dt_ids);</div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> platform_driver lcd_driver =</div><div class="line">&#123;</div><div class="line">    .driver        = &#123;</div><div class="line">        .name      = <span class="string">"lcd_s702"</span>,</div><div class="line">        .of_match_table    = of_match_ptr(lcd_dt_ids),</div><div class="line">    &#125;,</div><div class="line">    .probe         = lcd_probe,</div><div class="line">    .remove        = lcd_remove,</div><div class="line">&#125;;</div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">lcd_init</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> ret;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line">    </div><div class="line">    ret = platform_driver_register(&amp;lcd_driver);</div><div class="line">    <span class="keyword">if</span> (ret)</div><div class="line">    &#123;</div><div class="line">        printk(KERN_ERR <span class="string">"lcd: probe fail: %d\n"</span>, ret);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">lcd_exit</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line">    </div><div class="line">    platform_driver_unregister(&amp;lcd_driver);</div><div class="line">&#125;</div><div class="line">module_init(lcd_init);</div><div class="line">module_exit(lcd_exit);</div><div class="line"></div><div class="line">MODULE_LICENSE(<span class="string">"GPL"</span>);</div><div class="line">MODULE_AUTHOR(<span class="string">"hceng &lt;huangcheng.job@foxmail.com&gt;"</span>);</div><div class="line">MODULE_DESCRIPTION(<span class="string">"Tiny4412 LCD driver."</span>);</div><div class="line">MODULE_ALIAS(<span class="string">"Exynos4412_s702"</span>);</div><div class="line">MODULE_VERSION(<span class="string">"V1.0"</span>);</div></pre></td></tr></table></figure><p>参考博客：<a href="http://blog.csdn.net/lizuobin2/article/details/54743381" target="_blank" rel="external">设备树学习之（十二）LCD驱动</a></p><h1 id="5-测试程序"><a href="#5-测试程序" class="headerlink" title="5.测试程序"></a>5.测试程序</h1><h2 id="5-1-图像显示"><a href="#5-1-图像显示" class="headerlink" title="5.1 图像显示"></a>5.1 图像显示</h2><p>前面完成了驱动，要想显示内容，只需要<code>mmap()</code>一块内存，然后向里面写数据即可。<br>但这种操作一般显示用于显示几何图形，像色块，圆形，矩形等，实用性不大，显示一张图片似乎更有意思。<br>显示图片没那么容易了，像常见的JPEG格式图片，它是一个“压缩文件”，需要解压得到RGB数据。</p><p>这就要用到<a href="https://libjpeg-turbo.org/" target="_blank" rel="external"><code>libjpeg-turbo</code></a>，一个用C语言写的JPEG图像解码器。</p><h3 id="5-1-1-移植libjpeg"><a href="#5-1-1-移植libjpeg" class="headerlink" title="5.1.1 移植libjpeg"></a>5.1.1 移植libjpeg</h3><p>下载目前最新的<a href="https://sourceforge.net/projects/libjpeg-turbo/files/" target="_blank" rel="external"><code>libjpeg-turbo</code></a>源码<a href="https://sourceforge.net/projects/libjpeg-turbo/files/1.5.3/" target="_blank" rel="external"><code>libjpeg-turbo-1.5.3.tar.gz</code></a>。<br>a. 解压<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo tar xzf libjpeg-turbo-1.5.3.tar.gz</div></pre></td></tr></table></figure></p><p>b.设置配置文件<br><code>--prefix=</code>:指定安装路径<br><code>--host==</code>:指定目标程序运行主机类型<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">cd libjpeg-turbo-1.5.3 </div><div class="line">mkdir tmp //创建临时安装路径</div><div class="line">cd ..</div><div class="line">./configure --prefix=/work/drv/2_lcd/libjpeg_new/libjpeg-turbo-1.5.3/tmp --host=arm-none-linux-gnueabi</div><div class="line">make</div><div class="line">ma</div><div class="line">make install</div></pre></td></tr></table></figure></p><h3 id="5-1-2-编写应用程序"><a href="#5-1-2-编写应用程序" class="headerlink" title="5.1.2 编写应用程序"></a>5.1.2 编写应用程序</h3><p>这块几乎全是参考韦东山老师第三期视频的电子相册项目。</p><blockquote><p>解压操作过程如下:<br>1、分配jpeg对象结构体空间，并初始化<br>2、指定解压数据源<br>3、获取解压文件信息<br>4、为解压设定参数，包括图像大小和颜色空间<br>5、开始解压缩<br>6、取数据并显示<br>7、解压完毕<br>8、释放资源和退出程序</p></blockquote><p>1、分配jpeg对象结构体空间、并初始化<br>解压缩过程中使用的JPEG对象是一个<code>jpeg_decompress_struct</code>的结构体。<br>同时还需要定义一个用于错误处理的结构体对象，IJG中标准的错误结构体是<code>jpeg_error_mgr</code>。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> jpeg_decompress_struct cinfo;</div><div class="line"><span class="keyword">struct</span> jpeg_error_mgr jerr;</div></pre></td></tr></table></figure></p><p>绑定jerr错误结构体至jpeg对象结构体。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cinfo.err = jpeg_std_error(&amp;jerr);  </div></pre></td></tr></table></figure><br>这个标准的错误处理结构将使程序在出现错误时调用exit()退出程序，如果不希望使用标准的错误处理方式，则可以通过自定义退出函数的方法自定义错误处理结构。</p><p>初始化cinfo结构体。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jpeg_create_decompress(&amp;cinfo);</div></pre></td></tr></table></figure></p><p>2、指定解压数据源<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">   FILE * infile;</div><div class="line"></div><div class="line"><span class="keyword">if</span> ((infile = fopen(argv[<span class="number">1</span>], <span class="string">"rb"</span>)) == <span class="literal">NULL</span>) &#123;</div><div class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"can't open %s\n"</span>, argv[<span class="number">1</span>]);</div><div class="line"><span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line">jpeg_stdio_src(&amp;cinfo, infile);</div></pre></td></tr></table></figure></p><p>3、获取解压文件信息<br>将图像的缺省信息填充到cinfo结构中以便程序使用。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jpeg_read_header(&amp;cinfo, TRUE);</div></pre></td></tr></table></figure><br>此时，常见的可用信息包括图像的：<br>宽<code>cinfo.image_width</code>，高<code>cinfo.image_height</code>，色彩空间<code>cinfo.jpeg_color_space</code>，颜色通道数<code>cinfo.num_components</code>等。</p><p>4、为解压设定参数，包括图像大小和颜色空间<br>比如可以设定解出来的图像的大小，也就是与原图的比例。<br>使用<code>scale_num</code>和<code>scale_denom</code>两个参数，解出来的图像大小就是<code>scale_num/scale_denom</code>，但是IJG当前仅支持1/1, 1/2, 1/4,和1/8这几种缩小比例。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">printf</span>(<span class="string">"enter scale M/N:\n"</span>);</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%d/%d"</span>, &amp;cinfo.scale_num, &amp;cinfo.scale_denom);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"scale to : %d/%d\n"</span>, cinfo.scale_num, cinfo.scale_denom);</div></pre></td></tr></table></figure><br>假如想让图片变为原来的一般，只需要输入<code>1/2</code>即可。</p><p>也可以设定输出图像的色彩空间，即<code>cinfo.out_color_space</code>，可以把一个原本彩色的图像由真彩色JCS_RGB变为灰度JCS_GRAYSCALE。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cinfo.out_color_space=JCS_GRAYSCALE;  </div></pre></td></tr></table></figure></p><p>5、开始解压缩<br>根据设定的解压缩参数进行图像解压缩操作。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jpeg_start_decompress(&amp;cinfo); </div></pre></td></tr></table></figure></p><p> 在完成解压缩操作后，会将解压后的图像信息填充至<code>cinfo</code>结构中。比如，输出图像宽度<code>cinfo.output_width</code>，输出图像高度<code>cinfo.output_height</code>，每个像素中的颜色通道数<code>cinfo.output_components</code>（比如灰度为1，全彩色为3）等。</p><p>一般情况下，这些参数是在<code>jpeg_start_decompress</code>后才被填充到<code>cinfo</code>中的，如果希望在调用<code>jpeg_start_decompress</code>之前就获得这些参数，可以通过调用<code>jpeg_calc_output_dimensions()</code>的方法来实现。</p><p>6、取数据并显示<br>解开的数据是按照行取出的，数据像素按照<code>scanline来</code>存储，<code>scanline</code>是从左到右，从上到下的顺序，每个像素对应的各颜色或灰度通道数据是依次存储。<br>比如一个24-bit RGB真彩色的图像中，一个<code>scanline</code>中的数据存储模式是R,G,B,R,G,B,R,G,B,…，每条<code>scanline</code>是一个<code>JSAMPLE</code>类型的数组，一般来说就是 <code>unsigned char</code>，定义于<code>jmorecfg.h</code>中。<br>除了<code>JSAMPLE</code>，图像还定义了<code>JSAMPROW</code>和<code>JSAMPARRAY</code>，分别表示一行<code>JSAMPLE</code>和一个2D的<code>JSAMPLE</code>数组。</p><p>在此，我定义一个<code>JSAMPARRAY(unsigned char)</code>类型的缓冲区变量<code>buffer</code>来存放图像数据。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> row_stride;</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> *buffer;</div><div class="line"></div><div class="line"><span class="comment">// 然后是计算每行需要的空间大小，比如RGB图像就是宽度×3，灰度图就是宽度×1</span></div><div class="line">row_stride = cinfo.output_width * cinfo.output_components;</div><div class="line">buffer = <span class="built_in">malloc</span>(row_stride);</div><div class="line"></div><div class="line"><span class="comment">// 循环调用jpeg_read_scanlines来一行一行地获得解压的数据</span></div><div class="line"><span class="keyword">while</span> (cinfo.output_scanline &lt; cinfo.output_height) </div><div class="line">&#123;</div><div class="line">    (<span class="keyword">void</span>) jpeg_read_scanlines(&amp;cinfo, &amp;buffer, <span class="number">1</span>);<span class="comment">//每次读取1行</span></div><div class="line"></div><div class="line">    <span class="comment">// 写到LCD去</span></div><div class="line">    fb_show_line(<span class="number">0</span>, cinfo.output_width, cinfo.output_scanline, buffer);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>然后需要实现函数<code>fb_show_line()</code>显示每行数据，要实现<code>fb_show_line()</code>还得先实现每个像素点的描绘<code>fb_show_pixel()</code>。<br>因此需要先初始化fb，获取LCD参数信息，如分辨率，多少BPP。再实现显示每个像素点，最后实现每一行的显示。</p><p><strong>初始化：</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fb_device_init</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> ret;</div><div class="line"></div><div class="line">    fd = open(FB_DEVICE_NAME, O_RDWR);</div><div class="line">    <span class="keyword">if</span> (fd &lt; <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Can't open %s\n"</span>, FB_DEVICE_NAME);</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//获取可变信息</span></div><div class="line">    ret = ioctl(fd, FBIOGET_VSCREENINFO, &amp;fb_var);</div><div class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Can't get fb's var\n"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//获取固定信息</span></div><div class="line">    ret = ioctl(fd, FBIOGET_FSCREENINFO, &amp;fb_fix);</div><div class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Can't get fb's fix\n"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//映射fb</span></div><div class="line">    screen_size = fb_var.xres * fb_var.yres * fb_var.bits_per_pixel / <span class="number">8</span>;</div><div class="line">    fb_mem = (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)mmap(<span class="literal">NULL</span> , screen_size, PROT_READ | PROT_WRITE, MAP_SHARED, fd, <span class="number">0</span>);</div><div class="line">    <span class="keyword">if</span> (fb_mem &lt; <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Can't mmap\n"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    line_width  = fb_var.xres * fb_var.bits_per_pixel / <span class="number">8</span>;</div><div class="line">    pixel_width = fb_var.bits_per_pixel / <span class="number">8</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>显示每个像素点：</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fb_show_pixel</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">unsigned</span> <span class="keyword">int</span> color)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> *fb_show;</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span> *fb_show_16bpp;</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> *fb_show_32bpp;</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span> fb_show_16bpp_new; <span class="comment">/* 565 */</span></div><div class="line"><span class="keyword">int</span> red;</div><div class="line"><span class="keyword">int</span> green;</div><div class="line"><span class="keyword">int</span> blue;</div><div class="line"></div><div class="line"><span class="keyword">if</span> ((x &gt;= fb_var.xres) || (y &gt;= fb_var.yres))</div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"Out of region\n"</span>);</div><div class="line"><span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">fb_show        = fb_mem + line_width * y + pixel_width * x;<span class="comment">//定位</span></div><div class="line">fb_show_16bpp  = (<span class="keyword">unsigned</span> <span class="keyword">short</span> *)fb_show;</div><div class="line">fb_show_32bpp  = (<span class="keyword">unsigned</span> <span class="keyword">int</span> *)fb_show;</div><div class="line"></div><div class="line"><span class="keyword">switch</span> (fb_var.bits_per_pixel)</div><div class="line">&#123;</div><div class="line"><span class="keyword">case</span> <span class="number">8</span>:</div><div class="line">&#123;</div><div class="line">*fb_show = (<span class="keyword">unsigned</span> <span class="keyword">char</span>)color;</div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">case</span> <span class="number">16</span>:</div><div class="line">&#123;</div><div class="line">red   = (color &gt;&gt; (<span class="number">16</span>+<span class="number">3</span>)) &amp; <span class="number">0x1F</span>;</div><div class="line">green = (color &gt;&gt; (<span class="number">8</span>+<span class="number">2</span>)) &amp; <span class="number">0x3F</span>;</div><div class="line">blue  = (color &gt;&gt; <span class="number">3</span>) &amp; <span class="number">0x1F</span>;</div><div class="line">fb_show_16bpp_new = (red &lt;&lt; <span class="number">11</span>) | (green &lt;&lt; <span class="number">5</span>) | blue;</div><div class="line">*fb_show_16bpp= fb_show_16bpp_new;</div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">case</span> <span class="number">32</span>:</div><div class="line">&#123;</div><div class="line">*fb_show_32bpp = color;</div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">default</span> :</div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"Can't support %d bpp\n"</span>, fb_var.bits_per_pixel);</div><div class="line"><span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>显示每行：</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fb_show_line</span><span class="params">(<span class="keyword">int</span> x_start, <span class="keyword">int</span> x_end, <span class="keyword">int</span> y, <span class="keyword">unsigned</span> <span class="keyword">char</span> *color_array)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> i = x_start * <span class="number">3</span>;</div><div class="line"><span class="keyword">int</span> x;</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> color;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (y &gt;= fb_var.yres)</div><div class="line"><span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (x_start &gt;= fb_var.xres)</div><div class="line"><span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (x_end &gt;= fb_var.xres)</div><div class="line">&#123;</div><div class="line">x_end = fb_var.xres;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (x = x_start; x &lt; x_end; x++)</div><div class="line">&#123;</div><div class="line"><span class="comment">/* 0xRRGGBB */</span></div><div class="line">color = (color_array[i]&lt;&lt;<span class="number">16</span>) + (color_array[i+<span class="number">1</span>]&lt;&lt;<span class="number">8</span>) + (color_array[i+<span class="number">2</span>]&lt;&lt;<span class="number">0</span>);</div><div class="line">i += <span class="number">3</span>;</div><div class="line">fb_show_pixel(x, y, color);</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>除此之外，每次显示前还需要清除原来的显示信息，也就是清空显示信息一次。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fb_clean_screen</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> back_color)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> *fb_show;</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span> *fb_show_16bpp;</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> *fb_show_32bpp;</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span> fb_show_16bpp_new; <span class="comment">/* 565 */</span></div><div class="line"><span class="keyword">int</span> red;</div><div class="line"><span class="keyword">int</span> green;</div><div class="line"><span class="keyword">int</span> blue;</div><div class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line"></div><div class="line">fb_show       = fb_mem;</div><div class="line">fb_show_16bpp = (<span class="keyword">unsigned</span> <span class="keyword">short</span> *)fb_show;</div><div class="line">fb_show_32bpp = (<span class="keyword">unsigned</span> <span class="keyword">int</span> *)fb_show;</div><div class="line"></div><div class="line"><span class="keyword">switch</span> (fb_var.bits_per_pixel)</div><div class="line">&#123;</div><div class="line"><span class="keyword">case</span> <span class="number">8</span>:</div><div class="line">&#123;</div><div class="line"><span class="built_in">memset</span>(fb_mem, back_color, screen_size);</div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">case</span> <span class="number">16</span>:</div><div class="line">&#123;</div><div class="line">red   = (back_color &gt;&gt; (<span class="number">16</span>+<span class="number">3</span>)) &amp; <span class="number">0x1F</span>;</div><div class="line">green = (back_color &gt;&gt; (<span class="number">8</span>+<span class="number">2</span>)) &amp; <span class="number">0x3F</span>;</div><div class="line">blue  = (back_color &gt;&gt; <span class="number">3</span>) &amp; <span class="number">0x1F</span>;</div><div class="line">fb_show_16bpp_new = (red &lt;&lt; <span class="number">11</span>) | (green &lt;&lt; <span class="number">5</span>) | blue;</div><div class="line"><span class="keyword">while</span> (i &lt; screen_size)</div><div class="line">&#123;</div><div class="line">*fb_show_16bpp= fb_show_16bpp_new;</div><div class="line">fb_show_16bpp++;</div><div class="line">i += <span class="number">2</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">case</span> <span class="number">32</span>:</div><div class="line">&#123;</div><div class="line"><span class="keyword">while</span> (i &lt; screen_size)</div><div class="line">&#123;</div><div class="line">*fb_show_32bpp= back_color;</div><div class="line">fb_show_32bpp++;</div><div class="line">i += <span class="number">4</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">default</span> :</div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"Can't support %d bpp\n"</span>, fb_var.bits_per_pixel);</div><div class="line"><span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>7、解压完毕<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jpeg_finish_decompress(&amp;cinfo);</div></pre></td></tr></table></figure></p><p>8、释放资源和退出程序<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">free</span>(buffer);</div><div class="line">jpeg_destroy_decompress(&amp;cinfo);  </div><div class="line">fclose(infile);  </div></pre></td></tr></table></figure></p><p>参考博客：<a href="http://blog.csdn.net/xipiaoyouzi/article/details/53257720" target="_blank" rel="external">libjpeg库的简单使用使用—-jpeg图片解压</a></p><h3 id="5-1-3-完整应用程序"><a href="#5-1-3-完整应用程序" class="headerlink" title="5.1.3 完整应用程序"></a>5.1.3 完整应用程序</h3><figure class="highlight c"><figcaption><span>[jpg_rgb.c]</span><a href="https://github.com/hceng/learn/blob/master/tiny4412/02_lcd_drv/libjpeg_new/jpg_rgb.c" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"jpeglib.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;setjmp.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ioctl.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/fb.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FB_DEVICE_NAME <span class="meta-string">"/dev/fb0"</span></span></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">int</span> fd;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> fb_var_screeninfo fb_var;</div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> fb_fix_screeninfo fb_fix;</div><div class="line"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> *fb_mem;</div><div class="line"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> screen_size;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> line_width;</div><div class="line"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> pixel_width;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fb_device_init</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> ret;</div><div class="line"></div><div class="line">fd = open(FB_DEVICE_NAME, O_RDWR);</div><div class="line"><span class="keyword">if</span> (fd &lt; <span class="number">0</span>)</div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"Can't open %s\n"</span>, FB_DEVICE_NAME);</div><div class="line"><span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//获取可变信息</span></div><div class="line">ret = ioctl(fd, FBIOGET_VSCREENINFO, &amp;fb_var);</div><div class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"Can't get fb's var\n"</span>);</div><div class="line"><span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//获取固定信息</span></div><div class="line">ret = ioctl(fd, FBIOGET_FSCREENINFO, &amp;fb_fix);</div><div class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"Can't get fb's fix\n"</span>);</div><div class="line"><span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//映射fb</span></div><div class="line">screen_size = fb_var.xres * fb_var.yres * fb_var.bits_per_pixel / <span class="number">8</span>;</div><div class="line">fb_mem = (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)mmap(<span class="literal">NULL</span> , screen_size, PROT_READ | PROT_WRITE, MAP_SHARED, fd, <span class="number">0</span>);</div><div class="line"><span class="keyword">if</span> (fb_mem &lt; <span class="number">0</span>)</div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"Can't mmap\n"</span>);</div><div class="line"><span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">line_width  = fb_var.xres * fb_var.bits_per_pixel / <span class="number">8</span>;</div><div class="line">pixel_width = fb_var.bits_per_pixel / <span class="number">8</span>;</div><div class="line"></div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//color:0x00RRGGBB</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fb_show_pixel</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">unsigned</span> <span class="keyword">int</span> color)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> *fb_show;</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span> *fb_show_16bpp;</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> *fb_show_32bpp;</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span> fb_show_16bpp_new; <span class="comment">/* 565 */</span></div><div class="line"><span class="keyword">int</span> red;</div><div class="line"><span class="keyword">int</span> green;</div><div class="line"><span class="keyword">int</span> blue;</div><div class="line"></div><div class="line"><span class="keyword">if</span> ((x &gt;= fb_var.xres) || (y &gt;= fb_var.yres))</div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"Out of region\n"</span>);</div><div class="line"><span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">fb_show        = fb_mem + line_width * y + pixel_width * x;<span class="comment">//定位</span></div><div class="line">fb_show_16bpp  = (<span class="keyword">unsigned</span> <span class="keyword">short</span> *)fb_show;</div><div class="line">fb_show_32bpp  = (<span class="keyword">unsigned</span> <span class="keyword">int</span> *)fb_show;</div><div class="line"></div><div class="line"><span class="keyword">switch</span> (fb_var.bits_per_pixel)</div><div class="line">&#123;</div><div class="line"><span class="keyword">case</span> <span class="number">8</span>:</div><div class="line">&#123;</div><div class="line">*fb_show = (<span class="keyword">unsigned</span> <span class="keyword">char</span>)color;</div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">case</span> <span class="number">16</span>:</div><div class="line">&#123;</div><div class="line">red   = (color &gt;&gt; (<span class="number">16</span>+<span class="number">3</span>)) &amp; <span class="number">0x1F</span>;</div><div class="line">green = (color &gt;&gt; (<span class="number">8</span>+<span class="number">2</span>)) &amp; <span class="number">0x3F</span>;</div><div class="line">blue  = (color &gt;&gt; <span class="number">3</span>) &amp; <span class="number">0x1F</span>;</div><div class="line">fb_show_16bpp_new = (red &lt;&lt; <span class="number">11</span>) | (green &lt;&lt; <span class="number">5</span>) | blue;</div><div class="line">*fb_show_16bpp= fb_show_16bpp_new;</div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">case</span> <span class="number">32</span>:</div><div class="line">&#123;</div><div class="line">*fb_show_32bpp = color;</div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">default</span> :</div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"Can't support %d bpp\n"</span>, fb_var.bits_per_pixel);</div><div class="line"><span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fb_clean_screen</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> back_color)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> *fb_show;</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span> *fb_show_16bpp;</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> *fb_show_32bpp;</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span> fb_show_16bpp_new; <span class="comment">/* 565 */</span></div><div class="line"><span class="keyword">int</span> red;</div><div class="line"><span class="keyword">int</span> green;</div><div class="line"><span class="keyword">int</span> blue;</div><div class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line"></div><div class="line">fb_show       = fb_mem;</div><div class="line">fb_show_16bpp = (<span class="keyword">unsigned</span> <span class="keyword">short</span> *)fb_show;</div><div class="line">fb_show_32bpp = (<span class="keyword">unsigned</span> <span class="keyword">int</span> *)fb_show;</div><div class="line"></div><div class="line"><span class="keyword">switch</span> (fb_var.bits_per_pixel)</div><div class="line">&#123;</div><div class="line"><span class="keyword">case</span> <span class="number">8</span>:</div><div class="line">&#123;</div><div class="line"><span class="built_in">memset</span>(fb_mem, back_color, screen_size);</div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">case</span> <span class="number">16</span>:</div><div class="line">&#123;</div><div class="line">red   = (back_color &gt;&gt; (<span class="number">16</span>+<span class="number">3</span>)) &amp; <span class="number">0x1F</span>;</div><div class="line">green = (back_color &gt;&gt; (<span class="number">8</span>+<span class="number">2</span>)) &amp; <span class="number">0x3F</span>;</div><div class="line">blue  = (back_color &gt;&gt; <span class="number">3</span>) &amp; <span class="number">0x1F</span>;</div><div class="line">fb_show_16bpp_new = (red &lt;&lt; <span class="number">11</span>) | (green &lt;&lt; <span class="number">5</span>) | blue;</div><div class="line"><span class="keyword">while</span> (i &lt; screen_size)</div><div class="line">&#123;</div><div class="line">*fb_show_16bpp= fb_show_16bpp_new;</div><div class="line">fb_show_16bpp++;</div><div class="line">i += <span class="number">2</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">case</span> <span class="number">32</span>:</div><div class="line">&#123;</div><div class="line"><span class="keyword">while</span> (i &lt; screen_size)</div><div class="line">&#123;</div><div class="line">*fb_show_32bpp= back_color;</div><div class="line">fb_show_32bpp++;</div><div class="line">i += <span class="number">4</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">default</span> :</div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"Can't support %d bpp\n"</span>, fb_var.bits_per_pixel);</div><div class="line"><span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fb_show_line</span><span class="params">(<span class="keyword">int</span> x_start, <span class="keyword">int</span> x_end, <span class="keyword">int</span> y, <span class="keyword">unsigned</span> <span class="keyword">char</span> *color_array)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> i = x_start * <span class="number">3</span>;</div><div class="line"><span class="keyword">int</span> x;</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> color;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (y &gt;= fb_var.yres)</div><div class="line"><span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (x_start &gt;= fb_var.xres)</div><div class="line"><span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (x_end &gt;= fb_var.xres)</div><div class="line">&#123;</div><div class="line">x_end = fb_var.xres;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (x = x_start; x &lt; x_end; x++)</div><div class="line">&#123;</div><div class="line"><span class="comment">/* 0xRRGGBB */</span></div><div class="line">color = (color_array[i]&lt;&lt;<span class="number">16</span>) + (color_array[i+<span class="number">1</span>]&lt;&lt;<span class="number">8</span>) + (color_array[i+<span class="number">2</span>]&lt;&lt;<span class="number">0</span>);</div><div class="line">i += <span class="number">3</span>;</div><div class="line">fb_show_pixel(x, y, color);</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/* </span></div><div class="line"> * Uage: jpg_rgb &lt;jpg_file&gt;</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></div><div class="line">&#123;</div><div class="line"><span class="comment">//1、分配jpeg对象结构体空间、并初始化</span></div><div class="line"><span class="keyword">struct</span> jpeg_decompress_struct cinfo;</div><div class="line"><span class="keyword">struct</span> jpeg_error_mgr jerr;</div><div class="line">FILE * infile;</div><div class="line"><span class="keyword">int</span> row_stride;</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> *buffer;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (argc != <span class="number">2</span>)</div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"Usage: \n"</span>);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%s &lt;jpg_file&gt;\n"</span>, argv[<span class="number">0</span>]);</div><div class="line"><span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (fb_device_init())</div><div class="line">&#123;</div><div class="line"><span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">fb_clean_screen(<span class="number">0</span>);</div><div class="line"></div><div class="line"><span class="comment">//绑定jerr错误结构体至jpeg对象结构体</span></div><div class="line">cinfo.err = jpeg_std_error(&amp;jerr);</div><div class="line"><span class="comment">//初始化cinfo结构体</span></div><div class="line">jpeg_create_decompress(&amp;cinfo);</div><div class="line"></div><div class="line"><span class="comment">//2、指定解压数据源</span></div><div class="line"><span class="keyword">if</span> ((infile = fopen(argv[<span class="number">1</span>], <span class="string">"rb"</span>)) == <span class="literal">NULL</span>) &#123;</div><div class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"can't open %s\n"</span>, argv[<span class="number">1</span>]);</div><div class="line"><span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line">jpeg_stdio_src(&amp;cinfo, infile);</div><div class="line"></div><div class="line"><span class="comment">//3、获取解压文件信息</span></div><div class="line">jpeg_read_header(&amp;cinfo, TRUE);</div><div class="line"><span class="comment">/* 源信息 */</span></div><div class="line"><span class="built_in">printf</span>(<span class="string">"image_width = %d\n"</span>, cinfo.image_width);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"image_height = %d\n"</span>, cinfo.image_height);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"num_components = %d\n"</span>, cinfo.num_components);</div><div class="line"></div><div class="line"><span class="comment">//4、为解压设定参数，包括图像大小和颜色空间</span></div><div class="line"><span class="built_in">printf</span>(<span class="string">"enter scale M/N:\n"</span>);</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%d/%d"</span>, &amp;cinfo.scale_num, &amp;cinfo.scale_denom);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"scale to : %d/%d\n"</span>, cinfo.scale_num, cinfo.scale_denom);</div><div class="line"></div><div class="line"><span class="comment">//5、开始解压缩</span></div><div class="line">jpeg_start_decompress(&amp;cinfo);</div><div class="line"></div><div class="line"><span class="comment">/* 输出的图象的信息 */</span></div><div class="line"><span class="built_in">printf</span>(<span class="string">"output_width = %d\n"</span>, cinfo.output_width);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"output_height = %d\n"</span>, cinfo.output_height);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"output_components = %d\n"</span>, cinfo.output_components);</div><div class="line"></div><div class="line"><span class="comment">//6、取数据并显示</span></div><div class="line"><span class="comment">//一行的数据长度</span></div><div class="line">row_stride = cinfo.output_width * cinfo.output_components;</div><div class="line">buffer = <span class="built_in">malloc</span>(row_stride);</div><div class="line"></div><div class="line"><span class="comment">// 循环调用jpeg_read_scanlines来一行一行地获得解压的数据</span></div><div class="line"><span class="keyword">while</span> (cinfo.output_scanline &lt; cinfo.output_height) </div><div class="line">&#123;</div><div class="line">(<span class="keyword">void</span>) jpeg_read_scanlines(&amp;cinfo, &amp;buffer, <span class="number">1</span>);</div><div class="line"></div><div class="line"><span class="comment">// 写到LCD去</span></div><div class="line">fb_show_line(<span class="number">0</span>, cinfo.output_width, cinfo.output_scanline, buffer);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//7、解压完毕</span></div><div class="line">jpeg_finish_decompress(&amp;cinfo);</div><div class="line"><span class="comment">//8、释放资源和退出程序</span></div><div class="line"><span class="built_in">free</span>(buffer);</div><div class="line">jpeg_destroy_decompress(&amp;cinfo);</div><div class="line"></div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="5-1-4-交叉编译应用程序"><a href="#5-1-4-交叉编译应用程序" class="headerlink" title="5.1.4 交叉编译应用程序"></a>5.1.4 交叉编译应用程序</h3><p><strong>方法一：</strong><br><code>jpg_rgb.c</code>要想在开发板上运行，就得先交叉编译，里面用到了一非系统的头文件和函数，因此还需要指定头文件和库路径。<br><code>-I</code>:指定头文件路径<br><code>-L</code>:指定库路径<br><code>-i</code>:指定具体哪个库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">arm-none-linux-gnueabi-gcc -o jpg_rgb jpg_rgb.c \</div><div class="line">-I /work/drv/2_lcd/libjpeg_new/libjpeg-turbo-1.5.3/tmp/include \</div><div class="line">-L /work/drv/2_lcd/libjpeg_new/libjpeg-turbo-1.5.3/tmp/lib \</div><div class="line">-ljpeg</div></pre></td></tr></table></figure></p><p><strong>方法二：</strong><br>前面的方法，每次编译都要指定一堆路径，比较麻烦，解决方法是将头文件和库复制到交叉编译工具链所在的路径：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">//拷贝头文件</div><div class="line">cd /work/drv/2_lcd/show_jpeg/libjpeg-turbo-1.5.3/tmp/include/</div><div class="line">cp * /work/arm-2014.05/arm-none-linux-gnueabi/libc/usr/include</div><div class="line"></div><div class="line">//拷贝库</div><div class="line">cd /work/drv/2_lcd/show_jpeg/libjpeg-turbo-1.5.3/tmp/lib/</div><div class="line">cp * /work/arm-2014.05/arm-none-linux-gnueabi/libc/lib</div><div class="line"></div><div class="line">//编译</div><div class="line">arm-none-linux-gnueabi-gcc  -o jpg_rgb jpg_rgb.c -ljpeg</div></pre></td></tr></table></figure></p><h3 id="5-1-5-运行应用程序"><a href="#5-1-5-运行应用程序" class="headerlink" title="5.1.5 运行应用程序"></a>5.1.5 运行应用程序</h3><p>a. 先把应用程序和动态库拷贝到开发板上：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cp jpg_rgb /work/nfs_rootfs/</div><div class="line">cp libjpeg-turbo-1.5.3/tmp/lib/*so* /work/nfs_rootfs/lib/ -d</div></pre></td></tr></table></figure></p><p>b. 加载背光和LCD驱动：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">insmod backlight_drv.ko</div><div class="line">insmod lcd_drv.ko</div></pre></td></tr></table></figure></p><p>c. 开启背光：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./app 200</div></pre></td></tr></table></figure></p><p>d. 运行应用程序：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./jpg_rgb cq.jpg</div></pre></td></tr></table></figure></p><h3 id="5-1-6-实际效果"><a href="#5-1-6-实际效果" class="headerlink" title="5.1.6 实际效果"></a>5.1.6 实际效果</h3><p><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/171201/1221_1.jpg" alt=""></p><h2 id="5-2移除左上角光标"><a href="#5-2移除左上角光标" class="headerlink" title="5.2移除左上角光标"></a>5.2移除左上角光标</h2><p>现在已经实现了图片的显示，仔细观察，发现左上角有个小光标一直在闪烁。<br>查阅了<a href="http://blog.csdn.net/PengPengQian/article/details/49250089" target="_blank" rel="external">相关资料</a>，解决方案如下:</p><p>修改Linux内核中的文件：<code>drivers/video/console/fbcon.c</code></p><ul><li><p>去掉光标闪烁：<br>将函数<code>static void fbcon_cursor(struct vc_data *vc, int mode)</code>改为空函数即可。</p></li><li><p>去掉光标显示：<br>将函数<code>static void fb_flashcursor(struct work_struct *work)</code> 改为空函数即可。</p></li></ul><p>再重新编译、烧写内核。</p><h1 id="6-总结"><a href="#6-总结" class="headerlink" title="6.总结"></a>6.总结</h1><p><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/171201/1221_2.jpg" alt=""></p><p align="center">Beautiful Chongqing.</p><p>总算搞完了LCD，真累。<br>拖拖拉拉了差不多一个月。<br>对LCD这块，不管是基础知识、驱动还是应用程序，都有了一个新的认识，也除去了LCD这块拦路虎的“心结”，有信心去迎接更复杂的模块。</p><p>后续的话，搞定电容屏驱动，就可以考虑学习下摄像头驱动了。</p><hr><p><div align="center"><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本文采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href="http://hceng.cn/" target="_blank" rel="external">hceng’s blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Exynos4412的LCD驱动。&lt;br&gt;
    
    </summary>
    
    
      <category term="Linux驱动" scheme="http://yoursite.com/tags/Linux%E9%A9%B1%E5%8A%A8/"/>
    
      <category term="Exynos4412" scheme="http://yoursite.com/tags/Exynos4412/"/>
    
      <category term="LCD" scheme="http://yoursite.com/tags/LCD/"/>
    
  </entry>
  
  <entry>
    <title>Exynos4412——LCD之backligth</title>
    <link href="http://yoursite.com/2017/11/22/Exynos4412%E2%80%94%E2%80%94LCD%E4%B9%8Bbackligth/"/>
    <id>http://yoursite.com/2017/11/22/Exynos4412——LCD之backligth/</id>
    <published>2017-11-22T11:27:44.000Z</published>
    <updated>2018-02-23T02:49:26.275Z</updated>
    
    <content type="html"><![CDATA[<p>Exynos4412的背光驱动，采用友善之臂的“一线触摸”。<br><a id="more"></a></p><h1 id="1-背景"><a href="#1-背景" class="headerlink" title="1.背景"></a>1.背景</h1><blockquote><p>关于一线触摸友善之臂官方说明：<a href="LCD-S702/zh" title="http://wiki.friendlyarm.com/wiki/index.php/LCD-S702/zh">LCD-S702/zh</a></p><ul><li>在大部分的ARM主控板中，我们发现，直接使用CPU自带的ADC转换器并不能很好的支持大尺寸(7寸以上)的四线电阻触摸屏，市面上一般采用更加专业的USB或串口触摸屏扩展模块来解决。为了节省ARM主控芯片的有限资源以及减少外扩，我们专门开发了只使用一个普通GPIO就可以实现专业触摸效果的替代方案，并把它集成到我们的LCD模块驱动板中，我们称之为“一线触摸(1-Wire)”。它的基本原理是，使用一个低成本的MCU连接一个专业的触控芯片(在此我们使用的是ADS7843或兼容芯片)，采集并处理四线电阻模拟信号，并把滤波(未校准)后的稳定原始数据通过GPIO送给ARM主控，经我们长期反复测试，即使在19寸这样大的电阻触摸屏上，也可以实现非常精准的触摸效果，不会出现漂移抖动的现象。</li><li>另外，当今12寸以内的LCD显示屏，大都采用了LED背光，我们顺便也把背光调节部分也交给MCU来处理，并设置了统一的调节数值区间，最后通过“一线触摸”的GPIO传给ARM主控，这样在ARM端就可以非常方便的来设置背光了。</li><li>与此同时，我们还为我们设计开发的每一款带“一线触摸”的LCD模块设置了编号存储在MCU中，这样通过一线通讯读取到的编号，就可以知道这个LCD模块的具体类型了，也就可以在bootloader和内核中自动匹配相应的LCD驱动参数，以此来实现无需修改任何配置，即插即用带”一线触摸”的LCD模块。</li><li>在电容触摸LCD模块中，我们则去掉了电阻触控芯片，而保留了背光调节和存储LCD类型编号这2个功能，因此电容触摸通讯依然是标准的I2C接口。</li><li>需要注意的是，我们实现的“一线触摸”的通讯，和通常所说的单总线接口是不同的。在ARM主控端内部，我们实际采用了一路pwm timer(不是pwm管脚哦)来实现固定的通讯频率(9600Hz)，详细请查看驱动源代码。</li></ul></blockquote><p>也就是说友善之臂为了改善<strong>大尺寸四线电阻触摸屏</strong>的性能，外加了一个低成本的MCU去控制专业的触控芯片，将滤波后的稳定数据通过GPIO传回到ARM上。这是和触摸屏相关的，本次不深究，而且我的板子LCD是电容屏，以上的改进几乎不关我的事。<br>但，他们把背光调节部分也交给了那个低成本MCU来处理，并通过“一线触摸”来控制，这就坑了。记得以前的都是ARM的一个PWM引脚就完成LCD的背光的控制，现在由于硬件上并不能直接PWM控制，不得不采用“一线触摸”。</p><h1 id="2-原理图"><a href="#2-原理图" class="headerlink" title="2.原理图"></a>2.原理图</h1><ul><li>Tiny4412SDK-1506-Schematic.pdf：<br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/171122/1.png" alt=""></li><li>Tiny4412-1412-Schematic.pdf：<br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/171122/2.png" alt=""><br>Exynos4412的GPX1_2与LCD相连，作为“一线触摸”引脚，也就是背光控制引脚。</li></ul><h1 id="3-设备树文件"><a href="#3-设备树文件" class="headerlink" title="3.设备树文件"></a>3.设备树文件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">--- exynos4412-tiny4412.dts     2017-11-22 01:43:28.922397104 -0800</div><div class="line">+++ linux-4.13.9/arch/arm/boot/dts/exynos4412-tiny4412.dts      2017-11-22 01:42:47.459525364 -0800</div><div class="line">@@ -91,6 +91,18 @@</div><div class="line">                        clock-frequency = &lt;24000000&gt;;</div><div class="line">                &#125;;</div><div class="line">        &#125;;</div><div class="line">+</div><div class="line">+       backlight@139D0000&#123;</div><div class="line">+               compatible = &quot;tiny4412,backlight&quot;;</div><div class="line">+               reg = &lt;0x139D0000  0x14&gt;;</div><div class="line">+               tiny4412,backlight = &lt;&amp;gpx1 2 GPIO_ACTIVE_HIGH&gt;;</div><div class="line">+               pinctrl-names = &quot;backlight_out&quot;,&quot;backlight_in&quot;;</div><div class="line">+               pinctrl-0 = &lt;&amp;backlight_out&gt;;</div><div class="line">+               pinctrl-1 = &lt;&amp;backlight_in&gt;;</div><div class="line">+               interrupts = &lt;0 40 0&gt;;</div><div class="line">+               clocks = &lt;&amp;clock CLK_PWM&gt;;</div><div class="line">+               clock-names = &quot;timers&quot;;</div><div class="line">+        &#125;;</div><div class="line"> &#125;;</div><div class="line"></div><div class="line"> &amp;rtc &#123;</div><div class="line">@@ -151,4 +163,21 @@</div><div class="line"> &#125;;</div><div class="line"></div><div class="line"></div><div class="line">+&amp;pinctrl_1 &#123;</div><div class="line">+        backlight_out: backlight_out&#123;</div><div class="line">+                samsung,pins = &quot;gpx1-2&quot;;</div><div class="line">+                samsung,pin-function = &lt;1&gt;;</div><div class="line">+                samsung,pin-pud = &lt;0&gt;;</div><div class="line">+                samsung,pin-drv = &lt;0&gt;;</div><div class="line">+        &#125;;</div><div class="line">+         backlight_in: backlight_in&#123;</div><div class="line">+                samsung,pins = &quot;gpx1-2&quot;;</div><div class="line">+                samsung,pin-function = &lt;0&gt;;</div><div class="line">+                samsung,pin-pud = &lt;0&gt;;</div><div class="line">+                samsung,pin-drv = &lt;0&gt;;</div><div class="line">+        &#125;;</div><div class="line">+&#125;;</div></pre></td></tr></table></figure><p>本来想认真分析的，真分析起来，发现没什么看的，0x139D0000是PWMer定时器的基地址，还将gpx1_2设置成了两种模式：backlight_out（输出引脚）和backlight_in（输入引脚）。<br>这里为什么要用到定时器，不是很明白，文末的第二个博客说“<em>开发板和 CPLD 通讯使用了特殊的协议，设置一次背光值，需要读写 IO 多次，因此，需要使用定时器功能</em>”，但看原理图感觉和CPLD(EPM240T100)关系不是很大。<br>以上就是设备树文件的一些设置，后续驱动会用到。</p><h1 id="4-驱动简析"><a href="#4-驱动简析" class="headerlink" title="4.驱动简析"></a>4.驱动简析</h1><p>驱动完整代码如下：<br><figure class="highlight c"><figcaption><span>[backlight_drv.c]</span><a href="https://github.com/hceng/learn/blob/master/tiny4412/01_backlight_drv/backlight_drv.c" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/cdev.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/device.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/uaccess.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/uaccess.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/platform_device.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/gpio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/of.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/of_gpio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/fs.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/bitops.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/clk.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/export.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/err.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/io.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/pwm.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/slab.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/spinlock.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/time.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/interrupt.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/delay.h&gt;</span></span></div><div class="line"><span class="comment">/*</span></div><div class="line">    PWM 时钟频率 100M</div><div class="line">    100M / 250 / 4 = 100000</div><div class="line">    1/100000 = 10us</div><div class="line">*/</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">int</span>              major;</div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span>   cdev    backlight_cdev;</div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span>   <span class="keyword">class</span>   *cls;</div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> pinctrl   *pctrl;</div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> pinctrl_state *pstate_in;</div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> pinctrl_state *pstate_out;</div><div class="line"><span class="keyword">static</span> <span class="keyword">int</span>              one_write_pin;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> TIMER_BASE</div><div class="line">&#123;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> TCFG0;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> TCFG1;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> TCON;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> TCNTB0;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> TCMPB0;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> TCNTO0;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> TCNTB1;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> TCMPB1;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> TCNTO1;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> TCNTB2;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> TCMPB2;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> TCNTO2;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> TCNTB3;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> TCMPB3;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> TCNTO3;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> TCNTB4;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> TCBTO4;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> TINT_CSTAT;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">volatile</span> <span class="keyword">static</span> <span class="keyword">struct</span> TIMER_BASE *timer = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> io_bit_count;</div><div class="line"><span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> io_data;</div><div class="line"></div><div class="line"><span class="keyword">enum</span></div><div class="line">&#123;</div><div class="line">    IDLE,</div><div class="line">    START,</div><div class="line">    REQUEST,</div><div class="line">    WAITING,</div><div class="line">    RESPONSE,</div><div class="line">    STOPING,</div><div class="line">&#125; one_wire_status = IDLE;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">stop_timer_for_1wire</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> tcon;</div><div class="line">    tcon = timer-&gt;TCON;</div><div class="line">    tcon &amp;= ~(<span class="number">1</span> &lt;&lt; <span class="number">16</span>);</div><div class="line">    timer-&gt;TCON = tcon;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> irqreturn_t <span class="title">timer_for_1wire_interrupt</span><span class="params">(<span class="keyword">int</span> irq, <span class="keyword">void</span> *dev_id)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> tint;</div><div class="line">    tint = timer-&gt;TINT_CSTAT;</div><div class="line">    tint |= <span class="number">0x100</span>;</div><div class="line">    timer-&gt;TINT_CSTAT = tint;</div><div class="line">    <span class="comment">//printk("timer_for_1wire_interrupt\n");</span></div><div class="line">    io_bit_count--;</div><div class="line"></div><div class="line">    <span class="keyword">switch</span> (one_wire_status)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">case</span> START:</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (io_bit_count == <span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">                io_bit_count = <span class="number">16</span>;</div><div class="line">                one_wire_status = REQUEST;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> REQUEST:</div><div class="line">            gpio_set_value(one_write_pin, io_data &amp; (<span class="number">1U</span> &lt;&lt; <span class="number">31</span>));</div><div class="line">            io_data &lt;&lt;= <span class="number">1</span>;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (io_bit_count == <span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">                io_bit_count = <span class="number">2</span>;</div><div class="line">                one_wire_status = WAITING;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> WAITING:</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (io_bit_count == <span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">                io_bit_count = <span class="number">32</span>;</div><div class="line">                one_wire_status = RESPONSE;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (io_bit_count == <span class="number">1</span>)</div><div class="line">            &#123;</div><div class="line">                pinctrl_select_state(pctrl, pstate_in);</div><div class="line">                gpio_set_value(one_write_pin, <span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> RESPONSE:</div><div class="line">            io_data = (io_data &lt;&lt; <span class="number">1</span>) | gpio_get_value(one_write_pin);</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (io_bit_count == <span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">                io_bit_count = <span class="number">2</span>;</div><div class="line">                one_wire_status = STOPING;</div><div class="line">                gpio_set_value(one_write_pin, <span class="number">1</span>);</div><div class="line">                pinctrl_select_state(pctrl, pstate_out);</div><div class="line">                <span class="comment">//one_wire_session_complete(one_wire_request, io_data);</span></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> STOPING:</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (io_bit_count == <span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">                one_wire_status = IDLE;</div><div class="line">                stop_timer_for_1wire();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            stop_timer_for_1wire();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> IRQ_HANDLED;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> crc8_tab[] =</div><div class="line">&#123;</div><div class="line">    <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x0E</span>, <span class="number">0x09</span>, <span class="number">0x1C</span>, <span class="number">0x1B</span>, <span class="number">0x12</span>, <span class="number">0x15</span>,</div><div class="line">    <span class="number">0x38</span>, <span class="number">0x3F</span>, <span class="number">0x36</span>, <span class="number">0x31</span>, <span class="number">0x24</span>, <span class="number">0x23</span>, <span class="number">0x2A</span>, <span class="number">0x2D</span>,</div><div class="line">    <span class="number">0x70</span>, <span class="number">0x77</span>, <span class="number">0x7E</span>, <span class="number">0x79</span>, <span class="number">0x6C</span>, <span class="number">0x6B</span>, <span class="number">0x62</span>, <span class="number">0x65</span>,</div><div class="line">    <span class="number">0x48</span>, <span class="number">0x4F</span>, <span class="number">0x46</span>, <span class="number">0x41</span>, <span class="number">0x54</span>, <span class="number">0x53</span>, <span class="number">0x5A</span>, <span class="number">0x5D</span>,</div><div class="line">    <span class="number">0xE0</span>, <span class="number">0xE7</span>, <span class="number">0xEE</span>, <span class="number">0xE9</span>, <span class="number">0xFC</span>, <span class="number">0xFB</span>, <span class="number">0xF2</span>, <span class="number">0xF5</span>,</div><div class="line">    <span class="number">0xD8</span>, <span class="number">0xDF</span>, <span class="number">0xD6</span>, <span class="number">0xD1</span>, <span class="number">0xC4</span>, <span class="number">0xC3</span>, <span class="number">0xCA</span>, <span class="number">0xCD</span>,</div><div class="line">    <span class="number">0x90</span>, <span class="number">0x97</span>, <span class="number">0x9E</span>, <span class="number">0x99</span>, <span class="number">0x8C</span>, <span class="number">0x8B</span>, <span class="number">0x82</span>, <span class="number">0x85</span>,</div><div class="line">    <span class="number">0xA8</span>, <span class="number">0xAF</span>, <span class="number">0xA6</span>, <span class="number">0xA1</span>, <span class="number">0xB4</span>, <span class="number">0xB3</span>, <span class="number">0xBA</span>, <span class="number">0xBD</span>,</div><div class="line">    <span class="number">0xC7</span>, <span class="number">0xC0</span>, <span class="number">0xC9</span>, <span class="number">0xCE</span>, <span class="number">0xDB</span>, <span class="number">0xDC</span>, <span class="number">0xD5</span>, <span class="number">0xD2</span>,</div><div class="line">    <span class="number">0xFF</span>, <span class="number">0xF8</span>, <span class="number">0xF1</span>, <span class="number">0xF6</span>, <span class="number">0xE3</span>, <span class="number">0xE4</span>, <span class="number">0xED</span>, <span class="number">0xEA</span>,</div><div class="line">    <span class="number">0xB7</span>, <span class="number">0xB0</span>, <span class="number">0xB9</span>, <span class="number">0xBE</span>, <span class="number">0xAB</span>, <span class="number">0xAC</span>, <span class="number">0xA5</span>, <span class="number">0xA2</span>,</div><div class="line">    <span class="number">0x8F</span>, <span class="number">0x88</span>, <span class="number">0x81</span>, <span class="number">0x86</span>, <span class="number">0x93</span>, <span class="number">0x94</span>, <span class="number">0x9D</span>, <span class="number">0x9A</span>,</div><div class="line">    <span class="number">0x27</span>, <span class="number">0x20</span>, <span class="number">0x29</span>, <span class="number">0x2E</span>, <span class="number">0x3B</span>, <span class="number">0x3C</span>, <span class="number">0x35</span>, <span class="number">0x32</span>,</div><div class="line">    <span class="number">0x1F</span>, <span class="number">0x18</span>, <span class="number">0x11</span>, <span class="number">0x16</span>, <span class="number">0x03</span>, <span class="number">0x04</span>, <span class="number">0x0D</span>, <span class="number">0x0A</span>,</div><div class="line">    <span class="number">0x57</span>, <span class="number">0x50</span>, <span class="number">0x59</span>, <span class="number">0x5E</span>, <span class="number">0x4B</span>, <span class="number">0x4C</span>, <span class="number">0x45</span>, <span class="number">0x42</span>,</div><div class="line">    <span class="number">0x6F</span>, <span class="number">0x68</span>, <span class="number">0x61</span>, <span class="number">0x66</span>, <span class="number">0x73</span>, <span class="number">0x74</span>, <span class="number">0x7D</span>, <span class="number">0x7A</span>,</div><div class="line">    <span class="number">0x89</span>, <span class="number">0x8E</span>, <span class="number">0x87</span>, <span class="number">0x80</span>, <span class="number">0x95</span>, <span class="number">0x92</span>, <span class="number">0x9B</span>, <span class="number">0x9C</span>,</div><div class="line">    <span class="number">0xB1</span>, <span class="number">0xB6</span>, <span class="number">0xBF</span>, <span class="number">0xB8</span>, <span class="number">0xAD</span>, <span class="number">0xAA</span>, <span class="number">0xA3</span>, <span class="number">0xA4</span>,</div><div class="line">    <span class="number">0xF9</span>, <span class="number">0xFE</span>, <span class="number">0xF7</span>, <span class="number">0xF0</span>, <span class="number">0xE5</span>, <span class="number">0xE2</span>, <span class="number">0xEB</span>, <span class="number">0xEC</span>,</div><div class="line">    <span class="number">0xC1</span>, <span class="number">0xC6</span>, <span class="number">0xCF</span>, <span class="number">0xC8</span>, <span class="number">0xDD</span>, <span class="number">0xDA</span>, <span class="number">0xD3</span>, <span class="number">0xD4</span>,</div><div class="line">    <span class="number">0x69</span>, <span class="number">0x6E</span>, <span class="number">0x67</span>, <span class="number">0x60</span>, <span class="number">0x75</span>, <span class="number">0x72</span>, <span class="number">0x7B</span>, <span class="number">0x7C</span>,</div><div class="line">    <span class="number">0x51</span>, <span class="number">0x56</span>, <span class="number">0x5F</span>, <span class="number">0x58</span>, <span class="number">0x4D</span>, <span class="number">0x4A</span>, <span class="number">0x43</span>, <span class="number">0x44</span>,</div><div class="line">    <span class="number">0x19</span>, <span class="number">0x1E</span>, <span class="number">0x17</span>, <span class="number">0x10</span>, <span class="number">0x05</span>, <span class="number">0x02</span>, <span class="number">0x0B</span>, <span class="number">0x0C</span>,</div><div class="line">    <span class="number">0x21</span>, <span class="number">0x26</span>, <span class="number">0x2F</span>, <span class="number">0x28</span>, <span class="number">0x3D</span>, <span class="number">0x3A</span>, <span class="number">0x33</span>, <span class="number">0x34</span>,</div><div class="line">    <span class="number">0x4E</span>, <span class="number">0x49</span>, <span class="number">0x40</span>, <span class="number">0x47</span>, <span class="number">0x52</span>, <span class="number">0x55</span>, <span class="number">0x5C</span>, <span class="number">0x5B</span>,</div><div class="line">    <span class="number">0x76</span>, <span class="number">0x71</span>, <span class="number">0x78</span>, <span class="number">0x7F</span>, <span class="number">0x6A</span>, <span class="number">0x6D</span>, <span class="number">0x64</span>, <span class="number">0x63</span>,</div><div class="line">    <span class="number">0x3E</span>, <span class="number">0x39</span>, <span class="number">0x30</span>, <span class="number">0x37</span>, <span class="number">0x22</span>, <span class="number">0x25</span>, <span class="number">0x2C</span>, <span class="number">0x2B</span>,</div><div class="line">    <span class="number">0x06</span>, <span class="number">0x01</span>, <span class="number">0x08</span>, <span class="number">0x0F</span>, <span class="number">0x1A</span>, <span class="number">0x1D</span>, <span class="number">0x14</span>, <span class="number">0x13</span>,</div><div class="line">    <span class="number">0xAE</span>, <span class="number">0xA9</span>, <span class="number">0xA0</span>, <span class="number">0xA7</span>, <span class="number">0xB2</span>, <span class="number">0xB5</span>, <span class="number">0xBC</span>, <span class="number">0xBB</span>,</div><div class="line">    <span class="number">0x96</span>, <span class="number">0x91</span>, <span class="number">0x98</span>, <span class="number">0x9F</span>, <span class="number">0x8A</span>, <span class="number">0x8D</span>, <span class="number">0x84</span>, <span class="number">0x83</span>,</div><div class="line">    <span class="number">0xDE</span>, <span class="number">0xD9</span>, <span class="number">0xD0</span>, <span class="number">0xD7</span>, <span class="number">0xC2</span>, <span class="number">0xC5</span>, <span class="number">0xCC</span>, <span class="number">0xCB</span>,</div><div class="line">    <span class="number">0xE6</span>, <span class="number">0xE1</span>, <span class="number">0xE8</span>, <span class="number">0xEF</span>, <span class="number">0xFA</span>, <span class="number">0xFD</span>, <span class="number">0xF4</span>, <span class="number">0xF3</span>,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> crc8_init(crc) ((crc) = 0XACU)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> crc8(crc, v) ( (crc) = crc8_tab[(crc) ^(v)])</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">start_one_wire_session</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> req)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> tcon;</div><div class="line">    printk(<span class="string">"backlight_write\n"</span>);</div><div class="line">    one_wire_status = START;</div><div class="line">    gpio_set_value(one_write_pin, <span class="number">1</span>);</div><div class="line">    pinctrl_select_state(pctrl, pstate_out);</div><div class="line">    <span class="comment">// IDLE to START</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">unsigned</span> <span class="keyword">char</span> crc;</div><div class="line">        crc8_init(crc);</div><div class="line">        crc8(crc, req);</div><div class="line">        io_data = (req &lt;&lt; <span class="number">8</span>) + crc;</div><div class="line">        io_data &lt;&lt;= <span class="number">16</span>;</div><div class="line">    &#125;</div><div class="line">    io_bit_count = <span class="number">1</span>;</div><div class="line">    pinctrl_select_state(pctrl, pstate_out);</div><div class="line">    timer-&gt;TCNTB3 = <span class="number">650</span>;</div><div class="line">    <span class="comment">//init tranfer and start timer</span></div><div class="line">    tcon = timer-&gt;TCON;</div><div class="line">    tcon &amp;= ~(<span class="number">0xF</span> &lt;&lt; <span class="number">16</span>);</div><div class="line">    tcon |= (<span class="number">1</span> &lt;&lt; <span class="number">17</span>);</div><div class="line">    timer-&gt;TCON = tcon;</div><div class="line">    tcon |= (<span class="number">1</span> &lt;&lt; <span class="number">16</span>);</div><div class="line">    tcon |= (<span class="number">1</span> &lt;&lt; <span class="number">19</span>);</div><div class="line">    tcon &amp;= ~(<span class="number">1</span> &lt;&lt; <span class="number">17</span>);</div><div class="line">    timer-&gt;TCON = tcon;</div><div class="line">    timer-&gt;TINT_CSTAT |= <span class="number">0x08</span>;</div><div class="line">    gpio_set_value(one_write_pin, <span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> ssize_t <span class="title">backlight_write</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="keyword">const</span> <span class="keyword">char</span> __user *buf, <span class="keyword">size_t</span> count, <span class="keyword">loff_t</span> *off)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> reg, ret;</div><div class="line">    ret = copy_from_user(&amp;reg, buf, <span class="number">1</span>);</div><div class="line">   </div><div class="line">    printk(<span class="string">"kernel: reg = %d"</span>, reg);</div><div class="line">    <span class="comment">//printk("buf = %d", *buf);</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        printk(<span class="string">"%s copy_from_user error\n"</span>, __func__);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/*if (reg &gt; 127)</span></div><div class="line">        &#123; reg = 127; &#125;</div><div class="line"></div><div class="line">    start_one_wire_session(reg + 0x80);</div><div class="line">    */</div><div class="line">    </div><div class="line">    start_one_wire_session(reg);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">backlight_open</span><span class="params">(<span class="keyword">struct</span> inode *inode, <span class="keyword">struct</span> file *file)</span></span></div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"backlight_open\n"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">backlight_release</span><span class="params">(<span class="keyword">struct</span> inode *inode, <span class="keyword">struct</span> file *file)</span></span></div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"backlight_exit\n"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> file_operations backlight_fops =</div><div class="line">&#123;</div><div class="line">    .owner              = THIS_MODULE,</div><div class="line">    .open               = backlight_open,</div><div class="line">    .release            = backlight_release,</div><div class="line">    .write              = backlight_write,</div><div class="line">&#125;;</div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> device *dev;</div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> clk *base_clk;</div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> resource *res = <span class="literal">NULL</span>, *irq = <span class="literal">NULL</span>;</div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">backlight_probe</span><span class="params">(<span class="keyword">struct</span> platform_device *pdev)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> ret;</div><div class="line">    <span class="keyword">dev_t</span> devid;</div><div class="line">    dev = &amp;pdev-&gt;dev;</div><div class="line"></div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line">    pctrl = devm_pinctrl_get(dev);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (pctrl == <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        printk(<span class="string">"devm_pinctrl_get error\n"</span>);</div><div class="line">        <span class="keyword">return</span> -EINVAL;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    pstate_in  = pinctrl_lookup_state(pctrl, <span class="string">"backlight_in"</span>);</div><div class="line">    pstate_out = pinctrl_lookup_state(pctrl, <span class="string">"backlight_out"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (pstate_in == <span class="literal">NULL</span> || pstate_out == <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        printk(<span class="string">"pinctrl_lookup_state error\n"</span>);</div><div class="line">        <span class="keyword">return</span> -EINVAL;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    one_write_pin = of_get_named_gpio(dev-&gt;of_node, <span class="string">"tiny4412,backlight"</span>, <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (!one_write_pin)</div><div class="line">    &#123;</div><div class="line">        printk(<span class="string">"of_get_named_gpio error\n"</span>);</div><div class="line">        <span class="keyword">return</span> -EINVAL;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    devm_gpio_request_one(dev, one_write_pin, GPIOF_OUT_INIT_HIGH, <span class="string">"one_write"</span>);</div><div class="line">    <span class="comment">//pinctrl_select_state(pctrl, pstate);</span></div><div class="line">    res = platform_get_resource(pdev, IORESOURCE_MEM, <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (res == <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        printk(<span class="string">"platform_get_resource error\n"</span>);</div><div class="line">        <span class="keyword">return</span> -EINVAL;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    base_clk = devm_clk_get(&amp;pdev-&gt;dev, <span class="string">"timers"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (IS_ERR(base_clk))</div><div class="line">    &#123;</div><div class="line">        dev_err(dev, <span class="string">"failed to get timer base clk\n"</span>);</div><div class="line">        <span class="keyword">return</span> PTR_ERR(base_clk);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ret = clk_prepare_enable(base_clk);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        dev_err(dev, <span class="string">"failed to enable base clock\n"</span>);</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    timer = devm_ioremap_resource(&amp;pdev-&gt;dev, res);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (timer == <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        printk(<span class="string">"devm_ioremap_resource error\n"</span>);</div><div class="line">        <span class="keyword">return</span> -EINVAL;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    printk(<span class="string">"timer: %x\n"</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)timer);</div><div class="line">    timer-&gt;TCFG0  = <span class="number">0xF00</span>;</div><div class="line">    timer-&gt;TCFG1  = <span class="number">0x10004</span>;</div><div class="line">    irq = platform_get_resource(pdev, IORESOURCE_IRQ, <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (irq == <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        printk(<span class="string">"platform_get_resource irq error\n"</span>);</div><div class="line">        <span class="keyword">return</span> -EINVAL;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ret = devm_request_irq(dev, irq-&gt;start, timer_for_1wire_interrupt , IRQF_TIMER, <span class="string">"backlight"</span>, <span class="literal">NULL</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (ret)</div><div class="line">    &#123;</div><div class="line">        dev_err(dev, <span class="string">"unable to request irq\n"</span>);</div><div class="line">        <span class="keyword">return</span> -EINVAL;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    start_one_wire_session(<span class="number">0x60</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (alloc_chrdev_region(&amp;devid, <span class="number">0</span>, <span class="number">1</span>, <span class="string">"backlight"</span>) &lt; <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        printk(<span class="string">"%s ERROR\n"</span>, __func__);</div><div class="line">        <span class="keyword">return</span> -EINVAL;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    major = MAJOR(devid);</div><div class="line">    cdev_init(&amp;backlight_cdev, &amp;backlight_fops);</div><div class="line">    cdev_add(&amp;backlight_cdev, devid, <span class="number">1</span>);</div><div class="line">    cls = class_create(THIS_MODULE, <span class="string">"onewire_backlight"</span>);</div><div class="line">    device_create(cls, <span class="literal">NULL</span>, MKDEV(major, <span class="number">0</span>), <span class="literal">NULL</span>, <span class="string">"tiny4412_backlight"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">backlight_remove</span><span class="params">(<span class="keyword">struct</span> platform_device *pdev)</span></span></div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line">    device_destroy(cls, MKDEV(major, <span class="number">0</span>));</div><div class="line">    class_destroy(cls);</div><div class="line">    cdev_del(&amp;backlight_cdev);</div><div class="line">    unregister_chrdev_region(MKDEV(major, <span class="number">0</span>), <span class="number">1</span>);</div><div class="line">    devm_pinctrl_put(pctrl);</div><div class="line">    devm_free_irq(dev, irq-&gt;start, <span class="literal">NULL</span>);</div><div class="line">    clk_disable_unprepare(base_clk);</div><div class="line">    devm_gpio_free(dev, one_write_pin);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">struct</span> of_device_id backlight_dt_ids[] =</div><div class="line">&#123;</div><div class="line">    &#123; .compatible = <span class="string">"tiny4412,backlight"</span>, &#125;,</div><div class="line">    &#123;&#125;,</div><div class="line">&#125;;</div><div class="line"></div><div class="line">MODULE_DEVICE_TABLE(of, backlight_dt_ids);</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> platform_driver backlight_driver =</div><div class="line">&#123;</div><div class="line">    .driver        = &#123;</div><div class="line">        .name      = <span class="string">"tiny4412_backlight"</span>,</div><div class="line">        .of_match_table    = of_match_ptr(backlight_dt_ids),</div><div class="line">    &#125;,</div><div class="line">    .probe         = backlight_probe,</div><div class="line">    .remove        = backlight_remove,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">backlight_init</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> ret;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line">    ret = platform_driver_register(&amp;backlight_driver);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (ret)</div><div class="line">    &#123;</div><div class="line">        printk(KERN_ERR <span class="string">"Tiny4412 backlight: probe faid backlight: %d\n"</span>, ret);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">backlight_exit</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"enter %s\n"</span>, __func__);</div><div class="line">    platform_driver_unregister(&amp;backlight_driver);</div><div class="line">&#125;</div><div class="line"></div><div class="line">module_init(backlight_init);</div><div class="line">module_exit(backlight_exit);</div><div class="line"></div><div class="line">MODULE_LICENSE(<span class="string">"GPL"</span>);</div><div class="line">MODULE_AUTHOR(<span class="string">"hceng &lt;huangcheng.job@foxmail.com&gt;"</span>);</div><div class="line">MODULE_DESCRIPTION(<span class="string">"Tiny4412 LCD backlight driver."</span>);</div><div class="line">MODULE_ALIAS(<span class="string">"Exynos4412_backlight"</span>);</div><div class="line">MODULE_VERSION(<span class="string">"V1.0"</span>);</div></pre></td></tr></table></figure></p><p>首先<code>insmod</code>该驱动，会调用<code>backlight_init()</code>,注册平台设备<code>platform_driver_register(&amp;backlight_driver)</code>。<br><code>backlight_driver</code>结构体里面的<code>.compatible</code>与设备树文件里的<code>compatible</code>完全匹配上后，即调用最核心的<code>backlight_probe()</code>函数。<br>在<code>backlight_probe()</code>函数里获取设备树的各种信息、地址映射、设置时钟等，最后再申请设备号、注册设备、创建类、创建设备。<br>在<code>backlight_fops</code>操作函数里，主要的是写函数，它获取用户层的数据，然后调用<code>start_one_wire_session()</code>实现背光的修改。<br>这里的<code>start_one_wire_session()</code>就不太好分析了，协议是友善自定的。</p><h1 id="5-测试程序"><a href="#5-测试程序" class="headerlink" title="5.测试程序"></a>5.测试程序</h1><figure class="highlight c"><figcaption><span>[app.c]</span><a href="https://github.com/hceng/learn/blob/master/tiny4412/01_backlight_drv/app.c" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> msleep(x) usleep(x*1000)</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> fd;</div><div class="line">    <span class="keyword">int</span> val;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (argc != <span class="number">2</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%s+val\n"</span>,argv[<span class="number">0</span>]);</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    fd = open(<span class="string">"/dev/tiny4412_backlight"</span>, O_RDWR);</div><div class="line">     </div><div class="line">    <span class="keyword">if</span> (fd &lt; <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"can't open /dev/tiny4412_backlight\n"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    val = strtoul(argv[<span class="number">1</span>], <span class="literal">NULL</span>, <span class="number">0</span>);   </div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"app: val = %d"</span>,val);    </div><div class="line"></div><div class="line">    write(fd, &amp;val, <span class="number">1</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="6-实测结果"><a href="#6-实测结果" class="headerlink" title="6.实测结果"></a>6.实测结果</h1><p><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/171122/3.png" alt=""></p><p><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/171122/4.gif" alt=""></p><p>参考博客：<br><a href="学习设备树之（十一）Backlight" title="http://blog.csdn.net/lizuobin2/article/details/54565395">学习设备树之（十一）Backlight</a><br><a href="(20）设备树LCD背光驱动" title="http://muasy.com/40690/">(20）设备树LCD背光驱动</a></p><hr><p><div align="center"><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本文采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href="http://hceng.cn/" target="_blank" rel="external">hceng’s blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Exynos4412的背光驱动，采用友善之臂的“一线触摸”。&lt;br&gt;
    
    </summary>
    
    
      <category term="Linux驱动" scheme="http://yoursite.com/tags/Linux%E9%A9%B1%E5%8A%A8/"/>
    
      <category term="Exynos4412" scheme="http://yoursite.com/tags/Exynos4412/"/>
    
  </entry>
  
  <entry>
    <title>Exynos4412——SD卡启动</title>
    <link href="http://yoursite.com/2017/11/07/Exynos4412%E2%80%94%E2%80%94SD%E5%8D%A1%E5%90%AF%E5%8A%A8/"/>
    <id>http://yoursite.com/2017/11/07/Exynos4412——SD卡启动/</id>
    <published>2017-11-07T10:36:29.000Z</published>
    <updated>2017-11-07T07:56:54.732Z</updated>
    
    <content type="html"><![CDATA[<p>实现Tiny4412从SD卡的启动内核与根文件系统。<br><a id="more"></a><br>前面启动开发板时，需要从SD卡启动Uboot，然后从DNW下载内核和根文件系统到RAM，或者NFS挂载根文件系统。<br>Uboot应该是支持SD卡的，可以从SD卡读取内核。<br>Uboot把控制权交给内核后，内核必须要支持SD卡，才能访问SD卡的根文件系统，因此需要移植SD卡驱动。</p><h1 id="1-关于启动的理解"><a href="#1-关于启动的理解" class="headerlink" title="1.关于启动的理解"></a>1.关于启动的理解</h1><p>嵌入式Linux开发一般需要至少三个文件：Bootloader(Uboot)、Kernel(uImage)、根文件系统（rootfs）。Kernel-3.x加入设备树后，又多了个DTB设备树文件。<br>因此，本次要准备四个文件：<strong>Uboot、Kernel、rootfs、DTB</strong>。</p><p>一般开发板上有多个存储介质，如：Nand Flash、Nor Flash、mmc、emmc、SD卡、网络也算特殊的一种。</p><p>前面的四个文件，理论上可以放在板上的任一存储介质里面，然后给SOC信号（开发板上的启动顺序拨码开关），告诉它从哪个存储介质读取相应文件。<br>但由于一些特殊原因，往往有所限制。比如，Nor Flash比较小，一般只放Uboot，放不下rootfs。好像也没有支持网络NFS启动的Uboot，至少我目前没遇到过。<br>因此，一般常见的方式是把Uboot放在Nor Flash，其它的放在Nand Flash，就像JZ2440；或者全都放在SD卡/TF卡，就像Ti的AM437X；又或者都放在emmc，像Tiny4412；<br>总之就是以上的存储介质组合，根据实际情况而定。<br>需要一提的是，很多SOC现在都在Uboot前封装了一层代码，或者搞了一个其它什么机制，上电后马上初始化了存储介质相关的寄存器，其次才加载用户的第一行代码。</p><p>开发板上电后，先内部固化代码先初始化一些必要的东西（有的SOC没有这一机制），然后根据启动引脚的电平，读取相应的存储介质上的Uboot到RAM，启动Uboot后，根据用户传的参数加载内核、设备树、根文件系统到RAM。<br>这一过程的Uboot所处的存储介质受限比较大，要根据SOC所支持的启动方式来选择。后面Uboot启动后，Uboot会初始化更多的硬件存储介质，也就有了更多的选择。</p><p><strong>启动过程其实是先将要启动的文件从存储位置拷贝到内存空间，再在内存中运行。因此所谓不同位置启动，也就是从不同位置拷贝而已。</strong></p><h1 id="2-移植SD卡驱动"><a href="#2-移植SD卡驱动" class="headerlink" title="2.移植SD卡驱动"></a>2.移植SD卡驱动</h1><p>SD卡移植的工作内容很少，仅对其设备树文件<code>arch/arm/boot/dts/exynos4412-tiny4412.dts</code>添加了一行代码即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">-- /work/tools/linux-4.13.9/arch/arm/boot/dts/exynos4412-tiny4412.dts  2017-10-21 08:55:07.000000000 -0700</div><div class="line">+++ /work/linux-4.13.9/arch/arm/boot/dts/exynos4412-tiny4412.dts        2017-10-31 03:34:04.609606802 -0700</div><div class="line"></div><div class="line">@@ -79,6 +101,7 @@</div><div class="line">        bus-width = &lt;4&gt;;</div><div class="line">        pinctrl-0 = &lt;&amp;sd2_clk &amp;sd2_cmd &amp;sd2_cd &amp;sd2_bus4&gt;;</div><div class="line">        pinctrl-names = &quot;default&quot;;</div><div class="line">+       vmmc-supply = &lt;&amp;mmc_reg&gt;;</div><div class="line">        status = &quot;okay&quot;;</div><div class="line"> &#125;;</div></pre></td></tr></table></figure></p><p>然后奇迹般就可以了。。懵逼。</p><h1 id="3-制作SD卡"><a href="#3-制作SD卡" class="headerlink" title="3.制作SD卡"></a>3.制作SD卡</h1><p>先将SD卡分为两个区，一个格式为fat32用于放内核和dtb，一个格式为ext3/4用于存放根文件系统。<br>可以使用<code>fdisk</code>命令分区，<code>mkfs</code>命令进行格式化。这里使用如下的<code>mkcard.sh</code>脚本更方便，原脚本里面的<code>sfdisk</code>是2.26版本的，在Ubuntu14.04运行正常，在Ubuntu16.04是无法运行的，Ubuntu16.014<code>sfdisk</code>的版本是2.27.1。顺便修改了下分区大小，看起来更舒服点，修改后的脚本如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#! /bin/sh</span></div><div class="line"><span class="comment"># mkcard.sh v0.4</span></div><div class="line"><span class="comment"># (c) Copyright 2009 Graeme Gregory &lt;dp@xora.org.uk&gt;</span></div><div class="line"><span class="comment"># Licensed under terms of GPLv2</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Parts of the procudure base on the work of Denys Dmytriyenko</span></div><div class="line"><span class="comment"># http://wiki.omap.com/index.php/MMC_Boot_Format</span></div><div class="line"></div><div class="line">LC_ALL=C</div><div class="line"></div><div class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> <span class="_">-ne</span> 1 ]; <span class="keyword">then</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"Usage: <span class="variable">$0</span> &lt;drive&gt;"</span></div><div class="line"><span class="built_in">exit</span> 1;</div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line">DRIVE=<span class="variable">$1</span></div><div class="line"></div><div class="line">dd <span class="keyword">if</span>=/dev/zero of=<span class="variable">$DRIVE</span> bs=1024 count=1024</div><div class="line"></div><div class="line">SIZE=`fdisk <span class="_">-l</span> <span class="variable">$DRIVE</span> | grep Disk | awk <span class="string">'&#123;print $5&#125;'</span>`</div><div class="line"></div><div class="line"><span class="built_in">echo</span> DISK SIZE - <span class="variable">$SIZE</span> bytes</div><div class="line"></div><div class="line">CYLINDERS=`<span class="built_in">echo</span> <span class="variable">$SIZE</span>/255/63/512 | bc`</div><div class="line"></div><div class="line"><span class="built_in">echo</span> CYLINDERS - <span class="variable">$CYLINDERS</span></div><div class="line"></div><div class="line"><span class="comment"># 将SD卡分成2个区</span></div><div class="line">sfdisk --no-reread <span class="variable">$DRIVE</span> &lt;&lt; EOF</div><div class="line"></div><div class="line">1024,1024000,0x0C,*</div><div class="line"></div><div class="line">1024100,,,-</div><div class="line"></div><div class="line">EOF</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 格式化第1分区为fat32格式, 并且命名为boot</span></div><div class="line"><span class="keyword">if</span> [ -b <span class="variable">$&#123;DRIVE&#125;</span>1 ]; <span class="keyword">then</span></div><div class="line">mkfs.vfat -F 32 -n <span class="string">"boot"</span> <span class="variable">$&#123;DRIVE&#125;</span>1</div><div class="line"><span class="keyword">else</span></div><div class="line"><span class="keyword">if</span> [ -b <span class="variable">$&#123;DRIVE&#125;</span>p1 ]; <span class="keyword">then</span></div><div class="line">mkfs.vfat -F 32 -n <span class="string">"boot"</span> <span class="variable">$&#123;DRIVE&#125;</span>p1</div><div class="line"><span class="keyword">else</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"Cant find boot partition in /dev"</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="comment"># 格式化第2分区为ext3格式, 并且命名为rootfs</span></div><div class="line"><span class="keyword">if</span> [ -b <span class="variable">$&#123;DRIVE&#125;</span>2 ]; <span class="keyword">then</span></div><div class="line">mke2fs -j -L <span class="string">"rootfs"</span> <span class="variable">$&#123;DRIVE&#125;</span>2</div><div class="line"><span class="keyword">else</span></div><div class="line"><span class="keyword">if</span> [ -b <span class="variable">$&#123;DRIVE&#125;</span>p2 ]; <span class="keyword">then</span></div><div class="line">mke2fs -j -L <span class="string">"rootfs"</span> <span class="variable">$&#123;DRIVE&#125;</span>p2</div><div class="line"><span class="keyword">else</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"Cant find rootfs partition in /dev"</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line">sync</div><div class="line">sudo partprobe <span class="variable">$DRIVE</span>               </div><div class="line">sync </div></pre></td></tr></table></figure><br><a href="http://naeilproj.blogspot.ca/2016/06/linux-ti-sdksfdisk-invalid-option-d.html" target="_blank" rel="external">参考博客(需梯子)</a></p><p>执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo ./mkcard.sh /dev/mmcblk0</div></pre></td></tr></table></figure></p><p>等待一会，使用命令<code>sudo fdisk -l</code>查看分区，如果脚本工作完后，看起来没有分区成功，重启系统再来一次，有点莫名其妙的。</p><p>搞定后，此时就会有两个分别名叫<code>boot</code>和<code>rootfs</code>的分区。<br>再使用制作Uboot的<code>sd_fusing.sh</code>脚本。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd work/uboot_tiny4412_0929/sd_fuse/tiny4412  </div><div class="line">sudo ./sd_fusing.sh /dev/mmcblk0</div></pre></td></tr></table></figure></p><p>简单看了看<code>sd_fusing.sh</code>脚本，脑补了下此时的SD卡分布：<br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/171107/1.png" alt=""><br>此时在<code>boot</code>和<code>rootfs</code>分区看不到相关文件的原因可能就是不在分区内。</p><p>最后依次将uImage、DTB、rootfs复制到SD卡即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo cp /work/linux-4.13.9/arch/arm/boot/uImage /media/hceng/boot/</div><div class="line">sudo cp /work/linux-4.13.9/arch/arm/boot/dts/exynos4412-tiny4412.dtb /media/hceng/boot/</div><div class="line"></div><div class="line">sudo cp -rd /work/nfs_rootfs/* /media/hceng/rootfs/</div></pre></td></tr></table></figure></p><h1 id="4-Uboot参数设置"><a href="#4-Uboot参数设置" class="headerlink" title="4.Uboot参数设置"></a>4.Uboot参数设置</h1><p>刚开始测试的时候，老是卡在<code>Starting kernel ...</code>，查找了一下午原因，最后发现是Uboot参数设置的时候连写命令所致。<br>Uboot启动参数设置如下：</p><ul><li><p>SD卡启动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">setenv bootargs &apos;root=/dev/mmcblk0p2 rw console=ttySAC0,115200 init=/linuxrc&apos;</div><div class="line">saveenv</div><div class="line"></div><div class="line">setenv bootcmd fatload mmc 0:1 0x40000000 uImage\;fatload mmc 0:1 0x42000000 exynos4412-tiny4412.dtb\;bootm 0x40000000 - 0x42000000</div><div class="line">saveenv</div><div class="line"></div><div class="line">boot</div></pre></td></tr></table></figure></li><li><p>NFS启动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">setenv bootargs &apos;root=/dev/nfs rw nfsroot=192.168.1.226:/work/fs_mini_mdev_new ethmac=00:40:5c:26:0a:5b ip=192.168.1.225:192.168.1.226:192.168.1.1:255.255.255.0::eth0:off console=ttySAC0,115200 init=/linuxrc&apos;</div><div class="line">saveenv</div><div class="line"></div><div class="line">setenv bootcmd fatload mmc 0:1 0x40000000 uImage\;fatload mmc 0:1 0x42000000 exynos4412-tiny4412.dtb\;bootm 0x40000000 - 0x42000000</div><div class="line">saveenv</div><div class="line"></div><div class="line">boot</div></pre></td></tr></table></figure></li></ul><h1 id="5-实际效果"><a href="#5-实际效果" class="headerlink" title="5.实际效果"></a>5.实际效果</h1><p><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/171107/2.png" alt=""></p><hr><p><div align="center"><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本文采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href="http://hceng.cn/" target="_blank" rel="external">hceng’s blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;实现Tiny4412从SD卡的启动内核与根文件系统。&lt;br&gt;
    
    </summary>
    
    
      <category term="Exynos4412" scheme="http://yoursite.com/tags/Exynos4412/"/>
    
      <category term="SD卡" scheme="http://yoursite.com/tags/SD%E5%8D%A1/"/>
    
      <category term="Uboot" scheme="http://yoursite.com/tags/Uboot/"/>
    
  </entry>
  
  <entry>
    <title>Exynos4412——网卡移植和NFS启动</title>
    <link href="http://yoursite.com/2017/10/31/Exynos4412%E2%80%94%E2%80%94%E7%BD%91%E5%8D%A1%E7%A7%BB%E6%A4%8D%E5%92%8CNFS%E5%90%AF%E5%8A%A8/"/>
    <id>http://yoursite.com/2017/10/31/Exynos4412——网卡移植和NFS启动/</id>
    <published>2017-10-31T12:27:52.000Z</published>
    <updated>2017-11-07T07:54:46.113Z</updated>
    
    <content type="html"><![CDATA[<p>为Exynos 4412移植好网卡驱动，并采用NFS挂载根文件系统启动。<br><a id="more"></a><br>玩Exynos4412的第一个目标是想弄下LCD驱动。<br>在开始流畅的写驱动前，前期的准备工作又多又繁琐。</p><p>上次移植好了内核，内核和根文件系统都是在RAM进行进行加载的，后面写驱动的时候，肯定不方便。<br>就以往的经验来看，uboot、kernel都应该在SD卡或者eMMC上，这样断电才不会丢失。根文件系统在调试驱动的时候应该是nfs挂载，调试完成了再烧写到SD卡或者eMMC上。</p><p>因此，写驱动前至少还要移植好SD卡驱动、网卡驱动。eMMC可暂时不管。</p><p>本次就先移植好网卡驱动，并尝试NFS挂载根文件系统。</p><h1 id="1-硬件结构"><a href="#1-硬件结构" class="headerlink" title="1.硬件结构"></a>1.硬件结构</h1><p>JZ2440中的网卡芯片是DM9000，采用的是内存接口。</p><p>Tiny4412的网卡芯片是DM9621，采用的是USB接口。<br>而且该芯片并没有直接接在SOC的USB上，而是接在USB4604这个HUB芯片上。<br>USB4604通过HSIC接口(XuhostSTROBE1和XuhostDATA1)接在SOC上。<br>框架如下：<br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/171031/1.png" alt=""></p><p>因此，需要重点关注USB4604和DM9621。查看这两块的原理图：</p><p>USB4604：<br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/171031/2.png" alt=""></p><p>DM9621：<br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/171031/3.png" alt=""></p><p>发现USB4604的一些功能并没有使用，如外接SPI/I2C设备等。除了数据端口，还能控制的就是复位引脚。</p><p>DM9621的驱动在本内核的drivers/net/usb/dm9601.c已经实现，但为了支持识别bootargs中的mac地址的功能，需要稍微修改dm9601.c，添加解析mac地址的功能，并且还需要将解析到的有效的mac地址设置到dm9621中，否则网络不能用。</p><p>USB4604的驱动在本内核的drivers/usb/misc/usb4604.c已经实现，但由于没有外接SPI/I2C，需要删除一些，可以参考drivers/usb/misc/usb3503.c或者<a href="http://www.cnblogs.com/pengdonglin137/p/5153794.html" target="_blank" rel="external">博客</a>里的代码。我直接用的博客里面的代码。</p><p>此外，还需在设备树使能将要用到的外设：hsi、ehci、otg等。</p><h1 id="2-移植网卡驱动"><a href="#2-移植网卡驱动" class="headerlink" title="2.移植网卡驱动"></a>2.移植网卡驱动</h1><p>目前需要修改的文件有：<br>（1）设备树文件：arch/arm/boot/dts/exynos4412-tiny4412.dts；<br>（2）DM9621驱动：drivers/net/usb/dm9601.c；<br>（3）USB4604驱动：drivers/usb/misc/usb4604.c；<br>（4）USB4604驱动头文件：include/linux/platform_data/usb4604.h（新建）；<br>（5）设备树头文件：include/dt-bindings/usb4640/usb4604.h（新建）；<br>（6）DM9621驱动加入内核；<br>（7）USB4604驱动加入内核；</p><h2 id="2-1-修改设备树文件"><a href="#2-1-修改设备树文件" class="headerlink" title="2.1 修改设备树文件"></a>2.1 修改设备树文件</h2><p>主要添加了usb-hub的复位引脚信息和使能了一些外设。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line">--- /work/tools/linux<span class="number">-4.13</span><span class="number">.9</span>/arch/arm/boot/dts/exynos4412-tiny4412.dts<span class="number">2017</span><span class="number">-10</span><span class="number">-21</span> <span class="number">08</span>:<span class="number">55</span>:<span class="number">07.000000000</span> <span class="number">-0700</span></div><div class="line">+++ /work/linux<span class="number">-4.13</span><span class="number">.9</span>/arch/arm/boot/dts/exynos4412-tiny4412.dts<span class="number">2017</span><span class="number">-10</span><span class="number">-30</span> <span class="number">02</span>:<span class="number">34</span>:<span class="number">10.363297869</span> <span class="number">-0700</span></div><div class="line">@@ <span class="number">-14</span>,<span class="number">6</span> +<span class="number">14</span>,<span class="number">7</span> @@</div><div class="line"> /dts-v1/;</div><div class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"exynos4412.dtsi"</span></span></div><div class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dt-bindings/gpio/gpio.h&gt;</span></span></div><div class="line">+<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dt-bindings/usb4604/usb4604.h&gt;</span></span></div><div class="line"> </div><div class="line"> / &#123;</div><div class="line"> model = <span class="string">"FriendlyARM TINY4412 board based on Exynos4412"</span>;</div><div class="line">@@ <span class="number">-21</span>,<span class="number">6</span> +<span class="number">22</span>,<span class="number">7</span> @@</div><div class="line"> </div><div class="line"> chosen &#123;</div><div class="line"> <span class="built_in">stdout</span>-path = &amp;serial_0;</div><div class="line">+bootargs = <span class="string">"root=/dev/ram0 rw rootfstype=ext4 console=ttySAC0,115200 init=/linuxrc earlyprintk"</span>;</div><div class="line"> &#125;;</div><div class="line"> </div><div class="line"> memory@<span class="number">40000000</span> &#123;</div><div class="line">@@ <span class="number">-28</span>,<span class="number">6</span> +<span class="number">30</span>,<span class="number">12</span> @@</div><div class="line"> reg = &lt;<span class="number">0x40000000</span> <span class="number">0x40000000</span>&gt;;</div><div class="line"> &#125;;</div><div class="line"> </div><div class="line">+    usb-hub &#123;</div><div class="line">+        compatible = <span class="string">"smsc,usb4604"</span>;</div><div class="line">+reset-gpios = &lt;&amp;gpm2 <span class="number">4</span> GPIO_ACTIVE_LOW&gt;;</div><div class="line">+        initial-mode = &lt;USB4604_MODE_HUB&gt;;</div><div class="line">+    &#125;;</div><div class="line">+</div><div class="line"> leds &#123;</div><div class="line"> compatible = <span class="string">"gpio-leds"</span>;</div><div class="line"> </div><div class="line">@@ <span class="number">-79</span>,<span class="number">7</span> +<span class="number">87</span>,<span class="number">7</span> @@</div><div class="line"> bus-width = &lt;<span class="number">4</span>&gt;;</div><div class="line"> pinctrl<span class="number">-0</span> = &lt;&amp;sd2_clk &amp;sd2_cmd &amp;sd2_cd &amp;sd2_bus4&gt;;</div><div class="line"> pinctrl-names = <span class="string">"default"</span>;</div><div class="line">-status = <span class="string">"okay"</span>;</div><div class="line">+status = <span class="string">"disabled"</span>;</div><div class="line"> &#125;;</div><div class="line"> </div><div class="line"> &amp;serial_0 &#123;</div><div class="line">@@ <span class="number">-97</span>,<span class="number">3</span> +<span class="number">105</span>,<span class="number">32</span> @@</div><div class="line"> &amp;serial_3 &#123;</div><div class="line"> status = <span class="string">"okay"</span>;</div><div class="line"> &#125;;</div><div class="line">+</div><div class="line">+</div><div class="line">+&amp;exynos_usbphy &#123;</div><div class="line">+    status = <span class="string">"okay"</span>;</div><div class="line">+&#125;;</div><div class="line">+</div><div class="line">+&amp;ehci &#123;</div><div class="line">+    status = <span class="string">"okay"</span>;</div><div class="line">+    port@<span class="number">0</span> &#123;</div><div class="line">+        status = <span class="string">"okay"</span>;</div><div class="line">+    &#125;;</div><div class="line">+    port@<span class="number">1</span> &#123;</div><div class="line">+        status = <span class="string">"okay"</span>;</div><div class="line">+    &#125;;</div><div class="line">+    port@<span class="number">2</span> &#123;</div><div class="line">+        status = <span class="string">"okay"</span>;</div><div class="line">+    &#125;;</div><div class="line">+&#125;;</div><div class="line">+</div><div class="line">+&amp;ohci &#123;</div><div class="line">+    status = <span class="string">"okay"</span>;</div><div class="line">+    port@<span class="number">0</span> &#123;</div><div class="line">+        status = <span class="string">"okay"</span>;</div><div class="line">+    &#125;;</div><div class="line">+&#125;;</div><div class="line">+</div><div class="line">+&amp;hsotg &#123;</div><div class="line">+    status = <span class="string">"okay"</span>;</div><div class="line">+&#125;;</div></pre></td></tr></table></figure></p><h2 id="2-2-修改DM9621驱动"><a href="#2-2-修改DM9621驱动" class="headerlink" title="2.2 修改DM9621驱动"></a>2.2 修改DM9621驱动</h2><p>主要是添加解析mac地址的功能，并且还需要将解析到的有效的mac地址设置到dm9621中。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line">--- /work/tools/linux-4.13.9/drivers/net/usb/dm9601.c2017-10-21 08:55:07.000000000 -0700</div><div class="line">+++ /work/linux-4.13.9/drivers/net/usb/dm9601.c2017-10-30 02:06:54.319597116 -0700</div><div class="line">@@ -58,6 +58,39 @@</div><div class="line"> #define DM_RX_OVERHEAD7/* 3 byte header + 4 byte crc tail */</div><div class="line"> #define DM_TIMEOUT1000</div><div class="line"> </div><div class="line">+/* Setup ethernet address */</div><div class="line">+static u8 param_addr[ETH_ALEN];</div><div class="line">+</div><div class="line">+static int __init dm9601_set_mac(char *str) &#123;</div><div class="line">+u8 addr[ETH_ALEN];</div><div class="line">+uint val;</div><div class="line">+int idx = 0;</div><div class="line">+char *p = str, *end;</div><div class="line">+</div><div class="line">+while (*p &amp;&amp; idx &lt; ETH_ALEN) &#123;</div><div class="line">+val = simple_strtoul(p, &amp;end, 16);</div><div class="line">+if (end &lt;= p) &#123;</div><div class="line">+break;</div><div class="line">+&#125; else &#123;</div><div class="line">+addr[idx++] = val;</div><div class="line">+p = end;</div><div class="line">+if (*p == ':'|| *p == '-') &#123;</div><div class="line">+p++;</div><div class="line">+&#125; else &#123;</div><div class="line">+break;</div><div class="line">+&#125;</div><div class="line">+&#125;</div><div class="line">+&#125;</div><div class="line">+</div><div class="line">+if (idx == ETH_ALEN) &#123;</div><div class="line">+printk("Setup ethernet address to %pM\n", addr);</div><div class="line">+memcpy(param_addr, addr, ETH_ALEN);</div><div class="line">+&#125;</div><div class="line">+</div><div class="line">+return 1;</div><div class="line">+&#125;</div><div class="line">+__setup("ethmac=", dm9601_set_mac);</div><div class="line">+</div><div class="line"> static int dm_read(struct usbnet *dev, u8 reg, u16 length, void *data)</div><div class="line"> &#123;</div><div class="line"> int err;</div><div class="line">@@ -190,8 +223,6 @@</div><div class="line"> return dm_read_shared_word(dev, 0, offset, value);</div><div class="line"> &#125;</div><div class="line"> </div><div class="line">-</div><div class="line">-</div><div class="line"> static int dm9601_get_eeprom_len(struct net_device *dev)</div><div class="line"> &#123;</div><div class="line"> return DM_EEPROM_LEN;</div><div class="line">@@ -281,9 +312,9 @@</div><div class="line"> .set_msglevel= usbnet_set_msglevel,</div><div class="line"> .get_eeprom_len= dm9601_get_eeprom_len,</div><div class="line"> .get_eeprom= dm9601_get_eeprom,</div><div class="line">+//.get_settings= usbnet_get_settings,</div><div class="line">+//.set_settings= usbnet_set_settings,</div><div class="line"> .nway_reset= usbnet_nway_reset,</div><div class="line">-.get_link_ksettings= usbnet_get_link_ksettings,</div><div class="line">-.set_link_ksettings= usbnet_set_link_ksettings,</div><div class="line"> &#125;;</div><div class="line"> </div><div class="line"> static void dm9601_set_multicast(struct net_device *net)</div><div class="line">@@ -343,7 +374,6 @@</div><div class="line"> .ndo_start_xmit= usbnet_start_xmit,</div><div class="line"> .ndo_tx_timeout= usbnet_tx_timeout,</div><div class="line"> .ndo_change_mtu= usbnet_change_mtu,</div><div class="line">-.ndo_get_stats64= usbnet_get_stats64,</div><div class="line"> .ndo_validate_addr= eth_validate_addr,</div><div class="line"> .ndo_do_ioctl = dm9601_ioctl,</div><div class="line"> .ndo_set_rx_mode= dm9601_set_multicast,</div><div class="line">@@ -390,7 +420,11 @@</div><div class="line"> /*</div><div class="line">  * Overwrite the auto-generated address only with good ones.</div><div class="line">  */</div><div class="line">-if (is_valid_ether_addr(mac))</div><div class="line">+if (is_valid_ether_addr(param_addr)) &#123;</div><div class="line">+/* write MAC to dm9621 */</div><div class="line">+memcpy(dev-&gt;net-&gt;dev_addr, param_addr, ETH_ALEN);</div><div class="line">+__dm9601_set_mac_address(dev);</div><div class="line">+&#125; else if (is_valid_ether_addr(mac))</div><div class="line"> memcpy(dev-&gt;net-&gt;dev_addr, mac, ETH_ALEN);</div><div class="line"> else &#123;</div><div class="line"> printk(KERN_WARNING</div></pre></td></tr></table></figure></p><h2 id="2-3-修改USB4604驱动"><a href="#2-3-修改USB4604驱动" class="headerlink" title="2.3 修改USB4604驱动"></a>2.3 修改USB4604驱动</h2><p>这个几乎就全改了，应该原来的那个稍微改改也能用。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * Driver for SMSC USB4604 USB 2.0 hub controller driver</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/gpio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/delay.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/slab.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/of_gpio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/platform_device.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/platform_data/usb4604.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">struct</span> usb4604 &#123;</div><div class="line">    <span class="keyword">enum</span> usb4604_mode    mode;</div><div class="line">    <span class="keyword">struct</span> device        *dev;</div><div class="line">    <span class="keyword">int</span>    gpio_reset;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">usb4604_reset</span><span class="params">(<span class="keyword">struct</span> usb4604 *hub, <span class="keyword">int</span> state)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (gpio_is_valid(hub-&gt;gpio_reset))</div><div class="line">        gpio_set_value_cansleep(hub-&gt;gpio_reset, state);</div><div class="line"></div><div class="line">    <span class="comment">/* Wait 1ms for hub logic to stabilize */</span></div><div class="line">    <span class="keyword">if</span> (state)</div><div class="line">        usleep_range(<span class="number">1</span>, <span class="number">10</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">usb4604_connect</span><span class="params">(<span class="keyword">struct</span> usb4604 *hub)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> device *dev = hub-&gt;dev;</div><div class="line"></div><div class="line">    usb4604_reset(hub, <span class="number">1</span>);</div><div class="line">    hub-&gt;mode = USB4604_MODE_HUB;</div><div class="line">    dev_info(dev, <span class="string">"switched to HUB mode\n"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">usb4604_switch_mode</span><span class="params">(<span class="keyword">struct</span> usb4604 *hub, <span class="keyword">enum</span> usb4604_mode mode)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> device *dev = hub-&gt;dev;</div><div class="line">    <span class="keyword">int</span> err = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">switch</span> (mode) &#123;</div><div class="line">    <span class="keyword">case</span> USB4604_MODE_HUB:</div><div class="line">        err = usb4604_connect(hub);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line"></div><div class="line">    <span class="keyword">case</span> USB4604_MODE_STANDBY:</div><div class="line">        usb4604_reset(hub, <span class="number">0</span>);</div><div class="line">        dev_info(dev, <span class="string">"switched to STANDBY mode\n"</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line"></div><div class="line">    <span class="keyword">default</span>:</div><div class="line">        dev_err(dev, <span class="string">"unknown mode is requested\n"</span>);</div><div class="line">        err = -EINVAL;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> err;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">usb4604_probe</span><span class="params">(<span class="keyword">struct</span> usb4604 *hub)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> device *dev = hub-&gt;dev;</div><div class="line">    <span class="keyword">struct</span> usb4604_platform_data *pdata = dev_get_platdata(dev);</div><div class="line">    <span class="keyword">struct</span> device_node *np = dev-&gt;of_node;</div><div class="line">    <span class="keyword">int</span> err;</div><div class="line">    u32 mode = USB4604_MODE_HUB;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (pdata) &#123;</div><div class="line">        hub-&gt;gpio_reset        = pdata-&gt;gpio_reset;</div><div class="line">        hub-&gt;mode        = pdata-&gt;initial_mode;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (np) &#123;</div><div class="line">        hub-&gt;gpio_reset = of_get_named_gpio(np, <span class="string">"reset-gpios"</span>, <span class="number">0</span>);</div><div class="line">        <span class="keyword">if</span> (hub-&gt;gpio_reset == -EPROBE_DEFER)</div><div class="line">            <span class="keyword">return</span> -EPROBE_DEFER;</div><div class="line">        of_property_read_u32(np, <span class="string">"initial-mode"</span>, &amp;mode);</div><div class="line">        hub-&gt;mode = mode;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (gpio_is_valid(hub-&gt;gpio_reset)) &#123;</div><div class="line">        err = devm_gpio_request_one(dev, hub-&gt;gpio_reset,</div><div class="line">                GPIOF_OUT_INIT_LOW, <span class="string">"usb4604 reset"</span>);</div><div class="line">        <span class="keyword">if</span> (err) &#123;</div><div class="line">            dev_err(dev,</div><div class="line">                <span class="string">"unable to request GPIO %d as reset pin (%d)\n"</span>,</div><div class="line">                hub-&gt;gpio_reset, err);</div><div class="line">            <span class="keyword">return</span> err;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    usb4604_switch_mode(hub, hub-&gt;mode);</div><div class="line"></div><div class="line">    dev_info(dev, <span class="string">"%s: probed in %s mode\n"</span>, __func__,</div><div class="line">            (hub-&gt;mode == USB4604_MODE_HUB) ? <span class="string">"hub"</span> : <span class="string">"standby"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">usb4604_platform_probe</span><span class="params">(<span class="keyword">struct</span> platform_device *pdev)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> usb4604 *hub;</div><div class="line"></div><div class="line">    hub = devm_kzalloc(&amp;pdev-&gt;dev, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> usb4604), GFP_KERNEL);</div><div class="line">    <span class="keyword">if</span> (!hub)</div><div class="line">        <span class="keyword">return</span> -ENOMEM;</div><div class="line">    hub-&gt;dev = &amp;pdev-&gt;dev;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> usb4604_probe(hub);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_OF</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">struct</span> of_device_id usb4604_of_match[] = &#123;</div><div class="line">    &#123; .compatible = <span class="string">"smsc,usb4604"</span>, &#125;,</div><div class="line">    &#123;&#125;,</div><div class="line">&#125;;</div><div class="line">MODULE_DEVICE_TABLE(of, usb4604_of_match);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> platform_driver usb4604_platform_driver = &#123;</div><div class="line">    .driver = &#123;</div><div class="line">        .name = USB4604_NAME,</div><div class="line">        .of_match_table = of_match_ptr(usb4604_of_match),</div><div class="line">    &#125;,</div><div class="line">    .probe        = usb4604_platform_probe,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">int</span> __<span class="function">init <span class="title">usb4604_init</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> err;</div><div class="line">    err = platform_driver_register(&amp;usb4604_platform_driver);</div><div class="line">    <span class="keyword">if</span> (err != <span class="number">0</span>)</div><div class="line">        pr_err(<span class="string">"usb4604: Failed to register platform driver: %d\n"</span>,</div><div class="line">               err);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line">module_init(usb4604_init);</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">void</span> __<span class="function"><span class="built_in">exit</span> <span class="title">usb4604_exit</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    platform_driver_unregister(&amp;usb4604_platform_driver);</div><div class="line">&#125;</div><div class="line">module_exit(usb4604_exit);</div><div class="line"></div><div class="line">MODULE_DESCRIPTION(<span class="string">"USB4604 USB HUB driver"</span>);</div><div class="line">MODULE_LICENSE(<span class="string">"GPL"</span>);</div></pre></td></tr></table></figure></p><h2 id="2-4-USB4604驱动头文件"><a href="#2-4-USB4604驱动头文件" class="headerlink" title="2.4 USB4604驱动头文件"></a>2.4 USB4604驱动头文件</h2><p>枚举usb模式。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __USB4604_H__</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> __USB4604_H__</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> USB4604_NAME    <span class="meta-string">"usb4604"</span></span></div><div class="line"></div><div class="line"><span class="keyword">enum</span> usb4604_mode &#123;</div><div class="line">    USB4604_MODE_UNKNOWN = <span class="number">1</span>,</div><div class="line">    USB4604_MODE_HUB,</div><div class="line">    USB4604_MODE_STANDBY,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> usb4604_platform_data &#123;</div><div class="line">    <span class="keyword">enum</span> usb4604_mode    initial_mode;</div><div class="line">    <span class="keyword">int</span>    gpio_reset;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure></p><h2 id="2-5-设备树头文件"><a href="#2-5-设备树头文件" class="headerlink" title="2.5 设备树头文件"></a>2.5 设备树头文件</h2><p>提供usb-hub的工作模式宏。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _DT_BINDINGS_USB4604</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> _DT_BINDINGS_USB4604</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> USB4604_MODE_UNKNOWN   1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> USB4604_MODE_HUB       2</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> USB4604_MODE_STANDBY   3</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure></p><h2 id="2-6-DM9621驱动加入内核"><a href="#2-6-DM9621驱动加入内核" class="headerlink" title="2.6 DM9621驱动加入内核"></a>2.6 DM9621驱动加入内核</h2><p>进入配置界面：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make menuconfig</div></pre></td></tr></table></figure></p><p>将DM9621驱动加入内核<br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/171031/4.png" alt=""></p><h2 id="2-7-USB4604驱动加入内核"><a href="#2-7-USB4604驱动加入内核" class="headerlink" title="2.7 USB4604驱动加入内核"></a>2.7 USB4604驱动加入内核</h2><p>将USB4604驱动加入内核<br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/171031/5.png" alt=""></p><h2 id="2-8-重新编译、烧写、测试"><a href="#2-8-重新编译、烧写、测试" class="headerlink" title="2.8 重新编译、烧写、测试"></a>2.8 重新编译、烧写、测试</h2><ul><li><p>编译：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">make uImage LOADADDR=0x40008000 </div><div class="line">make dtbs</div></pre></td></tr></table></figure></li><li><p>烧写：<br>在开发板uboot界面输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dnw 0x40600000;dnw 0x41000000;dnw 0x42000000</div></pre></td></tr></table></figure></li></ul><p>在Ubuntu依次输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo ./dnw /work/linux-4.13.9/arch/arm/boot/uImage</div><div class="line">sudo ./dnw /work/ramdisk/ramdisk.img</div><div class="line">sudo ./dnw /work/linux-4.13.9/arch/arm/boot/dts/exynos4412-tiny4412.dtb</div></pre></td></tr></table></figure></p><p>最后再开发板启动：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo ./dnw /work/linux-4.13.9/arch/arm/boot/uImage</div><div class="line">sudo ./dnw /work/ramdisk/ramdisk.img</div><div class="line">sudo ./dnw /work/linux-4.13.9/arch/arm/boot/dts/exynos4412-tiny4412.dtb</div></pre></td></tr></table></figure></p><ul><li>测试：<br>设置网卡ip<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ifconfig eth0 192.168.1.225</div></pre></td></tr></table></figure></li></ul><p>ping主机：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ping -c4 192.168.1.226</div></pre></td></tr></table></figure></p><p><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/171031/6.png" alt=""></p><h1 id="3-NFS启动"><a href="#3-NFS启动" class="headerlink" title="3.NFS启动"></a>3.NFS启动</h1><p>这里的根文件系统直接使用的是韦老大第三期项目视频的根文件系统，之前在JZ2440上也能运行，就直接拿来用了。<br>此外修改了根文件系统、的<code>etc/init.d/rcS</code>，加入了<code>ifconfig eth0 192.168.1.225</code>设置静态IP。</p><p>设置uboot参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">setenv bootargs &apos;root=/dev/nfs rw nfsroot=192.168.1.226:/work/fs_mini_mdev_new ethmac=00:40:5c:26:0a:5b ip=192.168.1.225:192.168.1.226:192.168.1.1:255.255.255.0::eth0:off console=ttySAC0,115200 init=/linuxrc&apos;; saveenv</div></pre></td></tr></table></figure></p><p>开发板下载及启动：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dnw 0x40000000;dnw 0x42000000;bootm 0x40000000 - 0x42000000</div></pre></td></tr></table></figure></p><p>Ubuntu下载：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo ./dnw /work/linux-4.13.9/arch/arm/boot/uImage</div><div class="line">sudo ./dnw /work/linux-4.13.9/arch/arm/boot/dts/exynos4412-tiny4412.dtb</div></pre></td></tr></table></figure></p><p>NFS启动效果：<br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/171031/7.png" alt=""></p><h1 id="4-心得"><a href="#4-心得" class="headerlink" title="4.心得"></a>4.心得</h1><p>感谢<a href="http://www.cnblogs.com/pengdonglin137/" target="_blank" rel="external">摩斯电码的博客</a>，很多的参考他的，节约了很多时间。</p><p>下一步移植完SD卡的驱动，将uboot和内核都放在SD卡上，根文件系统挂在nfs上，就可以搞LCD了。</p><hr><p><div align="center"><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本文采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href="http://hceng.cn/" target="_blank" rel="external">hceng’s blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为Exynos 4412移植好网卡驱动，并采用NFS挂载根文件系统启动。&lt;br&gt;
    
    </summary>
    
    
      <category term="Linux驱动" scheme="http://yoursite.com/tags/Linux%E9%A9%B1%E5%8A%A8/"/>
    
      <category term="Exynos4412" scheme="http://yoursite.com/tags/Exynos4412/"/>
    
      <category term="网卡驱动" scheme="http://yoursite.com/tags/%E7%BD%91%E5%8D%A1%E9%A9%B1%E5%8A%A8/"/>
    
      <category term="NFS" scheme="http://yoursite.com/tags/NFS/"/>
    
  </entry>
  
  <entry>
    <title>Exynos4412——内核移植</title>
    <link href="http://yoursite.com/2017/10/26/Exynos4412%E2%80%94%E2%80%94%E5%86%85%E6%A0%B8%E7%A7%BB%E6%A4%8D/"/>
    <id>http://yoursite.com/2017/10/26/Exynos4412——内核移植/</id>
    <published>2017-10-26T09:48:19.000Z</published>
    <updated>2017-10-27T01:15:44.516Z</updated>
    
    <content type="html"><![CDATA[<p>Exynos 4412移植最新的Kernel-4.13.9。<br><a id="more"></a><br>话说最近应该不会接触AM437x了，原因有多种，但学习不能停。<br>手头还有买来没开过几次机的Tiny4412，本想买来学Android驱动的。<br>Exynos4412与S3C2240差别相对AM437x小很多，因此过渡应该会更顺滑一点。<br>要学习的还很多，进度有点慢，先在板子上跑起Linux再说吧。</p><h1 id="1-设置交叉编译工具链"><a href="#1-设置交叉编译工具链" class="headerlink" title="1.设置交叉编译工具链"></a>1.设置交叉编译工具链</h1><p>使用的交叉编译工具链是：<a href="http://www.veryarm.com/arm-none-linux-gnueabi-gcc" target="_blank" rel="external">arm-none-linux-gnueabi-gcc</a> （gcc version 4.8.3 20140320）<br>下载好后，放在Ubuntu中，解压：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar xjf arm-2014.05-29-arm-none-linux-gnueabi-i686-pc-linux-gnu.tar.bz2</div></pre></td></tr></table></figure></p><p>记下交叉编译工具链的位置：<code>/work/arm-2014.05/bin</code><br>修改环境变量：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vim /etc/environment</div></pre></td></tr></table></figure></p><p>添加交叉编译工具链的路径：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">PATH=&quot;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/work/arm-2014.05/bin&quot;</div></pre></td></tr></table></figure></p><p>更新环境变量：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source /etc/environment</div></pre></td></tr></table></figure></p><p>检测：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arm-none-linux-gnueabi-gcc -v</div></pre></td></tr></table></figure></p><p><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/171026/1.png" alt=""></p><p><a href="http://blog.csdn.net/aiqing0119/article/details/46887581" target="_blank" rel="external">一些关于gcc的扩充资料</a></p><h1 id="2-修改、编译uboot"><a href="#2-修改、编译uboot" class="headerlink" title="2.修改、编译uboot"></a>2.修改、编译uboot</h1><p>开始的时候使用的是Tiny4412光盘的uboot，但后续的做完了才发现不行。<br>原来是友善的tiny4412标准版有新旧之分，差别就是更换了不同eMMC，所以导致了有些没有更新eMMC控制器配置的uboot无法启动。<br>因此下了新版的uboot_tiny4412_0929.tar.gz即可。<a href="http://blog.csdn.net/u010245383/article/details/50946170" target="_blank" rel="external">参考链接</a></p><p>目前首先需要实现如下功能：<br>用u-boot引导uImage或者zImage，<br>同时将设备信息以设备树的形式传递给Linux内核，<br>而根文件系统以ramdisk的形式传递给内核，<br>因为目前SD卡驱动、eMMC驱动和usb网卡驱动都没有移植。</p><h2 id="2-1-关闭MMU"><a href="#2-1-关闭MMU" class="headerlink" title="2.1 关闭MMU"></a>2.1 关闭MMU</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim include/configs/tiny4412.h</div></pre></td></tr></table></figure><p>将<code>#define CONFIG_ENABLE_MMU</code>改为<code>#undef CONFIG_ENABLE_MMU</code>;</p><h2 id="2-2-修改u-boot的链接地址"><a href="#2-2-修改u-boot的链接地址" class="headerlink" title="2.2 修改u-boot的链接地址"></a>2.2 修改u-boot的链接地址</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim board/samsung/tiny4412/config.mk</div></pre></td></tr></table></figure><p>将<code>CONFIG_SYS_TEXT_BASE = 0xc3e00000</code>修改为<code>CONFIG_SYS_TEXT_BASE = 0x43e00000</code>;</p><h2 id="2-3-使uboot可以引导uImage"><a href="#2-3-使uboot可以引导uImage" class="headerlink" title="2.3 使uboot可以引导uImage"></a>2.3 使uboot可以引导uImage</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim common/cmd_bootm.c</div></pre></td></tr></table></figure><p>①在<code>boot_os_fn      *boot_fn;</code>后添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">int             iszImage = 0;</div></pre></td></tr></table></figure></p><p>②在<code>images.legacy_hdr_valid = 1;</code>后添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iszImage = 1;</div></pre></td></tr></table></figure></p><p>③修改<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">images.os.os = hdr-&gt;ih_os;</div><div class="line">images.ep = image_get_ep (&amp;images.legacy_hdr_os_copy);</div></pre></td></tr></table></figure></p><p>为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">if(iszImage) &#123;</div><div class="line">    images.os.os = hdr-&gt;ih_os;</div><div class="line">    images.ep = image_get_ep (&amp;images.legacy_hdr_os_copy);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><h2 id="2-4-支持设备树"><a href="#2-4-支持设备树" class="headerlink" title="2.4 支持设备树"></a>2.4 支持设备树</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim include/configs/tiny4412.h</div></pre></td></tr></table></figure><p>添加如下两个宏：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#define CONFIG_OF_LIBFDT</div><div class="line">#define CONFIG_SYS_BOOTMAPSZ (20 &lt;&lt; 20)</div></pre></td></tr></table></figure></p><h2 id="2-5-修改uboot的Makefile"><a href="#2-5-修改uboot的Makefile" class="headerlink" title="2.5 修改uboot的Makefile"></a>2.5 修改uboot的Makefile</h2><p>将原来的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ifeq ($(HOSTARCH),$(ARCH))</div><div class="line">CROSS_COMPILE ?=</div><div class="line">endif</div></pre></td></tr></table></figure></p><p>改为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ifeq ($(ARCH),arm)</div><div class="line">CROSS_COMPILE ?=/work/arm-2014.05/bin/arm-none-linux-gnueabi-</div><div class="line">endif</div></pre></td></tr></table></figure></p><h2 id="2-6-编译uboot"><a href="#2-6-编译uboot" class="headerlink" title="2.6 编译uboot"></a>2.6 编译uboot</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">make distclean</div><div class="line">make tiny4412_config</div><div class="line">make</div></pre></td></tr></table></figure><h1 id="3-移植、编译内核"><a href="#3-移植、编译内核" class="headerlink" title="3.移植、编译内核"></a>3.移植、编译内核</h1><h2 id="3-1-下载最新内核"><a href="#3-1-下载最新内核" class="headerlink" title="3.1 下载最新内核"></a>3.1 下载最新内核</h2><p>下载的当前最新的内核<a href="https://www.kernel.org/" title="Kernel-4.13.9" target="_blank" rel="external">Kernel-4.13.9</a>。<br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/171026/1.2.png?v=1" alt=""><br>解压<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">xz -d linux-4.13.9.tar.xz</div><div class="line">tar xf linux-4.13.9.tar</div></pre></td></tr></table></figure></p><h2 id="3-2-修改Makefile"><a href="#3-2-修改Makefile" class="headerlink" title="3.2 修改Makefile"></a>3.2 修改Makefile</h2><p>将<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ARCH            ?= $(SUBARCH)</div><div class="line">CROSS_COMPILE   ?= $(CONFIG_CROSS_COMPILE:&quot;%&quot;=%)</div></pre></td></tr></table></figure></p><p>改为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ARCH            ?= arm</div><div class="line">CROSS_COMPILE   ?= /work/arm-2014.05/bin/arm-none-linux-gnueabi-</div></pre></td></tr></table></figure></p><h2 id="3-3-修改设备树文件"><a href="#3-3-修改设备树文件" class="headerlink" title="3.3 修改设备树文件"></a>3.3 修改设备树文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim arch/arm/boot/dts/exynos4412-tiny4412.dts</div></pre></td></tr></table></figure><p>在<code>stdout-path = &amp;serial_0;</code>添加启动参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bootargs = &quot;root=/dev/ram0 rw rootfstype=ext4 console=ttySAC0,115200 init=/linuxrc earlyprintk&quot;;</div></pre></td></tr></table></figure></p><p>将<code>sdhci_2</code>节点下的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">status = &quot;okay&quot;;</div></pre></td></tr></table></figure></p><p>改为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">status = &quot;disabled&quot;;</div></pre></td></tr></table></figure></p><h2 id="3-4-编译内核"><a href="#3-4-编译内核" class="headerlink" title="3.4 编译内核"></a>3.4 编译内核</h2><p>Kernel-4.13.9对Exynos 4412支持还不错，直接就有配置文件，使用即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">make distclean</div><div class="line">make ARCH=arm exynos_defconfig</div><div class="line">make uImage LOADADDR=0x40008000</div></pre></td></tr></table></figure></p><p>这里实测出现错误，显示找不到<code>mkimage</code>。<br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/171026/2.png" alt=""><br><code>mkimage</code>是<code>/work/uboot_tiny4412_0929/tools</code>里面的，加入环境变量即可。<a href="解决参考" title="http://blog.csdn.net/armeasy/article/details/6540593">解决参考</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vim /etc/bash.bashrc</div></pre></td></tr></table></figure><p>加入:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export PATH=/work/uboot_tiny4412_0929/tools:$PATH</div></pre></td></tr></table></figure></p><p>更新:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source /etc/bash.bashrc</div></pre></td></tr></table></figure></p><p>重新编译：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make uImage LOADADDR=0x40008000</div></pre></td></tr></table></figure></p><p>生成<code>uImage</code>在<code>arch/arm/boot</code>。</p><h2 id="3-5-编译设备树文件"><a href="#3-5-编译设备树文件" class="headerlink" title="3.5 编译设备树文件"></a>3.5 编译设备树文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make dtbs</div></pre></td></tr></table></figure><p>生成<code>exynos4412-tiny4412.dtb</code>在<code>arch/arm/boot/dts/</code>。   </p><h1 id="4-下载到开发板"><a href="#4-下载到开发板" class="headerlink" title="4.下载到开发板"></a>4.下载到开发板</h1><h2 id="4-1-准备SD卡"><a href="#4-1-准备SD卡" class="headerlink" title="4.1 准备SD卡"></a>4.1 准备SD卡</h2><p>制作SD卡的工具在<code>uboot_tiny4412_0929</code>里面，<br>先编译下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sd_fuse</div><div class="line">make</div></pre></td></tr></table></figure></p><p>插上SD卡，查看当前SD卡挂载位置。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo fdisk -l</div></pre></td></tr></table></figure></p><p>我的是<code>/dev/sdb</code>。</p><h2 id="4-2-制作SD卡，烧uboot"><a href="#4-2-制作SD卡，烧uboot" class="headerlink" title="4.2 制作SD卡，烧uboot"></a>4.2 制作SD卡，烧uboot</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd tiny4412</div><div class="line">./sd_fusing.sh /dev/sdb</div></pre></td></tr></table></figure><p>制作好了，插上开发板，选择SD卡启动，在串口上即可有打印信息。</p><h2 id="4-3-烧写内核、根文件系统、设备树文件"><a href="#4-3-烧写内核、根文件系统、设备树文件" class="headerlink" title="4.3 烧写内核、根文件系统、设备树文件"></a>4.3 烧写内核、根文件系统、设备树文件</h2><p>这里的根文件系统用的网友做好的<a href="ramdisk镜像" title="http://files.cnblogs.com/files/pengdonglin137/ramdisk.zip">ramdisk镜像</a><br>由于tiny4412的uboot目前还不支持usb网卡，只能使用dnw来下载，并且tiny4412的u-boot中已经自带了dnw命令了，Ubuntu上使用<a href="http://files.cnblogs.com/files/pengdonglin137/dnw.tar.gz" title="网友的dnw" target="_blank" rel="external">网友的dnw</a>。</p><p>①下载uImage<br>在u-boot里执行下载uImage的命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dnw 0x40600000   (这个地址不唯一)</div></pre></td></tr></table></figure></p><p>在Ubuntu中执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo ./dnw /work/linux-4.13.9/arch/arm/boot/uImage</div></pre></td></tr></table></figure></p><p>②下载ramdisk<br>在u-boot里执行下载uImage的命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dnw 0x41000000   (这个地址不唯一)</div></pre></td></tr></table></figure></p><p>在开发机中执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo ./dnw /work/ramdisk/ramdisk.img</div></pre></td></tr></table></figure></p><p>③下载设备树镜像<br>在u-boot里执行下载uImage的命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dnw 0x42000000   (这个地址不唯一)</div></pre></td></tr></table></figure></p><p>在开发机中执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo ./dnw /work/linux-4.13.9/arch/arm/boot/dts/exynos4412-tiny4412.dtb</div></pre></td></tr></table></figure></p><h2 id="4-4-启动开发板"><a href="#4-4-启动开发板" class="headerlink" title="4.4 启动开发板"></a>4.4 启动开发板</h2><p>继续输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bootm 0x40600000 0x41000000 0x42000000</div></pre></td></tr></table></figure></p><p>不要重启，现在数据都在RAM里面的，掉电就没了。</p><h1 id="5-实际效果"><a href="#5-实际效果" class="headerlink" title="5.实际效果"></a>5.实际效果</h1><p><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/171026/3.png" alt=""></p><hr><p><div align="center"><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本文采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href="http://hceng.cn/" target="_blank" rel="external">hceng’s blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Exynos 4412移植最新的Kernel-4.13.9。&lt;br&gt;
    
    </summary>
    
    
      <category term="Exynos4412" scheme="http://yoursite.com/tags/Exynos4412/"/>
    
      <category term="内核移植" scheme="http://yoursite.com/tags/%E5%86%85%E6%A0%B8%E7%A7%BB%E6%A4%8D/"/>
    
  </entry>
  
  <entry>
    <title>QT应用设计——HexoBlogClient</title>
    <link href="http://yoursite.com/2017/10/12/QT%E5%BA%94%E7%94%A8%E8%AE%BE%E8%AE%A1%E2%80%94%E2%80%94HexoBlogClient/"/>
    <id>http://yoursite.com/2017/10/12/QT应用设计——HexoBlogClient/</id>
    <published>2017-10-12T01:29:04.000Z</published>
    <updated>2017-11-17T11:47:58.899Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录采用QT开发的hexo博客管理客户端——HexoBlogClient。<br><a id="more"></a></p><h1 id="0-初衷"><a href="#0-初衷" class="headerlink" title="0.初衷"></a>0.初衷</h1><p>做嵌入式这行，如果做界面，几乎只有两个选择：Qt和Android。<br>所以感觉学习下Qt还是很有必要的，顺便回忆点C++。</p><p>国庆节前打了鸡血一样疯狂的学了一周Qt，学了后想做个简单的东西练练手。<br>所做的东西一定要是能解决我的某些痛点的，这样才会让我动力去做。</p><p>思来想去，每次写博客，需要打开Git Bash，输入创建命令、构建、本地预览、发布、备份……<br>虽说之前<a href="GitHub+Hexo搭建及优化——5-5脚本自动化" title="https://hceng.cn/2017/03/06/GitHub+Hexo%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BC%98%E5%8C%96/#5-5脚本自动化：">GitHub+Hexo搭建及优化——5-5脚本自动化</a>中采用了bat脚本一键完成清理、构建、发布这些操作，但每次要打开Git Bash，进入指定路径，输入脚本运行，还是挺麻烦的。</p><p>So，搞个博客客户端一键操作似乎更方便点 = =</p><h1 id="1-设计思路"><a href="#1-设计思路" class="headerlink" title="1.设计思路"></a>1.设计思路</h1><p>写博客，我一般的完整步骤是：</p><blockquote><p>新建博客-&gt;编辑博客-&gt;如果有图片需上传到图床、有代码需上传到GitHub-&gt;清理原来博客的生成的静态页面-&gt;生成新的静态页面-&gt;本地预览-&gt;根据预览效果继续编辑-&gt;满意后再次清理、生成静态页面-&gt;发布博客(GitHub和Coding)-&gt;备份本地的所有源文件到Coding私有库-&gt;访问博客查看。</p></blockquote><p>因此博客客户端首先应该很流畅的实现上面的工作流，其次才是锦上添花的添加其它功能。</p><p>a:本地界面</p><ul><li>a1:打开这个客户端，首先这个页面应该显示出我的文章列表；</li><li>a2:实现<strong>新建博客文章</strong>、<strong>编辑博客文章</strong>等对文章的常用操作；</li><li>a3:实现常用的<strong>清理</strong>、<strong>生成</strong>、<strong>预览</strong>、<strong>发布</strong>、<strong>备份</strong>等功能；</li></ul><hr><p>b:图床界面</p><ul><li>b1:博客文章采用的Markdwon格式，图片需要先保存到图床，然后引用链接。现在的图床方案是上传到七牛。</li><li>b2:在这个界面，需要将图片 通过拖拽/资源管理器 的方式<strong>上传到七牛空间</strong>，并且按照当前的日期，指定路径格式，如：image/blog/170915/1.jpg；</li><li>b3:<strong>返回链接地址</strong>；</li><li>b4:能够<strong>管理已上传的图片</strong>(比如跳转到七牛的存储空间)；</li></ul><hr><p>c:代码界面</p><ul><li>c1:显示出本地代码，通过拖拽/资源管理器 的方式<strong>增减/编辑代码</strong>；</li><li>c2:<strong>上传到GitHub</strong>;</li><li>c3:打开GitHub、Coding；</li></ul><hr><p>d:设置界面</p><ul><li>d1:<strong>设置相关的路径</strong>，比如博客路径；</li><li>d2:<strong>设置图床的配置文件</strong>；</li></ul><hr><p>e:关于界面</p><ul><li>e1:<strong>版本、版权信息</strong>；</li><li>e2:<strong>主页跳转</strong>；</li><li>e3:获取指定文件；</li></ul><hr><p>f:其它</p><ul><li>f1:修改应用图标</li></ul><h1 id="2-程序代码设计"><a href="#2-程序代码设计" class="headerlink" title="2.程序代码设计"></a>2.程序代码设计</h1><p>创建好Qt工程后，工程项目下会有四类文件：<strong>pro工程文件</strong>、<strong>头文件</strong>、<strong>源文件</strong>、<strong>界面文件</strong>。<br>直接打开界面文件的<code>mainwindow.ui</code>,在上面拖动控件，实现界面的设计，再在源文件<code>mainwindow.cpp</code>编辑代码，完成功能的设计。</p><h2 id="2-1-修改应用程序图标"><a href="#2-1-修改应用程序图标" class="headerlink" title="2.1 修改应用程序图标"></a>2.1 修改应用程序图标</h2><p>先做个简单的，修改应用程序的图标。<br>图标显示有两个，一个是打开程序后，在程序左上角显示的图标，一个是在资源管理显示代表该程序的图标。</p><p>首先要准备个ico图片文件，然后把图片加入到工程项目中。<br>在项目中，点击该工程，右键，添加新文件。<br>选择Qt的Qt Resource File，名字写image，之后就会在工程项目生成一个资源文件：image.qrc。<br>再选中image.qrc右键，添加现有文件，选择准备的<code>hexoblogclient.ico</code>图标，这样就将图标添加进了工程。</p><ul><li><p>a:修改程序左上角图标<br>修改源代码mainwindow.cpp，设置打开程序后左上角的图标和显示的文字：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">MainWindow::MainWindow(QWidget *parent) :</div><div class="line">    QMainWindow(parent),</div><div class="line">    ui(<span class="keyword">new</span> Ui::MainWindow)</div><div class="line">&#123;</div><div class="line">    ui-&gt;setupUi(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">    <span class="keyword">this</span>-&gt;setWindowIcon(QIcon(<span class="string">"://image/hexoblogclient.ico"</span>));<span class="comment">//设置图标</span></div><div class="line">    <span class="keyword">this</span>-&gt;setWindowTitle(<span class="string">"HexoBlogClient"</span>);<span class="comment">//设置名字</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/171012/1.png" alt=""></p></li><li><p>b:修改应用程序图标<br>在工程目录下创建一个<code>appicon.rc</code>文件，文件内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">IDI_ICON1   ICON    DISCARDABLE &quot;image/hexoblogclient.ico&quot;</div></pre></td></tr></table></figure></li></ul><p>再在<code>HexoBlogClient.pro</code>文件添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">RC_FILE += \</div><div class="line">    appicon.rc</div></pre></td></tr></table></figure></p><p>此时重新编译，应用程序图标也变成了ico图案。<br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/171012/2.png" alt=""></p><h2 id="2-2-本地界面"><a href="#2-2-本地界面" class="headerlink" title="2.2 本地界面"></a>2.2 本地界面</h2><ul><li><strong>界面设计</strong></li></ul><ol><li>使用<code>tabWidget</code>控件作为每个界面的容器；</li><li>使用<code>treeView</code>控件显示文章列表；</li><li>使用<code>pushButton</code>控件作为按键；</li><li>使用<code>label</code>控件显示当前文章总数和时间；</li></ol><p>效果如下：<br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/171012/3.png" alt=""></p><ul><li><strong>功能设计</strong><br>实例化一个<code>QFileSystemModel</code>类，筛选出<code>*.md</code>文件，指定文件路径，隐藏其它<code>Column</code>（也就是只显示文件名，不显示大小、日期等信息），然后以日期为标准，降序排列，最后将信息显示到<code>treeView</code>上。<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">QFileSystemModel *model1 = <span class="keyword">new</span> QFileSystemModel();</div><div class="line">model1-&gt;setRootPath(<span class="string">"E:/hceng blog/blog/source/_posts"</span>);</div><div class="line"></div><div class="line">QStringList nameFilter1;</div><div class="line">nameFilter1 &lt;&lt; <span class="string">"*.md"</span>;</div><div class="line">model1-&gt;setNameFilterDisables(<span class="literal">false</span>);</div><div class="line">model1-&gt;setNameFilters(nameFilter1);<span class="comment">//筛选文件类型</span></div><div class="line">ui-&gt;treeView1-&gt;setModel(model1);</div><div class="line">ui-&gt;treeView1-&gt;setRootIndex(model1-&gt;index(<span class="string">"E:/hceng blog/blog/source/_posts"</span>));<span class="comment">//指定路径</span></div><div class="line">ui-&gt;treeView1-&gt;setColumnHidden(<span class="number">1</span>,<span class="literal">true</span>);<span class="comment">//隐藏显示</span></div><div class="line">ui-&gt;treeView1-&gt;setColumnHidden(<span class="number">2</span>,<span class="literal">true</span>);</div><div class="line">ui-&gt;treeView1-&gt;setColumnHidden(<span class="number">3</span>,<span class="literal">true</span>);</div><div class="line"></div><div class="line">ui-&gt;treeView1-&gt;setSortingEnabled(<span class="literal">true</span>);<span class="comment">//使能排序</span></div><div class="line">ui-&gt;treeView1-&gt;sortByColumn(<span class="number">3</span>, Qt::DescendingOrder);<span class="comment">//以时间作为依据排序；升序：Qt::AscendingOrder 降序：Qt::DescendingOrder</span></div></pre></td></tr></table></figure></li></ul><p>接下来是8个功能按键，很多是直接调用的bat脚本实现功能的。</p><p>首先是“<strong>新建</strong>”按钮，获取输入的标题，然后判断是否为空以及是否按下“确定”，这里直接创建了个新的Markdwon文件，然后写入基本的模板格式。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> MainWindow::on_pushButton11_clicked()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">bool</span> ok;</div><div class="line">    QString text = QInputDialog::getText(<span class="keyword">this</span>, tr(<span class="string">"新建博客"</span>),tr(<span class="string">"请输入标题:"</span>), QLineEdit::Normal,<span class="literal">NULL</span>, &amp;ok);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ( ok &amp;&amp; !text.isEmpty() )</div><div class="line">    &#123;</div><div class="line">        <span class="comment">/*</span></div><div class="line">            ---</div><div class="line">            title: "格式"</div><div class="line">            date:2017-10-11 15:11:33</div><div class="line">            tags:</div><div class="line">                 - xx</div><div class="line">            toc: true</div><div class="line">            ---</div><div class="line">            summary</div><div class="line">            &lt;!-- more --&gt;</div><div class="line">         */</div><div class="line"></div><div class="line">        QDateTime time = QDateTime::currentDateTime();</div><div class="line">        QString strTime = time.toString(<span class="string">"yyyy-MM-dd hh:mm:ss "</span>);</div><div class="line">        <span class="function">QFile <span class="title">namefile</span><span class="params">(<span class="string">"E:\\hceng blog\\blog\\source\\_posts\\"</span>+text+<span class="string">".md"</span>)</span></span>;</div><div class="line">        <span class="comment">//qDebug()&lt;&lt;strTime;</span></div><div class="line">        <span class="keyword">if</span> (!namefile.open(QIODevice::WriteOnly | QIODevice::Truncate))</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        <span class="function">QTextStream <span class="title">out</span><span class="params">(&amp;namefile)</span></span>;</div><div class="line">        out&lt;&lt;<span class="string">"---"</span>&lt;&lt;<span class="string">'\n'</span>&lt;&lt;<span class="string">"title: \""</span>+text+<span class="string">"\""</span>&lt;&lt;<span class="string">'\n'</span>&lt;&lt;<span class="string">"date: "</span>&lt;&lt;strTime&lt;&lt;<span class="string">'\n'</span>;</div><div class="line">        out&lt;&lt;<span class="string">"tags: "</span>&lt;&lt;<span class="string">'\n'</span>&lt;&lt;<span class="string">"     - xx"</span>&lt;&lt;<span class="string">'\n'</span>&lt;&lt;<span class="string">"toc: true"</span>&lt;&lt;<span class="string">'\n'</span>&lt;&lt;<span class="string">"---"</span>&lt;&lt;<span class="string">'\n'</span>;</div><div class="line">        out&lt;&lt;<span class="string">"summary"</span>&lt;&lt;<span class="string">'\n'</span>&lt;&lt;<span class="string">"&lt;!-- more --&gt;"</span>&lt;&lt;<span class="string">'\n'</span>;</div><div class="line">        namefile.close();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(ok &amp;&amp; text.isEmpty() )</div><div class="line">    &#123;</div><div class="line">        QMessageBox::information(<span class="keyword">this</span>,<span class="string">"信息"</span>,<span class="string">"请输入标题."</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>然后是“<strong>编辑</strong>”按键，先获得当前treeView选择的文件，再通过桌面服务使用默认程序打开该文件。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> MainWindow::on_pushButton12_clicked()</div><div class="line">&#123;</div><div class="line">    QString currentFilePath = model1-&gt;filePath(ui-&gt;treeView1-&gt;currentIndex());</div><div class="line">    <span class="keyword">if</span> (!currentFilePath.isEmpty())</div><div class="line">    &#123;</div><div class="line">       qDebug()&lt;&lt;<span class="string">"file://"</span>+currentFilePath;</div><div class="line">       QDesktopServices::openUrl(QUrl(<span class="string">"file:///"</span>+currentFilePath));</div><div class="line">       <span class="comment">//QDesktopServices::openUrl(QUrl("file:///E:/hceng blog/blog/source/_posts/测试文章.md"));</span></div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>“<strong>清理&amp;重构</strong>”按键调用的脚本执行，等同执行的<code>hexo c &amp; hexo g</code>，最后使用<code>QMessageBox</code>显示截取的部分数据；调用<code>cmd.exe</code>的时候，在纠结使用<code>startDetached</code>还是<code>start</code>，前者是完全独立的启动，后者类似调用。执行脚本需要一定时间，通常都是数秒以上，使用<code>start</code>会出现未响应的情况，但如果使用<code>startDetached</code>可能会多次按该按键，导致启动多次，不知道什么时候完成。最后还是选的<code>start</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> MainWindow::on_pushButton13_clicked()</div><div class="line">&#123;</div><div class="line">    ui-&gt;pushButton13-&gt;setText(<span class="string">"请等待……"</span>);</div><div class="line"></div><div class="line">    QTime dieTime = QTime::currentTime().addMSecs(<span class="number">100</span>);<span class="comment">//延时0.1s</span></div><div class="line">    <span class="keyword">while</span>( QTime::currentTime() &lt; dieTime )</div><div class="line">    QCoreApplication::processEvents(QEventLoop::AllEvents, <span class="number">100</span>);</div><div class="line"></div><div class="line">    QProcess *process=<span class="keyword">new</span> QProcess(<span class="keyword">this</span>);</div><div class="line">    <span class="comment">//process-&gt;startDetached("cmd.exe", QStringList() &lt;&lt; "/c" &lt;&lt; "D:\\git\\qt\\HexoBlogClient\\bat\\clean_creat.bat");</span></div><div class="line">    process-&gt;start(<span class="string">"cmd.exe"</span>, QStringList() &lt;&lt; <span class="string">"/c"</span> &lt;&lt; <span class="string">"D:\\git\\qt\\HexoBlogClient\\bat\\clean_creat.bat"</span>);</div><div class="line">    process-&gt;waitForFinished();</div><div class="line"></div><div class="line">    ui-&gt;pushButton13-&gt;setText(<span class="string">"清理&amp;&amp;重构"</span>);</div><div class="line"></div><div class="line">    QString strTemp=QString::fromLocal8Bit(process-&gt;readAllStandardOutput());</div><div class="line">    <span class="comment">//strTemp = strTemp.section('O',-1,-1);</span></div><div class="line">    strTemp = strTemp.section(<span class="string">'l'</span>,<span class="number">-2</span>,<span class="number">-1</span>);</div><div class="line">    qDebug()&lt;&lt;strTemp;</div><div class="line"></div><div class="line">    QMessageBox testMassage;</div><div class="line">    testMassage.setText(strTemp);</div><div class="line">    testMassage.exec();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>“<strong>预览/停止</strong>”按键也是调用的脚本的命令：<code>hexo s</code>，关闭的时候通过读取进程列表，关闭指定端口的进程。实测中，有一定概率误关掉整个浏览器。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> MainWindow::on_pushButton14_clicked()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(pushButton14Flag == <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        QProcess *process=<span class="keyword">new</span> QProcess(<span class="keyword">this</span>);</div><div class="line">        process-&gt;start(<span class="string">"cmd.exe"</span>, QStringList() &lt;&lt; <span class="string">"/c"</span> &lt;&lt; <span class="string">"D:\\git\\qt\\HexoBlogClient\\bat\\view.bat"</span>);</div><div class="line">        process-&gt;waitForFinished();</div><div class="line"></div><div class="line">        <span class="comment">/*</span></div><div class="line">        QTime dieTime = QTime::currentTime().addMSecs(1000);//延时1s</div><div class="line">        while( QTime::currentTime() &lt; dieTime )</div><div class="line">        QCoreApplication::processEvents(QEventLoop::AllEvents, 100);</div><div class="line">        */</div><div class="line">        QDesktopServices::openUrl(QUrl(<span class="string">"http://localhost:4000/"</span>));</div><div class="line">        ui-&gt;pushButton14-&gt;setText(<span class="string">"停止"</span>);</div><div class="line">        pushButton14Flag = <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        QProcess *process=<span class="keyword">new</span> QProcess(<span class="keyword">this</span>);</div><div class="line">        process-&gt;start(<span class="string">"cmd.exe"</span>, QStringList() &lt;&lt; <span class="string">"/c"</span> &lt;&lt; <span class="string">"D:\\git\\qt\\HexoBlogClient\\bat\\stop_view.bat"</span>);</div><div class="line">        process-&gt;waitForFinished();</div><div class="line">        ui-&gt;pushButton14-&gt;setText(<span class="string">"预览"</span>);</div><div class="line">        pushButton14Flag = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>“<strong>发布</strong>”也比较花时间，也是调用脚本的命令：<code>hexo d</code><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> MainWindow::on_pushButton15_clicked()</div><div class="line">&#123;</div><div class="line">    ui-&gt;pushButton15-&gt;setText(<span class="string">"请等待……"</span>);</div><div class="line"></div><div class="line">    QTime dieTime = QTime::currentTime().addMSecs(<span class="number">100</span>);<span class="comment">//延时0.1s</span></div><div class="line">    <span class="keyword">while</span>( QTime::currentTime() &lt; dieTime )</div><div class="line">    QCoreApplication::processEvents(QEventLoop::AllEvents, <span class="number">100</span>);</div><div class="line"></div><div class="line">    QProcess *process=<span class="keyword">new</span> QProcess(<span class="keyword">this</span>);</div><div class="line">    process-&gt;start(<span class="string">"cmd.exe"</span>, QStringList() &lt;&lt; <span class="string">"/c"</span> &lt;&lt; <span class="string">"D:\\git\\qt\\HexoBlogClient\\bat\\deploy.bat"</span>);</div><div class="line">    process-&gt;waitForFinished();</div><div class="line"></div><div class="line">    ui-&gt;pushButton15-&gt;setText(<span class="string">"发布"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>“<strong>备份</strong>”是将整个工程上传到Coding的私有库，原理还是git。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> MainWindow::on_pushButton16_clicked()</div><div class="line">&#123;</div><div class="line">    ui-&gt;pushButton16-&gt;setText(<span class="string">"请等待……"</span>);</div><div class="line"></div><div class="line">    QTime dieTime = QTime::currentTime().addMSecs(<span class="number">100</span>);<span class="comment">//延时0.1s</span></div><div class="line">    <span class="keyword">while</span>( QTime::currentTime() &lt; dieTime )</div><div class="line">    QCoreApplication::processEvents(QEventLoop::AllEvents, <span class="number">100</span>);</div><div class="line"></div><div class="line">    QProcess *process=<span class="keyword">new</span> QProcess(<span class="keyword">this</span>);</div><div class="line">    process-&gt;start(<span class="string">"cmd.exe"</span>, QStringList() &lt;&lt; <span class="string">"/c"</span> &lt;&lt; <span class="string">"D:\\git\\qt\\HexoBlogClient\\bat\\bak.bat"</span>);</div><div class="line">    process-&gt;waitForFinished();</div><div class="line"></div><div class="line">    ui-&gt;pushButton16-&gt;setText(<span class="string">"备份"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>“<strong>发布&amp;备份</strong>”是前面两个的结合。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> MainWindow::on_pushButton17_clicked()</div><div class="line">&#123;</div><div class="line">    ui-&gt;pushButton17-&gt;setText(<span class="string">"请等待……"</span>);</div><div class="line"></div><div class="line">    QTime dieTime = QTime::currentTime().addMSecs(<span class="number">100</span>);<span class="comment">//延时0.1s</span></div><div class="line">    <span class="keyword">while</span>( QTime::currentTime() &lt; dieTime )</div><div class="line">    QCoreApplication::processEvents(QEventLoop::AllEvents, <span class="number">100</span>);</div><div class="line"></div><div class="line">    QProcess *process=<span class="keyword">new</span> QProcess(<span class="keyword">this</span>);</div><div class="line">    process-&gt;start(<span class="string">"cmd.exe"</span>, QStringList() &lt;&lt; <span class="string">"/c"</span> &lt;&lt; <span class="string">"D:\\git\\qt\\HexoBlogClient\\bat\\deploy_bak.bat"</span>);</div><div class="line">    process-&gt;waitForFinished();</div><div class="line"></div><div class="line">    ui-&gt;pushButton17-&gt;setText(<span class="string">"发布&amp;&amp;备份"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>“<strong>访问</strong>”就仅仅是打开博客链接，不用再在浏览器里翻了。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> MainWindow::on_pushButton18_clicked()</div><div class="line">&#123;</div><div class="line">    QDesktopServices::openUrl(QUrl(<span class="string">"https://hceng.cn/"</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>最下面的统计文件数量和显示当前时间，是个定时任务，每秒都刷新这两个<code>label</code>。<br>文件数量是获取博客文章路径的<code>fileInfoList</code>,然后获得文件数量，再转换成字符类型追加到<code>label</code>中。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//timeshow</span></div><div class="line">QTimer *timer = <span class="keyword">new</span> QTimer(<span class="keyword">this</span>);</div><div class="line">connect(timer,SIGNAL(timeout()),<span class="keyword">this</span>,SLOT(timerUpdate()));</div><div class="line">timer-&gt;start(<span class="number">1000</span>);</div></pre></td></tr></table></figure></p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> MainWindow::timerUpdate(<span class="keyword">void</span>)</div><div class="line">&#123;</div><div class="line">    QDateTime time = QDateTime::currentDateTime();</div><div class="line">    QString strTime = time.toString(<span class="string">"yyyy-MM-dd dddd hh:mm:ss "</span>);</div><div class="line">    ui-&gt;label1-&gt;setText(strTime);</div><div class="line"></div><div class="line">    QDir *dir=<span class="keyword">new</span> QDir(<span class="string">"E:/hceng blog/blog/source/_posts"</span>);</div><div class="line">    QStringList filter;</div><div class="line">    filter&lt;&lt;<span class="string">"*.md"</span>;</div><div class="line">    dir-&gt;setNameFilters(filter);</div><div class="line">    <span class="comment">//QList&lt;QFileInfo&gt; *fileInfo=new QList&lt;QFileInfo&gt;(dir-&gt;entryInfoList(filter));</span></div><div class="line">    QFileInfoList fileInfoList=dir-&gt;entryInfoList(filter);<span class="comment">//在qt中有typedef QList&lt;QFileInfo&gt; QFileInfoList;所以两者等价</span></div><div class="line"></div><div class="line">    QString fileCount = QString::number(fileInfoList.count(), <span class="number">10</span>);</div><div class="line">    QString strCount = <span class="string">"文章总数："</span>;</div><div class="line">    strCount.append(fileCount);</div><div class="line">    ui-&gt;label2-&gt;setText(strCount);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="2-3-图床界面"><a href="#2-3-图床界面" class="headerlink" title="2.3 图床界面"></a>2.3 图床界面</h2><h2 id="2-4-代码界面"><a href="#2-4-代码界面" class="headerlink" title="2.4 代码界面"></a>2.4 代码界面</h2><h2 id="2-5-设置界面"><a href="#2-5-设置界面" class="headerlink" title="2.5 设置界面"></a>2.5 设置界面</h2><h2 id="2-6-关于界面"><a href="#2-6-关于界面" class="headerlink" title="2.6 关于界面"></a>2.6 关于界面</h2><h1 id="3-计划"><a href="#3-计划" class="headerlink" title="3.计划"></a>3.计划</h1><p>最近有点忙/懒，图床部分，看了下，要研究下七牛的API，暂时没那个精力。<br>试着用了下客户端，还是比较满意的，不用打开资源管理器和git-bash了，上传图片和代码，还是和原来一样，觉得不流畅，后面有时间，有精力了再研究。<br>后面最想做的有两个：</p><ol><li>实现配置文件的读取/写入；</li><li>获取服务器指定图片；</li></ol><p>加上国庆，话说有半个月没摸驱动了，Qt暂停下，先玩玩驱动。<br>目前只完成了第一个主界面，后面的几乎没做，如果有志同道合的朋友可以交流下，一起完成。</p><hr><p><div align="center"><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本文采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href="http://hceng.cn/" target="_blank" rel="external">hceng’s blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要记录采用QT开发的hexo博客管理客户端——HexoBlogClient。&lt;br&gt;
    
    </summary>
    
    
      <category term="QT" scheme="http://yoursite.com/tags/QT/"/>
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Photoshop基础2——工具</title>
    <link href="http://yoursite.com/2017/09/23/Photoshop%E5%9F%BA%E7%A1%802%E2%80%94%E2%80%94%E5%B7%A5%E5%85%B7/"/>
    <id>http://yoursite.com/2017/09/23/Photoshop基础2——工具/</id>
    <published>2017-09-23T09:29:23.000Z</published>
    <updated>2017-09-23T05:52:51.339Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录Photoshop相关理论基础第二部分：工具。<br><a id="more"></a></p><p><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/170923/1.png" alt=""></p><h1 id="1-修饰工具"><a href="#1-修饰工具" class="headerlink" title="1.修饰工具"></a>1.修饰工具</h1><p>可用于局部修复。</p><h2 id="1-1-污点修复工具"><a href="#1-1-污点修复工具" class="headerlink" title="1.1 污点修复工具"></a>1.1 污点修复工具</h2><ul><li>污点修复画笔(去斑)</li><li>修复画笔(取代图章工具,色彩完好)</li><li>修补(无缝复制另外一块区域,亮度色彩融合最佳)</li><li>红眼(非常方便,大小图象都可适用)</li></ul><h2 id="1-2-图章工具"><a href="#1-2-图章工具" class="headerlink" title="1.2 图章工具"></a>1.2 图章工具</h2><ul><li>仿制图章：用得较少，一般用 修复画笔 代替；</li><li>图案图章：<br>1.定义图章：选择区域→编辑→定义图案；<br>2.生成图章：滤镜→图案生成器→选择区域→生成（不满意点击再次生成）;<br>3.使用图章：填充图案，选择区域，CTRL+G或者使用油漆桶填充图案;  </li></ul><h2 id="1-3-橡皮擦工具"><a href="#1-3-橡皮擦工具" class="headerlink" title="1.3 橡皮擦工具"></a>1.3 橡皮擦工具</h2><ul><li>背景橡皮擦：智能擦除背景颜色,效果类似抠图；</li><li>魔术橡皮擦：魔术棒+橡皮擦工具的使用；</li><li><h2 id="1-4-模糊工具"><a href="#1-4-模糊工具" class="headerlink" title="1.4 模糊工具"></a>1.4 模糊工具</h2></li><li>模糊工具：选中区域变模糊；</li><li>锐化工具：非常谨慎的使用，非常容易出现杂色；</li><li>涂抹工具：效果不好，一般选择滤镜→液化实现效果； </li></ul><h2 id="1-5-减淡工具"><a href="#1-5-减淡工具" class="headerlink" title="1.5 减淡工具"></a>1.5 减淡工具</h2><ul><li>减淡工具：提升亮度，减少颜色（改变肤色），类似滤色效果；</li><li>加深工具：降低亮度，加重颜色（显瘦）；</li><li>海棉工具：有加色和减色模式，色相不变，增加饱和度，减色相反；</li></ul><hr><h1 id="2-绘画工具"><a href="#2-绘画工具" class="headerlink" title="2.绘画工具"></a>2.绘画工具</h1><p>可用于局部修饰。</p><h2 id="2-1-画笔工具"><a href="#2-1-画笔工具" class="headerlink" title="2.1 画笔工具"></a>2.1 画笔工具</h2><p>画笔工具的核心概念:<strong>模式选择</strong><br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/170923/2.png?v=1" alt=""></p><p>模式可以分为6组：</p><blockquote><ul><li>A组:正常 溶解 背后 清除</li><li>B组:变暗 正片叠低 颜色加深 线性加深　深色</li><li>C组:变亮 滤色 颜色减淡 线性减淡 浅色　　　　　　注:b组和c组是数值对立的</li><li>D组:叠加 柔光 强光 亮光 线性光 点光 实色混合　　　注:都是光,变化不大,很微妙,有共同点</li><li>E组:差值 排除　减去　划分　　　　　　　　　　　　注:两者是反值;负片效果</li><li>F组:色相 饱和度 颜色 明度　　　　　　　　　　　　注:基于人眼的视觉效果HSB模式,多了一个颜色模式</li></ul></blockquote><hr><div align="center">  <strong>模式解释</strong>  </div><p><strong>A组:</strong></p><ul><li><p><strong>溶解</strong>：根据画笔硬度画出 扩散溶解效果，硬度越高溶解越少，硬度越低溶解越大（越虚）；</p></li><li><p><strong>背后</strong>：后画的笔画是画在上一笔的背后,即下一层；表示被当住了画后面的；两次绘画不同颜色的画笔即可看出效果；</p></li><li><p><strong>清除</strong>：类似橡皮擦工具；</p></li></ul><p>背后的使用特点：<br>1.使用背后的前提条件是 必须同一个图层之中存在透明区域（用魔术棒选中删了），否则无法显示，因为是在像素之后绘画；<br>2.使用背后，可以很容易的在后面做出光晕等好看的效果，不会损害前面的象素；</p><hr><p><strong>B组 vs C组:</strong></p><ul><li><strong>变暗</strong>：以前景色为基础，前景色与画面中笔触的颜色作为背景色做对比，画面中比前景色亮的颜色都变成前景色,比前景色暗的颜色不发生变化;即以一种颜色作为整个画面最亮的色，降低了整个画面亮度；</li><li><strong>变亮</strong>：与变暗相反，所有比前景色亮的都不变,与前景色暗的地方都变成前景色；<br><br></li><li><strong>正片叠底</strong>：颜色加深，对色调进行修改。是RGB模式和CMYK模式中加色与减色的应用，这里对应CMYK的减色模式，即用RGB叠加，越加越暗，直到黑色；</li><li><strong>滤色</strong>：颜色提亮，和正片叠底相反，对应加色模式，即用RGB颜色叠加，越加越亮，直到白色；<br>混和技巧:<br>加亮时用滤色，变暗时用正片叠底；<br>滤色用黑色前景时无效果，正片叠底时用白色无效果（即不允许存在）;<br>照片去黑色背景或白色背景时直接使用（在图层中）滤色或正片叠底；<br>参考前面的：<a href="https://hceng.cn/2017/09/15/Photoshop%E5%9F%BA%E7%A1%801%E2%80%94%E2%80%94%E8%89%B2%E5%BD%A9/#more" target="_blank" rel="external">Photoshop基础1——色彩</a><br><br></li><li><strong>颜色加深</strong>：查看每个通道中的颜色信息，增加对比度使基色变暗以反映混合色，如果与白色混合的话将不会产生变化，”颜色加深”模式创建的效果和“正片叠底”模式创建的效果比较类似;</li><li><strong>颜色减淡</strong>：查看每个通道中的颜色信息，通过减小对比度使基色变亮以反映混合色，与黑色混合则不发生变化。除了指定在这个模式的层上边缘区域更尖锐，以及在这个模式下着色的笔划之外，“颜色减淡”模式类似于“滤色”模式创建的效果；<br><br></li><li><strong>线性加深</strong>：查看每个通道中的颜色信息通过减小亮度使“基色”变暗以反映混合色，如果“混合色”与“基色”上的白色混合后将不会产生变化；</li><li><strong>线性减淡</strong>：查看每个通道中的颜色信息通过增加亮度使“基色”变亮以反映混合色，如果“混合色”与“基色”上的黑色混合后将不会产生变化；<br><br></li><li><strong>深色</strong>：比较混合色和基色的所有通道值的总和并显示值较小的颜色，即较深色的颜色。“深色”不会生成第三种颜色（可以通过“变暗”混合获得），因为它将从基色和混合色中选择最小的通道值来创建结果颜色；</li><li><strong>浅色</strong>：和深色相反，显示较浅的颜色；</li></ul><hr><p><strong> D组:</strong></p><ul><li><strong>叠加</strong>：亮度不变,颜色重叠；</li><li><strong>柔光</strong>：屏蔽中性灰度,颜色取中间值；</li><li><strong>线性光</strong>：光线不随距离减弱；</li><li><strong>点光</strong>：光线随着距离逐渐减弱；</li></ul><hr><p><strong> E组:</strong></p><ul><li><strong>差值</strong>：负片效果，使用画笔时直接转换为负片（所画为互补色=色环上对面的颜色）；</li><li><strong>排除</strong>：也是负片效果,只是淡一些；</li></ul><hr><p><strong> F组:</strong></p><ul><li><strong>色相</strong>：锁定前景色HSB模式中颜色的值，即H值，只涂抹颜色;与S、B无关；</li><li><strong>饱和度</strong>：同上只锁定饱和度S；</li><li><strong>亮度</strong>：同上只锁定亮度B；</li><li><strong>颜色</strong>：给黑白片着色使用，亮度不变只改变颜色和饱和度，如果用 正常 的话会把亮度饱和也改变了（黑白图无色相，无饱和度）；</li></ul><h2 id="2-2-替换颜色工具"><a href="#2-2-替换颜色工具" class="headerlink" title="2.2 替换颜色工具"></a>2.2 替换颜色工具</h2><p>比抽出更改更方便，选择相应的模式：色相、饱和度、明度、颜色，可以方便的替换颜色,不用担心边缘被更改；</p><h2 id="2-3-历史记录画笔"><a href="#2-3-历史记录画笔" class="headerlink" title="2.3 历史记录画笔"></a>2.3 历史记录画笔</h2><p>配合历史记录调板使用，做了特效后部分恢复，局部修饰；<br>裁剪时部分无法使用历史绘画笔时，重新定义记录状态（把画笔位置放在裁切位置就可以用了）;</p><h2 id="2-4-历史记录艺术画笔"><a href="#2-4-历史记录艺术画笔" class="headerlink" title="2.4 历史记录艺术画笔"></a>2.4 历史记录艺术画笔</h2><p>在恢复时增加笔触效果，菜单下面可以选择样式与模式，可以做出很有特色的艺术效果；</p><h2 id="2-5-渐变工具"><a href="#2-5-渐变工具" class="headerlink" title="2.5 渐变工具"></a>2.5 渐变工具</h2><p>有5种类型：线性渐变、径向渐变、锥性渐变、对称渐变、菱形渐变；</p><p><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/170923/3.png" alt=""><br>上面表示透明度，下面表示颜色。<br>可以任意添加油漆桶，两个油漆桶之间的菱形表示过渡位置；</p><p>渐变编辑器里调节渐变类型时可以选择杂色渐变，同时可以选择限制色彩范围；<br>填充时并且可以选择混合模式，如在背后模式中选择锥形渐变可以画出强烈的光照效果；<br>油漆桶可以选择图案填充模式；</p><p>参考资料：<a href="https://helpx.adobe.com/cn/photoshop/using/tools.html" target="_blank" rel="external">Photoshop 用户指南——工具库</a></p><hr><p><div align="center"><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本文采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href="http://hceng.cn/" target="_blank" rel="external">hceng’s blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要记录Photoshop相关理论基础第二部分：工具。&lt;br&gt;
    
    </summary>
    
    
      <category term="设计" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="Photoshop" scheme="http://yoursite.com/tags/Photoshop/"/>
    
  </entry>
  
  <entry>
    <title>Photoshop基础1——色彩</title>
    <link href="http://yoursite.com/2017/09/15/Photoshop%E5%9F%BA%E7%A1%801%E2%80%94%E2%80%94%E8%89%B2%E5%BD%A9/"/>
    <id>http://yoursite.com/2017/09/15/Photoshop基础1——色彩/</id>
    <published>2017-09-15T09:29:23.000Z</published>
    <updated>2017-09-23T03:47:38.889Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录Photoshop相关理论基础第一部分：色彩。<br><a id="more"></a></p><p>又开始折腾了，在驱动的世界稍微能喘上口气，就又闲不住了。最近兼职了当了下美工，又燃起了对设计的热情，抽空余时间，学下设计基础。</p><h1 id="1-色彩模式"><a href="#1-色彩模式" class="headerlink" title="1.色彩模式"></a>1.色彩模式</h1><p>色彩模式常用的有四种：</p><blockquote><p>①HSB:基于人眼视觉的颜色模式；<br>②RGB:基于光色的颜色模式，是加色模式，两者组合变亮；<br>③CMYK:基于印刷颜料的颜色模式，是减色模式，两者组合变暗；<br>④Lab:基于人对颜色的感觉，与设备无关，色域宽阔；</p></blockquote><p><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/170915/1.jpg" alt=""></p><hr><p><strong>（1） HSB：</strong></p><ul><li><strong>(色相H(Hue)</strong>：在0~360°的标准色环上，按照角度值标识。比如红是0°、橙色是30°等，黑白无色相;</li><li><strong>饱和度S(Saturation)</strong>：是指颜色的强度或纯度。饱和度表示色相中彩色成分所占的比例，用从0%(灰色)~100%(完全饱和)的百分比来度量;</li><li><strong>亮度B(Brightness)</strong>：是颜色的明暗程度，通常是从0(暗)~100%(亮)的百分比来度量的;</li></ul><hr><p><strong>（2）RGB：</strong></p><ul><li><strong>R(Red)</strong>：0~255阶,一共256阶色;</li><li><strong>G(Green)</strong>：0~255阶,一共256阶色;</li><li><strong>B(Blue)</strong>：0~255阶,一共256阶色;<br>其中：白色：R G B:255 255 255；黑色：R G B:0   0   0；</li></ul><hr><p><strong>（3）CMYK：</strong></p><ul><li><strong>C(Cyan青色)</strong>：0~100%;</li><li><strong>M(Magenta品红色)</strong>：0~100%;</li><li><strong>Y(Yellow黄色)</strong>：0~100%;</li><li><strong>K(Key Plate黑墨印刷版)</strong>：0~100%;<br>CMKK放在一起可以综合出其他的色彩，<br>前3种都是0%的时候印刷成无色,即白色；都为100%的时候印不出纯黑色，工艺达不到，有杂质,所以加入K黑色用来印刷纯黑色;</li></ul><hr><p><strong>（4）Lab：</strong></p><ul><li><strong>L(Luminosity亮度)</strong>：0~100%;</li><li><strong>a</strong>：表示从洋红色至绿色的范围，+127~-128;</li><li><strong>b</strong>：表示从黄色至蓝色的范围，+127~-128;<br>当a=0、b=0时显示灰色,同时L=100时为白色,L=0时为黑色;</li></ul><p>在表达色彩范围上，最全的是Lab模式，其次是RGB模式，最窄的是CMYK模式。<br>也就是说Lab模式所定义的色彩最多，且与光线及设备无关，并且处理速度与RGB模式同样快，比CMYK模式快数倍。<br>因此，可放心大胆的在图像编辑中使用Lab模式，而且，Lab模式保证在转换成CMYK模式时色彩最少丢失或被替代。因此，从理论上讲最佳避免色彩损失的方法是：应用Lab模式编辑图像，再转换CMYK模式打印。</p><h1 id="2-加色-减色模式"><a href="#2-加色-减色模式" class="headerlink" title="2.加色/减色模式"></a>2.加色/减色模式</h1><p>在RGB模式中，<br>如果RGB的值为（0,0,0），那么就是黑色，<br>如果是（255,255,255）就是白色。<br>这很容易理解，试想一下一个黑屋子里什么灯都不打开，就是漆黑一片；相反如果红灯、绿灯、蓝灯都开到最亮，那么屋子里就是一片明亮。﻿</p><p>而在CMYK模式中，<br>如果在印刷的时候，把CMYK的值设为（0,0,0,0），那么就等于什么颜料都没上，纸还是白色的；<br>如果把油墨设为（100%,100%,100%,100%），所有颜料都浓浓地刷上一遍，印出来的就是黑色。<br>由于颜色来自于光线，那么黑色自然就是什么颜色都没有，而白色则包含了很多种颜色。</p><p>因此，<strong>RGB模式被称之为加色模式</strong>，<strong>CMYK被被称之为减色模式</strong>。﻿</p><p>之所以会有这两种模式，还是因为它们对应的颜色表现媒介的不同。<br>在加色模式中，颜色是由光线直接照射产生的，所以只要有光线叠加，颜色就会越来越亮，最终成为白色。<br>而减色模式中，颜色是通过颜料吸收光线来产生的，要表现一种颜色，就要想办法把光线中其他的颜色过滤掉，也就是减掉，如果什么颜料都不上，光线就被全部反射，看到的依然是白光。﻿</p><p>那么加色模式和减色模式到底有什么用？﻿<br>简单来讲，加色模式就是使颜色变亮，减色模式使颜色变暗。</p><p>在PS中，经常用到的<strong>加色和减色工具</strong>分别是<strong>滤色和正片叠底</strong>。<br>例如，想要去掉一张图片的黑色背景效果，就可以将图层混合模式设为滤色，<br>相反，如果要去掉白色背景，则选择正片叠底。<br>另外，也可以将画笔工具设为加色和减色属性，对图片进行局部的修饰。<br>这样做的好处是，避免了做选区的大量工作，而且修饰起来比做选区要更加精准和美观。﻿<br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/170915/2.jpg?v=1" alt="">﻿﻿﻿﻿﻿﻿﻿﻿﻿</p><h1 id="3-分辨率"><a href="#3-分辨率" class="headerlink" title="3.分辨率"></a>3.分辨率</h1><p>PS中，分辨的单位有<strong> 像素/英寸 </strong>和<strong> 像素/厘米 </strong>，一般默认使用前者。</p><p>一般显示器采用72DPI,印刷品采用300DPI。</p><p>分辨率越高画面放大越清晰，但是图像文件大小也越大；<br>可以通过 重新采样 改变原始分辨率，当这种方式是通过算法来扩展像素，就目前来看，大多数情况都不太好。</p><p>重新采样的算法主要有：邻近、两次线性、两次立方。<br>这三个算法参考周围的像素依次增多，因此理论上两次立方的效果是最好的。<br>但当图片比较简单时，选择邻进，会让线条更加清晰，不发虚，相对效果更好。</p><p>参考资料：<a href="https://helpx.adobe.com/cn/photoshop/user-guide.html" target="_blank" rel="external">Photoshop 用户指南——颜色模式</a></p><hr><p><div align="center"><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本文采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href="http://hceng.cn/" target="_blank" rel="external">hceng’s blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要记录Photoshop相关理论基础第一部分：色彩。&lt;br&gt;
    
    </summary>
    
    
      <category term="设计" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="Photoshop" scheme="http://yoursite.com/tags/Photoshop/"/>
    
  </entry>
  
  <entry>
    <title>AM437x——I2C驱动</title>
    <link href="http://yoursite.com/2017/09/11/AM437x%E2%80%94%E2%80%94I2C%E9%A9%B1%E5%8A%A8/"/>
    <id>http://yoursite.com/2017/09/11/AM437x——I2C驱动/</id>
    <published>2017-09-11T06:30:36.000Z</published>
    <updated>2017-09-14T13:10:19.434Z</updated>
    
    <content type="html"><![CDATA[<p>记录AM437x的I2C适配器驱动和I2C设备驱动，以及去除am437x EEPROM验证ID功能。<br><a id="more"></a></p><hr><h1 id="1-I2C驱动"><a href="#1-I2C驱动" class="headerlink" title="1.I2C驱动"></a>1.I2C驱动</h1><p>在Linux中，I2C驱动有<strong>I2C适配器驱动</strong>（就是SOC的I2C控制器驱动）和<strong>I2C设备驱动</strong>（就是I2C设备，比如AT24C256）。</p><p>本次写驱动的过程，先是利用内核自带的I2C适配器驱动写了I2C设备驱动，待I2C设备驱动验证好了，再写的I2C适配器驱动。因此记录的顺序也是先是I2C设备驱动，再是I2C适配器驱动。</p><h1 id="2-去除am437x-EEPROM验证ID功能"><a href="#2-去除am437x-EEPROM验证ID功能" class="headerlink" title="2.去除am437x EEPROM验证ID功能"></a>2.去除am437x EEPROM验证ID功能</h1><p>前面裸机的对EEPROM随意的测试读写，改变了里面的一些数据。<br>Ti发布的SDK需要在不更改代码的情况下运行在Ti不同的EVM上，所以Ti在代码中会添加对EVM板上EEPROM内部ID的判断。<br>这就尴尬了，没人给我说过不能改啊 = = 。验证ID的数据被我改了，现在Uboot没法引导内核了。<br>= = 没办法，要么改回EEPROM的数据，要么去除Uboot的验证，权衡后，选择了后者。<br>通过查阅和测试，相关代码在：<br><code>~/ti-processor-sdk-linux-am437x-evm-01.00.00.03/board-support/u-boot-2014.07+gitAUTOINC+fb6ab76dad-gfb6ab76/board/ti/am43xx/</code>路径下的<code>board.c</code>和<code>board.h</code>。</p><p>修改原理是，屏蔽掉去读eeprom的数据，手动指定板子和版本信息。<br>在<code>read_eeprom()</code>函数中,注释掉原来的验证，在后面的<code>strncpy()</code>函数中指定板子信息。<br>修改后该部分代码如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * Read header information from EEPROM into global structure.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">read_eeprom</span><span class="params">(<span class="keyword">struct</span> am43xx_board_id *header)</span></span></div><div class="line">&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></div><div class="line">    <span class="comment">/* Check if baseboard eeprom is available */</span></div><div class="line"><span class="keyword">if</span> (i2c_probe(CONFIG_SYS_I2C_EEPROM_ADDR)) &#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"Could not probe the EEPROM at 0x%x\n"</span>,</div><div class="line">       CONFIG_SYS_I2C_EEPROM_ADDR);</div><div class="line">        <span class="keyword">return</span> -ENODEV;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* read the eeprom using i2c */</span></div><div class="line"><span class="keyword">if</span> (i2c_read(CONFIG_SYS_I2C_EEPROM_ADDR, <span class="number">0</span>, <span class="number">2</span>, (uchar *)header,</div><div class="line">     <span class="keyword">sizeof</span>(<span class="keyword">struct</span> am43xx_board_id))) &#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"Could not read the EEPROM\n"</span>);</div><div class="line"><span class="keyword">return</span> -EIO;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (header-&gt;magic != <span class="number">0xEE3355AA</span>) &#123;</div><div class="line"><span class="comment">/*</span></div><div class="line"> * read the eeprom using i2c again,</div><div class="line"> * but use only a 1 byte address</div><div class="line"> */</div><div class="line"><span class="keyword">if</span> (i2c_read(CONFIG_SYS_I2C_EEPROM_ADDR, <span class="number">0</span>, <span class="number">1</span>, (uchar *)header,</div><div class="line">     <span class="keyword">sizeof</span>(<span class="keyword">struct</span> am43xx_board_id))) &#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"Could not read the EEPROM at 0x%x\n"</span>,</div><div class="line">       CONFIG_SYS_I2C_EEPROM_ADDR);</div><div class="line"><span class="keyword">return</span> -EIO;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (header-&gt;magic != <span class="number">0xEE3355AA</span>) &#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"Incorrect magic number (0x%x) in EEPROM\n"</span>,</div><div class="line">       header-&gt;magic);</div><div class="line">            <span class="keyword">return</span> -EINVAL;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line">    <span class="comment">//strncpy(am43xx_board_name, (char *)header-&gt;name, sizeof(header-&gt;name));</span></div><div class="line">    <span class="built_in">strncpy</span>(am43xx_board_name, <span class="string">"AM43__SK"</span>, <span class="keyword">sizeof</span>(header-&gt;name));  </div><div class="line">    am43xx_board_name[<span class="keyword">sizeof</span>(header-&gt;name)] = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="comment">//strncpy(am43xx_board_rev, (char *)header-&gt;version, sizeof(header-&gt;version));</span></div><div class="line">    <span class="built_in">strncpy</span>(am43xx_board_rev, <span class="string">"1.2"</span>,<span class="keyword">sizeof</span>(header-&gt;version));  </div><div class="line">    am43xx_board_rev[<span class="keyword">sizeof</span>(header-&gt;version)] = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>修改后，重新编译Uboot，重新下载，又能愉快启动了。</p><h1 id="3-I2C设备驱动"><a href="#3-I2C设备驱动" class="headerlink" title="3.I2C设备驱动"></a>3.I2C设备驱动</h1><h2 id="3-1-编写I2C设备驱动的四种方法"><a href="#3-1-编写I2C设备驱动的四种方法" class="headerlink" title="3.1 编写I2C设备驱动的四种方法"></a>3.1 编写I2C设备驱动的四种方法</h2><p>在内核<code>linux-3.14.43+gitAUTOINC+875c69b2c3-g875c69b\Documentation\i2c\instantiating-devices</code>里面介绍了<code>How to instantiate I2C devices</code>。</p><p>说明了I2C设备驱动有以下四种编写方式：</p><blockquote><p>Method 1:<br>　　Method 1a: Declare the I2C devices by bus number<br>　　Method 1b: Declare the I2C devices via devicetree<br>　　Method 1c: Declare the I2C devices via ACPI<br>Method 2: Instantiate the devices explicitly<br>Method 3: Probe an I2C bus for certain devices<br>Method 4: Instantiate from user-space</p></blockquote><ul><li>Method 1a中，先定义一个板载信息结构体<code>i2c_board_info</code>，然后通过<code>i2c_register_board_info()</code>注册板载信息。<br>然后<code>i2c_board_info</code>就被放在了<code>i2c_board_list</code>链表中。</li></ul><p>但调用<code>i2c_ragister_adapter()</code>时，会使用<code>i2c_scan_static_board_info</code>对<code>i2c_board_list</code>进行扫描，调用<code>i2c_new_device()</code>创建client。</p><p>该方式的<code>i2c_scan_static_board_info</code>在<code>i2c_ragister_adapter()</code>之前，不适合动态加载(insmod方式)。</p><ul><li><p>Method 1b中，就是把资源信息，以设备树的方式提供，换汤不换药。</p></li><li><p>Method 1c中，ACPI不懂，跳过。</p></li><li><p>Method 2中，翻译的意思是 明确实例化设备。还是先定义一个板载信息结构体<code>i2c_board_info</code>，然后通过<code>i2c_new_device()</code>或<code>i2c_new_probed_device()</code>去创建client。这两个函数前者认为设备一定存在，根据<code>i2c_board_info</code>的地址创建设备。而<code>i2c_new_probed_device()</code>则会先检查<code>i2c_board_info</code>描述的地址设备是否真的存在，只有存在才会创建client。<br>本次I2C设备驱动就是用的这种方式。</p></li><li><p>Method 3中，不需要事先确定适配器，内核不太推荐该方法，跳过。</p></li><li><p>Method 4，这个就NB了，直接从用户层创建I2C设备。但需要下个<code>i2c-tools</code>使用里面的头文件<code>i2c-dev.h</code>,才好在应用程序中，调用<code>i2c_smbus_read_word_data</code>进行访问。感觉统一了驱动，减少了驱动的工作量，但稍微加大了应用程序设计的工作量。这里我没使用，以后遇到了再说。<br>从用户空间创建设备的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//创建</div><div class="line">echo eeprom 0x50 &gt; /sys/bus/i2c/devices/i2c-03/new_device</div><div class="line">//删除</div><div class="line"># echo 0x50 &gt; /sys/bus/i2c/devices/i2c-0/new_device</div></pre></td></tr></table></figure></li></ul><h2 id="3-2-采用Method-2编写驱动"><a href="#3-2-采用Method-2编写驱动" class="headerlink" title="3.2 采用Method 2编写驱动"></a>3.2 采用Method 2编写驱动</h2><p>采用设备平台驱动模型编写。</p><ul><li>首先分析<code>at24cxx_dev.c</code>，按照前面介绍的步骤:<br>1.先定义一个板载信息结构体<code>i2c_board_info</code>：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">static struct i2c_board_info at24cxx_info = &#123;</div><div class="line">    I2C_BOARD_INFO(&quot;at24c256&quot;, 0x50),</div><div class="line">&#125;;</div></pre></td></tr></table></figure></li></ul><p>2.通过<code>i2c_new_device()</code>创建client：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">static int at24cxx_dev_init(void)</div><div class="line">&#123;</div><div class="line">    struct i2c_adapter *i2c_adap;</div><div class="line"></div><div class="line">    printk(KERN_INFO&quot;%s OK.\n&quot;,__func__); </div><div class="line"></div><div class="line">    i2c_adap = i2c_get_adapter(0);</div><div class="line">    at24cxx_client = i2c_new_device(i2c_adap, &amp;at24cxx_info);</div><div class="line">    i2c_put_adapter(i2c_adap);</div><div class="line"></div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这里还通过<code>i2c_get_adapter()</code>获取了适配器0(AM437X的I2C控制器0)，然后调用<code>i2c_put_adapter</code>再将其挂起。<br>现在I2C设备就有了。</p><hr><ul><li>再分析<code>at24cxx_drv.c</code>:<br>1.分配/设置一个<code>i2c_driver</code>:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">static struct i2c_driver at24cxx_driver = &#123;</div><div class="line">    .driver= &#123;</div><div class="line">        .name= &quot;ti_i2c0&quot;,</div><div class="line">        .owner= THIS_MODULE,</div><div class="line">    &#125;,</div><div class="line">    .probe= at24cxx_probe,</div><div class="line">    .remove= at24cxx_remove,</div><div class="line">    .id_table= at24cxx_id_table,</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>name无所谓，这里还有<code>probe()</code>和<code>remove()</code>函数，分别在模块加载和卸载时调用。这里的<code>probe()</code>加载，必须要<code>id_table</code>里面的设备名字与<code>i2c_board_info</code>相同才能加载。</p><p>2.注册<code>i2c_driver</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">i2c_add_driver(&amp;at24cxx_driver);</div></pre></td></tr></table></figure></p><p>3.注册字符设备：<br>待<code>id_table</code>里面的设备名字与<code>i2c_board_info</code>相同，调用<code>probe()</code>函数。<br><code>probe()</code>函数进行字符设备注册那一套操作。</p><p>3.1申请设备号：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">if(alloc_chrdev_region(&amp;devid, 0, TI_EEPROM_CNT, &quot;at24cxx&quot;) &lt; 0)</div><div class="line">&#123;</div><div class="line">    printk(KERN_INFO&quot;%s ERROR.\n&quot;,__func__);</div><div class="line">    goto error;</div><div class="line">&#125;</div><div class="line">major = MAJOR(devid);</div></pre></td></tr></table></figure></p><p>3.2绑定操作函数、创建类、创建设备：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cdev_init(&amp;at24cxx_cdev, &amp;at24cxx_fops);        </div><div class="line">cdev_add(&amp;at24cxx_cdev, devid, TI_EEPROM_CNT);   </div><div class="line">at24cxx_cls = class_create(THIS_MODULE, &quot;ti_at24cxx&quot;);</div><div class="line">device_create(at24cxx_cls, NULL, MKDEV(major, 0), NULL, &quot;at24cxx&quot;);</div></pre></td></tr></table></figure></p><p>4.释放资源：<br>在卸载模块时，释放<code>probe()</code>申请的资源：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">for(i=0;i&lt;TI_EEPROM_CNT;i++)</div><div class="line">&#123;</div><div class="line">    device_destroy(at24cxx_cls,  MKDEV(major, i));</div><div class="line">&#125;</div><div class="line">class_destroy(at24cxx_cls);</div><div class="line"></div><div class="line">unregister_chrdev(major, &quot;at24cxx&quot;);</div></pre></td></tr></table></figure></p><p>5.完善操作函数：<br>这里只实现了EEPROM的随机读写。<br>先说写EEPROM，前面裸机的时候，写EEPROM是先发送一个8位的设备地址和写命令(这个控制器自动的，不管)，然后是发送两个8位的数据地址，最后是一个8位要写的数据。<br>因此，用户层传进来的的参数是地址和数据，需要分解成两个8位地址和数据再发送，一共三个数据。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">if (copy_from_user(&amp;ker_buf, user_buf, count))</div><div class="line">    return -EFAULT;</div><div class="line"></div><div class="line">send[0] = ker_buf[0]&gt;&gt;8;</div><div class="line">send[1] = ker_buf[0];</div><div class="line">send[2] = ker_buf[1];</div><div class="line"></div><div class="line">if(i2c_master_send(at24cxx_client, send, 3))</div><div class="line">    return 2;</div><div class="line">else </div><div class="line">    return -EIO;</div></pre></td></tr></table></figure></p><p>再分析下写，裸机的时候对EEPROM写，需要先发送一个8位的设备地址和写命令(这个控制器自动的，不管)，再发送两个数据8位地址，再发送一个8位的设备地址和读命令(这个控制器自动的，也不管)，再读取8位数据。</p><p>因此，用户层传进来的是一个地址数据，需要分解成两个8位地址，发送出去，再接收一个8位数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">if (copy_from_user(&amp;addr, user_buf, count))</div><div class="line">    return -EFAULT;</div><div class="line"></div><div class="line">send[0] = addr&gt;&gt;8;</div><div class="line">send[1] = addr;</div><div class="line"></div><div class="line">i2c_master_send(at24cxx_client, send, 2);</div><div class="line"></div><div class="line">i2c_master_recv(at24cxx_client, &amp;data, 1);</div><div class="line"></div><div class="line">ret = copy_to_user(user_buf, &amp;data, 1);</div></pre></td></tr></table></figure><hr><ul><li>最后看看应用程序<code>app_at24cxx.c</code>:<br>读取EEPROM格式是<code>./app_at24cxx r addr</code>，写EEPROM格式是<code>./app_at24cxx w addr val</code>。<br>1.先判断传入的参数：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">if ((argc != 3) &amp;&amp; (argc != 4))</div><div class="line">&#123;</div><div class="line">    print_usage(argv[0]);</div><div class="line">    return -1;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><p>2.打开EEPROM设备：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fd = open(&quot;/dev/at24cxx&quot;, O_RDWR);</div></pre></td></tr></table></figure></p><p>3.判断如果是读操作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">if (strcmp(argv[1], &quot;r&quot;) == 0)</div><div class="line">&#123;</div><div class="line">    buf[0] = strtoul(argv[2], NULL, 0);</div><div class="line">    read(fd, buf, 1);</div><div class="line">    printf(&quot;data: %c, %d, 0x%2x\n&quot;, buf[0], buf[0], buf[0]);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><code>strcmp()</code>比较字符串，<code>strtoul()</code>将字符串转换成整型。</p><p>4.判断如果是写操作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">else if ((strcmp(argv[1], &quot;w&quot;) == 0) &amp;&amp; (argc == 4))</div><div class="line">&#123;</div><div class="line">    buf[0] = strtoul(argv[2], NULL, 0);</div><div class="line">    buf[1] = strtoul(argv[3], NULL, 0);</div><div class="line"></div><div class="line">    if (write(fd, buf, 2) == 2)</div><div class="line">        printf(&quot;write ok, addr = 0x%02x, data = 0x%02x\n&quot;, buf[0], buf[1]);</div><div class="line">    else</div><div class="line">        printf(&quot;write err, addr = 0x%02x, data = 0x%02x\n&quot;, buf[0], buf[1]);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><code>write()</code>的写成功返回的是实际写入的字节数，这个靠驱动的写函数的返回值。</p><h2 id="3-3-完整代码"><a href="#3-3-完整代码" class="headerlink" title="3.3 完整代码"></a>3.3 完整代码</h2><figure class="highlight c"><figcaption><span>[at24cxx_dev.c]</span><a href="https://github.com/hceng/am437x/blob/master/drive/3th_i2c/v1.0/at24cxx_dev.c" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/platform_device.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/i2c.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/err.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/regmap.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/slab.h&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> i2c_board_info at24cxx_info = &#123;</div><div class="line">    I2C_BOARD_INFO(<span class="string">"at24c256"</span>, <span class="number">0x50</span>),</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> i2c_client *at24cxx_client;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">at24cxx_dev_init</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> i2c_adapter *i2c_adap;</div><div class="line"></div><div class="line">    printk(KERN_INFO<span class="string">"%s OK.\n"</span>,__func__); </div><div class="line"></div><div class="line">    i2c_adap = i2c_get_adapter(<span class="number">0</span>);</div><div class="line">    at24cxx_client = i2c_new_device(i2c_adap, &amp;at24cxx_info);</div><div class="line">    i2c_put_adapter(i2c_adap);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">at24cxx_dev_exit</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    printk(KERN_INFO<span class="string">"%s OK.\n"</span>,__func__); </div><div class="line">    i2c_unregister_device(at24cxx_client);</div><div class="line">&#125;</div><div class="line"></div><div class="line">module_init(at24cxx_dev_init);</div><div class="line">module_exit(at24cxx_dev_exit);</div><div class="line"></div><div class="line">MODULE_LICENSE(<span class="string">"GPL"</span>);</div><div class="line">MODULE_AUTHOR(<span class="string">"hceng &lt;huangcheng.job@foxmail.com&gt;"</span>);</div><div class="line">MODULE_DESCRIPTION(<span class="string">"TI am437x board i2c device to at24c256"</span>);</div><div class="line">MODULE_ALIAS(<span class="string">"platform:device tree:ti_i2c"</span>);</div><div class="line">MODULE_VERSION(<span class="string">"V1.0"</span>);</div></pre></td></tr></table></figure><figure class="highlight c"><figcaption><span>[at24cxx_drv.c]</span><a href="https://github.com/hceng/am437x/blob/master/drive/3th_i2c/v1.0/at24cxx_drv.c" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/platform_device.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/i2c.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/err.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/regmap.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/slab.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/fs.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/uaccess.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/cdev.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> TI_EEPROM_CNT     1</span></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">int</span> major;</div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> cdev at24cxx_cdev;</div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> <span class="keyword">class</span> *at24cxx_cls;</div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> i2c_client *at24cxx_client;</div><div class="line"></div><div class="line"><span class="comment">/* </span></div><div class="line"> * 传入: buf[0] : addr</div><div class="line"> * 输出: buf[0] : data</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">static</span> ssize_t <span class="title">at24cxx_read</span><span class="params">(<span class="keyword">struct</span> file * file, <span class="keyword">char</span> __user *user_buf, <span class="keyword">size_t</span> count, <span class="keyword">loff_t</span> *off)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> addr, data;</div><div class="line">    <span class="keyword">char</span> send[<span class="number">2</span>];</div><div class="line">    <span class="keyword">int</span> ret;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(count != <span class="number">1</span>)&#123;</div><div class="line">        printk(KERN_INFO<span class="string">"at24cxx_read count != 1.\n"</span>); </div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (copy_from_user(&amp;addr, user_buf, count))</div><div class="line">        <span class="keyword">return</span> -EFAULT;</div><div class="line"></div><div class="line">    send[<span class="number">0</span>] = addr&gt;&gt;<span class="number">8</span>;</div><div class="line">    send[<span class="number">1</span>] = addr;</div><div class="line"></div><div class="line">    i2c_master_send(at24cxx_client, send, <span class="number">2</span>);</div><div class="line"></div><div class="line">    i2c_master_recv(at24cxx_client, &amp;data, <span class="number">1</span>);</div><div class="line"></div><div class="line">    ret = copy_to_user(user_buf, &amp;data, <span class="number">1</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* buf[0] : addr</span></div><div class="line"> * buf[1] : data</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">static</span> ssize_t <span class="title">at24cxx_write</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="keyword">const</span> <span class="keyword">char</span> __user *user_buf, <span class="keyword">size_t</span> count, <span class="keyword">loff_t</span> *off)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> ker_buf[<span class="number">2</span>];</div><div class="line">    <span class="keyword">char</span> send[<span class="number">3</span>];</div><div class="line"></div><div class="line">    printk(KERN_INFO<span class="string">"%s OK.\n"</span>,__func__);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(count != <span class="number">2</span>)&#123;</div><div class="line">        printk(KERN_INFO<span class="string">"at24cxx_write count != 2.\n"</span>); </div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (copy_from_user(&amp;ker_buf, user_buf, count))</div><div class="line">        <span class="keyword">return</span> -EFAULT;</div><div class="line"></div><div class="line">    <span class="comment">//printk("ker_buf[0]= 0x%02x, ker_buf[1]= x%02x\n", ker_buf[0], ker_buf[1]);</span></div><div class="line"></div><div class="line">    send[<span class="number">0</span>] = ker_buf[<span class="number">0</span>]&gt;&gt;<span class="number">8</span>;</div><div class="line">    send[<span class="number">1</span>] = ker_buf[<span class="number">0</span>];</div><div class="line">    send[<span class="number">2</span>] = ker_buf[<span class="number">1</span>];</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(i2c_master_send(at24cxx_client, send, <span class="number">3</span>))</div><div class="line">        <span class="keyword">return</span> <span class="number">2</span>;</div><div class="line">    <span class="keyword">else</span> </div><div class="line">        <span class="keyword">return</span> -EIO;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> file_operations at24cxx_fops = &#123;</div><div class="line">    .owner = THIS_MODULE,</div><div class="line">    .read  = at24cxx_read,</div><div class="line">    .write = at24cxx_write,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">at24cxx_probe</span><span class="params">(<span class="keyword">struct</span> i2c_client *client, <span class="keyword">const</span> <span class="keyword">struct</span> i2c_device_id *id)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">dev_t</span> devid;</div><div class="line">    at24cxx_client = client;</div><div class="line"></div><div class="line">    printk(KERN_INFO<span class="string">"%s OK.\n"</span>,__func__); </div><div class="line"></div><div class="line">    <span class="comment">//1.申请设备号</span></div><div class="line">    <span class="keyword">if</span>(alloc_chrdev_region(&amp;devid, <span class="number">0</span>, TI_EEPROM_CNT, <span class="string">"at24cxx"</span>) &lt; <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        printk(KERN_INFO<span class="string">"%s ERROR.\n"</span>,__func__);</div><div class="line">        <span class="keyword">goto</span> error;</div><div class="line">    &#125;</div><div class="line">    major = MAJOR(devid);</div><div class="line"></div><div class="line">    <span class="comment">//2.注册到系统中</span></div><div class="line">    cdev_init(&amp;at24cxx_cdev, &amp;at24cxx_fops);        </div><div class="line">    cdev_add(&amp;at24cxx_cdev, devid, TI_EEPROM_CNT);   </div><div class="line">    at24cxx_cls = class_create(THIS_MODULE, <span class="string">"ti_at24cxx"</span>);</div><div class="line">    device_create(at24cxx_cls, <span class="literal">NULL</span>, MKDEV(major, <span class="number">0</span>), <span class="literal">NULL</span>, <span class="string">"at24cxx"</span>);    </div><div class="line"></div><div class="line">error:</div><div class="line">    unregister_chrdev_region(MKDEV(major, <span class="number">0</span>), TI_EEPROM_CNT);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">at24cxx_remove</span><span class="params">(<span class="keyword">struct</span> i2c_client *client)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> i;</div><div class="line"></div><div class="line">    printk(KERN_INFO<span class="string">"%s OK.\n"</span>,__func__); </div><div class="line"></div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;TI_EEPROM_CNT;i++)</div><div class="line">    &#123;</div><div class="line">        device_destroy(at24cxx_cls,  MKDEV(major, i));</div><div class="line">    &#125;</div><div class="line">    class_destroy(at24cxx_cls);</div><div class="line"></div><div class="line">    unregister_chrdev(major, <span class="string">"at24cxx"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">struct</span> i2c_device_id at24cxx_id_table[] = &#123;</div><div class="line">    &#123; <span class="string">"at24c256"</span>, <span class="number">0</span> &#125;,</div><div class="line">    &#123;&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/* 1. 分配/设置i2c_driver */</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> i2c_driver at24cxx_driver = &#123;</div><div class="line">    .driver= &#123;</div><div class="line">        .name= <span class="string">"ti_i2c0"</span>,</div><div class="line">        .owner= THIS_MODULE,</div><div class="line">    &#125;,</div><div class="line">    .probe= at24cxx_probe,</div><div class="line">    .remove= at24cxx_remove,</div><div class="line">    .id_table= at24cxx_id_table,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">at24cxx_drv_init</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">/* 2. 注册i2c_driver */</span></div><div class="line">    printk(KERN_INFO<span class="string">"%s OK.\n"</span>,__func__); </div><div class="line"></div><div class="line">    i2c_add_driver(&amp;at24cxx_driver);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">at24cxx_drv_exit</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    printk(KERN_INFO<span class="string">"%s OK.\n"</span>,__func__); </div><div class="line"></div><div class="line">    i2c_del_driver(&amp;at24cxx_driver);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">module_init(at24cxx_drv_init);</div><div class="line">module_exit(at24cxx_drv_exit);</div><div class="line"></div><div class="line">MODULE_LICENSE(<span class="string">"GPL"</span>);</div><div class="line">MODULE_AUTHOR(<span class="string">"hceng &lt;huangcheng.job@foxmail.com&gt;"</span>);</div><div class="line">MODULE_DESCRIPTION(<span class="string">"TI am437x board i2c drvice to at24c256"</span>);</div><div class="line">MODULE_ALIAS(<span class="string">"platform:device tree:ti_i2c"</span>);</div><div class="line">MODULE_VERSION(<span class="string">"V1.0"</span>);</div></pre></td></tr></table></figure><figure class="highlight c"><figcaption><span>[app_at24cxx.c]</span><a href="https://github.com/hceng/am437x/blob/master/drive/3th_i2c/v1.0/app_at24cxx.c" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/* </span></div><div class="line"> * ./app_at24cxx r addr</div><div class="line"> * ./app_at24cxx w addr val</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_usage</span><span class="params">(<span class="keyword">char</span> *file)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s r addr\n"</span>, file);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s w addr val\n"</span>, file);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> fd;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> buf[<span class="number">2</span>];</div><div class="line">    <span class="keyword">int</span> x;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ((argc != <span class="number">3</span>) &amp;&amp; (argc != <span class="number">4</span>))</div><div class="line">    &#123;</div><div class="line">        print_usage(argv[<span class="number">0</span>]);</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    fd = open(<span class="string">"/dev/at24cxx"</span>, O_RDWR);</div><div class="line">    <span class="keyword">if</span> (fd &lt; <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"can't open /dev/at24cxx\n"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">"r"</span>) == <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        buf[<span class="number">0</span>] = strtoul(argv[<span class="number">2</span>], <span class="literal">NULL</span>, <span class="number">0</span>);</div><div class="line">        read(fd, buf, <span class="number">1</span>);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"data: %c, %d, 0x%2x\n"</span>, buf[<span class="number">0</span>], buf[<span class="number">0</span>], buf[<span class="number">0</span>]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ((<span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">"w"</span>) == <span class="number">0</span>) &amp;&amp; (argc == <span class="number">4</span>))</div><div class="line">    &#123;</div><div class="line">        buf[<span class="number">0</span>] = strtoul(argv[<span class="number">2</span>], <span class="literal">NULL</span>, <span class="number">0</span>);</div><div class="line">        buf[<span class="number">1</span>] = strtoul(argv[<span class="number">3</span>], <span class="literal">NULL</span>, <span class="number">0</span>);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (write(fd, buf, <span class="number">2</span>) == <span class="number">2</span>)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"write ok, addr = 0x%02x, data = 0x%02x\n"</span>, buf[<span class="number">0</span>], buf[<span class="number">1</span>]);</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="built_in">printf</span>(<span class="string">"write err, addr = 0x%02x, data = 0x%02x\n"</span>, buf[<span class="number">0</span>], buf[<span class="number">1</span>]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        print_usage(argv[<span class="number">0</span>]);</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    close(fd);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="4-I2C适配器驱动"><a href="#4-I2C适配器驱动" class="headerlink" title="4.I2C适配器驱动"></a>4.I2C适配器驱动</h1><p>下面开始比较好玩的I2C适配器驱动。<br>去除内核的I2C适配器模块，删除设备树文件里相关的I2C资源信息。</p><h2 id="4-1-编写I2C适配器驱动"><a href="#4-1-编写I2C适配器驱动" class="headerlink" title="4.1 编写I2C适配器驱动"></a>4.1 编写I2C适配器驱动</h2><p>I2C适配器驱动采用最原始的方法编写。<br>1.入口函数<br>入口函数做了四件事情：硬件相关设置、注册中断、初始化等待队列、注册I2C适配器。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line">static const struct i2c_algorithm am437x_i2c_algo = &#123;</div><div class="line">    //.smbus_xfer     = ,</div><div class="line">    .master_xfer= am437x_i2c_xfer,</div><div class="line">    .functionality= am437x_i2c_func,</div><div class="line">&#125;;</div><div class="line"></div><div class="line">static struct i2c_adapter am437x_i2c_adapter = &#123;</div><div class="line">    .name        = &quot;i2c_adapter&quot;,</div><div class="line">    .algo    = &amp;am437x_i2c_algo,//i2c总线通信方法</div><div class="line">    .owner     = THIS_MODULE,</div><div class="line">&#125;;</div><div class="line"></div><div class="line">static void i2c_init(void)</div><div class="line">&#123;</div><div class="line">    printk(KERN_INFO&quot;%s OK.\n&quot;,__func__); </div><div class="line"></div><div class="line">    /*clk*/</div><div class="line">    PRCM_CM_WKUP_I2C0_CLKCTRL   = ioremap(0x44DF2800+0x340, 0x04*1);</div><div class="line">    *PRCM_CM_WKUP_I2C0_CLKCTRL  |= (0x02&lt;&lt;0);</div><div class="line"></div><div class="line">    PRCM_CM_WKUP_CLKSTCTRL      = ioremap(0x44DF2800+0x300, 0x04*1);</div><div class="line">    *PRCM_CM_WKUP_CLKSTCTRL     |= (0x01&lt;&lt;14);</div><div class="line"></div><div class="line">    PRCM_CM_PER_L4LS_CLKSTCTRL  = ioremap(0x44DF8800+0x400, 0x04*1);</div><div class="line">    *PRCM_CM_PER_L4LS_CLKSTCTRL |= (0x01&lt;&lt;27);</div><div class="line"></div><div class="line">    /*GPIO:gpio3_5-&gt;I2C0_SDA;gpio3_6-&gt;I2C0_SCL*/</div><div class="line"></div><div class="line">    CTRL_CONF_I2C0_SDA = ioremap(0x44E10000+0x0988, 0x04*1);</div><div class="line">    CTRL_CONF_I2C0_SCL = ioremap(0x44E10000+0x098C, 0x04*1);</div><div class="line"></div><div class="line">    *CTRL_CONF_I2C0_SDA &amp;= ~(0x07&lt;&lt;0 | 0x01&lt;&lt;16 | 0x01&lt;&lt;19);</div><div class="line">    *CTRL_CONF_I2C0_SCL &amp;= ~(0x07&lt;&lt;0 | 0x01&lt;&lt;16 | 0x01&lt;&lt;19);</div><div class="line"></div><div class="line">    /*I2C0 set*/</div><div class="line">    I2C0 = ioremap(0x44E0B000, sizeof(struct am437x_i2c_regs));</div><div class="line"></div><div class="line">    I2C0-&gt;CON  &amp;= ~(0x01&lt;&lt;15);//reset</div><div class="line"></div><div class="line">    I2C0-&gt;SYSC &amp;= ~(0x01&lt;&lt;0);//Auto Idle disabled.</div><div class="line"></div><div class="line">    I2C0-&gt;PSC  = 3;//the module divided by (PSC + 1) -&gt; 48M/(3+1)=12M</div><div class="line"></div><div class="line">    I2C0-&gt;SCLL = 63;//tLOW = (SCLL + 7) * ICLK time period</div><div class="line">    I2C0-&gt;SCLH = 65;//tHIGH = (SCLH + 5) * ICLK time period</div><div class="line"></div><div class="line">    //I2C0-&gt;SA = 0x50;//Slave address.x 1010 000</div><div class="line"></div><div class="line">    I2C0-&gt;CON  |=  (0x01&lt;&lt;15);//Module enabled</div><div class="line">&#125;</div><div class="line"></div><div class="line">static int i2c_bus_drv_init(void)</div><div class="line">&#123;</div><div class="line">    printk(KERN_INFO&quot;%s OK.\n&quot;,__func__); </div><div class="line"></div><div class="line">    //硬件相关的设置</div><div class="line">    i2c_init();</div><div class="line"></div><div class="line">    if (request_irq(102, i2c_xfer_irq, 0, &quot;am437x-i2c&quot;, NULL))</div><div class="line">        return -EAGAIN;</div><div class="line"></div><div class="line">    init_waitqueue_head(&amp;i2c_data.wait);</div><div class="line"></div><div class="line">    i2c_add_adapter(&amp;am437x_i2c_adapter);//会在/sys/class/i2c-adapter下生成i2c-x</div><div class="line"></div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>硬件设置部分，初始化了相关时钟，设置GPIO复用，设置了I2C0控制器的一些设置。<br>这里设置直接用ioremap()映射寄存器进程操作，是很不对的，内核是个整体，相关之间有关联，理论上时钟部分内核已经封装好了，我现在只需要调用相关就行。但秉着先调通，再优化改进的思想，映射是最快，最方便的= =。<br>同理GPIO的设置和中断号也是不规范的。</p><p><code>i2c_add_adapter()</code>会调用<code>i2c_register_adapter()</code>注册适配器，自动完成字符设备注册那一套。<br>绑定了结构体<code>i2c_adapter</code>，<code>i2c_adapter</code>里面有I2C总线通信方法<code>i2c_algorithm</code>。<code>i2c_algorithm</code>里面两个函数：<br><code>.master_xfer    = am437x_i2c_xfer,</code>:传输函数；<br><code>.functionality    = am437x_i2c_func,</code>:支持的协议；</p><p>I2C适配器驱动的关键就是实现这两个函数。</p><p>2.出口函数<br>与入口函数相反操作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">static void i2c_bus_drv_exit(void)</div><div class="line">&#123;</div><div class="line">    printk(KERN_INFO&quot;%s OK.\n&quot;,__func__); </div><div class="line"></div><div class="line">    iounmap(CTRL_CONF_I2C0_SDA);</div><div class="line">    iounmap(CTRL_CONF_I2C0_SCL);</div><div class="line"></div><div class="line">    iounmap(PRCM_CM_WKUP_I2C0_CLKCTRL);</div><div class="line">    iounmap(PRCM_CM_WKUP_CLKSTCTRL);</div><div class="line">    iounmap(PRCM_CM_PER_L4LS_CLKSTCTRL);</div><div class="line"></div><div class="line">    iounmap(I2C0);</div><div class="line"></div><div class="line">    free_irq(102, NULL);</div><div class="line"></div><div class="line">    i2c_del_adapter(&amp;am437x_i2c_adapter);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>3.实现关键函数一：<code>am437x_i2c_func()</code><br>虽说是关键函数，但这个是送分题，返回支持协议即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">static u32  am437x_i2c_func(struct i2c_adapter *adap)</div><div class="line">&#123;</div><div class="line">    printk(KERN_INFO&quot;%s OK.\n&quot;,__func__); </div><div class="line">    //用于返回总线支持的协议</div><div class="line">    return I2C_FUNC_I2C | I2C_FUNC_SMBUS_EMUL | I2C_FUNC_PROTOCOL_MANGLING;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>4.实现关键函数二：<code>am437x_i2c_xfer()</code><br>先定义个传输数据的结构体：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">struct am437x_i2c_xfer_data &#123;</div><div class="line">    struct i2c_msg *msgs;</div><div class="line">    uint32_t cur_rec;</div><div class="line">    uint32_t cur_send;</div><div class="line">    uint32_t reg_cnt;</div><div class="line">    uint32_t err;</div><div class="line">    wait_queue_head_t wait;</div><div class="line">&#125;;</div><div class="line">static struct am437x_i2c_xfer_data i2c_data;</div></pre></td></tr></table></figure></p><p>里面包含了<code>i2c_msg</code>结构体、当前接收位置<code>cur_rec</code>、当前发送位置<code>cur_send</code>、CNT寄存器计数<code>reg_cnt</code>、状态标志<code>err</code>、唤醒队列<code>wait</code>；</p><p><code>i2c_msg</code>结构体比较重要，包含了从机地址，发送/接收标志、数据长度和数据指针。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">struct i2c_msg &#123;  </div><div class="line">    __u16 addr;     // 从机地址  </div><div class="line">    __u16 flags;    // 标志  </div><div class="line">    #define I2C_M_TEN   0x0010  // 十位地址标志  </div><div class="line">    #define I2C_M_RD    0x0001  // 接收数据标志  </div><div class="line">    __u16 len;      // 数据长度  </div><div class="line">    __u8 *buf;      // 数据指针  </div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><p>前面<code>at24cxx_drv.c</code>中调用发送<code>i2c_master_send()</code>和接收<code>i2c_master_recv()</code>时，就会调用这里的传输函数<code>am437x_i2c_xfer()</code>。<br>先初始化相关变量：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">i2c_data.msgs    = msgs;</div><div class="line">i2c_data.cur_rec = 0;</div><div class="line">i2c_data.cur_send = 0;</div><div class="line">i2c_data.err     = -ENODEV;</div><div class="line"></div><div class="line">I2C0-&gt;CNT = i2c_data.msgs-&gt;len;</div><div class="line">i2c_data.reg_cnt = I2C0-&gt;CNT;</div><div class="line"></div><div class="line">I2C0-&gt;SA = i2c_data.msgs-&gt;addr;</div></pre></td></tr></table></figure></p><p>保存传入的<code>i2c_msg</code>，设置当前接收位置<code>cur_rec</code>和当前发送位置<code>cur_send</code>为0，赋值给<code>I2C0-&gt;CNT</code>寄存器传输长度，因为<code>I2C0-&gt;CNT</code>在后面不好把握什么时候会清零，再将<code>I2C0-&gt;CNT</code>赋值给<code>reg_cnt</code>,作为要传输数据的总长度。再将设备地址传给寄存器。</p><p>接着开始传输：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">static void am437x_i2c_start(void)</div><div class="line">&#123;</div><div class="line">    printk(KERN_INFO&quot;%s OK.\n&quot;,__func__); </div><div class="line">    </div><div class="line">    I2C0-&gt;IRQSTS|=  0x7FFF;</div><div class="line">    I2C0-&gt;IRQEN_CLR |=  0x7FFF;</div><div class="line"></div><div class="line">    if(i2c_data.msgs-&gt;flags &amp; I2C_M_RD) //read</div><div class="line">    &#123;</div><div class="line"></div><div class="line">        I2C0-&gt;CON |=  (0x01&lt;&lt;10 | (0x01&lt;&lt;15));  //MST=1  TRX=0 </div><div class="line">        I2C0-&gt;CON &amp;= ~(0x01&lt;&lt;9);</div><div class="line"></div><div class="line">        I2C0-&gt;IRQEN_SET |= (0x01&lt;&lt;3);</div><div class="line">    &#125;</div><div class="line">    else//write</div><div class="line">    &#123;</div><div class="line">        I2C0-&gt;CON |= (0x01&lt;&lt;9 | 0x01&lt;&lt;10 | 0x01&lt;&lt;15); //MST=1  TRX=1    </div><div class="line"></div><div class="line">        I2C0-&gt;IRQEN_SET |= (0x01&lt;&lt;4);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    I2C0-&gt;CON |= (0x01&lt;&lt;0);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>先清除所有中断，利用<code>i2c_data.msgs-&gt;flags</code>判断时读还是写，设置对应模式和对应中断，最后启动传输。</p><p>随后进入休眠，中断就会根据情况发送/接收数据，待满足 当前传输长度等于总传输长度时，唤醒该函数，完成本次传输。</p><p>5.中断函数<br>前面<code>am437x_i2c_start()</code>中设置<code>I2C0-&gt;CON |= (0x01&lt;&lt;0);</code>后，AM437X的I2C控制器就会自动传输数据，等完成后，生成对应的标志位。<br>但发生中断后，进入中断函数，先清除除 接收标志和发送标志 以外的中断（更好的方式保留ACK响应标志和bus空闲标志，这里简化，暂不管）。<br>判断是接收完成还是发送完成，<br>如果是接收完成：<br>清除接收中断，保存<code>I2C0-&gt;DATA</code>数据，同时，当前接收标志<code>i2c_data.cur_rec</code>加1，直到 当前接收等于总传输，即可关闭中断，发送停止信号。<br>如果是发送完成：<br>清除发送中断，赋值<code>I2C0-&gt;DATA</code>数据，同时，当前接收标志<code>i2c_data.cur_send</code>加1，直到 当前发送等于总传输，即可关闭中断，发送停止信号。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">static irqreturn_t i2c_xfer_irq(int irq, void *dev_id)</div><div class="line">&#123;</div><div class="line">    unsigned int status = 0;</div><div class="line"></div><div class="line">    printk(KERN_INFO&quot;%s OK.\n&quot;,__func__); </div><div class="line"></div><div class="line">    status = I2C0-&gt;IRQSTS;</div><div class="line"></div><div class="line">    //I2C0-&gt;IRQSTS = (status &amp; (0x01&lt;&lt;1 |0x01&lt;&lt;3 | 0x01&lt;&lt;4));</div><div class="line">    I2C0-&gt;IRQSTS = (status &amp; (0x01&lt;&lt;3 | 0x01&lt;&lt;4));</div><div class="line"></div><div class="line">    if(status &amp; (0x01&lt;&lt;3))//receive</div><div class="line">    &#123;</div><div class="line">        //printk(KERN_INFO&quot;i2c receive.\n&quot;); </div><div class="line">        I2C0-&gt;IRQSTS |= (0x01&lt;&lt;3);</div><div class="line"></div><div class="line">        i2c_data.msgs-&gt;buf[i2c_data.cur_rec] = I2C0-&gt;DATA;</div><div class="line">        i2c_data.cur_rec++;</div><div class="line"></div><div class="line">        if(i2c_data.cur_rec == i2c_data.reg_cnt) </div><div class="line">        &#123;</div><div class="line">            I2C0-&gt;IRQEN_CLR |= (0x01&lt;&lt;3); </div><div class="line">            am437x_i2c_stop(1);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    if (status &amp; (0x01&lt;&lt;4))//send</div><div class="line">    &#123;</div><div class="line">        //printk(KERN_INFO&quot;i2c send.\n&quot;);</div><div class="line"></div><div class="line">        I2C0-&gt;IRQSTS |= (0x01&lt;&lt;4);</div><div class="line"></div><div class="line">        I2C0-&gt;DATA = i2c_data.msgs-&gt;buf[i2c_data.cur_send];</div><div class="line">        i2c_data.cur_send++;</div><div class="line"></div><div class="line">        if(i2c_data.cur_send == i2c_data.reg_cnt)</div><div class="line">        &#123;</div><div class="line">            I2C0-&gt;IRQEN_CLR |= (0x01&lt;&lt;4);</div><div class="line">            am437x_i2c_stop(1);</div><div class="line">        &#125;</div><div class="line">    &#125; </div><div class="line">    </div><div class="line">    //判断是否有ack和bus空闲</div><div class="line"></div><div class="line">    I2C0-&gt;IRQSTS|=  0x7FFF;</div><div class="line"></div><div class="line">    return IRQ_HANDLED;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在<code>am437x_i2c_stop()</code>里，除了要发送停止信号，还要唤醒队列。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">static void am437x_i2c_stop(int err)</div><div class="line">&#123;</div><div class="line">    printk(KERN_INFO&quot;%s OK.\n&quot;,__func__); </div><div class="line"></div><div class="line">    i2c_data.err = err;</div><div class="line"></div><div class="line">    I2C0-&gt;CON |= (0x01&lt;&lt;1); //stop</div><div class="line">    ndelay(50);</div><div class="line"></div><div class="line">    /*唤醒*/</div><div class="line">    wake_up(&amp;i2c_data.wait);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这就完了，还是比较清晰的。</p><h2 id="4-2-完整代码"><a href="#4-2-完整代码" class="headerlink" title="4.2 完整代码"></a>4.2 完整代码</h2><figure class="highlight c"><figcaption><span>[i2c_bus_am437x.c]</span><a href="https://github.com/hceng/am437x/blob/master/drive/3th_i2c/v2.0/i2c_bus_am437x.c" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/i2c.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/time.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/interrupt.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/delay.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/errno.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/err.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/platform_device.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/pm_runtime.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/clk.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/cpufreq.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/slab.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/io.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/irq.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">struct</span> am437x_i2c_xfer_data &#123;</div><div class="line">    <span class="keyword">struct</span> i2c_msg *msgs;</div><div class="line">    <span class="keyword">uint32_t</span> cur_rec;</div><div class="line">    <span class="keyword">uint32_t</span> cur_send;</div><div class="line">    <span class="keyword">uint32_t</span> reg_cnt;</div><div class="line">    <span class="keyword">uint32_t</span> err;</div><div class="line">    <span class="keyword">wait_queue_head_t</span> wait;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> am437x_i2c_xfer_data i2c_data;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> *CTRL_CONF_I2C0_SDA;</div><div class="line"><span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> *CTRL_CONF_I2C0_SCL;</div><div class="line"><span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> *PRCM_CM_WKUP_I2C0_CLKCTRL;</div><div class="line"><span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> *PRCM_CM_WKUP_CLKSTCTRL;</div><div class="line"><span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> *PRCM_CM_PER_L4LS_CLKSTCTRL;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> am437x_i2c_regs &#123;</div><div class="line">    <span class="keyword">uint32_t</span> REVNB_LO;           <span class="comment">//00h   </span></div><div class="line">    <span class="keyword">uint32_t</span> REVNB_HI;           <span class="comment">//04h </span></div><div class="line">    <span class="keyword">uint32_t</span> RESERVED0[<span class="number">2</span>];       <span class="comment">//08h</span></div><div class="line">    <span class="keyword">uint32_t</span> SYSC;               <span class="comment">//10h</span></div><div class="line">    <span class="keyword">uint32_t</span> RESERVED1[<span class="number">4</span>];       <span class="comment">//14h</span></div><div class="line">    <span class="keyword">uint32_t</span> IRQSTS_RAW;         <span class="comment">//24h</span></div><div class="line">    <span class="keyword">uint32_t</span> IRQSTS;             <span class="comment">//28h</span></div><div class="line">    <span class="keyword">uint32_t</span> IRQEN_SET;          <span class="comment">//2ch</span></div><div class="line">    <span class="keyword">uint32_t</span> IRQEN_CLR;          <span class="comment">//30h</span></div><div class="line">    <span class="keyword">uint32_t</span> WE;                 <span class="comment">//34h</span></div><div class="line">    <span class="keyword">uint32_t</span> DMARXEN_SET;        <span class="comment">//38h</span></div><div class="line">    <span class="keyword">uint32_t</span> DMATXEN_SET;        <span class="comment">//3ch</span></div><div class="line">    <span class="keyword">uint32_t</span> DMARXEN_CLR;        <span class="comment">//40h</span></div><div class="line">    <span class="keyword">uint32_t</span> DMATXEN_CLR;        <span class="comment">//44h</span></div><div class="line">    <span class="keyword">uint32_t</span> DMARXWAKE_EN;       <span class="comment">//48h</span></div><div class="line">    <span class="keyword">uint32_t</span> DMATXWAKE_EN;       <span class="comment">//4ch </span></div><div class="line">    <span class="keyword">uint32_t</span> RESERVED2[<span class="number">16</span>];      <span class="comment">//50h </span></div><div class="line">    <span class="keyword">uint32_t</span> SYSS;               <span class="comment">//90h</span></div><div class="line">    <span class="keyword">uint32_t</span> BUF;                <span class="comment">//94h</span></div><div class="line">    <span class="keyword">uint32_t</span> CNT;                <span class="comment">//98h</span></div><div class="line">    <span class="keyword">uint32_t</span> DATA;               <span class="comment">//9ch</span></div><div class="line">    <span class="keyword">uint32_t</span> RESERVED3;          <span class="comment">//a0h</span></div><div class="line">    <span class="keyword">uint32_t</span> CON;                <span class="comment">//a4h</span></div><div class="line">    <span class="keyword">uint32_t</span> OA;                 <span class="comment">//a8h</span></div><div class="line">    <span class="keyword">uint32_t</span> SA;                 <span class="comment">//ach</span></div><div class="line">    <span class="keyword">uint32_t</span> PSC;                <span class="comment">//b0h</span></div><div class="line">    <span class="keyword">uint32_t</span> SCLL;               <span class="comment">//b4h</span></div><div class="line">    <span class="keyword">uint32_t</span> SCLH;               <span class="comment">//b8h</span></div><div class="line">    <span class="keyword">uint32_t</span> SYSTEST;            <span class="comment">//bch</span></div><div class="line">    <span class="keyword">uint32_t</span> BUFSTAT;            <span class="comment">//c0h</span></div><div class="line">    <span class="keyword">uint32_t</span> OA1;                <span class="comment">//c4h</span></div><div class="line">    <span class="keyword">uint32_t</span> OA2;                <span class="comment">//c8h</span></div><div class="line">    <span class="keyword">uint32_t</span> OA3;                <span class="comment">//cch</span></div><div class="line">    <span class="keyword">uint32_t</span> ACTOA;              <span class="comment">//d0h</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">static</span>  <span class="keyword">volatile</span> <span class="keyword">struct</span> am437x_i2c_regs *I2C0;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">am437x_i2c_start</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    printk(KERN_INFO<span class="string">"%s OK.\n"</span>,__func__); </div><div class="line">    </div><div class="line">    I2C0-&gt;IRQSTS|=  <span class="number">0x7FFF</span>;</div><div class="line">    I2C0-&gt;IRQEN_CLR |=  <span class="number">0x7FFF</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(i2c_data.msgs-&gt;flags &amp; I2C_M_RD) <span class="comment">//read</span></div><div class="line">    &#123;</div><div class="line"></div><div class="line">        I2C0-&gt;CON |=  (<span class="number">0x01</span>&lt;&lt;<span class="number">10</span> | (<span class="number">0x01</span>&lt;&lt;<span class="number">15</span>));  <span class="comment">//MST=1  TRX=0 </span></div><div class="line">        I2C0-&gt;CON &amp;= ~(<span class="number">0x01</span>&lt;&lt;<span class="number">9</span>);</div><div class="line"></div><div class="line">        I2C0-&gt;IRQEN_SET |= (<span class="number">0x01</span>&lt;&lt;<span class="number">3</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span><span class="comment">//write</span></div><div class="line">    &#123;</div><div class="line">        I2C0-&gt;CON |= (<span class="number">0x01</span>&lt;&lt;<span class="number">9</span> | <span class="number">0x01</span>&lt;&lt;<span class="number">10</span> | <span class="number">0x01</span>&lt;&lt;<span class="number">15</span>); <span class="comment">//MST=1  TRX=1    </span></div><div class="line"></div><div class="line">        I2C0-&gt;IRQEN_SET |= (<span class="number">0x01</span>&lt;&lt;<span class="number">4</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    I2C0-&gt;CON |= (<span class="number">0x01</span>&lt;&lt;<span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">am437x_i2c_stop</span><span class="params">(<span class="keyword">int</span> err)</span></span></div><div class="line">&#123;</div><div class="line">    printk(KERN_INFO<span class="string">"%s OK.\n"</span>,__func__); </div><div class="line">    i2c_data.err = err;</div><div class="line">    </div><div class="line">    mdelay(<span class="number">2</span>);<span class="comment">//为了防止读EEPROM的时候，写操作后，马上就读操作，导致错误;</span></div><div class="line">    I2C0-&gt;CON |= (<span class="number">0x01</span>&lt;&lt;<span class="number">1</span>); <span class="comment">//stop</span></div><div class="line">    ndelay(<span class="number">50</span>);<span class="comment">//等待停止信号发完</span></div><div class="line"></div><div class="line">    <span class="comment">/*唤醒*/</span></div><div class="line">    wake_up(&amp;i2c_data.wait);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> irqreturn_t <span class="title">i2c_xfer_irq</span><span class="params">(<span class="keyword">int</span> irq, <span class="keyword">void</span> *dev_id)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> status = <span class="number">0</span>;</div><div class="line"></div><div class="line">    printk(KERN_INFO<span class="string">"%s OK.\n"</span>,__func__); </div><div class="line"></div><div class="line">    status = I2C0-&gt;IRQSTS;</div><div class="line"></div><div class="line">    <span class="comment">//I2C0-&gt;IRQSTS = (status &amp; (0x01&lt;&lt;1 |0x01&lt;&lt;3 | 0x01&lt;&lt;4));</span></div><div class="line">    I2C0-&gt;IRQSTS = (status &amp; (<span class="number">0x01</span>&lt;&lt;<span class="number">3</span> | <span class="number">0x01</span>&lt;&lt;<span class="number">4</span>));</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(status &amp; (<span class="number">0x01</span>&lt;&lt;<span class="number">3</span>))<span class="comment">//receive</span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">//printk(KERN_INFO"i2c receive.\n"); </span></div><div class="line">        I2C0-&gt;IRQSTS |= (<span class="number">0x01</span>&lt;&lt;<span class="number">3</span>);</div><div class="line"></div><div class="line">        i2c_data.msgs-&gt;buf[i2c_data.cur_rec] = I2C0-&gt;DATA;</div><div class="line">        i2c_data.cur_rec++;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(i2c_data.cur_rec == i2c_data.reg_cnt) </div><div class="line">        &#123;</div><div class="line">            I2C0-&gt;IRQEN_CLR |= (<span class="number">0x01</span>&lt;&lt;<span class="number">3</span>); </div><div class="line">            am437x_i2c_stop(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (status &amp; (<span class="number">0x01</span>&lt;&lt;<span class="number">4</span>))<span class="comment">//send</span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">//printk(KERN_INFO"i2c send.\n");</span></div><div class="line"></div><div class="line">        I2C0-&gt;IRQSTS |= (<span class="number">0x01</span>&lt;&lt;<span class="number">4</span>);</div><div class="line"></div><div class="line">        I2C0-&gt;DATA = i2c_data.msgs-&gt;buf[i2c_data.cur_send];</div><div class="line">        i2c_data.cur_send++;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(i2c_data.cur_send == i2c_data.reg_cnt)</div><div class="line">        &#123;</div><div class="line">            I2C0-&gt;IRQEN_CLR |= (<span class="number">0x01</span>&lt;&lt;<span class="number">4</span>);</div><div class="line">            am437x_i2c_stop(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125; </div><div class="line">    </div><div class="line">    <span class="comment">//判断是否有ack和bus空闲</span></div><div class="line"></div><div class="line">    I2C0-&gt;IRQSTS|=  <span class="number">0x7FFF</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> IRQ_HANDLED;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span>  <span class="title">am437x_i2c_xfer</span><span class="params">(<span class="keyword">struct</span> i2c_adapter *adap,</span></span></div><div class="line">        <span class="keyword">struct</span> i2c_msg *msgs, <span class="keyword">int</span> num)</div><div class="line">&#123;</div><div class="line">    <span class="comment">//用于实现I2C协议，将i2c_msg消息传给i2c设备</span></div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> timeout;</div><div class="line"></div><div class="line">    printk(KERN_INFO<span class="string">"%s OK.\n"</span>,__func__); </div><div class="line"></div><div class="line">    <span class="comment">//把num个i2c_msg的I2C数据发送出去/读进来</span></div><div class="line">    i2c_data.msgs    = msgs;</div><div class="line">    i2c_data.cur_rec = <span class="number">0</span>;</div><div class="line">    i2c_data.cur_send = <span class="number">0</span>;</div><div class="line">    i2c_data.err     = -ENODEV;</div><div class="line"></div><div class="line">    I2C0-&gt;CNT = i2c_data.msgs-&gt;len;</div><div class="line">    i2c_data.reg_cnt = I2C0-&gt;CNT;</div><div class="line"></div><div class="line">    I2C0-&gt;SA = i2c_data.msgs-&gt;addr;</div><div class="line">    </div><div class="line">    am437x_i2c_start();</div><div class="line"></div><div class="line">    <span class="comment">/*休眠*/</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span>(i2c_data.msgs-&gt;flags &amp; I2C_M_RD) <span class="comment">//读</span></div><div class="line">    &#123;</div><div class="line">        timeout = wait_event_timeout(i2c_data.wait,(i2c_data.cur_rec == i2c_data.reg_cnt), HZ * <span class="number">5</span>);<span class="comment">//5S    </span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        timeout = wait_event_timeout(i2c_data.wait, (i2c_data.cur_send == i2c_data.reg_cnt), HZ * <span class="number">5</span>);<span class="comment">//5S</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(<span class="number">0</span> == timeout)</div><div class="line">    &#123;</div><div class="line">        printk(<span class="string">"am437x i2c timeout.\n"</span>);</div><div class="line">        <span class="keyword">return</span> -ETIMEDOUT;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> i2c_data.err;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> u32  <span class="title">am437x_i2c_func</span><span class="params">(<span class="keyword">struct</span> i2c_adapter *adap)</span></span></div><div class="line">&#123;</div><div class="line">    printk(KERN_INFO<span class="string">"%s OK.\n"</span>,__func__); </div><div class="line">    <span class="comment">//用于返回总线支持的协议</span></div><div class="line">    <span class="keyword">return</span> I2C_FUNC_I2C | I2C_FUNC_SMBUS_EMUL | I2C_FUNC_PROTOCOL_MANGLING;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">struct</span> i2c_algorithm am437x_i2c_algo = &#123;</div><div class="line">    <span class="comment">//.smbus_xfer     = ,</span></div><div class="line">    .master_xfer= am437x_i2c_xfer,</div><div class="line">    .functionality= am437x_i2c_func,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> i2c_adapter am437x_i2c_adapter = &#123;</div><div class="line">    .name        = <span class="string">"i2c_adapter"</span>,</div><div class="line">    .algo    = &amp;am437x_i2c_algo,<span class="comment">//i2c总线通信方法</span></div><div class="line">    .owner     = THIS_MODULE,</div><div class="line">&#125;;</div><div class="line">                                                              </div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">i2c_init</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    printk(KERN_INFO<span class="string">"%s OK.\n"</span>,__func__); </div><div class="line"></div><div class="line">    <span class="comment">/*clk*/</span></div><div class="line">    PRCM_CM_WKUP_I2C0_CLKCTRL   = ioremap(<span class="number">0x44DF2800</span>+<span class="number">0x340</span>, <span class="number">0x04</span>*<span class="number">1</span>);</div><div class="line">    *PRCM_CM_WKUP_I2C0_CLKCTRL  |= (<span class="number">0x02</span>&lt;&lt;<span class="number">0</span>);</div><div class="line"></div><div class="line">    PRCM_CM_WKUP_CLKSTCTRL      = ioremap(<span class="number">0x44DF2800</span>+<span class="number">0x300</span>, <span class="number">0x04</span>*<span class="number">1</span>);</div><div class="line">    *PRCM_CM_WKUP_CLKSTCTRL     |= (<span class="number">0x01</span>&lt;&lt;<span class="number">14</span>);</div><div class="line"></div><div class="line">    PRCM_CM_PER_L4LS_CLKSTCTRL  = ioremap(<span class="number">0x44DF8800</span>+<span class="number">0x400</span>, <span class="number">0x04</span>*<span class="number">1</span>);</div><div class="line">    *PRCM_CM_PER_L4LS_CLKSTCTRL |= (<span class="number">0x01</span>&lt;&lt;<span class="number">27</span>);</div><div class="line"></div><div class="line">    <span class="comment">/*GPIO:gpio3_5-&gt;I2C0_SDA;gpio3_6-&gt;I2C0_SCL*/</span></div><div class="line"></div><div class="line">    CTRL_CONF_I2C0_SDA = ioremap(<span class="number">0x44E10000</span>+<span class="number">0x0988</span>, <span class="number">0x04</span>*<span class="number">1</span>);</div><div class="line">    CTRL_CONF_I2C0_SCL = ioremap(<span class="number">0x44E10000</span>+<span class="number">0x098C</span>, <span class="number">0x04</span>*<span class="number">1</span>);</div><div class="line"></div><div class="line">    *CTRL_CONF_I2C0_SDA &amp;= ~(<span class="number">0x07</span>&lt;&lt;<span class="number">0</span> | <span class="number">0x01</span>&lt;&lt;<span class="number">16</span> | <span class="number">0x01</span>&lt;&lt;<span class="number">19</span>);</div><div class="line">    *CTRL_CONF_I2C0_SCL &amp;= ~(<span class="number">0x07</span>&lt;&lt;<span class="number">0</span> | <span class="number">0x01</span>&lt;&lt;<span class="number">16</span> | <span class="number">0x01</span>&lt;&lt;<span class="number">19</span>);</div><div class="line"></div><div class="line">    <span class="comment">/*I2C0 set*/</span></div><div class="line">    I2C0 = ioremap(<span class="number">0x44E0B000</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> am437x_i2c_regs));</div><div class="line"></div><div class="line">    I2C0-&gt;CON  &amp;= ~(<span class="number">0x01</span>&lt;&lt;<span class="number">15</span>);<span class="comment">//reset</span></div><div class="line"></div><div class="line">    I2C0-&gt;SYSC &amp;= ~(<span class="number">0x01</span>&lt;&lt;<span class="number">0</span>);<span class="comment">//Auto Idle disabled.</span></div><div class="line"></div><div class="line">    I2C0-&gt;PSC  = <span class="number">3</span>;<span class="comment">//the module divided by (PSC + 1) -&gt; 48M/(3+1)=12M</span></div><div class="line"></div><div class="line">    I2C0-&gt;SCLL = <span class="number">63</span>;<span class="comment">//tLOW = (SCLL + 7) * ICLK time period</span></div><div class="line">    I2C0-&gt;SCLH = <span class="number">65</span>;<span class="comment">//tHIGH = (SCLH + 5) * ICLK time period</span></div><div class="line"></div><div class="line">    <span class="comment">//I2C0-&gt;SA = 0x50;//Slave address.x 1010 000</span></div><div class="line"></div><div class="line">    I2C0-&gt;CON  |=  (<span class="number">0x01</span>&lt;&lt;<span class="number">15</span>);<span class="comment">//Module enabled</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">i2c_bus_drv_init</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    printk(KERN_INFO<span class="string">"%s OK.\n"</span>,__func__); </div><div class="line"></div><div class="line">    <span class="comment">//硬件相关的设置</span></div><div class="line">    i2c_init();</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (request_irq(<span class="number">102</span>, i2c_xfer_irq, <span class="number">0</span>, <span class="string">"am437x-i2c"</span>, <span class="literal">NULL</span>))</div><div class="line">        <span class="keyword">return</span> -EAGAIN;</div><div class="line"></div><div class="line">    init_waitqueue_head(&amp;i2c_data.wait);</div><div class="line"></div><div class="line">    i2c_add_adapter(&amp;am437x_i2c_adapter);<span class="comment">//会在/sys/class/i2c-adapter下生成i2c-x</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">i2c_bus_drv_exit</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    printk(KERN_INFO<span class="string">"%s OK.\n"</span>,__func__); </div><div class="line"></div><div class="line">    iounmap(CTRL_CONF_I2C0_SDA);</div><div class="line">    iounmap(CTRL_CONF_I2C0_SCL);</div><div class="line"></div><div class="line">    iounmap(PRCM_CM_WKUP_I2C0_CLKCTRL);</div><div class="line">    iounmap(PRCM_CM_WKUP_CLKSTCTRL);</div><div class="line">    iounmap(PRCM_CM_PER_L4LS_CLKSTCTRL);</div><div class="line"></div><div class="line">    iounmap(I2C0);</div><div class="line"></div><div class="line">    free_irq(<span class="number">102</span>, <span class="literal">NULL</span>);</div><div class="line"></div><div class="line">    i2c_del_adapter(&amp;am437x_i2c_adapter);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">module_init(i2c_bus_drv_init);</div><div class="line">module_exit(i2c_bus_drv_exit);</div><div class="line"></div><div class="line">MODULE_LICENSE(<span class="string">"GPL"</span>);</div><div class="line">MODULE_AUTHOR(<span class="string">"hceng &lt;huangcheng.job@foxmail.com&gt;"</span>);</div><div class="line">MODULE_DESCRIPTION(<span class="string">"TI am437x board i2c bus drvice."</span>);</div><div class="line">MODULE_ALIAS(<span class="string">"ti_i2c"</span>);</div><div class="line">MODULE_VERSION(<span class="string">"V2.0"</span>);</div></pre></td></tr></table></figure><h1 id="5-测试结果"><a href="#5-测试结果" class="headerlink" title="5.测试结果"></a>5.测试结果</h1><p>加载i2c0总线驱动，再加载at24cxx设备驱动，最后运行应用程序。<br>写1地址1，2地址2，3地址3，4地址4； 再读取1地址数据，2地址数据，3地址数据，4地址数据。<br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/170911/1.png" alt=""></p><p>再看下逻辑分析仪效果：<br>向地址0x02写入数据2：<br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/170911/2.png" alt=""><br>向地址0x02读出数据2：<br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/170911/3.png" alt=""><br>（PS:图片经过处理，让其在一张图上显示，因此时间标识有误。）</p><h1 id="6-心得"><a href="#6-心得" class="headerlink" title="6.心得"></a>6.心得</h1><p>本次I2C适配器驱动，算是第一次写一个较复杂的驱动，目的是先写通，其次才是优化，因此存在以下一些问题：<br>1.没有使用系统提供的时钟、GPIO配置等函数，全是自己映射；<br>2.中断没有对总线空闲、没有ack进行判断；<br>3.有些函数返回值没有处理；</p><p>收获：<br>1.先调通再优化，现在调通了，优化等下次有机会在优化；<br>2.调不动的时候，拿逻辑分析仪抓，再对照标准波形，一找一个准；</p><p>在写博客的时候，发现个BUG：<br>printk()打印调试的时候，一切正常。<br>在关闭printk()打印后，先对EEPROM写操作，再去读操作，发现怎么都是255。<br>这种情况，多半是哪里延时时序问题。<br>用逻辑分析仪抓波形，一个个printk()的关，最终发现问题在am437x_i2c_stop()。<br>波形如下：<br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/170911/4.png" alt=""><br>可以看到地址发错了，加上一个2ms的延时后，即正常。</p><p>I2C驱动完了，下一个计划，LCD驱动。😀</p><hr><p><div align="center"><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本文采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href="http://hceng.cn/" target="_blank" rel="external">hceng’s blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录AM437x的I2C适配器驱动和I2C设备驱动，以及去除am437x EEPROM验证ID功能。&lt;br&gt;
    
    </summary>
    
    
      <category term="AM437X" scheme="http://yoursite.com/tags/AM437X/"/>
    
      <category term="Linux驱动" scheme="http://yoursite.com/tags/Linux%E9%A9%B1%E5%8A%A8/"/>
    
  </entry>
  
  <entry>
    <title>AM437x——I2C裸机</title>
    <link href="http://yoursite.com/2017/08/28/AM437x%E2%80%94%E2%80%94I2C%E8%A3%B8%E6%9C%BA/"/>
    <id>http://yoursite.com/2017/08/28/AM437x——I2C裸机/</id>
    <published>2017-08-28T06:12:26.000Z</published>
    <updated>2017-09-12T00:57:43.541Z</updated>
    
    <content type="html"><![CDATA[<p>记录AM437x的I2C裸机调试，包含GPIO模拟和寄存器控制。<br><a id="more"></a></p><hr><h1 id="0-I2C协议关键点"><a href="#0-I2C协议关键点" class="headerlink" title="0.I2C协议关键点"></a>0.I2C协议关键点</h1><h2 id="0-1-I2C协议"><a href="#0-1-I2C协议" class="headerlink" title="0.1 I2C协议"></a>0.1 I2C协议</h2><p>想象有两个设备，他们之间要传输数据。发数据的叫主设备，接收数据的叫从设备。<br>两个设备之间，只有两根线。一根线得作为时钟信号线，这样两个设备才能统一一个信号标准，另外一个自然只有作为信号线传输数据。</p><p>主设备要发送数据前，得发出一个特殊的信号，告诉从设备，这个信号就是开始信号。<br>同理，发送完后，有个特殊的结束信号。以及从机在接收到数据后，给个响应信号表示自己收到了。</p><blockquote><p><strong>开始信号s</strong>：SCL为高，SDA由高变低，开始传输数据<br><strong>结束信号p</strong>：SCL为高，SDA由低变高，结束传输数据<br><strong>响应信号a</strong>：接收器在收到8位数据后，在第9个时钟周期，拉低SDA电平。<br><em>SDA的信号，只能在SCL为低的时候发生变化。</em></p></blockquote><p><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/170828/1.png" alt=""><br>如图，</p><ul><li>SDA和SCL开始都为高。然后SDA拉低，表示开始信号。</li><li>在接下来的8个时间周期里，主机控制SDA的高低，发出一个 <em>包含从机地址</em> 和 <em>是读操作还是写操作</em> 的数据。第9个时钟周期，主设备拉高后释放掉SDA，再去读取它。从设备应该拉低SDA，给出响应信号。</li><li>再接下来的8个时间周期里，主机控制SDA的高低，传达数据。从机就读取电平高低，得到数据。第9个时钟周期，从设备给主设备一个响应信号。</li><li>最后，主机给个停止信号，表示传输结束。</li></ul><h2 id="0-2-EEPROM"><a href="#0-2-EEPROM" class="headerlink" title="0.2 EEPROM"></a>0.2 EEPROM</h2><p>以CAT24C256这个EEPROM作为从设备为例。</p><ul><li><p>先看看CAT24C256的引脚有哪些：<br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/170828/2.png" alt=""><br>SCL和SDA，时钟和数据。<br>A0,A1和A2，用来表示从设备的地址，在硬件电路上，设置这3个引脚的值。<br>WP，写保护引脚。高电平的时候写保护，因此在写EEPROM的时候得将该引脚置低。</p></li><li><p>再看看，前面说的 “一个 <em>包含从机地址</em> 和 <em>是读操作还是写操作</em> 的数据”：<br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/170828/3.png" alt=""><br>可以看到前4位固定为”1010”，然后是3位地址，最后位表示是读操作还是写操作。</p></li><li><p>写操作的时序<br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/170828/4.png" alt=""><br>先来个开始信号，然后是从机地址(写)，然后是要写地址的高8位，再是低8位，再是要写的8位数据，最后是停止信号。<br>每次传输的后面都得有个响应信号。</p></li><li><p>读操作的时序<br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/170828/5.png" alt=""><br>先来个开始信号，然后是从机地址(写)，然后是要写地址的高8位，再是低8位。再来个开始信号，然后是从机地址(读)，获取8位数据，最后是停止信号。<br>每次传输的后面都得有个响应信号，但如果是最后一次接收数据可不要。</p></li></ul><h1 id="1-GPIO模拟版本"><a href="#1-GPIO模拟版本" class="headerlink" title="1.GPIO模拟版本"></a>1.GPIO模拟版本</h1><h2 id="1-1硬件结构"><a href="#1-1硬件结构" class="headerlink" title="1.1硬件结构"></a>1.1硬件结构</h2><p>TI EVM开发板的EEPROM部分电路图：<br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/170828/6.png" alt=""></p><p>米尔科技开发板的EEPROM部分电路图：<br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/170828/7.png" alt=""></p><p>两个板子都是用的I2C0，器件地址都是000，唯一不同的是米尔的板子用了EMU0引脚控制EEPROM的写保护。<br>后面以米尔板子为例。这三个引脚分别是：<br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/170828/8.png" alt=""><br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/170828/9.png" alt=""></p><blockquote><p>I2C0_SDA-&gt;gpio3_5;<br>I2C0_SCL-&gt;gpio3_6;<br>      WP-&gt;gpio3_7;</p></blockquote><h2 id="1-2相关函数"><a href="#1-2相关函数" class="headerlink" title="1.2相关函数"></a>1.2相关函数</h2><ul><li>GPIO相关</li></ul><p>1.启用GPIO3时钟，引脚控制默认为GPIO，再设置为输出，拉高引脚，做好准备；<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">i2c_init</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">    PRCM_CM_PER_GPIO3_CLKCTRL  |= (<span class="number">0x02</span>&lt;&lt;<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="comment">//gpio3_5-&gt;I2C0_SDA;gpio3_6-&gt;I2C0_SCL;gpio3_7-&gt;WP</span></div><div class="line">    <span class="comment">//CTRL_CONF_I2C0_SDA ;//GPIO模式I2C，默认配置即可</span></div><div class="line">    <span class="comment">//CTRL_CONF_I2C0_SCL ;//GPIO模式I2C，默认配置即可</span></div><div class="line"></div><div class="line">    GPIO3-&gt;OE      &amp;= ~(<span class="number">0x01</span>&lt;&lt;<span class="number">7</span> | <span class="number">0x01</span>&lt;&lt;<span class="number">6</span> | <span class="number">0x01</span>&lt;&lt;<span class="number">5</span>);<span class="comment">//输出</span></div><div class="line">    GPIO3-&gt;DATAOUT |=  (<span class="number">0x01</span>&lt;&lt;<span class="number">7</span> | <span class="number">0x01</span>&lt;&lt;<span class="number">6</span> | <span class="number">0x01</span>&lt;&lt;<span class="number">5</span>);<span class="comment">//拉高</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>2.封装好SDA和SCL的输出高低电平函数，以及获取SDA引脚数据函数，最后还有使能写保护引脚函数；<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SDA</span><span class="params">(<span class="keyword">char</span> x)</span></span></div><div class="line">&#123;</div><div class="line">    GPIO3-&gt;OE &amp;= ~(<span class="number">0x01</span>&lt;&lt;<span class="number">5</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(x) &#123;</div><div class="line">        GPIO3-&gt;DATAOUT |=  (<span class="number">0x01</span>&lt;&lt;<span class="number">5</span>);</div><div class="line">    &#125; </div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        GPIO3-&gt;DATAOUT &amp;= ~(<span class="number">0x01</span>&lt;&lt;<span class="number">5</span>);</div><div class="line">    &#125;     </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SCL</span><span class="params">(<span class="keyword">char</span> x)</span></span></div><div class="line">&#123;</div><div class="line">    GPIO3-&gt;OE &amp;= ~(<span class="number">0x01</span>&lt;&lt;<span class="number">6</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(x) &#123;</div><div class="line">        GPIO3-&gt;DATAOUT |=  (<span class="number">0x01</span>&lt;&lt;<span class="number">6</span>);</div><div class="line">    &#125; </div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        GPIO3-&gt;DATAOUT &amp;= ~(<span class="number">0x01</span>&lt;&lt;<span class="number">6</span>);</div><div class="line">    &#125;     </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">char</span> <span class="title">GET_SDA</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    GPIO3-&gt;OE |= (<span class="number">0x01</span>&lt;&lt;<span class="number">5</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> (GPIO3-&gt;DATAIN &amp; (<span class="number">0x01</span>&lt;&lt;<span class="number">5</span>)?<span class="number">1</span>:<span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">eeprom_write_protect</span><span class="params">(<span class="keyword">char</span> x)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(x)</div><div class="line">        GPIO3-&gt;DATAOUT |=  (<span class="number">0x01</span>&lt;&lt;<span class="number">7</span>);</div><div class="line">    <span class="keyword">else</span> </div><div class="line">        GPIO3-&gt;DATAOUT &amp;= ~(<span class="number">0x01</span>&lt;&lt;<span class="number">7</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><ul><li>I2C协议相关<br>1.三个信号函数：开始信号、停止信号、响应信号(判断是否收到从设备的响应信号)。<br>理论上可以通过调节延时的长短，改变传输速度。<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">i2c_delay</span><span class="params">(<span class="keyword">volatile</span> <span class="keyword">int</span> time)</span></span></div><div class="line">&#123;</div><div class="line">    time = time*<span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (; time &gt; <span class="number">0</span>; time--);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">i2c_start</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    SCL(<span class="number">1</span>);</div><div class="line">    i2c_delay(<span class="number">1</span>);</div><div class="line">    </div><div class="line">    SDA(<span class="number">1</span>);</div><div class="line">    i2c_delay(<span class="number">1</span>);</div><div class="line">    SDA(<span class="number">0</span>);</div><div class="line">    i2c_delay(<span class="number">1</span>);</div><div class="line">    </div><div class="line">    SCL(<span class="number">0</span>); </div><div class="line">    i2c_delay(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">i2c_stop</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    SDA(<span class="number">0</span>);</div><div class="line">    i2c_delay(<span class="number">1</span>);</div><div class="line">    </div><div class="line">    SCL(<span class="number">1</span>);</div><div class="line">    i2c_delay(<span class="number">1</span>);</div><div class="line">    </div><div class="line">    SDA(<span class="number">1</span>);</div><div class="line">    i2c_delay(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">i2c_ack</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> pin_val;</div><div class="line">        </div><div class="line">    SCL(<span class="number">0</span>);</div><div class="line">    i2c_delay(<span class="number">1</span>);</div><div class="line">    </div><div class="line">    SDA(<span class="number">1</span>);</div><div class="line">    i2c_delay(<span class="number">1</span>);</div><div class="line">    </div><div class="line">    <span class="comment">//实测中，am437x引脚由输出设置为输入的时候，会有一个高电平</span></div><div class="line">    <span class="comment">//因此，趁现在SCL为低，先设置为输入</span></div><div class="line">    GET_SDA();</div><div class="line">    </div><div class="line">    SCL(<span class="number">1</span>);</div><div class="line">    i2c_delay(<span class="number">1</span>);</div><div class="line">    </div><div class="line">    pin_val = GET_SDA();</div><div class="line">    i2c_delay(<span class="number">1</span>);</div><div class="line">    </div><div class="line">    SCL(<span class="number">0</span>);</div><div class="line">    i2c_delay(<span class="number">1</span>);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> pin_val;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><p>2.I2C的读写函数<br>写就是在8个时钟周期里，SCL低的时候，改变SDA，SCL高的时候，稳定SDA，从而发出8位数据。<br>写就是在8个时钟周期里，SCL低的时候，不读引脚，SCL高的时候，读引脚，从而得到8位数据。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">eeprom_write</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> addr, <span class="keyword">unsigned</span> <span class="keyword">char</span> data)</span></span></div><div class="line">&#123;</div><div class="line">   eeprom_write_protect(<span class="number">0</span>);</div><div class="line"></div><div class="line">   i2c_start();</div><div class="line">   </div><div class="line">   i2c_write(<span class="number">0xA0</span>);</div><div class="line">   <span class="keyword">while</span>(i2c_ack());</div><div class="line">   </div><div class="line">   i2c_write(addr&gt;&gt;<span class="number">8</span>);</div><div class="line">   <span class="keyword">while</span>(i2c_ack());</div><div class="line">   i2c_write(addr);</div><div class="line">   <span class="keyword">while</span>(i2c_ack());</div><div class="line"></div><div class="line">   i2c_write(data);</div><div class="line">   <span class="keyword">while</span>(i2c_ack());</div><div class="line">   </div><div class="line">   i2c_stop();</div><div class="line"></div><div class="line">   eeprom_write_protect(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">char</span> <span class="title">eeprom_read</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> addr)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> data = <span class="number">0</span>;</div><div class="line"></div><div class="line">    eeprom_write_protect(<span class="number">0</span>);</div><div class="line"></div><div class="line">    i2c_start();</div><div class="line">    </div><div class="line">    i2c_write(<span class="number">0xA0</span>);</div><div class="line">    <span class="keyword">while</span>(i2c_ack());</div><div class="line">  </div><div class="line">    i2c_write(addr&gt;&gt;<span class="number">8</span>);</div><div class="line">    <span class="keyword">while</span>(i2c_ack());</div><div class="line">    i2c_write(addr);</div><div class="line">    <span class="keyword">while</span>(i2c_ack());</div><div class="line"></div><div class="line">    i2c_stop();</div><div class="line">    </div><div class="line">    i2c_delay(<span class="number">10</span>);</div><div class="line">    </div><div class="line">    i2c_start();</div><div class="line">    </div><div class="line">    i2c_write(<span class="number">0xA1</span>);</div><div class="line">    <span class="keyword">while</span>(i2c_ack());</div><div class="line"></div><div class="line">    data = i2c_read();</div><div class="line">    </div><div class="line">    i2c_stop();</div><div class="line"></div><div class="line">    eeprom_write_protect(<span class="number">1</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> data;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><ul><li>EEPROM相关<br>写操作：先关闭写保护，发出开始信号，发出从机地址(写)，发出高地址、低地址，发出数据，发出停止信号和打开写保护。<br>读操作：先关闭写保护，发出开始信号，发出从机地址(写)，发出高地址、低地址。再发出开始信号，发出从机地址(写读)，读取数据，发出停止信号和打开写保护。<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">eeprom_write</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> addr, <span class="keyword">unsigned</span> <span class="keyword">char</span> data)</span></span></div><div class="line">&#123;</div><div class="line">   eeprom_write_protect(<span class="number">0</span>);</div><div class="line"></div><div class="line">   i2c_start();</div><div class="line">   </div><div class="line">   i2c_write(<span class="number">0xA0</span>);</div><div class="line">   <span class="keyword">while</span>(i2c_ack());</div><div class="line">   </div><div class="line">   i2c_write(addr&gt;&gt;<span class="number">8</span>);</div><div class="line">   <span class="keyword">while</span>(i2c_ack());</div><div class="line">   i2c_write(addr);</div><div class="line">   <span class="keyword">while</span>(i2c_ack());</div><div class="line"></div><div class="line">   i2c_write(data);</div><div class="line">   <span class="keyword">while</span>(i2c_ack());</div><div class="line">   </div><div class="line">   i2c_stop();</div><div class="line"></div><div class="line">   eeprom_write_protect(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">char</span> <span class="title">eeprom_read</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> addr)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> data = <span class="number">0</span>;</div><div class="line">    </div><div class="line">    eeprom_write_protect(<span class="number">0</span>);</div><div class="line">    </div><div class="line">    i2c_start();</div><div class="line">    </div><div class="line">    i2c_write(<span class="number">0xA0</span>);</div><div class="line">    <span class="keyword">while</span>(i2c_ack());</div><div class="line">    </div><div class="line">    i2c_write(addr&gt;&gt;<span class="number">8</span>);</div><div class="line">    <span class="keyword">while</span>(i2c_ack());</div><div class="line">    i2c_write(addr);</div><div class="line">    <span class="keyword">while</span>(i2c_ack());</div><div class="line">    </div><div class="line">    i2c_stop();</div><div class="line">    </div><div class="line">    i2c_delay(<span class="number">10</span>);</div><div class="line">    </div><div class="line">    i2c_start();</div><div class="line">    </div><div class="line">    i2c_write(<span class="number">0xA1</span>);</div><div class="line">    <span class="keyword">while</span>(i2c_ack());</div><div class="line">    </div><div class="line">    data = i2c_read();</div><div class="line">    </div><div class="line">    i2c_stop();</div><div class="line">    </div><div class="line">    eeprom_write_protect(<span class="number">1</span>);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> data;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="1-3测试效果"><a href="#1-3测试效果" class="headerlink" title="1.3测试效果"></a>1.3测试效果</h2></li><li>串口打印：<br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/170828/10.png" alt=""></li><li>向0x01地址写数据2：<br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/170828/11.png" alt=""></li><li>读0x01地址数据为2：<br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/170828/12.png" alt=""></li></ul><h1 id="2-I2C寄存器版本"><a href="#2-I2C寄存器版本" class="headerlink" title="2.I2C寄存器版本"></a>2.I2C寄存器版本</h1><h2 id="2-1硬件结构"><a href="#2-1硬件结构" class="headerlink" title="2.1硬件结构"></a>2.1硬件结构</h2><p>同上。</p><h2 id="2-2相关函数"><a href="#2-2相关函数" class="headerlink" title="2.2相关函数"></a>2.2相关函数</h2><ul><li><p>初始化相关<br>1.初始化相关的时钟和配置复用功能；</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">i2c_gpio_init</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    PRCM_CM_WKUP_I2C0_CLKCTRL |= (<span class="number">0x02</span>&lt;&lt;<span class="number">0</span>); </div><div class="line">    PRCM_CM_WKUP_CLKSTCTRL    |= (<span class="number">0x01</span>&lt;&lt;<span class="number">14</span>);</div><div class="line">    PRCM_CM_PER_L4LS_CLKSTCTRL|= (<span class="number">0x01</span>&lt;&lt;<span class="number">27</span>);</div><div class="line"></div><div class="line">    PRCM_CM_PER_GPIO3_CLKCTRL  |= (<span class="number">0x02</span>&lt;&lt;<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="comment">//gpio3_5-&gt;I2C0_SDA;gpio3_6-&gt;I2C0_SCL;gpio3_7-&gt;WP</span></div><div class="line"></div><div class="line">    CTRL_CONF_I2C0_SDA &amp;= ~(<span class="number">0x07</span>&lt;&lt;<span class="number">0</span> | <span class="number">0x01</span>&lt;&lt;<span class="number">16</span> | <span class="number">0x01</span>&lt;&lt;<span class="number">19</span>);</div><div class="line">    CTRL_CONF_I2C0_SCL &amp;= ~(<span class="number">0x07</span>&lt;&lt;<span class="number">0</span> | <span class="number">0x01</span>&lt;&lt;<span class="number">16</span> | <span class="number">0x01</span>&lt;&lt;<span class="number">19</span>);</div><div class="line">    <span class="comment">//CTRL_CONF_EMU0</span></div><div class="line">    GPIO3-&gt;OE      &amp;= ~(<span class="number">0x01</span>&lt;&lt;<span class="number">7</span>);</div><div class="line">    GPIO3-&gt;DATAOUT |=  (<span class="number">0x01</span>&lt;&lt;<span class="number">7</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>2.初始化I2C0，注册中断；<br>注意这里的从机地址不含最后的读写操作位。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">i2c_init</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    i2c_gpio_init();</div><div class="line">    </div><div class="line">    register_irq(IRQ_I2C0, i2c0_irq);</div><div class="line">    </div><div class="line">    interrupt_init(IRQ_I2C0);</div><div class="line">    </div><div class="line">    I2C0-&gt;CON  &amp;= ~(<span class="number">0x01</span>&lt;&lt;<span class="number">15</span>);<span class="comment">//reset</span></div><div class="line">    </div><div class="line">    I2C0-&gt;SYSC &amp;= ~(<span class="number">0x01</span>&lt;&lt;<span class="number">0</span>);<span class="comment">//Auto Idle disabled.</span></div><div class="line">    </div><div class="line">    I2C0-&gt;PSC  = <span class="number">3</span>;<span class="comment">//the module divided by (PSC + 1) -&gt; 48M/(3+1)=12M</span></div><div class="line">    </div><div class="line">    I2C0-&gt;SCLL = <span class="number">63</span>;<span class="comment">//tLOW = (SCLL + 7) * ICLK time period</span></div><div class="line">    I2C0-&gt;SCLH = <span class="number">65</span>;<span class="comment">//tHIGH = (SCLH + 5) * ICLK time period</span></div><div class="line">    </div><div class="line">    I2C0-&gt;SA = <span class="number">0x50</span>;<span class="comment">//Slave address.1010 000</span></div><div class="line">    </div><div class="line">    I2C0-&gt;CON  |=  (<span class="number">0x01</span>&lt;&lt;<span class="number">15</span>);<span class="comment">//Module enabled</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>中断处理函数<br>中断处理函数是硬件I2C的核心，根据中断状态标志位去进行相应的读或写操作。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">i2c0_irq</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> status = <span class="number">0</span>;</div><div class="line"></div><div class="line">    status = I2C0-&gt;IRQSTS;</div><div class="line">    I2C0-&gt;IRQSTS = (status &amp; (<span class="number">0x01</span>&lt;&lt;<span class="number">3</span> | <span class="number">0x01</span>&lt;&lt;<span class="number">4</span>));</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(status &amp; (<span class="number">0x01</span>&lt;&lt;<span class="number">3</span>))<span class="comment">//receive</span></div><div class="line">    &#123;</div><div class="line">        I2C0-&gt;IRQSTS |= (<span class="number">0x01</span>&lt;&lt;<span class="number">3</span>);</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(r_count == num)</div><div class="line">        &#123;</div><div class="line">            I2C0-&gt;IRQEN_CLR |= (<span class="number">0x01</span>&lt;&lt;<span class="number">3</span>);</div><div class="line">            I2C0-&gt;CON |= (<span class="number">0x01</span>&lt;&lt;<span class="number">1</span>);<span class="comment">//stop  </span></div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            data_from_slave[r_count++] = (<span class="keyword">unsigned</span> <span class="keyword">char</span>)I2C0-&gt;DATA;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (status &amp; (<span class="number">0x01</span>&lt;&lt;<span class="number">4</span>))<span class="comment">//send</span></div><div class="line">    &#123;</div><div class="line">        I2C0-&gt;DATA = data_to_slave[t_count++];</div><div class="line"></div><div class="line">        I2C0-&gt;IRQSTS |= (<span class="number">0x01</span>&lt;&lt;<span class="number">4</span>); </div><div class="line"></div><div class="line">        <span class="keyword">if</span>(t_count == num)</div><div class="line">        &#123;</div><div class="line">            I2C0-&gt;IRQEN_CLR |= (<span class="number">0x01</span>&lt;&lt;<span class="number">4</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>EEPROM相关<br>写操作：去写保护，分解地址高低位，设置传输数据的位数(地址是两位+数据一位)，清除中断，设置为主机发送模式，使能发送中断，开始传输，直到地址数据传完，开启写保护。<br>读操作：去写保护，分解地址高低位，设置传输数据的位数(地址是两位)，清除中断，设置为主机发送模式，使能发送中断，开始传输，直到地址数据传完。再设置传输位（接收数据一位），清除中断，设置位主机接收模式，开始传输，直至传输完成，开启写保护。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">eeprom_write</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> addr, <span class="keyword">unsigned</span> <span class="keyword">char</span> data)</span></span></div><div class="line">&#123;</div><div class="line">    eeprom_write_protect(<span class="number">0</span>);</div><div class="line"></div><div class="line">    data_to_slave[<span class="number">0</span>] = addr&gt;&gt;<span class="number">8</span>;</div><div class="line">    data_to_slave[<span class="number">1</span>] = (addr &amp; <span class="number">0xFF</span>);</div><div class="line">    data_to_slave[<span class="number">2</span>] = data;</div><div class="line"></div><div class="line">    t_count = <span class="number">0</span>;</div><div class="line"></div><div class="line">    I2C0-&gt;CNT = <span class="number">0x03</span>;</div><div class="line">    num = I2C0-&gt;CNT;</div><div class="line"></div><div class="line">    I2C0-&gt;IRQSTS|=  <span class="number">0x7FFF</span>;</div><div class="line">    I2C0-&gt;IRQEN_CLR |=  <span class="number">0x7FFF</span>;</div><div class="line"></div><div class="line">    I2C0-&gt;CON |= (<span class="number">0x01</span>&lt;&lt;<span class="number">9</span> | <span class="number">0x01</span>&lt;&lt;<span class="number">10</span> | <span class="number">0x01</span>&lt;&lt;<span class="number">15</span>); <span class="comment">//MST=1  TRX=1  </span></div><div class="line"></div><div class="line">    I2C0-&gt;IRQEN_SET |= (<span class="number">0x01</span>&lt;&lt;<span class="number">4</span>);</div><div class="line"></div><div class="line">    I2C0-&gt;CON |= (<span class="number">0x01</span>&lt;&lt;<span class="number">0</span>);</div><div class="line">    </div><div class="line">    <span class="keyword">while</span>(i2c_master_bus_busy() == <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(t_count != num);</div><div class="line"></div><div class="line">    I2C0-&gt;CON |= (<span class="number">0x01</span>&lt;&lt;<span class="number">1</span>); <span class="comment">//stop</span></div><div class="line"></div><div class="line">    eeprom_write_protect(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">char</span> <span class="title">eeprom_read</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> addr)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> data = <span class="number">0</span>;</div><div class="line"></div><div class="line">    eeprom_write_protect(<span class="number">0</span>);</div><div class="line"></div><div class="line">    data_to_slave[<span class="number">0</span>] = addr&gt;&gt;<span class="number">8</span>;</div><div class="line">    data_to_slave[<span class="number">1</span>] = (addr &amp; <span class="number">0xFF</span>);</div><div class="line"></div><div class="line">    t_count = <span class="number">0</span>;</div><div class="line">    r_count = <span class="number">0</span>;</div><div class="line"></div><div class="line">    I2C0-&gt;CNT = <span class="number">0x02</span>;</div><div class="line"></div><div class="line">    num = I2C0-&gt;CNT;</div><div class="line"></div><div class="line">    I2C0-&gt;IRQSTS|=  <span class="number">0x7FFF</span>;</div><div class="line">    I2C0-&gt;IRQEN_CLR |=  <span class="number">0x6FFF</span>;</div><div class="line"></div><div class="line">    I2C0-&gt;CON |= (<span class="number">0x01</span>&lt;&lt;<span class="number">9</span> | <span class="number">0x01</span>&lt;&lt;<span class="number">10</span> | <span class="number">0x01</span>&lt;&lt;<span class="number">15</span>); <span class="comment">//MST=1  TRX=1  </span></div><div class="line"></div><div class="line">    I2C0-&gt;IRQEN_SET |= (<span class="number">0x01</span>&lt;&lt;<span class="number">4</span>);</div><div class="line"></div><div class="line">    I2C0-&gt;CON |= (<span class="number">0x01</span>&lt;&lt;<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(i2c_master_bus_busy() == <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(t_count != num);</div><div class="line">    <span class="keyword">while</span>(!(I2C0-&gt;IRQSTS_RAW &amp; (<span class="number">0x01</span>&lt;&lt;<span class="number">2</span>)));</div><div class="line"></div><div class="line"><span class="comment">//----------------------------------------------------------------//</span></div><div class="line"></div><div class="line">    I2C0-&gt;CNT = <span class="number">0x01</span>;</div><div class="line"></div><div class="line">    num = I2C0-&gt;CNT;</div><div class="line"></div><div class="line">    I2C0-&gt;IRQSTS|=  <span class="number">0x7FFF</span>;</div><div class="line">    I2C0-&gt;IRQEN_CLR |=  <span class="number">0x6FFF</span>;</div><div class="line"></div><div class="line">    I2C0-&gt;CON |=  (<span class="number">0x01</span>&lt;&lt;<span class="number">10</span> | (<span class="number">0x01</span>&lt;&lt;<span class="number">15</span>));</div><div class="line">    I2C0-&gt;CON &amp;= ~(<span class="number">0x01</span>&lt;&lt;<span class="number">9</span>);</div><div class="line"></div><div class="line">    I2C0-&gt;IRQEN_SET |= (<span class="number">0x01</span>&lt;&lt;<span class="number">3</span> | <span class="number">0x01</span>&lt;&lt;<span class="number">8</span>);</div><div class="line"></div><div class="line">    I2C0-&gt;CON |= (<span class="number">0x01</span>&lt;&lt;<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(i2c_master_bus_busy() == <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(r_count != num);</div><div class="line"></div><div class="line">    data = data_from_slave[<span class="number">0</span>];</div><div class="line"></div><div class="line">    eeprom_write_protect(<span class="number">1</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> data;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h2 id="2-3测试效果"><a href="#2-3测试效果" class="headerlink" title="2.3测试效果"></a>2.3测试效果</h2><ul><li>向0x01地址写数据2：<br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/170828/13.png" alt=""></li><li>读0x01地址数据为2：<br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/170828/14.png" alt=""></li></ul><h1 id="3-完整代码"><a href="#3-完整代码" class="headerlink" title="3.完整代码"></a>3.完整代码</h1><figure class="highlight c"><figcaption><span>[main.c]</span><a href="https://github.com/hceng/am437x/blob/master/hardware/3th_i2c/main.c" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*************************************************************************</span></div><div class="line">    &gt; File Name: main.c</div><div class="line">    &gt; Author: hceng</div><div class="line">    &gt; Description: AM437X裸机i2c</div><div class="line">    &gt; Created Time: 20170815</div><div class="line">*************************************************************************/</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"AM437X/AM437X_SOC.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"led.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"delay.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"uart.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"printf.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"key.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"clkout.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"int.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"timer.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"i2c.h"</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span>  <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> i;</div><div class="line"></div><div class="line">    uart_init();</div><div class="line">    gic_init();</div><div class="line">    timer2_init();</div><div class="line"></div><div class="line">    i2c_init();</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"init ok.\n\r"</span>);</div><div class="line"></div><div class="line">    <span class="comment">//write eeprom.</span></div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++)</div><div class="line">    &#123;</div><div class="line">        eeprom_write(i,<span class="number">2</span>*i);</div><div class="line">        delay_ms(<span class="number">4</span>);<span class="comment">//Must be delayed more than 4ms.</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    delay_ms(<span class="number">10</span>);</div><div class="line"></div><div class="line">    <span class="comment">//read eeprom.</span></div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"read_data%d = %d\n\r"</span>,i, eeprom_read(i));</div><div class="line">        delay_ms(<span class="number">4</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight c"><figcaption><span>[i2c.c]</span><a href="https://github.com/hceng/am437x/blob/master/hardware/3th_i2c/i2c.c" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"AM437X/AM437X_SOC.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"i2c.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"uart.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"printf.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"int.h"</span> </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"delay.h"</span> </span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> GPIO_I2C</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">i2c_delay</span><span class="params">(<span class="keyword">volatile</span> <span class="keyword">int</span> time)</span></span></div><div class="line">&#123;</div><div class="line">    time = time*<span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (; time &gt; <span class="number">0</span>; time--);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SDA</span><span class="params">(<span class="keyword">char</span> x)</span></span></div><div class="line">&#123;</div><div class="line">    GPIO3-&gt;OE &amp;= ~(<span class="number">0x01</span>&lt;&lt;<span class="number">5</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(x) &#123;</div><div class="line">        GPIO3-&gt;DATAOUT |=  (<span class="number">0x01</span>&lt;&lt;<span class="number">5</span>);</div><div class="line">    &#125; </div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        GPIO3-&gt;DATAOUT &amp;= ~(<span class="number">0x01</span>&lt;&lt;<span class="number">5</span>);</div><div class="line">    &#125;     </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SCL</span><span class="params">(<span class="keyword">char</span> x)</span></span></div><div class="line">&#123;</div><div class="line">    GPIO3-&gt;OE &amp;= ~(<span class="number">0x01</span>&lt;&lt;<span class="number">6</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(x) &#123;</div><div class="line">        GPIO3-&gt;DATAOUT |=  (<span class="number">0x01</span>&lt;&lt;<span class="number">6</span>);</div><div class="line">    &#125; </div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        GPIO3-&gt;DATAOUT &amp;= ~(<span class="number">0x01</span>&lt;&lt;<span class="number">6</span>);</div><div class="line">    &#125;     </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">char</span> <span class="title">GET_SDA</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    GPIO3-&gt;OE |= (<span class="number">0x01</span>&lt;&lt;<span class="number">5</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> (GPIO3-&gt;DATAIN &amp; (<span class="number">0x01</span>&lt;&lt;<span class="number">5</span>)?<span class="number">1</span>:<span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">i2c_init</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">    PRCM_CM_PER_GPIO3_CLKCTRL  |= (<span class="number">0x02</span>&lt;&lt;<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="comment">//gpio3_5-&gt;I2C0_SDA;gpio3_6-&gt;I2C0_SCL;gpio3_7-&gt;WP</span></div><div class="line">    <span class="comment">//CTRL_CONF_I2C0_SDA ;//GPIO模式I2C，默认配置即可</span></div><div class="line">    <span class="comment">//CTRL_CONF_I2C0_SCL ;//GPIO模式I2C，默认配置即可</span></div><div class="line"></div><div class="line">    GPIO3-&gt;OE      &amp;= ~(<span class="number">0x01</span>&lt;&lt;<span class="number">7</span> | <span class="number">0x01</span>&lt;&lt;<span class="number">6</span> | <span class="number">0x01</span>&lt;&lt;<span class="number">5</span>);<span class="comment">//输出</span></div><div class="line">    GPIO3-&gt;DATAOUT |=  (<span class="number">0x01</span>&lt;&lt;<span class="number">7</span> | <span class="number">0x01</span>&lt;&lt;<span class="number">6</span> | <span class="number">0x01</span>&lt;&lt;<span class="number">5</span>);<span class="comment">//拉高</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">i2c_start</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    SCL(<span class="number">1</span>);</div><div class="line">    i2c_delay(<span class="number">1</span>);</div><div class="line">    </div><div class="line">    SDA(<span class="number">1</span>);</div><div class="line">    i2c_delay(<span class="number">1</span>);</div><div class="line">    SDA(<span class="number">0</span>);</div><div class="line">    i2c_delay(<span class="number">1</span>);</div><div class="line">    </div><div class="line">    SCL(<span class="number">0</span>); </div><div class="line">    i2c_delay(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">i2c_stop</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    SDA(<span class="number">0</span>);</div><div class="line">    i2c_delay(<span class="number">1</span>);</div><div class="line">    </div><div class="line">    SCL(<span class="number">1</span>);</div><div class="line">    i2c_delay(<span class="number">1</span>);</div><div class="line">    </div><div class="line">    SDA(<span class="number">1</span>);</div><div class="line">    i2c_delay(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">i2c_ack</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> pin_val;</div><div class="line">        </div><div class="line">    SCL(<span class="number">0</span>);</div><div class="line">    i2c_delay(<span class="number">1</span>);</div><div class="line">    </div><div class="line">    SDA(<span class="number">1</span>);</div><div class="line">    i2c_delay(<span class="number">1</span>);</div><div class="line">    </div><div class="line">    <span class="comment">//实测中，am437x引脚由输出设置为输入的时候，会有一个高电平</span></div><div class="line">    <span class="comment">//因此，趁现在SCL为低，先设置为输入</span></div><div class="line">    GET_SDA();</div><div class="line">    </div><div class="line">    SCL(<span class="number">1</span>);</div><div class="line">    i2c_delay(<span class="number">1</span>);</div><div class="line">    </div><div class="line">    pin_val = GET_SDA();</div><div class="line">    i2c_delay(<span class="number">1</span>);</div><div class="line">    </div><div class="line">    SCL(<span class="number">0</span>);</div><div class="line">    i2c_delay(<span class="number">1</span>);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> pin_val;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">i2c_write</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> data)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">8</span>; i++) &#123;</div><div class="line">        SCL(<span class="number">0</span>);</div><div class="line">        i2c_delay(<span class="number">1</span>);</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(data &amp; <span class="number">0x80</span>) SDA(<span class="number">1</span>);</div><div class="line">        <span class="keyword">else</span> SDA(<span class="number">0</span>);</div><div class="line">        data = data&lt;&lt;<span class="number">1</span>; </div><div class="line">        i2c_delay(<span class="number">1</span>);</div><div class="line">        </div><div class="line">        SCL(<span class="number">1</span>);</div><div class="line">        i2c_delay(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    SCL(<span class="number">0</span>);</div><div class="line">    i2c_delay(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> <span class="title">i2c_read</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> data = <span class="number">0</span>;</div><div class="line">    </div><div class="line">    SCL(<span class="number">0</span>);</div><div class="line">    i2c_delay(<span class="number">1</span>);</div><div class="line">    SDA(<span class="number">1</span>);</div><div class="line">   </div><div class="line">    GET_SDA();<span class="comment">//同理</span></div><div class="line">    i2c_delay(<span class="number">1</span>);</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">8</span>; i++) &#123;</div><div class="line">        SCL(<span class="number">1</span>);</div><div class="line">        i2c_delay(<span class="number">1</span>);</div><div class="line">        </div><div class="line">        data = data&lt;&lt;<span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span>(GET_SDA()) data |= <span class="number">0x01</span>;</div><div class="line">  </div><div class="line">        SCL(<span class="number">0</span>);</div><div class="line">        i2c_delay(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    SCL(<span class="number">1</span>);<span class="comment">//再给eeprom的ack提供一个时钟周期</span></div><div class="line">    i2c_delay(<span class="number">1</span>);</div><div class="line">    SCL(<span class="number">0</span>);</div><div class="line">    i2c_delay(<span class="number">1</span>);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> data;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">eeprom_write_protect</span><span class="params">(<span class="keyword">char</span> x)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span>(x)</div><div class="line">        GPIO3-&gt;DATAOUT |=  (<span class="number">0x01</span>&lt;&lt;<span class="number">7</span>);</div><div class="line"><span class="keyword">else</span> </div><div class="line">        GPIO3-&gt;DATAOUT &amp;= ~(<span class="number">0x01</span>&lt;&lt;<span class="number">7</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">eeprom_write</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> addr, <span class="keyword">unsigned</span> <span class="keyword">char</span> data)</span></span></div><div class="line">&#123;</div><div class="line">   eeprom_write_protect(<span class="number">0</span>);</div><div class="line"></div><div class="line">   i2c_start();</div><div class="line">   </div><div class="line">   i2c_write(<span class="number">0xA0</span>);</div><div class="line">   <span class="keyword">while</span>(i2c_ack());</div><div class="line">   </div><div class="line">   i2c_write(addr&gt;&gt;<span class="number">8</span>);</div><div class="line">   <span class="keyword">while</span>(i2c_ack());</div><div class="line">   i2c_write(addr);</div><div class="line">   <span class="keyword">while</span>(i2c_ack());</div><div class="line"></div><div class="line">   i2c_write(data);</div><div class="line">   <span class="keyword">while</span>(i2c_ack());</div><div class="line">   </div><div class="line">   i2c_stop();</div><div class="line"></div><div class="line">   eeprom_write_protect(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">char</span> <span class="title">eeprom_read</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> addr)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> data = <span class="number">0</span>;</div><div class="line">    </div><div class="line">    eeprom_write_protect(<span class="number">0</span>);</div><div class="line">    </div><div class="line">    i2c_start();</div><div class="line">    </div><div class="line">    i2c_write(<span class="number">0xA0</span>);</div><div class="line">    <span class="keyword">while</span>(i2c_ack());</div><div class="line">    </div><div class="line">    i2c_write(addr&gt;&gt;<span class="number">8</span>);</div><div class="line">    <span class="keyword">while</span>(i2c_ack());</div><div class="line">    i2c_write(addr);</div><div class="line">    <span class="keyword">while</span>(i2c_ack());</div><div class="line">    </div><div class="line">    i2c_stop();</div><div class="line">    </div><div class="line">    i2c_delay(<span class="number">10</span>);</div><div class="line">    </div><div class="line">    i2c_start();</div><div class="line">    </div><div class="line">    i2c_write(<span class="number">0xA1</span>);</div><div class="line">    <span class="keyword">while</span>(i2c_ack());</div><div class="line">    </div><div class="line">    data = i2c_read();</div><div class="line">    </div><div class="line">    i2c_stop();</div><div class="line">    </div><div class="line">    eeprom_write_protect(<span class="number">1</span>);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> data;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> REG_I2C</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">i2c0_irq</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> status = <span class="number">0</span>;</div><div class="line"></div><div class="line">    status = I2C0-&gt;IRQSTS;</div><div class="line">    I2C0-&gt;IRQSTS = (status &amp; (<span class="number">0x01</span>&lt;&lt;<span class="number">3</span> | <span class="number">0x01</span>&lt;&lt;<span class="number">4</span>));</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(status &amp; (<span class="number">0x01</span>&lt;&lt;<span class="number">3</span>))<span class="comment">//receive</span></div><div class="line">    &#123;</div><div class="line">        I2C0-&gt;IRQSTS |= (<span class="number">0x01</span>&lt;&lt;<span class="number">3</span>);</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(r_count == num)</div><div class="line">        &#123;</div><div class="line">            I2C0-&gt;IRQEN_CLR |= (<span class="number">0x01</span>&lt;&lt;<span class="number">3</span>);</div><div class="line">            I2C0-&gt;CON |= (<span class="number">0x01</span>&lt;&lt;<span class="number">1</span>);<span class="comment">//stop  </span></div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            data_from_slave[r_count++] = (<span class="keyword">unsigned</span> <span class="keyword">char</span>)I2C0-&gt;DATA;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (status &amp; (<span class="number">0x01</span>&lt;&lt;<span class="number">4</span>))<span class="comment">//send</span></div><div class="line">    &#123;</div><div class="line">        I2C0-&gt;DATA = data_to_slave[t_count++];</div><div class="line"></div><div class="line">        I2C0-&gt;IRQSTS |= (<span class="number">0x01</span>&lt;&lt;<span class="number">4</span>); </div><div class="line"></div><div class="line">        <span class="keyword">if</span>(t_count == num)</div><div class="line">        &#123;</div><div class="line">            I2C0-&gt;IRQEN_CLR |= (<span class="number">0x01</span>&lt;&lt;<span class="number">4</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">eeprom_write_protect</span><span class="params">(<span class="keyword">char</span> x)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(x)</div><div class="line">        GPIO3-&gt;DATAOUT |=  (<span class="number">0x01</span>&lt;&lt;<span class="number">7</span>);</div><div class="line">    <span class="keyword">else</span> </div><div class="line">        GPIO3-&gt;DATAOUT &amp;= ~(<span class="number">0x01</span>&lt;&lt;<span class="number">7</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">i2c_master_bus_busy</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(I2C0-&gt;IRQSTS_RAW &amp; (<span class="number">0x01</span>&lt;&lt;<span class="number">12</span>))</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">char</span> <span class="title">eeprom_read</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> addr)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> data = <span class="number">0</span>;</div><div class="line"></div><div class="line">    eeprom_write_protect(<span class="number">0</span>);</div><div class="line"></div><div class="line">    data_to_slave[<span class="number">0</span>] = addr&gt;&gt;<span class="number">8</span>;</div><div class="line">    data_to_slave[<span class="number">1</span>] = (addr &amp; <span class="number">0xFF</span>);</div><div class="line"></div><div class="line">    t_count = <span class="number">0</span>;</div><div class="line">    r_count = <span class="number">0</span>;</div><div class="line"></div><div class="line">    I2C0-&gt;CNT = <span class="number">0x02</span>;</div><div class="line"></div><div class="line">    num = I2C0-&gt;CNT;</div><div class="line"></div><div class="line">    I2C0-&gt;IRQSTS|=  <span class="number">0x7FFF</span>;</div><div class="line">    I2C0-&gt;IRQEN_CLR |=  <span class="number">0x6FFF</span>;</div><div class="line"></div><div class="line">    I2C0-&gt;CON |= (<span class="number">0x01</span>&lt;&lt;<span class="number">9</span> | <span class="number">0x01</span>&lt;&lt;<span class="number">10</span> | <span class="number">0x01</span>&lt;&lt;<span class="number">15</span>); <span class="comment">//MST=1  TRX=1  </span></div><div class="line"></div><div class="line">    I2C0-&gt;IRQEN_SET |= (<span class="number">0x01</span>&lt;&lt;<span class="number">4</span>);</div><div class="line"></div><div class="line">    I2C0-&gt;CON |= (<span class="number">0x01</span>&lt;&lt;<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(i2c_master_bus_busy() == <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(t_count != num);</div><div class="line">    <span class="keyword">while</span>(!(I2C0-&gt;IRQSTS_RAW &amp; (<span class="number">0x01</span>&lt;&lt;<span class="number">2</span>)));</div><div class="line"></div><div class="line"><span class="comment">//----------------------------------------------------------------//</span></div><div class="line"></div><div class="line">    I2C0-&gt;CNT = <span class="number">0x01</span>;</div><div class="line"></div><div class="line">    num = I2C0-&gt;CNT;</div><div class="line"></div><div class="line">    I2C0-&gt;IRQSTS|=  <span class="number">0x7FFF</span>;</div><div class="line">    I2C0-&gt;IRQEN_CLR |=  <span class="number">0x6FFF</span>;</div><div class="line"></div><div class="line">    I2C0-&gt;CON |=  (<span class="number">0x01</span>&lt;&lt;<span class="number">10</span> | (<span class="number">0x01</span>&lt;&lt;<span class="number">15</span>));</div><div class="line">    I2C0-&gt;CON &amp;= ~(<span class="number">0x01</span>&lt;&lt;<span class="number">9</span>);</div><div class="line"></div><div class="line">    I2C0-&gt;IRQEN_SET |= (<span class="number">0x01</span>&lt;&lt;<span class="number">3</span> | <span class="number">0x01</span>&lt;&lt;<span class="number">8</span>);</div><div class="line"></div><div class="line">    I2C0-&gt;CON |= (<span class="number">0x01</span>&lt;&lt;<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(i2c_master_bus_busy() == <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(r_count != num);</div><div class="line"></div><div class="line">    data = data_from_slave[<span class="number">0</span>];</div><div class="line"></div><div class="line">    eeprom_write_protect(<span class="number">1</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> data;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">eeprom_write</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> addr, <span class="keyword">unsigned</span> <span class="keyword">char</span> data)</span></span></div><div class="line">&#123;</div><div class="line">    eeprom_write_protect(<span class="number">0</span>);</div><div class="line"></div><div class="line">    data_to_slave[<span class="number">0</span>] = addr&gt;&gt;<span class="number">8</span>;</div><div class="line">    data_to_slave[<span class="number">1</span>] = (addr &amp; <span class="number">0xFF</span>);</div><div class="line">    data_to_slave[<span class="number">2</span>] = data;</div><div class="line"></div><div class="line">    t_count = <span class="number">0</span>;</div><div class="line"></div><div class="line">    I2C0-&gt;CNT = <span class="number">0x03</span>;</div><div class="line">    num = I2C0-&gt;CNT;</div><div class="line"></div><div class="line">    I2C0-&gt;IRQSTS|=  <span class="number">0x7FFF</span>;</div><div class="line">    I2C0-&gt;IRQEN_CLR |=  <span class="number">0x7FFF</span>;</div><div class="line"></div><div class="line">    I2C0-&gt;CON |= (<span class="number">0x01</span>&lt;&lt;<span class="number">9</span> | <span class="number">0x01</span>&lt;&lt;<span class="number">10</span> | <span class="number">0x01</span>&lt;&lt;<span class="number">15</span>); <span class="comment">//MST=1  TRX=1  </span></div><div class="line"></div><div class="line">    I2C0-&gt;IRQEN_SET |= (<span class="number">0x01</span>&lt;&lt;<span class="number">4</span>);</div><div class="line"></div><div class="line">    I2C0-&gt;CON |= (<span class="number">0x01</span>&lt;&lt;<span class="number">0</span>);</div><div class="line">    </div><div class="line">    <span class="keyword">while</span>(i2c_master_bus_busy() == <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(t_count != num);</div><div class="line"></div><div class="line">    I2C0-&gt;CON |= (<span class="number">0x01</span>&lt;&lt;<span class="number">1</span>); <span class="comment">//stop</span></div><div class="line"></div><div class="line">    eeprom_write_protect(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">i2c_gpio_init</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    PRCM_CM_WKUP_I2C0_CLKCTRL |= (<span class="number">0x02</span>&lt;&lt;<span class="number">0</span>); </div><div class="line">    PRCM_CM_WKUP_CLKSTCTRL    |= (<span class="number">0x01</span>&lt;&lt;<span class="number">14</span>);</div><div class="line">    PRCM_CM_PER_L4LS_CLKSTCTRL|= (<span class="number">0x01</span>&lt;&lt;<span class="number">27</span>);</div><div class="line"></div><div class="line">    PRCM_CM_PER_GPIO3_CLKCTRL  |= (<span class="number">0x02</span>&lt;&lt;<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="comment">//gpio3_5-&gt;I2C0_SDA;gpio3_6-&gt;I2C0_SCL;gpio3_7-&gt;WP</span></div><div class="line"></div><div class="line">    CTRL_CONF_I2C0_SDA &amp;= ~(<span class="number">0x07</span>&lt;&lt;<span class="number">0</span> | <span class="number">0x01</span>&lt;&lt;<span class="number">16</span> | <span class="number">0x01</span>&lt;&lt;<span class="number">19</span>);</div><div class="line">    CTRL_CONF_I2C0_SCL &amp;= ~(<span class="number">0x07</span>&lt;&lt;<span class="number">0</span> | <span class="number">0x01</span>&lt;&lt;<span class="number">16</span> | <span class="number">0x01</span>&lt;&lt;<span class="number">19</span>);</div><div class="line">    <span class="comment">//CTRL_CONF_EMU0</span></div><div class="line">    GPIO3-&gt;OE      &amp;= ~(<span class="number">0x01</span>&lt;&lt;<span class="number">7</span>);</div><div class="line">    GPIO3-&gt;DATAOUT |=  (<span class="number">0x01</span>&lt;&lt;<span class="number">7</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">i2c_init</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    i2c_gpio_init();</div><div class="line">    </div><div class="line">    register_irq(IRQ_I2C0, i2c0_irq);</div><div class="line">    </div><div class="line">    interrupt_init(IRQ_I2C0);</div><div class="line">    </div><div class="line">    I2C0-&gt;CON  &amp;= ~(<span class="number">0x01</span>&lt;&lt;<span class="number">15</span>);<span class="comment">//reset</span></div><div class="line">    </div><div class="line">    I2C0-&gt;SYSC &amp;= ~(<span class="number">0x01</span>&lt;&lt;<span class="number">0</span>);<span class="comment">//Auto Idle disabled.</span></div><div class="line">    </div><div class="line">    I2C0-&gt;PSC  = <span class="number">3</span>;<span class="comment">//the module divided by (PSC + 1) -&gt; 48M/(3+1)=12M</span></div><div class="line">    </div><div class="line">    I2C0-&gt;SCLL = <span class="number">63</span>;<span class="comment">//tLOW = (SCLL + 7) * ICLK time period</span></div><div class="line">    I2C0-&gt;SCLH = <span class="number">65</span>;<span class="comment">//tHIGH = (SCLH + 5) * ICLK time period</span></div><div class="line">    </div><div class="line">    I2C0-&gt;SA = <span class="number">0x50</span>;<span class="comment">//Slave address.1010 000</span></div><div class="line">    </div><div class="line">    I2C0-&gt;CON  |=  (<span class="number">0x01</span>&lt;&lt;<span class="number">15</span>);<span class="comment">//Module enabled</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">debug_i2c</span><span class="params">(<span class="keyword">char</span> *str)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"-------------------------%s---------------------------\r\n"</span>,str); </div><div class="line">    </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"I2C0-&gt;REVNB_HI    = 0x%x\r\n"</span>,I2C0-&gt;REVNB_HI    );</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"I2C0-&gt;REVNB_LO    = 0x%x\r\n"</span>,I2C0-&gt;REVNB_LO    );</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"I2C0-&gt;REVNB_HI    = 0x%x\r\n"</span>,I2C0-&gt;REVNB_HI    );</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"I2C0-&gt;SYSC        = 0x%x\r\n"</span>,I2C0-&gt;SYSC        );</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"I2C0-&gt;IRQSTS_RAW  = 0x%x\r\n"</span>,I2C0-&gt;IRQSTS_RAW  );</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"I2C0-&gt;IRQSTS      = 0x%x\r\n"</span>,I2C0-&gt;IRQSTS      );</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"I2C0-&gt;IRQEN_SET   = 0x%x\r\n"</span>,I2C0-&gt;IRQEN_SET   );</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"I2C0-&gt;IRQEN_CLR   = 0x%x\r\n"</span>,I2C0-&gt;IRQEN_CLR   );</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"I2C0-&gt;WE          = 0x%x\r\n"</span>,I2C0-&gt;WE          );</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"I2C0-&gt;DMARXEN_SET = 0x%x\r\n"</span>,I2C0-&gt;DMARXEN_SET );</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"I2C0-&gt;DMATXEN_SET = 0x%x\r\n"</span>,I2C0-&gt;DMATXEN_SET );</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"I2C0-&gt;DMARXEN_CLR = 0x%x\r\n"</span>,I2C0-&gt;DMARXEN_CLR );</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"I2C0-&gt;DMATXEN_CLR = 0x%x\r\n"</span>,I2C0-&gt;DMATXEN_CLR );</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"I2C0-&gt;DMARXWAKE_EN= 0x%x\r\n"</span>,I2C0-&gt;DMARXWAKE_EN);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"I2C0-&gt;DMATXWAKE_EN= 0x%x\r\n"</span>,I2C0-&gt;DMATXWAKE_EN);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"I2C0-&gt;SYSS        = 0x%x\r\n"</span>,I2C0-&gt;SYSS        );</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"I2C0-&gt;BUF         = 0x%x\r\n"</span>,I2C0-&gt;BUF         );</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"I2C0-&gt;CNT         = 0x%x\r\n"</span>,I2C0-&gt;CNT         );</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"I2C0-&gt;DATA        = 0x%x\r\n"</span>,I2C0-&gt;DATA        );</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"I2C0-&gt;CON         = 0x%x\r\n"</span>,I2C0-&gt;CON         );</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"I2C0-&gt;OA          = 0x%x\r\n"</span>,I2C0-&gt;OA          );</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"I2C0-&gt;SA          = 0x%x\r\n"</span>,I2C0-&gt;SA          );</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"I2C0-&gt;PSC         = 0x%x\r\n"</span>,I2C0-&gt;PSC         );</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"I2C0-&gt;SCLL        = 0x%x\r\n"</span>,I2C0-&gt;SCLL        );</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"I2C0-&gt;SCLH        = 0x%x\r\n"</span>,I2C0-&gt;SCLH        );</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"I2C0-&gt;SYSTEST     = 0x%x\r\n"</span>,I2C0-&gt;SYSTEST     );</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"I2C0-&gt;BUFSTAT     = 0x%x\r\n"</span>,I2C0-&gt;BUFSTAT     );</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"I2C0-&gt;OA1         = 0x%x\r\n"</span>,I2C0-&gt;OA1         );</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"I2C0-&gt;OA2         = 0x%x\r\n"</span>,I2C0-&gt;OA2         );</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"I2C0-&gt;OA3         = 0x%x\r\n"</span>,I2C0-&gt;OA3         );</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"I2C0-&gt;ACTOA       = 0x%x\r\n"</span>,I2C0-&gt;ACTOA       );</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"I2C0-&gt;SBLOCK      = 0x%x\r\n"</span>,I2C0-&gt;SBLOCK      ); </div><div class="line">    </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"******************************************************\r\n"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure><figure class="highlight c"><figcaption><span>[i2c.h]</span><a href="https://github.com/hceng/am437x/blob/master/hardware/3th_i2c/i2c.h" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span>  __I2C_H__</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>  __I2C_H__</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> GPIO_I2C</span></div><div class="line"><span class="comment">//#define REG_I2C</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> GPIO_I2C</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">i2c_init</span><span class="params">(<span class="keyword">void</span>)</span></span>;</div><div class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">eeprom_write</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> addr, <span class="keyword">unsigned</span> <span class="keyword">char</span> data)</span></span>;</div><div class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> <span class="title">eeprom_read</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> addr)</span></span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> REG_I2C</span></div><div class="line"></div><div class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> t_count;</div><div class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> r_count;</div><div class="line"></div><div class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> num;</div><div class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> data_to_slave[<span class="number">5</span>];</div><div class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> data_from_slave[<span class="number">5</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">i2c_init</span><span class="params">(<span class="keyword">void</span>)</span></span>;</div><div class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> <span class="title">eeprom_read</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> addr)</span></span>;</div><div class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">eeprom_write</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> addr, <span class="keyword">unsigned</span> <span class="keyword">char</span> data)</span></span>;</div><div class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">debug_i2c</span><span class="params">(<span class="keyword">char</span> *str)</span></span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure><h1 id="4-心得"><a href="#4-心得" class="headerlink" title="4.心得"></a>4.心得</h1><p>GPIO模拟I2C优势是通用性高，移植方便。<br>利用SOC自带的I2C控制的优势是稳定，高效。</p><p>GPIO模拟I2C需要对时序的每个细节都比较清楚才行，非常适合去理解I2C的原理。<br>硬件I2C几乎不需要考虑时序，按逻辑设置和读取相关寄存器即可。<br>还有一个重要的点是去看从机I2C设备的时序，不同的设备，可能会不一样的。<br>下一步，终于要开始I2C的驱动了~~~</p><p>整个过程，最大的功臣就是逻辑分析仪，太好用了😀</p><hr><p><div align="center"><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本文采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href="http://hceng.cn/" target="_blank" rel="external">hceng’s blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录AM437x的I2C裸机调试，包含GPIO模拟和寄存器控制。&lt;br&gt;
    
    </summary>
    
    
      <category term="AM437X" scheme="http://yoursite.com/tags/AM437X/"/>
    
      <category term="裸机" scheme="http://yoursite.com/tags/%E8%A3%B8%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>AM437x——RTC驱动</title>
    <link href="http://yoursite.com/2017/08/27/AM437x%E2%80%94%E2%80%94RTC%E9%A9%B1%E5%8A%A8/"/>
    <id>http://yoursite.com/2017/08/27/AM437x——RTC驱动/</id>
    <published>2017-08-27T08:47:02.000Z</published>
    <updated>2017-09-14T05:00:11.744Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录AM437X驱动的RTC。包含一个不标准的RTC驱动、一个还算有点标准的RTC驱动，以及正常的测试方式。<br><a id="more"></a></p><hr><h1 id="0-本次关于驱动的新收获"><a href="#0-本次关于驱动的新收获" class="headerlink" title="0.本次关于驱动的新收获"></a>0.本次关于驱动的新收获</h1><p>写RTC驱动的时候，我先尝试的按标准的RTC框架来，写着写着，我想试试之前的一个猜想。<br>理论上任何字符驱动，我都可以通过填充<code>file_operations</code>里面的函数，实现对硬件的操作控制。<br>也就是说，写完裸机程序，按之前LED那套标准的字符驱动框架去写驱动，在应用层通过<code>open()</code>等函数去操作<code>/dev/</code>下的设备，是万能的。<br>实际上RTC驱动也是这样做的，但因为RTC的特殊性，内核提供的是<code>rtc_class_ops</code>这个结构体，而不是<code>file_operations</code>。正常所需做的就是去填充<code>rtc_class_ops</code>的函数，然后注册等。<br>想想这两个的区别，前面万能那个，应用层就没那么好受了，不通用，比如使用<code>hwclock</code>是不能调用到驱动函数的，因此需要自己去实现去RTC的访问，就像访问LED驱动一样。<br>后面标准RTC那个，其最后的实质、原理是一样的，只是提供了统一的框架，增强了通用性。</p><h1 id="1-不标准的RTC驱动"><a href="#1-不标准的RTC驱动" class="headerlink" title="1.不标准的RTC驱动"></a>1.不标准的RTC驱动</h1><h2 id="1-1入口函数和出口函数"><a href="#1-1入口函数和出口函数" class="headerlink" title="1.1入口函数和出口函数"></a>1.1入口函数和出口函数</h2><p>先是入口函数，在<code>insmod</code>驱动的时候调用，<br>分配了主设备号，注册了字符设备驱动，创建了个类，使用cdev机制，自动在/dev/目录下创建设备，应用层就是通过对这个设备操作，调用驱动实现对硬件的操作。<br>再申请了内存，映射了寄存器地址，后面对这些映射出来的寄存器操作，就实现对硬件层的寄存器操作。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">rtc_drv_init</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">dev_t</span> devid;</div><div class="line">    </div><div class="line">    printk(KERN_INFO<span class="string">"%s OK.\n"</span>,__func__);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(alloc_chrdev_region(&amp;devid, <span class="number">0</span>, TI_RTC_CNT, <span class="string">"ti_rtc"</span>) &lt; <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        printk(KERN_INFO<span class="string">"%s ERROR.\n"</span>,__func__);</div><div class="line">        <span class="keyword">goto</span> error;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    major = MAJOR(devid);</div><div class="line"></div><div class="line">    cdev_init(&amp;rtc_cdev, &amp;rtc_fops);        </div><div class="line">    cdev_add(&amp;rtc_cdev, devid, TI_RTC_CNT);   </div><div class="line"></div><div class="line">    rtc_cls = class_create(THIS_MODULE, <span class="string">"ti_rtc"</span>);</div><div class="line"></div><div class="line">    device_create(rtc_cls, <span class="literal">NULL</span>, MKDEV(major, <span class="number">0</span>), <span class="literal">NULL</span>, <span class="string">"ti_rts0"</span>); </div><div class="line"></div><div class="line">    PRCM_CM_RTC_CLKSTCTRL = ioremap(<span class="number">0x44DF8500</span>+<span class="number">0x00</span>, <span class="number">0x04</span>*<span class="number">1</span>);</div><div class="line">    PRCM_CM_RTC_CLKCTRL   = ioremap(<span class="number">0x44DF8500</span>+<span class="number">0x20</span>, <span class="number">0x04</span>*<span class="number">1</span>);</div><div class="line">    </div><div class="line">    RTCSS_BASE            = ioremap(<span class="number">0x44E3E000</span>, <span class="number">0xA0</span>);</div><div class="line">    RTCSS_SECONDS         = RTCSS_BASE + <span class="number">0</span>;      </div><div class="line">    RTCSS_MINUTES         = RTCSS_BASE + <span class="number">1</span>; </div><div class="line">    RTCSS_HOURS           = RTCSS_BASE + <span class="number">2</span>;  </div><div class="line">    RTCSS_DAYS            = RTCSS_BASE + <span class="number">3</span>;</div><div class="line">    RTCSS_WEEKS           = RTCSS_BASE + <span class="number">4</span>; </div><div class="line">    RTCSS_MONTHS          = RTCSS_BASE + <span class="number">5</span>;</div><div class="line">    RTCSS_YEARS           = RTCSS_BASE + <span class="number">6</span>;  </div><div class="line">    RTCSS_ALARM_SECONDS   = RTCSS_BASE + <span class="number">8</span>;  </div><div class="line">    RTCSS_ALARM_MINUTES   = RTCSS_BASE + <span class="number">9</span>; </div><div class="line">    RTCSS_ALARM_HOURS     = RTCSS_BASE + <span class="number">10</span>;</div><div class="line">    RTCSS_ALARM_DAYS      = RTCSS_BASE + <span class="number">11</span>; </div><div class="line">    RTCSS_ALARM_MONTHS    = RTCSS_BASE + <span class="number">12</span>; </div><div class="line">    RTCSS_ALARM_YEARS     = RTCSS_BASE + <span class="number">13</span>;      </div><div class="line">    RTCSS_CTRL            = RTCSS_BASE + <span class="number">15</span>; </div><div class="line">    RTCSS_OSC             = RTCSS_BASE + <span class="number">20</span>;    </div><div class="line">    RTCSS_KICK0R          = RTCSS_BASE + <span class="number">25</span>;      </div><div class="line">    RTCSS_KICK1R          = RTCSS_BASE + <span class="number">26</span>;      </div><div class="line">   </div><div class="line">error:</div><div class="line">    unregister_chrdev_region(MKDEV(major, <span class="number">0</span>), TI_RTC_CNT);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>然后是出口函数，注册做什么，这里就反过来做什么。<br>清除设备，清除类，注销字符设备，释放映射的内存。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rtc_drv_exit</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">unsigned</span> i;</div><div class="line">    printk(KERN_INFO<span class="string">"%s OK.\n"</span>,__func__);</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;TI_RTC_CNT;i++)</div><div class="line">    &#123;</div><div class="line">        device_destroy(rtc_cls,  MKDEV(major, i));</div><div class="line">    &#125;</div><div class="line">    class_destroy(rtc_cls);</div><div class="line">    cdev_del(&amp;rtc_cdev);</div><div class="line">    unregister_chrdev(major, <span class="string">"ti_rtc"</span>); </div><div class="line"></div><div class="line">    iounmap(PRCM_CM_RTC_CLKSTCTRL); </div><div class="line">    iounmap(PRCM_CM_RTC_CLKCTRL);   </div><div class="line">    iounmap(RTCSS_BASE);            </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>修饰下入口函数和出口函数，让这两个普通函数，能够通过<code>insmod</code>加载的时候被调用。<br>以及对该添加版权信息，驱动信息等。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">module_init(rtc_drv_init);</div><div class="line">module_exit(rtc_drv_exit);</div><div class="line"></div><div class="line">MODULE_LICENSE(<span class="string">"GPL"</span>);</div><div class="line">MODULE_AUTHOR(<span class="string">"hceng &lt;huangcheng.job@foxmail.com&gt;"</span>);</div><div class="line">MODULE_DESCRIPTION(<span class="string">"TI am437x board rtc drvice"</span>);</div><div class="line">MODULE_ALIAS(<span class="string">"character device:ti_rtc"</span>);</div><div class="line">MODULE_VERSION(<span class="string">"V1.0"</span>);</div></pre></td></tr></table></figure></p><h2 id="1-2填充构造函数"><a href="#1-2填充构造函数" class="headerlink" title="1.2填充构造函数"></a>1.2填充构造函数</h2><p>这里添加构造函数，需要什么，加什么，加了之后，再去实现，应用层就是调用到这些函数的功能。<br>这里只打开设备、读取和设置时间操作。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> file_operations rtc_fops = &#123;</div><div class="line">    .owner  =   THIS_MODULE,  </div><div class="line">    .open   =   rtc_drv_open,    </div><div class="line">    .read   =   rtc_drv_read_time,     </div><div class="line">    .write  =   rtc_drv_set_time,   </div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><h2 id="1-3实现构造函数"><a href="#1-3实现构造函数" class="headerlink" title="1.3实现构造函数"></a>1.3实现构造函数</h2><p>现在去实现构造函数。这部分和裸机的操作是一摸一样的，在open()函数里进行初始化，在read()函数里对寄存器(映射后的)进行读取，传输给应用层。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> rtc_struct &#123;</div><div class="line">    <span class="keyword">int</span> year;</div><div class="line">    <span class="keyword">int</span> month;</div><div class="line">    <span class="comment">//int week;</span></div><div class="line">    <span class="keyword">int</span> day;</div><div class="line">    <span class="keyword">int</span> hour;</div><div class="line">    <span class="keyword">int</span> minute;</div><div class="line">    <span class="keyword">int</span> second;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">rtc_drv_open</span><span class="params">(<span class="keyword">struct</span> inode *inode, <span class="keyword">struct</span> file *file)</span></span></div><div class="line">&#123;</div><div class="line">    printk(KERN_INFO<span class="string">"%s OK.\n"</span>,__func__);   </div><div class="line">    </div><div class="line">    *PRCM_CM_RTC_CLKCTRL   &amp;= ~(<span class="number">0x03</span>&lt;&lt;<span class="number">0</span>);</div><div class="line">    *PRCM_CM_RTC_CLKCTRL   |=  (<span class="number">0x01</span>&lt;&lt;<span class="number">1</span>);</div><div class="line">    *PRCM_CM_RTC_CLKSTCTRL &amp;= ~(<span class="number">0x03</span>&lt;&lt;<span class="number">0</span>);</div><div class="line">    </div><div class="line">    *RTCSS_CTRL &amp;= ~(<span class="number">0x01</span>&lt;&lt;<span class="number">6</span>);</div><div class="line">    </div><div class="line">    *RTCSS_KICK0R = (<span class="number">0x83E70B13</span>);</div><div class="line">    *RTCSS_KICK1R = (<span class="number">0x95A4F1E0</span>);</div><div class="line">    </div><div class="line">    *RTCSS_OSC  &amp;= ~(<span class="number">0x01</span>&lt;&lt;<span class="number">3</span>);</div><div class="line">    *RTCSS_OSC  |=  (<span class="number">0x01</span>&lt;&lt;<span class="number">6</span>);</div><div class="line">    *RTCSS_CTRL |=  (<span class="number">0x01</span>&lt;&lt;<span class="number">0</span>);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;     </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> ssize_t <span class="title">rtc_drv_read_time</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="keyword">char</span> __user *user_buf, <span class="keyword">size_t</span> size, <span class="keyword">loff_t</span> *ppos)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> rtc_struct rtc_time;</div><div class="line">    </div><div class="line">    printk(KERN_INFO<span class="string">"%s OK.\n"</span>,__func__);  </div><div class="line">    </div><div class="line">    rtc_time.year   = (((*RTCSS_YEARS   &amp; (<span class="number">0x03</span>&lt;&lt;<span class="number">4</span>))&gt;&gt;<span class="number">4</span>)*<span class="number">10</span> + (*RTCSS_YEARS   &amp; (<span class="number">0x0F</span>&lt;&lt;<span class="number">0</span>)));</div><div class="line">    rtc_time.month  = (((*RTCSS_MONTHS  &amp; (<span class="number">0x07</span>&lt;&lt;<span class="number">4</span>))&gt;&gt;<span class="number">4</span>)*<span class="number">10</span> + (*RTCSS_MONTHS  &amp; (<span class="number">0x0F</span>&lt;&lt;<span class="number">0</span>)));</div><div class="line">    rtc_time.day    = (((*RTCSS_DAYS    &amp; (<span class="number">0x07</span>&lt;&lt;<span class="number">4</span>))&gt;&gt;<span class="number">4</span>)*<span class="number">10</span> + (*RTCSS_DAYS    &amp; (<span class="number">0x0F</span>&lt;&lt;<span class="number">0</span>)));</div><div class="line">    rtc_time.hour   = (((*RTCSS_HOURS   &amp; (<span class="number">0x03</span>&lt;&lt;<span class="number">4</span>))&gt;&gt;<span class="number">4</span>)*<span class="number">10</span> + (*RTCSS_HOURS   &amp; (<span class="number">0x0F</span>&lt;&lt;<span class="number">0</span>)));</div><div class="line">    rtc_time.minute = (((*RTCSS_MINUTES &amp; (<span class="number">0x07</span>&lt;&lt;<span class="number">4</span>))&gt;&gt;<span class="number">4</span>)*<span class="number">10</span> + (*RTCSS_MINUTES &amp; (<span class="number">0x0F</span>&lt;&lt;<span class="number">0</span>)));</div><div class="line">    rtc_time.second = (((*RTCSS_SECONDS &amp; (<span class="number">0x07</span>&lt;&lt;<span class="number">4</span>))&gt;&gt;<span class="number">4</span>)*<span class="number">10</span> + (*RTCSS_SECONDS &amp; (<span class="number">0x0F</span>&lt;&lt;<span class="number">0</span>)));</div><div class="line"></div><div class="line">    copy_to_user(user_buf, &amp;rtc_time, <span class="keyword">sizeof</span>(rtc_time)); </div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;     </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>接收应用层的数据，写入寄存器(映射后的)，完成对RTC的设置。和裸机的操作，是一摸一样的。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> ssize_t <span class="title">rtc_drv_set_time</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="keyword">const</span> <span class="keyword">char</span> __user *user_buf, <span class="keyword">size_t</span> count, <span class="keyword">loff_t</span> * ppos)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> rtc_struct rtc_time;</div><div class="line">    </div><div class="line">    printk(KERN_INFO<span class="string">"%s OK.\n"</span>,__func__);</div><div class="line">    </div><div class="line">    <span class="keyword">if</span>(count != <span class="keyword">sizeof</span>(rtc_time))&#123;</div><div class="line">        printk(KERN_INFO<span class="string">"write count != %d.\n"</span>,<span class="keyword">sizeof</span>(rtc_time)); </div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">if</span> (copy_from_user(&amp;rtc_time, user_buf, count))</div><div class="line">        <span class="keyword">return</span> -EFAULT;</div><div class="line">    </div><div class="line">    *RTCSS_CTRL &amp;= ~(<span class="number">0x01</span>&lt;&lt;<span class="number">0</span>);<span class="comment">//stop</span></div><div class="line">    </div><div class="line">    <span class="keyword">if</span>((rtc_time.year<span class="number">-2000</span>) &gt; <span class="number">99</span> || (rtc_time.year<span class="number">-2000</span>) &lt; <span class="number">0</span>)</div><div class="line">        <span class="keyword">goto</span> err;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span>(rtc_time.month &gt; <span class="number">12</span> || rtc_time.month &lt; <span class="number">0</span>)</div><div class="line">        <span class="keyword">goto</span> err;</div><div class="line">    *RTCSS_MONTHS = ((rtc_time.month/<span class="number">10</span>) &lt;&lt; <span class="number">4</span>) | ((rtc_time.month%<span class="number">10</span>) &lt;&lt; <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(rtc_time.day &gt; <span class="number">32</span> || rtc_time.day &lt; <span class="number">0</span>)</div><div class="line">        <span class="keyword">goto</span> err;</div><div class="line">    *RTCSS_DAYS = ((rtc_time.day/<span class="number">10</span>) &lt;&lt; <span class="number">4</span>) | ((rtc_time.day%<span class="number">10</span>) &lt;&lt; <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(rtc_time.hour &gt; <span class="number">23</span> || rtc_time.hour &lt; <span class="number">0</span>)</div><div class="line">        <span class="keyword">goto</span> err;</div><div class="line">    *RTCSS_HOURS = ((rtc_time.hour/<span class="number">10</span>) &lt;&lt; <span class="number">4</span>) | ((rtc_time.hour%<span class="number">10</span>) &lt;&lt; <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(rtc_time.minute &gt; <span class="number">59</span> || rtc_time.minute &lt; <span class="number">0</span>)</div><div class="line">        <span class="keyword">goto</span> err;</div><div class="line">    *RTCSS_MINUTES = ((rtc_time.minute/<span class="number">10</span>) &lt;&lt; <span class="number">4</span>) | ((rtc_time.minute%<span class="number">10</span>) &lt;&lt; <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(rtc_time.second &gt; <span class="number">59</span> || rtc_time.second &lt; <span class="number">0</span>)</div><div class="line">        <span class="keyword">goto</span> err;</div><div class="line">    *RTCSS_SECONDS = ((rtc_time.second/<span class="number">10</span>) &lt;&lt; <span class="number">4</span>) | ((rtc_time.second%<span class="number">10</span>) &lt;&lt; <span class="number">0</span>);</div><div class="line"></div><div class="line">    *RTCSS_CTRL |= (<span class="number">0x01</span>&lt;&lt;<span class="number">0</span>);<span class="comment">//start</span></div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>; </div><div class="line"></div><div class="line">err:</div><div class="line">    printk(KERN_INFO<span class="string">"rtc_drv_set_time err.\n"</span>);  </div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="1-4完整驱动代码"><a href="#1-4完整驱动代码" class="headerlink" title="1.4完整驱动代码"></a>1.4完整驱动代码</h2><figure class="highlight c"><figcaption><span>[rtc_drv.c]</span><a href="https://github.com/hceng/am437x/blob/master/drive/2th_rtc/v1.0/rtc_drv.c" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/fs.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/uaccess.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/io.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/device.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/cdev.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> TI_RTC_CNT     1</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> major;</div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> cdev rtc_cdev;</div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> <span class="keyword">class</span> *rtc_cls;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> *PRCM_CM_RTC_CLKCTRL   = <span class="literal">NULL</span>;  </div><div class="line"><span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> *PRCM_CM_RTC_CLKSTCTRL = <span class="literal">NULL</span>;  </div><div class="line"><span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> *RTCSS_BASE            = <span class="literal">NULL</span>;</div><div class="line"><span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> *RTCSS_CTRL            = <span class="literal">NULL</span>;</div><div class="line"><span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> *RTCSS_KICK0R          = <span class="literal">NULL</span>;</div><div class="line"><span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> *RTCSS_KICK1R          = <span class="literal">NULL</span>; </div><div class="line"><span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> *RTCSS_OSC             = <span class="literal">NULL</span>;</div><div class="line"><span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> *RTCSS_YEARS           = <span class="literal">NULL</span>; </div><div class="line"><span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> *RTCSS_MONTHS          = <span class="literal">NULL</span>;</div><div class="line"><span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> *RTCSS_WEEKS           = <span class="literal">NULL</span>; </div><div class="line"><span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> *RTCSS_DAYS            = <span class="literal">NULL</span>;</div><div class="line"><span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> *RTCSS_HOURS           = <span class="literal">NULL</span>; </div><div class="line"><span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> *RTCSS_MINUTES         = <span class="literal">NULL</span>;</div><div class="line"><span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> *RTCSS_SECONDS         = <span class="literal">NULL</span>; </div><div class="line"><span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> *RTCSS_ALARM_YEARS     = <span class="literal">NULL</span>; </div><div class="line"><span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> *RTCSS_ALARM_MONTHS    = <span class="literal">NULL</span>; </div><div class="line"><span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> *RTCSS_ALARM_DAYS      = <span class="literal">NULL</span>;</div><div class="line"><span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> *RTCSS_ALARM_HOURS     = <span class="literal">NULL</span>; </div><div class="line"><span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> *RTCSS_ALARM_MINUTES   = <span class="literal">NULL</span>;</div><div class="line"><span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> *RTCSS_ALARM_SECONDS   = <span class="literal">NULL</span>; </div><div class="line"></div><div class="line"><span class="keyword">struct</span> rtc_struct &#123;</div><div class="line">    <span class="keyword">int</span> year;</div><div class="line">    <span class="keyword">int</span> month;</div><div class="line">    <span class="comment">//int week;</span></div><div class="line">    <span class="keyword">int</span> day;</div><div class="line">    <span class="keyword">int</span> hour;</div><div class="line">    <span class="keyword">int</span> minute;</div><div class="line">    <span class="keyword">int</span> second;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">rtc_drv_open</span><span class="params">(<span class="keyword">struct</span> inode *inode, <span class="keyword">struct</span> file *file)</span></span></div><div class="line">&#123;</div><div class="line">    printk(KERN_INFO<span class="string">"%s OK.\n"</span>,__func__);   </div><div class="line">    </div><div class="line">    *PRCM_CM_RTC_CLKCTRL   &amp;= ~(<span class="number">0x03</span>&lt;&lt;<span class="number">0</span>);</div><div class="line">    *PRCM_CM_RTC_CLKCTRL   |=  (<span class="number">0x01</span>&lt;&lt;<span class="number">1</span>);</div><div class="line">    *PRCM_CM_RTC_CLKSTCTRL &amp;= ~(<span class="number">0x03</span>&lt;&lt;<span class="number">0</span>);</div><div class="line">    </div><div class="line">    *RTCSS_CTRL &amp;= ~(<span class="number">0x01</span>&lt;&lt;<span class="number">6</span>);</div><div class="line">    </div><div class="line">    *RTCSS_KICK0R = (<span class="number">0x83E70B13</span>);</div><div class="line">    *RTCSS_KICK1R = (<span class="number">0x95A4F1E0</span>);</div><div class="line">    </div><div class="line">    *RTCSS_OSC  &amp;= ~(<span class="number">0x01</span>&lt;&lt;<span class="number">3</span>);</div><div class="line">    *RTCSS_OSC  |=  (<span class="number">0x01</span>&lt;&lt;<span class="number">6</span>);</div><div class="line">    *RTCSS_CTRL |=  (<span class="number">0x01</span>&lt;&lt;<span class="number">0</span>);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;     </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> ssize_t <span class="title">rtc_drv_read_time</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="keyword">char</span> __user *user_buf, <span class="keyword">size_t</span> size, <span class="keyword">loff_t</span> *ppos)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> rtc_struct rtc_time;</div><div class="line">    </div><div class="line">    printk(KERN_INFO<span class="string">"%s OK.\n"</span>,__func__);  </div><div class="line">    </div><div class="line">    rtc_time.year   = (((*RTCSS_YEARS   &amp; (<span class="number">0x03</span>&lt;&lt;<span class="number">4</span>))&gt;&gt;<span class="number">4</span>)*<span class="number">10</span> + (*RTCSS_YEARS   &amp; (<span class="number">0x0F</span>&lt;&lt;<span class="number">0</span>)));</div><div class="line">    rtc_time.month  = (((*RTCSS_MONTHS  &amp; (<span class="number">0x07</span>&lt;&lt;<span class="number">4</span>))&gt;&gt;<span class="number">4</span>)*<span class="number">10</span> + (*RTCSS_MONTHS  &amp; (<span class="number">0x0F</span>&lt;&lt;<span class="number">0</span>)));</div><div class="line">    rtc_time.day    = (((*RTCSS_DAYS    &amp; (<span class="number">0x07</span>&lt;&lt;<span class="number">4</span>))&gt;&gt;<span class="number">4</span>)*<span class="number">10</span> + (*RTCSS_DAYS    &amp; (<span class="number">0x0F</span>&lt;&lt;<span class="number">0</span>)));</div><div class="line">    rtc_time.hour   = (((*RTCSS_HOURS   &amp; (<span class="number">0x03</span>&lt;&lt;<span class="number">4</span>))&gt;&gt;<span class="number">4</span>)*<span class="number">10</span> + (*RTCSS_HOURS   &amp; (<span class="number">0x0F</span>&lt;&lt;<span class="number">0</span>)));</div><div class="line">    rtc_time.minute = (((*RTCSS_MINUTES &amp; (<span class="number">0x07</span>&lt;&lt;<span class="number">4</span>))&gt;&gt;<span class="number">4</span>)*<span class="number">10</span> + (*RTCSS_MINUTES &amp; (<span class="number">0x0F</span>&lt;&lt;<span class="number">0</span>)));</div><div class="line">    rtc_time.second = (((*RTCSS_SECONDS &amp; (<span class="number">0x07</span>&lt;&lt;<span class="number">4</span>))&gt;&gt;<span class="number">4</span>)*<span class="number">10</span> + (*RTCSS_SECONDS &amp; (<span class="number">0x0F</span>&lt;&lt;<span class="number">0</span>)));</div><div class="line"></div><div class="line">    copy_to_user(user_buf, &amp;rtc_time, <span class="keyword">sizeof</span>(rtc_time)); </div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;     </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">static</span> ssize_t <span class="title">rtc_drv_set_time</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="keyword">const</span> <span class="keyword">char</span> __user *user_buf, <span class="keyword">size_t</span> count, <span class="keyword">loff_t</span> * ppos)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> rtc_struct rtc_time;</div><div class="line">    </div><div class="line">    printk(KERN_INFO<span class="string">"%s OK.\n"</span>,__func__);</div><div class="line">    </div><div class="line">    <span class="keyword">if</span>(count != <span class="keyword">sizeof</span>(rtc_time))&#123;</div><div class="line">        printk(KERN_INFO<span class="string">"write count != %d.\n"</span>,<span class="keyword">sizeof</span>(rtc_time)); </div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">if</span> (copy_from_user(&amp;rtc_time, user_buf, count))</div><div class="line">        <span class="keyword">return</span> -EFAULT;</div><div class="line">    </div><div class="line">    *RTCSS_CTRL &amp;= ~(<span class="number">0x01</span>&lt;&lt;<span class="number">0</span>);<span class="comment">//stop</span></div><div class="line">    </div><div class="line">    <span class="keyword">if</span>((rtc_time.year<span class="number">-2000</span>) &gt; <span class="number">99</span> || (rtc_time.year<span class="number">-2000</span>) &lt; <span class="number">0</span>)</div><div class="line">        <span class="keyword">goto</span> err;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span>(rtc_time.month &gt; <span class="number">12</span> || rtc_time.month &lt; <span class="number">0</span>)</div><div class="line">        <span class="keyword">goto</span> err;</div><div class="line">    *RTCSS_MONTHS = ((rtc_time.month/<span class="number">10</span>) &lt;&lt; <span class="number">4</span>) | ((rtc_time.month%<span class="number">10</span>) &lt;&lt; <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(rtc_time.day &gt; <span class="number">32</span> || rtc_time.day &lt; <span class="number">0</span>)</div><div class="line">        <span class="keyword">goto</span> err;</div><div class="line">    *RTCSS_DAYS = ((rtc_time.day/<span class="number">10</span>) &lt;&lt; <span class="number">4</span>) | ((rtc_time.day%<span class="number">10</span>) &lt;&lt; <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(rtc_time.hour &gt; <span class="number">23</span> || rtc_time.hour &lt; <span class="number">0</span>)</div><div class="line">        <span class="keyword">goto</span> err;</div><div class="line">    *RTCSS_HOURS = ((rtc_time.hour/<span class="number">10</span>) &lt;&lt; <span class="number">4</span>) | ((rtc_time.hour%<span class="number">10</span>) &lt;&lt; <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(rtc_time.minute &gt; <span class="number">59</span> || rtc_time.minute &lt; <span class="number">0</span>)</div><div class="line">        <span class="keyword">goto</span> err;</div><div class="line">    *RTCSS_MINUTES = ((rtc_time.minute/<span class="number">10</span>) &lt;&lt; <span class="number">4</span>) | ((rtc_time.minute%<span class="number">10</span>) &lt;&lt; <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(rtc_time.second &gt; <span class="number">59</span> || rtc_time.second &lt; <span class="number">0</span>)</div><div class="line">        <span class="keyword">goto</span> err;</div><div class="line">    *RTCSS_SECONDS = ((rtc_time.second/<span class="number">10</span>) &lt;&lt; <span class="number">4</span>) | ((rtc_time.second%<span class="number">10</span>) &lt;&lt; <span class="number">0</span>);</div><div class="line"></div><div class="line">    *RTCSS_CTRL |= (<span class="number">0x01</span>&lt;&lt;<span class="number">0</span>);<span class="comment">//start</span></div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>; </div><div class="line"></div><div class="line">err:</div><div class="line">    printk(KERN_INFO<span class="string">"rtc_drv_set_time err.\n"</span>);  </div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;  </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> file_operations rtc_fops = &#123;</div><div class="line">    .owner  =   THIS_MODULE,  </div><div class="line">    .open   =   rtc_drv_open,    </div><div class="line">    .read   =   rtc_drv_read_time,     </div><div class="line">    .write  =   rtc_drv_set_time,   </div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">rtc_drv_init</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">dev_t</span> devid;</div><div class="line">    </div><div class="line">    printk(KERN_INFO<span class="string">"%s OK.\n"</span>,__func__);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(alloc_chrdev_region(&amp;devid, <span class="number">0</span>, TI_RTC_CNT, <span class="string">"ti_rtc"</span>) &lt; <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        printk(KERN_INFO<span class="string">"%s ERROR.\n"</span>,__func__);</div><div class="line">        <span class="keyword">goto</span> error;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    major = MAJOR(devid);</div><div class="line"></div><div class="line">    cdev_init(&amp;rtc_cdev, &amp;rtc_fops);        </div><div class="line">    cdev_add(&amp;rtc_cdev, devid, TI_RTC_CNT);   </div><div class="line"></div><div class="line">    rtc_cls = class_create(THIS_MODULE, <span class="string">"ti_rtc"</span>);</div><div class="line"></div><div class="line">    device_create(rtc_cls, <span class="literal">NULL</span>, MKDEV(major, <span class="number">0</span>), <span class="literal">NULL</span>, <span class="string">"ti_rts0"</span>); </div><div class="line"></div><div class="line">    PRCM_CM_RTC_CLKSTCTRL = ioremap(<span class="number">0x44DF8500</span>+<span class="number">0x00</span>, <span class="number">0x04</span>*<span class="number">1</span>);</div><div class="line">    PRCM_CM_RTC_CLKCTRL   = ioremap(<span class="number">0x44DF8500</span>+<span class="number">0x20</span>, <span class="number">0x04</span>*<span class="number">1</span>);</div><div class="line">    </div><div class="line">    RTCSS_BASE            = ioremap(<span class="number">0x44E3E000</span>, <span class="number">0xA0</span>);</div><div class="line">    RTCSS_SECONDS         = RTCSS_BASE + <span class="number">0</span>;      </div><div class="line">    RTCSS_MINUTES         = RTCSS_BASE + <span class="number">1</span>; </div><div class="line">    RTCSS_HOURS           = RTCSS_BASE + <span class="number">2</span>;  </div><div class="line">    RTCSS_DAYS            = RTCSS_BASE + <span class="number">3</span>;</div><div class="line">    RTCSS_WEEKS           = RTCSS_BASE + <span class="number">4</span>; </div><div class="line">    RTCSS_MONTHS          = RTCSS_BASE + <span class="number">5</span>;</div><div class="line">    RTCSS_YEARS           = RTCSS_BASE + <span class="number">6</span>;  </div><div class="line">    RTCSS_ALARM_SECONDS   = RTCSS_BASE + <span class="number">8</span>;  </div><div class="line">    RTCSS_ALARM_MINUTES   = RTCSS_BASE + <span class="number">9</span>; </div><div class="line">    RTCSS_ALARM_HOURS     = RTCSS_BASE + <span class="number">10</span>;</div><div class="line">    RTCSS_ALARM_DAYS      = RTCSS_BASE + <span class="number">11</span>; </div><div class="line">    RTCSS_ALARM_MONTHS    = RTCSS_BASE + <span class="number">12</span>; </div><div class="line">    RTCSS_ALARM_YEARS     = RTCSS_BASE + <span class="number">13</span>;      </div><div class="line">    RTCSS_CTRL            = RTCSS_BASE + <span class="number">15</span>; </div><div class="line">    RTCSS_OSC             = RTCSS_BASE + <span class="number">20</span>;    </div><div class="line">    RTCSS_KICK0R          = RTCSS_BASE + <span class="number">25</span>;      </div><div class="line">    RTCSS_KICK1R          = RTCSS_BASE + <span class="number">26</span>;      </div><div class="line">   </div><div class="line">error:</div><div class="line">    unregister_chrdev_region(MKDEV(major, <span class="number">0</span>), TI_RTC_CNT);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rtc_drv_exit</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">unsigned</span> i;</div><div class="line">    printk(KERN_INFO<span class="string">"%s OK.\n"</span>,__func__);</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;TI_RTC_CNT;i++)</div><div class="line">    &#123;</div><div class="line">        device_destroy(rtc_cls,  MKDEV(major, i));</div><div class="line">    &#125;</div><div class="line">    class_destroy(rtc_cls);</div><div class="line">    cdev_del(&amp;rtc_cdev);</div><div class="line">    unregister_chrdev(major, <span class="string">"ti_rtc"</span>); </div><div class="line"></div><div class="line">    iounmap(PRCM_CM_RTC_CLKSTCTRL); </div><div class="line">    iounmap(PRCM_CM_RTC_CLKCTRL);   </div><div class="line">    iounmap(RTCSS_BASE);            </div><div class="line">&#125;</div><div class="line"></div><div class="line">module_init(rtc_drv_init);</div><div class="line">module_exit(rtc_drv_exit);</div><div class="line"></div><div class="line">MODULE_LICENSE(<span class="string">"GPL"</span>);</div><div class="line">MODULE_AUTHOR(<span class="string">"hceng &lt;huangcheng.job@foxmail.com&gt;"</span>);</div><div class="line">MODULE_DESCRIPTION(<span class="string">"TI am437x board rtc drvice"</span>);</div><div class="line">MODULE_ALIAS(<span class="string">"character device:ti_rtc"</span>);</div><div class="line">MODULE_VERSION(<span class="string">"V1.0"</span>);</div></pre></td></tr></table></figure><h2 id="1-5测试程序及效果"><a href="#1-5测试程序及效果" class="headerlink" title="1.5测试程序及效果"></a>1.5测试程序及效果</h2><figure class="highlight c"><figcaption><span>[rtc_app.c]</span><a href="https://github.com/hceng/am437x/blob/master/drive/2th_rtc/v1.0/rtc_app.c" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> msleep(x) usleep(x*1000)</span></div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> * ./rtc_app w 2017 08 25 18 36 20</div><div class="line"> * ./rtc_app r [times]</div><div class="line">*/</div><div class="line"><span class="keyword">struct</span> rtc_struct &#123;</div><div class="line">    <span class="keyword">int</span> year;</div><div class="line">    <span class="keyword">int</span> month;</div><div class="line">    <span class="comment">//int week;</span></div><div class="line">    <span class="keyword">int</span> day;</div><div class="line">    <span class="keyword">int</span> hour;</div><div class="line">    <span class="keyword">int</span> minute;</div><div class="line">    <span class="keyword">int</span> second;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">struct</span> rtc_struct set_time, rtc_time;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> fd;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">  </div><div class="line">    fd = open(<span class="string">"/dev/ti_rts0"</span>, O_RDWR);</div><div class="line">    <span class="keyword">if</span> (fd &lt; <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"can't open /dev/ti_rts0.\n"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">"w"</span>) == <span class="number">0</span> &amp;&amp; argc == <span class="number">8</span>)</div><div class="line">    &#123;</div><div class="line">        set_time.year   = atoi(argv[<span class="number">2</span>]);</div><div class="line">        set_time.month  = atoi(argv[<span class="number">3</span>]);</div><div class="line">        set_time.day    = atoi(argv[<span class="number">4</span>]);</div><div class="line">        set_time.hour   = atoi(argv[<span class="number">5</span>]);</div><div class="line">        set_time.minute = atoi(argv[<span class="number">6</span>]);</div><div class="line">        set_time.second = atoi(argv[<span class="number">7</span>]);</div><div class="line">        </div><div class="line">        write(fd, &amp;set_time, <span class="keyword">sizeof</span>(set_time));  </div><div class="line">        <span class="built_in">printf</span>(<span class="string">"write ok\n"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">"r"</span>) == <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(argv[<span class="number">2</span>] == <span class="literal">NULL</span>) </div><div class="line">            i = <span class="number">999</span>;</div><div class="line">        <span class="keyword">else</span> </div><div class="line">            i = atoi(argv[<span class="number">2</span>]);</div><div class="line">        </div><div class="line">        <span class="keyword">do</span>&#123;</div><div class="line">            read(fd, &amp;rtc_time, <span class="keyword">sizeof</span>(rtc_time));</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"\n\rcurrent_time is:\n\r\%d-%d-%d %d:%d:%d\n\r"</span>,\</div><div class="line">            rtc_time.year+<span class="number">2000</span>,rtc_time.month,rtc_time.day,rtc_time.hour,rtc_time.minute,rtc_time.second);</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"read ok\n"</span>);</div><div class="line">            msleep(<span class="number">1000</span>);  </div><div class="line">            i--;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span>(i);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    close(fd);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/170827/1.png" alt=""><br>这里除了年，其它都还OK，估计是和系统的一些设置冲突了。</p><h1 id="2-还算有点标准的RTC驱动"><a href="#2-还算有点标准的RTC驱动" class="headerlink" title="2.还算有点标准的RTC驱动"></a>2.还算有点标准的RTC驱动</h1><p>本来计划完整的写好RTC驱动的，实际过程中发现ti官方内核的RTC不能关，关了无法正常启动。经验不足，又无法解决这个问题，只能在保持他远样的基础上，能写成什么算什么。大部分框架也算写了，剩下的感觉应该也不难了。<br>这次用的设备驱动模型来写的。由rtc_dev.c和rtc_drv.c组成。</p><h2 id="2-1rtc-dev-c"><a href="#2-1rtc-dev-c" class="headerlink" title="2.1rtc_dev.c"></a>2.1rtc_dev.c</h2><p>首先是在rtc_dev.c中注册平台设备，并设置硬件资源。<br>RTC所需的硬件资源教少，主要是RTC寄存器和中断。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> resource am437x_rtc_resource[] = &#123;  </div><div class="line">    [<span class="number">0</span>] = &#123;  </div><div class="line">        .name  = <span class="string">"RTCSS"</span>,</div><div class="line">        .start = <span class="number">0x44E3E000</span>,  </div><div class="line">        .end   = <span class="number">0x44E3EFFF</span>, </div><div class="line">        .flags = IORESOURCE_MEM,</div><div class="line">    &#125;,  </div><div class="line"></div><div class="line">    [<span class="number">1</span>] = &#123;  </div><div class="line">        .name  = <span class="string">"RTCINT"</span>,</div><div class="line">        .start = <span class="number">107</span>,  </div><div class="line">        .end   = <span class="number">107</span>, </div><div class="line">        .flags = IORESOURCE_IRQ,<span class="comment">//107</span></div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    [<span class="number">2</span>] = &#123; </div><div class="line">        .name  = <span class="string">"RTCALARMINT"</span>,</div><div class="line">        .start = <span class="number">108</span>,  </div><div class="line">        .end   = <span class="number">108</span>, </div><div class="line">        .flags = IORESOURCE_IRQ,<span class="comment">//108</span></div><div class="line">    &#125;,</div><div class="line">&#125;; </div></pre></td></tr></table></figure></p><h2 id="2-2rtc-drv-c"><a href="#2-2rtc-drv-c" class="headerlink" title="2.2rtc_drv.c"></a>2.2rtc_drv.c</h2><p>rtc_drv.c开始要做的也差不多，注册平台设备。然后两个名字相同，匹配成功后调用probe()函数。<br>这里的probe()先获取rtc_dev.c里面的中断和RTC物理基地址的资源。随即映射RTC基地址。同时初始化RTC。<br>然后注册RTC设备devm_rtc_device_register().<br>这里绑定的是rtc_class_ops，而不是之前的file_operations。这里的rtc_class_ops是为RTC“量身定做”的操作函数，更设备RTC设备。devm_rtc_device_register()里面的操作也是注册字符设备那一套，本质还是一样的。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> rtc_class_ops am437x_rtc_ops = &#123;   </div><div class="line">    .open       = rtc_drv_open,       </div><div class="line">    .release    = rtc_drv_release,</div><div class="line">    .read_time  = rtc_drv_read_time,</div><div class="line">    .set_time   = rtc_drv_set_time,</div><div class="line">    .read_alarm = rtc_drv_read_alarm,</div><div class="line">    .set_alarm  = rtc_drv_set_alarm,</div><div class="line">    .proc       = rtc_drv_proc, </div><div class="line">    .alarm_irq_enable  = rtc_drv_alarm_irq_enable, </div><div class="line">&#125;; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">am437x_rtc_enable</span><span class="params">(<span class="keyword">struct</span> platform_device *pdev, <span class="keyword">int</span> en)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">void</span> __iomem *rtc_base  = am437x_rtc_base;</div><div class="line">    </div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> tmp;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (am437x_rtc_base == <span class="literal">NULL</span>)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (en) &#123;</div><div class="line">        </div><div class="line">        <span class="comment">/* Enable the clock/module so that we can access the registers */</span></div><div class="line">        pm_runtime_get_sync(&amp;pdev-&gt;dev);</div><div class="line">        </div><div class="line">        <span class="comment">//rtc init.</span></div><div class="line">        tmp = readb(rtc_base + <span class="number">0x40</span>);<span class="comment">//CTRL.Enable the RTC module</span></div><div class="line">        writew(tmp &amp; ~(<span class="number">0x01</span>&lt;&lt;<span class="number">6</span>), rtc_base + <span class="number">0x40</span>);</div><div class="line"></div><div class="line">        writel(<span class="number">0x83E70B13</span>, rtc_base + <span class="number">0x6C</span>);<span class="comment">//KICK0R.Write Project Disable</span></div><div class="line">        writel(<span class="number">0x95A4F1E0</span>, rtc_base + <span class="number">0x70</span>);<span class="comment">//KICK1R</span></div><div class="line"></div><div class="line">        tmp = readb(rtc_base + <span class="number">0x54</span>);<span class="comment">//OSC.mode1:Internal clock </span></div><div class="line">        writew(tmp &amp; ~(<span class="number">0x01</span>&lt;&lt;<span class="number">3</span>), rtc_base + <span class="number">0x54</span>);</div><div class="line">        tmp = readb(rtc_base + <span class="number">0x54</span>);</div><div class="line">        writew(tmp | (<span class="number">0x01</span>&lt;&lt;<span class="number">6</span>), rtc_base + <span class="number">0x54</span>);</div><div class="line">        </div><div class="line">        tmp = readb(rtc_base + <span class="number">0x40</span>);<span class="comment">//run.</span></div><div class="line">        writew(tmp | (<span class="number">0x01</span>&lt;&lt;<span class="number">0</span>), rtc_base + <span class="number">0x40</span>);</div><div class="line">    &#125; </div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        tmp = readb(rtc_base + <span class="number">0x40</span>);<span class="comment">//stop.</span></div><div class="line">        writew(tmp &amp; ~(<span class="number">0x01</span>&lt;&lt;<span class="number">0</span>), rtc_base + <span class="number">0x40</span>);</div><div class="line">    </div><div class="line">        tmp = readb(rtc_base + <span class="number">0x40</span>);<span class="comment">//CTRL.Disable the RTC module</span></div><div class="line">        writew(tmp | (<span class="number">0x01</span>&lt;&lt;<span class="number">6</span>), rtc_base + <span class="number">0x40</span>); </div><div class="line"></div><div class="line">        <span class="comment">/* Disable the clock/module */</span></div><div class="line">        pm_runtime_put_sync(&amp;pdev-&gt;dev);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> resource *am437x_rtc_mem;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">am437x_rtc_probe</span><span class="params">(<span class="keyword">struct</span> platform_device *pdev)</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">struct</span> resource *res;</div><div class="line">    </div><div class="line">    <span class="keyword">int</span> ret;   </div><div class="line">    </div><div class="line">    printk(KERN_INFO<span class="string">"%s OK.\n"</span>,__func__);</div><div class="line">    </div><div class="line">    <span class="comment">/* find the IRQs */</span></div><div class="line">    am437x_rtc_timer_irq = platform_get_irq(pdev, <span class="number">0</span>);</div><div class="line">    <span class="keyword">if</span> (am437x_rtc_timer_irq &lt; <span class="number">0</span>) &#123;</div><div class="line">        dev_err(&amp;pdev-&gt;dev, <span class="string">"no irq for rtc tick\n"</span>);</div><div class="line">        <span class="keyword">return</span> am437x_rtc_timer_irq;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    am437x_rtc_alarm_irq = platform_get_irq(pdev, <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (am437x_rtc_alarm_irq &lt; <span class="number">0</span>) &#123;</div><div class="line">        dev_err(&amp;pdev-&gt;dev, <span class="string">"no irq for alarm\n"</span>);</div><div class="line">        <span class="keyword">return</span> am437x_rtc_alarm_irq;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    dev_dbg(&amp;pdev-&gt;dev, <span class="string">"am437x_rtc: tick irq %d, alarm irq %d\n"</span>,</div><div class="line">        am437x_rtc_timer_irq, am437x_rtc_alarm_irq);</div><div class="line">       </div><div class="line">    <span class="comment">/*RTC*/</span></div><div class="line">    res = platform_get_resource(pdev, IORESOURCE_MEM, <span class="number">0</span>);</div><div class="line">    <span class="keyword">if</span>(res == <span class="literal">NULL</span>)&#123;</div><div class="line">        dev_err(&amp;pdev-&gt;dev, <span class="string">"RTC:failed to get memory regin resource.\n"</span>);</div><div class="line">        <span class="keyword">return</span> -ENOENT;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    am437x_rtc_mem = request_mem_region(res-&gt;start, res-&gt;end - res-&gt;start+<span class="number">1</span>, pdev-&gt;name);</div><div class="line">    <span class="keyword">if</span> (am437x_rtc_mem == <span class="literal">NULL</span>)&#123;</div><div class="line">        dev_err(&amp;pdev-&gt;dev, <span class="string">"RTC:failed to reserve memory region.\n"</span>);</div><div class="line">        <span class="keyword">return</span> -ENOENT;</div><div class="line">        <span class="keyword">goto</span> err_nores;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    am437x_rtc_base = ioremap(res-&gt;start, res-&gt;end - res-&gt;start+<span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (am437x_rtc_mem == <span class="literal">NULL</span>)&#123;</div><div class="line">        dev_err(&amp;pdev-&gt;dev, <span class="string">"RTC:failed ioremap.\n"</span>);</div><div class="line">        <span class="keyword">return</span> -EINVAL;</div><div class="line">        <span class="keyword">goto</span> err_nomap;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    am437x_rtc_enable(pdev, <span class="number">1</span>);</div><div class="line">    </div><div class="line">    rtc = devm_rtc_device_register(&amp;pdev-&gt;dev, pdev-&gt;name,&amp;am437x_rtc_ops, THIS_MODULE);</div><div class="line">    <span class="keyword">if</span> (IS_ERR(rtc)) &#123;</div><div class="line">        pr_debug(<span class="string">"%s: can't register RTC device, err %ld\n"</span>,pdev-&gt;name, PTR_ERR(rtc));</div><div class="line">        <span class="keyword">goto</span> err_nortc;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    </div><div class="line">err_nortc:</div><div class="line">    am437x_rtc_enable(pdev, <span class="number">0</span>);</div><div class="line">    iounmap(am437x_rtc_base);</div><div class="line">    </div><div class="line">err_nomap:</div><div class="line">    release_resource(am437x_rtc_mem);</div><div class="line">    </div><div class="line">err_nores:</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>然后是填充rtc_class_ops里面的操作函数，open()本来计划用来申请中断的，但申请的时候说被占用了，还是之前没有去掉内核RTC的原因。这里就先屏蔽了。read_time()和set_time()里面还是读取/设置寄存器。alarm的也差不多，没有中断，就先搁置了。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">rtc_drv_open</span><span class="params">(<span class="keyword">struct</span> device *dev)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> platform_device *pdev = to_platform_device(dev);</div><div class="line">    <span class="keyword">struct</span> rtc_device *rtc_dev = platform_get_drvdata(pdev);</div><div class="line">    <span class="keyword">int</span> ret;</div><div class="line"></div><div class="line">    printk(KERN_INFO<span class="string">"%s OK.\n"</span>,__func__);</div><div class="line"><span class="comment">/*</span></div><div class="line">    if (devm_request_irq(&amp;pdev-&gt;dev, am437x_rtc_timer_irq, rtc_irq, 0, dev_name(&amp;rtc-&gt;dev), rtc)) &#123;</div><div class="line">        pr_debug("%s: RTC timer interrupt IRQ%d already claimed\n",pdev-&gt;name, am437x_rtc_timer_irq);</div><div class="line">        goto fail0;</div><div class="line">    &#125;</div><div class="line">    if ((am437x_rtc_timer_irq != am437x_rtc_alarm_irq) &amp;&amp; </div><div class="line">        (devm_request_irq(&amp;pdev-&gt;dev, am437x_rtc_alarm_irq, rtc_irq, 0, dev_name(&amp;rtc-&gt;dev), rtc))) &#123;</div><div class="line">        pr_debug("%s: RTC alarm interrupt IRQ%d already claimed\n",pdev-&gt;name, am437x_rtc_alarm_irq);</div><div class="line">        goto fail0;</div><div class="line">    &#125;</div><div class="line">*/</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">fail0:</div><div class="line">    <span class="keyword">return</span> -EIO;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">rtc_drv_release</span><span class="params">(<span class="keyword">struct</span> device *dev)</span></span></div><div class="line">&#123;  </div><div class="line">    printk(KERN_INFO<span class="string">"%s OK.\n"</span>,__func__);   </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">tm2bcd</span><span class="params">(<span class="keyword">struct</span> rtc_time *tm)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (rtc_valid_tm(tm) != <span class="number">0</span>)</div><div class="line">        <span class="keyword">return</span> -EINVAL;</div><div class="line"></div><div class="line">    tm-&gt;tm_sec  = bin2bcd(tm-&gt;tm_sec);</div><div class="line">    tm-&gt;tm_min  = bin2bcd(tm-&gt;tm_min);</div><div class="line">    tm-&gt;tm_hour = bin2bcd(tm-&gt;tm_hour);</div><div class="line">    tm-&gt;tm_mday = bin2bcd(tm-&gt;tm_mday);</div><div class="line"></div><div class="line">    tm-&gt;tm_mon  = bin2bcd(tm-&gt;tm_mon + <span class="number">1</span>);</div><div class="line"></div><div class="line">    <span class="comment">/* epoch == 1900 */</span></div><div class="line">    <span class="keyword">if</span> (tm-&gt;tm_year &lt; <span class="number">100</span> || tm-&gt;tm_year &gt; <span class="number">199</span>)</div><div class="line">        <span class="keyword">return</span> -EINVAL;</div><div class="line">    tm-&gt;tm_year = bin2bcd(tm-&gt;tm_year - <span class="number">100</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bcd2tm</span><span class="params">(<span class="keyword">struct</span> rtc_time *tm)</span></span></div><div class="line">&#123;</div><div class="line">    tm-&gt;tm_sec  = bcd2bin(tm-&gt;tm_sec);</div><div class="line">    tm-&gt;tm_min  = bcd2bin(tm-&gt;tm_min);</div><div class="line">    tm-&gt;tm_hour = bcd2bin(tm-&gt;tm_hour);</div><div class="line">    tm-&gt;tm_mday = bcd2bin(tm-&gt;tm_mday);</div><div class="line">    tm-&gt;tm_mon  = bcd2bin(tm-&gt;tm_mon) - <span class="number">1</span>;</div><div class="line">    <span class="comment">/* epoch == 1900 */</span></div><div class="line">    tm-&gt;tm_year = bcd2bin(tm-&gt;tm_year) + <span class="number">2000</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rtc_wait_not_busy</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span>count = <span class="number">0</span>;</div><div class="line">    u8status;</div><div class="line"></div><div class="line">    <span class="comment">/* BUSY may stay active for 1/32768 second (~30 usec) */</span></div><div class="line">    <span class="keyword">for</span> (count = <span class="number">0</span>; count &lt; <span class="number">50</span>; count++) &#123;</div><div class="line">        status = readb(am437x_rtc_base + <span class="number">0x44</span>);<span class="comment">//STS</span></div><div class="line">        <span class="keyword">if</span> ((status &amp; (<span class="number">0x01</span>&lt;&lt;<span class="number">0</span>)) == <span class="number">0</span>)</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        udelay(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/* now we have ~15 usec to read/write various registers */</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">rtc_drv_read_time</span><span class="params">(<span class="keyword">struct</span> device *dev, <span class="keyword">struct</span> rtc_time *<span class="keyword">rtc_t</span>)</span></span></div><div class="line">&#123;</div><div class="line">    printk(KERN_INFO<span class="string">"%s OK.\n"</span>,__func__);</div><div class="line"></div><div class="line">    <span class="comment">//local_irq_disable();</span></div><div class="line">    rtc_wait_not_busy();</div><div class="line"></div><div class="line">    <span class="keyword">rtc_t</span>-&gt;tm_sec  = readb(am437x_rtc_base + <span class="number">0x00</span>);</div><div class="line">    <span class="keyword">rtc_t</span>-&gt;tm_min  = readb(am437x_rtc_base + <span class="number">0x04</span>);</div><div class="line">    <span class="keyword">rtc_t</span>-&gt;tm_hour = readb(am437x_rtc_base + <span class="number">0x08</span>);</div><div class="line">    <span class="keyword">rtc_t</span>-&gt;tm_mday = readb(am437x_rtc_base + <span class="number">0x0C</span>);</div><div class="line">    <span class="keyword">rtc_t</span>-&gt;tm_mon  = readb(am437x_rtc_base + <span class="number">0x10</span>);</div><div class="line">    <span class="keyword">rtc_t</span>-&gt;tm_year = readb(am437x_rtc_base + <span class="number">0x14</span>);</div><div class="line"></div><div class="line">    <span class="comment">//local_irq_enable();</span></div><div class="line"></div><div class="line">    bcd2tm(<span class="keyword">rtc_t</span>);</div><div class="line"></div><div class="line">    printk(<span class="string">"\n\rcurrent_time is:\n\r\%d-%d-%d %d:%d:%d\n\r"</span>,\</div><div class="line">        <span class="keyword">rtc_t</span>-&gt;tm_year,<span class="keyword">rtc_t</span>-&gt;tm_mon,<span class="keyword">rtc_t</span>-&gt;tm_mday,<span class="keyword">rtc_t</span>-&gt;tm_hour,<span class="keyword">rtc_t</span>-&gt;tm_min,<span class="keyword">rtc_t</span>-&gt;tm_sec);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">rtc_drv_set_time</span><span class="params">(<span class="keyword">struct</span> device *dev, <span class="keyword">struct</span> rtc_time *<span class="keyword">rtc_t</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (tm2bcd(<span class="keyword">rtc_t</span>) &lt; <span class="number">0</span>)</div><div class="line">        <span class="keyword">return</span> -EINVAL;</div><div class="line">    </div><div class="line">    <span class="comment">//local_irq_disable();</span></div><div class="line">    rtc_wait_not_busy();</div><div class="line"></div><div class="line">    writeb(<span class="keyword">rtc_t</span>-&gt;tm_sec, am437x_rtc_base + <span class="number">0x00</span>);</div><div class="line">    writeb(<span class="keyword">rtc_t</span>-&gt;tm_min, am437x_rtc_base + <span class="number">0x04</span>);</div><div class="line">    writeb(<span class="keyword">rtc_t</span>-&gt;tm_hour, am437x_rtc_base + <span class="number">0x08</span>);</div><div class="line">    writeb(<span class="keyword">rtc_t</span>-&gt;tm_mday, am437x_rtc_base + <span class="number">0x0C</span>);</div><div class="line">    writeb(<span class="keyword">rtc_t</span>-&gt;tm_mon, am437x_rtc_base + <span class="number">0x10</span>);</div><div class="line">    writeb(<span class="keyword">rtc_t</span>-&gt;tm_year, am437x_rtc_base + <span class="number">0x14</span>);</div><div class="line"></div><div class="line">    <span class="comment">//local_irq_enable();</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">rtc_drv_read_alarm</span><span class="params">(<span class="keyword">struct</span> device *dev, <span class="keyword">struct</span> rtc_wkalrm *alrm)</span></span></div><div class="line">&#123;</div><div class="line">    printk(KERN_INFO<span class="string">"%s OK.\n"</span>,__func__);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">rtc_drv_set_alarm</span><span class="params">(<span class="keyword">struct</span> device *dev, <span class="keyword">struct</span> rtc_wkalrm *alrm)</span></span></div><div class="line">&#123;</div><div class="line">    printk(KERN_INFO<span class="string">"%s OK.\n"</span>,__func__);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">rtc_drv_proc</span><span class="params">(<span class="keyword">struct</span> device *dev, <span class="keyword">struct</span> seq_file *seq)</span></span></div><div class="line">&#123;</div><div class="line">    printk(KERN_INFO<span class="string">"%s OK.\n"</span>,__func__);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">rtc_drv_alarm_irq_enable</span><span class="params">(<span class="keyword">struct</span> device *dev, <span class="keyword">unsigned</span> <span class="keyword">int</span> enabled)</span></span></div><div class="line">&#123;</div><div class="line">    printk(KERN_INFO<span class="string">"%s OK.\n"</span>,__func__);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="2-3相关代码及测试效果"><a href="#2-3相关代码及测试效果" class="headerlink" title="2.3相关代码及测试效果"></a>2.3相关代码及测试效果</h2><p><a href="https://github.com/hceng/am437x/blob/master/drive/2th_rtc/v2.0/rtc_dev.c" target="_blank" rel="external">rtc_dev.c</a><br><a href="https://github.com/hceng/am437x/blob/master/drive/2th_rtc/v2.0/rtc_drv.c" target="_blank" rel="external">rtc_drv.c</a><br>在系统输入<code>hwclock -f /dev/rtc1</code><br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/170827/2.png" alt=""></p><h1 id="3-正常的测试驱动"><a href="#3-正常的测试驱动" class="headerlink" title="3.正常的测试驱动"></a>3.正常的测试驱动</h1><p>额，虽然没有正常调试出RTC，但还是记下正常调试的方法，万一以后用到了呢。</p><p>Linux中有两个时间，<br>一个是系统时间，通过命令<code>date</code>获取；<br>一个是硬件时间，通过命令<code>hwclock</code>获取；</p><p>RTC驱动的一般测试如下：<br>1.获取系统时间<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">date</div></pre></td></tr></table></figure></p><p>如果时间正常，则进行第2步，如果不正常，修改系统时间为正常时间：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">date 082316432017.00//2017-08-23 16:43:00</div></pre></td></tr></table></figure></p><p>2.获取硬件时间<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hwclock</div></pre></td></tr></table></figure></p><p>由于此处是RTC驱动第一次加载，还没设置正确的时间，所以此时显示的时间，多数是不正确的1970年。</p><p>3.同步硬件时间<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hwclock -w</div></pre></td></tr></table></figure></p><p>第一步设置好了正常的系统时间，现在将系统时间与硬件时间进行同步。</p><p>4.自动同步硬件时间<br>现在的系统时间和硬件时间是同步的，如果关机重启，系统时间将不会实时同步，而硬件时间是一直实时同步的，因此需要将硬件时间同步到系统时间。<br>修改启动脚本：<code>etc/init.d/rcS</code>，在最后一行加上：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/sbin/hwclock -s</div></pre></td></tr></table></figure></p><p>4.验证<br>重启，检查系统时间和硬件时间是不是实时的。</p><hr><p><div align="center"><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本文采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href="http://hceng.cn/" target="_blank" rel="external">hceng’s blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要记录AM437X驱动的RTC。包含一个不标准的RTC驱动、一个还算有点标准的RTC驱动，以及正常的测试方式。&lt;br&gt;
    
    </summary>
    
    
      <category term="AM437X" scheme="http://yoursite.com/tags/AM437X/"/>
    
      <category term="Linux驱动" scheme="http://yoursite.com/tags/Linux%E9%A9%B1%E5%8A%A8/"/>
    
  </entry>
  
  <entry>
    <title>AM437x——RTC裸机</title>
    <link href="http://yoursite.com/2017/08/23/AM437x%E2%80%94%E2%80%94RTC%E8%A3%B8%E6%9C%BA/"/>
    <id>http://yoursite.com/2017/08/23/AM437x——RTC裸机/</id>
    <published>2017-08-23T08:46:58.000Z</published>
    <updated>2017-09-12T01:33:00.624Z</updated>
    
    <content type="html"><![CDATA[<p>AM437x的RTC模块裸机程序。<br><a id="more"></a></p><hr><h1 id="0-为什么要RTC"><a href="#0-为什么要RTC" class="headerlink" title="0.为什么要RTC"></a>0.为什么要RTC</h1><p>在实际开发中，往往需要知道当前的时间，比如现在的2017年8月23日17点02分。<br>由于设备不使用的时候或者遇到故障时，会出现关机操作，而关机的这段时间长短，设备是不知道的，当再次开机时，时间要么被归零，要么显示为关机时的那个时间。</p><p>为了同步到现在的实时时间，我能想到两个解决方案。</p><blockquote><p>1.利用网络，从网络中获取当前时间。<br>2.利用一个设备关机仍在计时工作的模块，开机后加上关机的这段时间。</p></blockquote><p>第一个方案，需要网络，对于大多数单片机设备是不现实的，附加的成本太高。<br>第二个方案，就是现在大量使用的RTC，有的集成到SOC里面了，有些仍以外部芯片的形式出现。</p><p>在设备关机后，RTC在备用电池（一般是纽扣电池）的支持下，以超低功耗的方式继续默默的工作，直到开机，将时间同步。</p><p>这就是RTC存在的主要意义。</p><h1 id="1-AM437x的RTC"><a href="#1-AM437x的RTC" class="headerlink" title="1.AM437x的RTC"></a>1.AM437x的RTC</h1><p>AM437x的RTC介绍在参考手册19章Timers的第4部分：Real-Time Clock (RTC)<br>大致的特性有：</p><ul><li>总计数时间为100年；</li><li>提供秒、分、小时、星期、日期、月份、年等；</li><li>数据以Binary-coded-decimal (BCD)表示；</li><li>时钟源可选择内部或外部；</li><li>有两个闹钟；</li><li>有两种中断：时间中断和闹钟中断；</li></ul><p>很良心的有个Use Cases：</p><blockquote><p>The following list includes high-level steps to start using the RTC:</p><ol><li>Enable the module clock domains (for details on which clock domain, see Section 19.4.2, Integration).</li><li>Enable the RTC module using CTRL_REG.RTC_disable.</li><li>Enable the 32K clock from PER PLL, if using the internal RTC oscillator.</li><li>Write to the kick registers (KICK0R, KICK1R) in the RTC.</li><li>Configure the timer in RTCSS for desired application (set time and date, alarm wakeup, and so on).</li><li>Start the RTC (in CTRL_REG.STOP_RTC).</li></ol></blockquote><p>基本把配置步骤写得很清楚了。</p><ul><li><p>关于时钟和中断：<br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/170823/1.png" alt=""><br>时钟来自于外部CLKIN32的CLK_32K_RTC或者内部PRCM的CLK_32KHz；<br>可以产生两种中断：timer_intr_pend和alarm_intr_pend。</p></li><li><p>关于写保护<br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/170823/2.png" alt=""><br>如图中的三个状态，向KICK0和KICK1写入指定的值，即可去写保护。</p></li></ul><h1 id="2-RTC编程"><a href="#2-RTC编程" class="headerlink" title="2.RTC编程"></a>2.RTC编程</h1><p>本次裸机的目的，是想实现以下两个功能：</p><ul><li>设置和读取RTC的时间；</li><li>设置和读取RTC闹钟的时间，利用中断打印闹钟；</li></ul><p><strong>模块初始化：</strong><br>包含时钟使能、模块使能、时钟源选择、中断注册、使能中断。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">rtc_init</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">//1.set performing the System Clock configuration for RTC.</span></div><div class="line">    PRCM_CM_RTC_CLKCTRL &amp;= ~(<span class="number">0x3</span>&lt;&lt;<span class="number">0</span>);</div><div class="line">    PRCM_CM_RTC_CLKCTRL |= (<span class="number">0x01</span>&lt;&lt;<span class="number">1</span>);</div><div class="line">    </div><div class="line">    PRCM_CM_RTC_CLKSTCTRL &amp;= ~(<span class="number">0x3</span>&lt;&lt;<span class="number">0</span>);</div><div class="line">    </div><div class="line">    <span class="comment">//Wait write is completed.</span></div><div class="line">    <span class="keyword">while</span>(!(PRCM_CM_RTC_CLKSTCTRL &amp; (<span class="number">0x01</span>&lt;&lt;<span class="number">9</span> | <span class="number">0x01</span>&lt;&lt;<span class="number">8</span>)));</div><div class="line">    <span class="keyword">while</span>(PRCM_CM_RTC_CLKCTRL &amp; (<span class="number">0x03</span>&lt;&lt;<span class="number">16</span>));</div><div class="line">    </div><div class="line">    <span class="comment">//2.Enable the RTC module;</span></div><div class="line">    RTCSS-&gt;CTRL &amp;= ~(<span class="number">0x01</span>&lt;&lt;<span class="number">6</span>);</div><div class="line">    </div><div class="line">    <span class="comment">//3.Write Project Disable;</span></div><div class="line">    RTCSS-&gt;KICK0R = (<span class="number">0x83E70B13</span>);</div><div class="line">    RTCSS-&gt;KICK1R = (<span class="number">0x95A4F1E0</span>);</div><div class="line">    </div><div class="line">    <span class="comment">//4.Set clock Source;</span></div><div class="line">    <span class="comment">//mode1:Internal clock </span></div><div class="line">    RTCSS-&gt;OSC &amp;= ~(<span class="number">0x01</span>&lt;&lt;<span class="number">3</span>);</div><div class="line">    RTCSS-&gt;OSC |=  (<span class="number">0x01</span>&lt;&lt;<span class="number">6</span>);</div><div class="line">    <span class="comment">//mode2:External clock </span></div><div class="line">    <span class="comment">//RTCSS-&gt;OSC &amp;= ~(0x01&lt;&lt;3);</span></div><div class="line">    <span class="comment">//RTCSS-&gt;OSC |=  (0x01&lt;&lt;6 | 0x01&lt;&lt;3);</span></div><div class="line">    </div><div class="line">    register_irq(RTCALARMINT, alarm_irq);</div><div class="line">    </div><div class="line">    interrupt_init(RTCALARMINT);</div><div class="line">    </div><div class="line">    <span class="comment">//5.Enable interrupt;</span></div><div class="line">    </div><div class="line">    rtc_int_enalbe();</div><div class="line">    </div><div class="line">    <span class="comment">//6.Run.</span></div><div class="line">    <span class="comment">//rtc_start();</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这里将中断的使能/去能、RTC的启动/停止，分别封装成了函数。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">rtc_start</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    RTCSS-&gt;CTRL |= (<span class="number">0x01</span>&lt;&lt;<span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">rtc_stop</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    RTCSS-&gt;CTRL &amp;= ~(<span class="number">0x01</span>&lt;&lt;<span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rtc_int_enalbe</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    RTCSS-&gt;INTRS |= (<span class="number">0x01</span>&lt;&lt;<span class="number">3</span>);<span class="comment">//RTC_ALARM1</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rtc_int_clear</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    RTCSS-&gt;STS |= (<span class="number">0x01</span>&lt;&lt;<span class="number">6</span>);;<span class="comment">//RTC_ALARM1</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>设置时间和获取时间：</strong><br>将所有时间参数封装成一个结构体：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> rtc_struct &#123;</div><div class="line">    <span class="keyword">int</span> year;</div><div class="line">    <span class="keyword">int</span> month;</div><div class="line">    <span class="keyword">int</span> week;</div><div class="line">    <span class="keyword">int</span> day;</div><div class="line">    <span class="keyword">int</span> hour;</div><div class="line">    <span class="keyword">int</span> minute;</div><div class="line">    <span class="keyword">int</span> second;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">extern</span> <span class="keyword">struct</span> rtc_struct rtc_time, rtc_alarm;</div></pre></td></tr></table></figure></p><p>设置时间主要是将值分解成BCD的格式：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">set_time</span><span class="params">(<span class="keyword">struct</span> rtc_struct rtc_time)</span></span></div><div class="line">&#123;</div><div class="line">    rtc_stop();</div><div class="line"></div><div class="line">    <span class="keyword">if</span>((rtc_time.year<span class="number">-2000</span>) &gt; <span class="number">99</span> || (rtc_time.year<span class="number">-2000</span>) &lt; <span class="number">0</span>)</div><div class="line">        <span class="keyword">goto</span> err;</div><div class="line">    RTCSS-&gt;YEARS = (((rtc_time.year<span class="number">-2000</span>)/<span class="number">10</span>) &lt;&lt; <span class="number">4</span>) | (((rtc_time.year<span class="number">-2000</span>)%<span class="number">10</span>) &lt;&lt; <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(rtc_time.month &gt; <span class="number">12</span> || rtc_time.month &lt; <span class="number">0</span>)</div><div class="line">        <span class="keyword">goto</span> err;</div><div class="line">    RTCSS-&gt;MONTHS = ((rtc_time.month/<span class="number">10</span>) &lt;&lt; <span class="number">4</span>) | ((rtc_time.month%<span class="number">10</span>) &lt;&lt; <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(rtc_time.week &gt; <span class="number">7</span> || rtc_time.week &lt; <span class="number">0</span>)</div><div class="line">        <span class="comment">//goto err;</span></div><div class="line">        rtc_time.week = <span class="number">1</span>;</div><div class="line">    RTCSS-&gt;WEEKS = rtc_time.week;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(rtc_time.day &gt; <span class="number">32</span> || rtc_time.day &lt; <span class="number">0</span>)</div><div class="line">        <span class="keyword">goto</span> err;</div><div class="line">    RTCSS-&gt;DAYS = ((rtc_time.day/<span class="number">10</span>) &lt;&lt; <span class="number">4</span>) | ((rtc_time.day%<span class="number">10</span>) &lt;&lt; <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(rtc_time.hour &gt; <span class="number">23</span> || rtc_time.hour &lt; <span class="number">0</span>)</div><div class="line">        <span class="keyword">goto</span> err;</div><div class="line">    RTCSS-&gt;HOURS = ((rtc_time.hour/<span class="number">10</span>) &lt;&lt; <span class="number">4</span>) | ((rtc_time.hour%<span class="number">10</span>) &lt;&lt; <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(rtc_time.minute &gt; <span class="number">59</span> || rtc_time.minute &lt; <span class="number">0</span>)</div><div class="line">        <span class="keyword">goto</span> err;</div><div class="line">    RTCSS-&gt;MINUTES = ((rtc_time.minute/<span class="number">10</span>) &lt;&lt; <span class="number">4</span>) | ((rtc_time.minute%<span class="number">10</span>) &lt;&lt; <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(rtc_time.second &gt; <span class="number">59</span> || rtc_time.second &lt; <span class="number">0</span>)</div><div class="line">        <span class="keyword">goto</span> err;</div><div class="line">    RTCSS-&gt;SECONDS = ((rtc_time.second/<span class="number">10</span>) &lt;&lt; <span class="number">4</span>) | ((rtc_time.second%<span class="number">10</span>) &lt;&lt; <span class="number">0</span>);</div><div class="line"></div><div class="line">    rtc_start();</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">err:</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"set_time err.\n\r"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">struct</span> rtc_struct <span class="title">get_time</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> rtc_struct current_time;</div><div class="line"></div><div class="line">    current_time.year   = (((RTCSS-&gt;YEARS   &amp; (<span class="number">0x03</span>&lt;&lt;<span class="number">4</span>))&gt;&gt;<span class="number">4</span>)*<span class="number">10</span> + (RTCSS-&gt;YEARS   &amp; (<span class="number">0x0F</span>&lt;&lt;<span class="number">0</span>)));</div><div class="line">    current_time.month  = (((RTCSS-&gt;MONTHS  &amp; (<span class="number">0x07</span>&lt;&lt;<span class="number">4</span>))&gt;&gt;<span class="number">4</span>)*<span class="number">10</span> + (RTCSS-&gt;MONTHS  &amp; (<span class="number">0x0F</span>&lt;&lt;<span class="number">0</span>)));</div><div class="line">    current_time.week   = (  RTCSS-&gt;WEEKS   &amp; (<span class="number">0x0F</span>&lt;&lt;<span class="number">0</span>));</div><div class="line">    current_time.day    = (((RTCSS-&gt;DAYS    &amp; (<span class="number">0x07</span>&lt;&lt;<span class="number">4</span>))&gt;&gt;<span class="number">4</span>)*<span class="number">10</span> + (RTCSS-&gt;DAYS    &amp; (<span class="number">0x0F</span>&lt;&lt;<span class="number">0</span>)));</div><div class="line">    current_time.hour   = (((RTCSS-&gt;HOURS   &amp; (<span class="number">0x03</span>&lt;&lt;<span class="number">4</span>))&gt;&gt;<span class="number">4</span>)*<span class="number">10</span> + (RTCSS-&gt;HOURS   &amp; (<span class="number">0x0F</span>&lt;&lt;<span class="number">0</span>)));</div><div class="line">    current_time.minute = (((RTCSS-&gt;MINUTES &amp; (<span class="number">0x07</span>&lt;&lt;<span class="number">4</span>))&gt;&gt;<span class="number">4</span>)*<span class="number">10</span> + (RTCSS-&gt;MINUTES &amp; (<span class="number">0x0F</span>&lt;&lt;<span class="number">0</span>)));</div><div class="line">    current_time.second = (((RTCSS-&gt;SECONDS &amp; (<span class="number">0x07</span>&lt;&lt;<span class="number">4</span>))&gt;&gt;<span class="number">4</span>)*<span class="number">10</span> + (RTCSS-&gt;SECONDS &amp; (<span class="number">0x0F</span>&lt;&lt;<span class="number">0</span>)));</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n\rcurrent_time is:\n\r\%d-%d-%d %d:%d:%d\n\r"</span>,\</div><div class="line">current_time.year+<span class="number">2000</span>,current_time.month,current_time.day,current_time.hour,current_time.minute,current_time.second);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> current_time;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>设置闹钟和获取闹钟：</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">set_alarm</span><span class="params">(<span class="keyword">struct</span> rtc_struct alarm_time)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>((alarm_time.year<span class="number">-2000</span>) &gt; <span class="number">99</span> || (alarm_time.year<span class="number">-2000</span>) &lt; <span class="number">0</span>)</div><div class="line">        <span class="keyword">goto</span> err;</div><div class="line">    RTCSS-&gt;ALARM_YEARS = (((alarm_time.year<span class="number">-2000</span>)/<span class="number">10</span>) &lt;&lt; <span class="number">4</span>) | (((alarm_time.year<span class="number">-2000</span>)%<span class="number">10</span>) &lt;&lt; <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(alarm_time.month &gt; <span class="number">12</span> || alarm_time.month &lt; <span class="number">0</span>)</div><div class="line">        <span class="keyword">goto</span> err;</div><div class="line">    RTCSS-&gt;ALARM_MONTHS = ((alarm_time.month/<span class="number">10</span>) &lt;&lt; <span class="number">4</span>) | ((alarm_time.month%<span class="number">10</span>) &lt;&lt; <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(alarm_time.day &gt; <span class="number">32</span> || alarm_time.day &lt; <span class="number">0</span>)</div><div class="line">        <span class="keyword">goto</span> err;</div><div class="line">    RTCSS-&gt;ALARM_DAYS = ((alarm_time.day/<span class="number">10</span>) &lt;&lt; <span class="number">4</span>) | ((alarm_time.day%<span class="number">10</span>) &lt;&lt; <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(alarm_time.hour &gt; <span class="number">23</span> || alarm_time.hour &lt; <span class="number">0</span>)</div><div class="line">        <span class="keyword">goto</span> err;</div><div class="line">    RTCSS-&gt;ALARM_HOURS = ((alarm_time.hour/<span class="number">10</span>) &lt;&lt; <span class="number">4</span>) | ((alarm_time.hour%<span class="number">10</span>) &lt;&lt; <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(alarm_time.minute &gt; <span class="number">59</span> || alarm_time.minute &lt; <span class="number">0</span>)</div><div class="line">        <span class="keyword">goto</span> err;</div><div class="line">    RTCSS-&gt;ALARM_MINUTES = ((alarm_time.minute/<span class="number">10</span>) &lt;&lt; <span class="number">4</span>) | ((alarm_time.minute%<span class="number">10</span>) &lt;&lt; <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(alarm_time.second &gt; <span class="number">59</span> || alarm_time.second &lt; <span class="number">0</span>)</div><div class="line">        <span class="keyword">goto</span> err;</div><div class="line">    RTCSS-&gt;ALARM_SECONDS = ((alarm_time.second/<span class="number">10</span>) &lt;&lt; <span class="number">4</span>) | ((alarm_time.second%<span class="number">10</span>) &lt;&lt; <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">    err:</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"set_alarm err.\n\r"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">struct</span> rtc_struct <span class="title">get_alarm</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> rtc_struct alarm_time;</div><div class="line"></div><div class="line">    alarm_time.year   = (((RTCSS-&gt;ALARM_YEARS   &amp; (<span class="number">0x03</span>&lt;&lt;<span class="number">4</span>))&gt;&gt;<span class="number">4</span>)*<span class="number">10</span> + (RTCSS-&gt;ALARM_YEARS   &amp; (<span class="number">0x0F</span>&lt;&lt;<span class="number">0</span>)));</div><div class="line">    alarm_time.month  = (((RTCSS-&gt;ALARM_MONTHS  &amp; (<span class="number">0x07</span>&lt;&lt;<span class="number">4</span>))&gt;&gt;<span class="number">4</span>)*<span class="number">10</span> + (RTCSS-&gt;ALARM_MONTHS  &amp; (<span class="number">0x0F</span>&lt;&lt;<span class="number">0</span>)));</div><div class="line">    alarm_time.day    = (((RTCSS-&gt;ALARM_DAYS    &amp; (<span class="number">0x07</span>&lt;&lt;<span class="number">4</span>))&gt;&gt;<span class="number">4</span>)*<span class="number">10</span> + (RTCSS-&gt;ALARM_DAYS    &amp; (<span class="number">0x0F</span>&lt;&lt;<span class="number">0</span>)));</div><div class="line">    alarm_time.hour   = (((RTCSS-&gt;ALARM_HOURS   &amp; (<span class="number">0x03</span>&lt;&lt;<span class="number">4</span>))&gt;&gt;<span class="number">4</span>)*<span class="number">10</span> + (RTCSS-&gt;ALARM_HOURS   &amp; (<span class="number">0x0F</span>&lt;&lt;<span class="number">0</span>)));</div><div class="line">    alarm_time.minute = (((RTCSS-&gt;ALARM_MINUTES &amp; (<span class="number">0x07</span>&lt;&lt;<span class="number">4</span>))&gt;&gt;<span class="number">4</span>)*<span class="number">10</span> + (RTCSS-&gt;ALARM_MINUTES &amp; (<span class="number">0x0F</span>&lt;&lt;<span class="number">0</span>)));</div><div class="line">    alarm_time.second = (((RTCSS-&gt;ALARM_SECONDS &amp; (<span class="number">0x07</span>&lt;&lt;<span class="number">4</span>))&gt;&gt;<span class="number">4</span>)*<span class="number">10</span> + (RTCSS-&gt;ALARM_SECONDS &amp; (<span class="number">0x0F</span>&lt;&lt;<span class="number">0</span>)));</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n\ralarm_time is:\n\r\%d-%d-%d %d:%d:%d\n\r"</span>,\</div><div class="line">    alarm_time.year+<span class="number">2000</span>,alarm_time.month,alarm_time.day,alarm_time.hour,alarm_time.minute,alarm_time.second);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> alarm_time;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>中断服务函数</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">alarm_irq</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    rtc_int_clear();</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n\r----------------alarm_irq-----------------\n\r"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>主函数</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    rtc_time.year   = <span class="number">2017</span>;</div><div class="line">    rtc_time.month  = <span class="number">8</span>;</div><div class="line">    <span class="comment">//rtc_time.week   = 1;</span></div><div class="line">    rtc_time.day    = <span class="number">24</span>;</div><div class="line">    rtc_time.hour   = <span class="number">10</span>;</div><div class="line">    rtc_time.minute = <span class="number">42</span>;</div><div class="line">    rtc_time.second = <span class="number">15</span>;</div><div class="line"></div><div class="line">    rtc_alarm.year   = <span class="number">2017</span>;</div><div class="line">    rtc_alarm.month  = <span class="number">8</span>;</div><div class="line">    rtc_alarm.day    = <span class="number">24</span>;</div><div class="line">    rtc_alarm.hour   = <span class="number">10</span>;</div><div class="line">    rtc_alarm.minute = <span class="number">42</span>;</div><div class="line">    rtc_alarm.second = <span class="number">20</span>;</div><div class="line"></div><div class="line">    uart_init();</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"init ok.\n\r"</span>);</div><div class="line"></div><div class="line">    gic_init();</div><div class="line">    timer2_init();</div><div class="line"></div><div class="line">    rtc_init();</div><div class="line"></div><div class="line">    set_time(rtc_time);</div><div class="line">    set_alarm(rtc_alarm);</div><div class="line"></div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"=====set time and alarm is:=====\n\r"</span>);</div><div class="line">    get_time();</div><div class="line">    get_alarm();</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"================================\n\r"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        delay_ms(<span class="number">1000</span>);</div><div class="line">        get_time();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="3-实测与源码"><a href="#3-实测与源码" class="headerlink" title="3.实测与源码"></a>3.实测与源码</h1><p><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/170823/3.png" alt=""><br><strong>BUG:</strong><br><em>上电后，set_alarm()是没问题的，set_time()显示没有设置成功，这时按键复位重启一下，发现这时就设置成功了。 = = ?</em></p><p><a href="https://github.com/hceng/am437x/tree/master/hardware/2th_rtc" target="_blank" rel="external">源码——&gt;GitHub</a></p><h1 id="4-心得"><a href="#4-心得" class="headerlink" title="4.心得"></a>4.心得</h1><p>RTC感觉还是比较重要，能够实现得到实时的时间。<br>整个过程，稍微需要注意点的就是BCD的转换，容易弄错。</p><hr><p><div align="center"><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本文采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href="http://hceng.cn/" target="_blank" rel="external">hceng’s blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;AM437x的RTC模块裸机程序。&lt;br&gt;
    
    </summary>
    
    
      <category term="AM437X" scheme="http://yoursite.com/tags/AM437X/"/>
    
      <category term="裸机" scheme="http://yoursite.com/tags/%E8%A3%B8%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>AM437x——LED驱动</title>
    <link href="http://yoursite.com/2017/08/12/AM437x%E2%80%94%E2%80%94LED%E9%A9%B1%E5%8A%A8/"/>
    <id>http://yoursite.com/2017/08/12/AM437x——LED驱动/</id>
    <published>2017-08-12T08:06:46.000Z</published>
    <updated>2017-08-27T12:27:21.104Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录AM437X驱动的LED。含简单的字符设备驱动、设备驱动模型、设备树以及LED子系统。<br><a id="more"></a></p><hr><p><strong>目前就Linux驱动的理解是：</strong></p><blockquote><p><strong>Linux驱动 = 裸机 + 框架</strong></p></blockquote><p><strong>关于框架，目前的理解是：</strong></p><blockquote><p>以LED驱动为例，之前印象中就是韦老大的思路，现在init里注册、硬件初始化，然后应用层open()、read()就调用了file_operations里面的drv_open()、drv_write()等，算是最简单的驱动框架。<br>然后韦老大又提及了总线设备驱动模型，将设备和驱动分离，感受到了新的框架。不久前，简单接触了下设备树，感觉就是总线设备驱动模型的修改（升级），将原来的设备部分，不再单独放在代码里，而是放在dts里面，开机加载，然后驱动匹配获取硬件资源。因此，感觉驱动的框架在一步一步的发展，优化，最原始的注册、open等框架，还是不变。<br>同时，了解到了除输入子系统的其它子系统，加深了对这一模式的理解。感觉就是，将某个硬件资源无缝的融入现有的环境中，而无须改变应用层的程序。</p></blockquote><p>这就是目前的一点小小理解吧，算是打开了个入口，希望以后了解得更加全面、细致。<br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/170812/1.png" alt=""></p><h1 id="1-搭建开发环境"><a href="#1-搭建开发环境" class="headerlink" title="1.搭建开发环境"></a>1.搭建开发环境</h1><h2 id="1-1安装TI-SDK"><a href="#1-1安装TI-SDK" class="headerlink" title="1.1安装TI_SDK"></a>1.1安装TI_SDK</h2><p>先在TI官网下载<a href="http://software-dl.ti.com/sitara_linux/esd/processor-sdk/PROCESSOR-SDK-LINUX-AM437X/01_00_00_03/exports/ti-processor-sdk-linux-am437x-evm-01.00.00.03-Linux-x86-Install.bin" target="_blank" rel="external">ti-processor-sdk-linux-am437x-evm-01.00.00.03-Linux-x86-Install.bin</a><br>在Ubuntu（only Ubuntu 12.04 LTS and Ubuntu 14.04 LTS are supported）下，对该文件加入可执行权限，然后直接运行。安装目录选择默认即可。完成之后，便在当前用户的home目录生成了所有所需文件。<br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/170812/2.png" alt=""></p><h2 id="1-2编译内核"><a href="#1-2编译内核" class="headerlink" title="1.2编译内核"></a>1.2编译内核</h2><p>在当前生成ti-processor-sdk-linux-am437x-evm-01.00.00.03目录下，有个Makefile，打开后可以看到相关的编译选项，如：</p><ul><li>编译全部文件：<code>make all</code></li><li>编译内核：<code>make linux</code></li><li>编译u-boot:<code>make u-boot-spl</code></li></ul><p>以及make的依赖：<code>-include Rules.make</code>。在本层目录里，打开<code>Rules.make</code>，可以知道内核的默认配置文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#defconfig</div><div class="line">DEFCONFIG=tisdk_am437x-evm_defconfig</div></pre></td></tr></table></figure></p><p>通过查找，tisdk_am437x-evm_defconfig在<code>~/ti-processor-sdk-linux-am437x-evm-01.00.00.03/board-support/linux-3.14.43+gitAUTOINC+875c69b2c3-g875c69b/arch/arm/configs</code>里。<br>这里通过修改该配置文件，然后重新编译内核，即可关闭系统LED相关的驱动，在后面自己写LED驱动时，防止互相干扰。<br>因此将tisdk_am437x-evm_defconfig配置文件里的所有有关LED的配置都关闭掉。</p><p>最后在顶层目录执行<code>make linux</code>,编译完成后，生成<code>~/ti-processor-sdk-linux-am437x-evm-01.00.00.03/board-support/linux-3.14.43+gitAUTOINC+875c69b2c3-g875c69b/arch/arm/boot/zImage</code>文件。</p><h2 id="1-3烧写SD卡"><a href="#1-3烧写SD卡" class="headerlink" title="1.3烧写SD卡"></a>1.3烧写SD卡</h2><p>回到<code>~/ti-processor-sdk-linux-am437x-evm-01.00.00.03/bin</code>下，TI制作了很多脚本，其中的<code>create-sdcard.sh</code>就是制作SD卡的。Ubuntu插上SD卡，然后切换成root用户，执行该脚本，根据提示一路选择下去即可。<br><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/170812/3.png" alt=""></p><p>这里烧写完了，测试发现并没有使用之前编译的内核，分析脚本后发现，该脚本直接使用的<code>~/ti-processor-sdk-linux-am437x-evm-01.00.00.03/filesystem</code>下的<code>tisdk-rootfs-image-am437x-evm.tar.gz</code>。脚本将该文件作为根文件系统放入SD卡，因此并没有使用之前编译的内核。解决方法要么在执行脚本的过程中根据提示输入相关的路径，要么在制作好SD卡后，将编译好的内核覆盖掉SD卡的内核即可。我选择的后者：<code>cp  ~/ti-processor-sdk-linux-am437x-evm-01.00.00.03/board-support/linux-3.14.43+gitAUTOINC+875c69b2c3-g875c69b/arch/arm/boot/zImage  /media/hceng/rootfs/boot/</code>。</p><p>最后将制作好的SD卡插上开发板启动即可。</p><h1 id="2-简单的字符驱动"><a href="#2-简单的字符驱动" class="headerlink" title="2.简单的字符驱动"></a>2.简单的字符驱动</h1><p>先记录下几个重要类型或结构体：</p><ul><li><p><strong>表示设备号</strong>(32位机中：高12位表示主设备号，低20位表示次设备号)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">typedef __kernel_dev_tdev_t;</div></pre></td></tr></table></figure></li><li><p><strong>描述字符设备</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">struct cdev &#123;</div><div class="line">struct kobject kobj; //内嵌kobject结构体，用于设备驱动模型管理</div><div class="line">struct module *owner; //包含指向该结构的模块的指针，用于引用计数</div><div class="line">const struct file_operations *ops; //指向字符设备操作函数集的指针</div><div class="line">struct list_head list; //该结构将使用该驱动的字符设备连接成一个链表</div><div class="line">dev_t dev; //该字符设备的其实设备号，一个设备可能有多个设备号</div><div class="line">unsigned int count; //使用该字符设备驱动的设备数量</div><div class="line">&#125;;</div></pre></td></tr></table></figure></li><li><p><strong>描述类</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">struct class&#123;</div><div class="line">    const char *name; //类名称</div><div class="line">    struct module *owner; //对应模块</div><div class="line">    struct subsystem subsys; //对应的subsystem;</div><div class="line">    struct list_head children; //class_device链表</div><div class="line">    struct list_head  interfaces; //class_interface链表</div><div class="line">    struct semaphore  sem; /用于同步的信号锁</div><div class="line">    struct class_attribute *class_attrs; //类属性</div><div class="line">    int (*uevent)(struct class_device *dev,char **envp,int num_envp,</div><div class="line">                  char *buffer,int buffer_size); //事件</div><div class="line">    void (*release)(struct class_device *dev); //释放类设备</div><div class="line">    void (*class_release)(struct class *class); //释放类</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><p>总结下，目前理解的字符设备编写流程:</p><blockquote><p>1)驱动加载函数：<code>xx_drv_init()</code><br>　　1.1)申请设备号：<code>alloc_chrdev_region()</code><br>　　1.2)cde初始化(绑定fops)：<code>cdev_init()</code><br>　　1.3)注册到内核：<code>cdev_add()</code><br>　　1.4)创建类：<code>class_create()</code><br>　　1.5)向类中添加设备(mdev自动创建设备节点)：<code>device_create()</code><br>　　1.6)硬件相关(内存映射)：<code>ioremap()</code><br>2)驱动卸载函数：<code>xx_drv_exit()</code><br>　　2.1)移除设备：<code>device_destroy()</code><br>　　2.2)移除类：<code>class_destroy()</code><br>　　2.3)注销cdev：<code>cdev_del()</code><br>　　2.4)释放设备号：<code>unregister_chrdev()</code><br>　　2.5)释放内存：<code>iounmap()</code><br>3)必要修饰:<code>module_init(xx_drv_init);module_exit(xx_drv_exit);MODULE_LICENSE(&quot;GPL&quot;);</code><br>4)构造file_operations:<code>struct file_operations xx_drv_fops;</code><br>5)实现file_operations里每个函数:<code>xx_open()、xx_write()……</code></p></blockquote><h2 id="2-1驱动代码"><a href="#2-1驱动代码" class="headerlink" title="2.1驱动代码"></a>2.1驱动代码</h2><figure class="highlight c"><figcaption><span>[leds_drv.c]</span><a href="https://github.com/hceng/am437x/blob/master/drive/1th_led/v1.0/leds_drv.c" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/fs.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/uaccess.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/io.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/device.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/cdev.h&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> TI_LEDS_CNT     4</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> major;</div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> cdev leds_cdev;</div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> <span class="keyword">class</span> *leds_cls;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> *PRCM_CM_PER_GPIO5_CLKCTRL = <span class="literal">NULL</span>;  </div><div class="line"><span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> *CTRL_CONF_UART3_RXD = <span class="literal">NULL</span>;  </div><div class="line"><span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> *CTRL_CONF_UART3_TXD = <span class="literal">NULL</span>;  </div><div class="line"><span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> *CTRL_CONF_UART3_CTSN = <span class="literal">NULL</span>;</div><div class="line"><span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> *CTRL_CONF_UART3_RTSN = <span class="literal">NULL</span>;</div><div class="line"><span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> *GPIO_OE = <span class="literal">NULL</span>;</div><div class="line"><span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> *GPIO_SETDATAOUT = <span class="literal">NULL</span>;</div><div class="line"><span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> *GPIO_DATAOUT = <span class="literal">NULL</span>; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">leds_drv_open</span><span class="params">(<span class="keyword">struct</span> inode *inode, <span class="keyword">struct</span> file *file)</span>  </span></div><div class="line">&#123;    </div><div class="line">    <span class="keyword">int</span> minor = iminor(file-&gt;f_inode);</div><div class="line"></div><div class="line">    printk(KERN_INFO<span class="string">"%s OK.\n"</span>,__func__);</div><div class="line"></div><div class="line">    *PRCM_CM_PER_GPIO5_CLKCTRL  = (<span class="number">0x01</span>&lt;&lt;<span class="number">1</span>);</div><div class="line"></div><div class="line">    *CTRL_CONF_UART3_RXD  &amp;= ~(<span class="number">0x7</span>&lt;&lt;<span class="number">0</span> | <span class="number">0x01</span>&lt;&lt;<span class="number">16</span> | <span class="number">0x01</span>&lt;&lt;<span class="number">17</span> | <span class="number">0x01</span>&lt;&lt;<span class="number">18</span>);</div><div class="line">    *CTRL_CONF_UART3_RXD  |=  (<span class="number">0x7</span>&lt;&lt;<span class="number">0</span> | <span class="number">0x01</span>&lt;&lt;<span class="number">17</span>);</div><div class="line"></div><div class="line">    *GPIO_OE              &amp;= ~(<span class="number">0x01</span>&lt;&lt;minor);</div><div class="line">    *GPIO_SETDATAOUT      |=  (<span class="number">0x01</span>&lt;&lt;minor);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;     </div><div class="line">&#125;   </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> ssize_t <span class="title">leds_drv_write</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="keyword">const</span> <span class="keyword">char</span> __user *user_buf, <span class="keyword">size_t</span> count, <span class="keyword">loff_t</span> * ppos)</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">int</span>  minor = iminor(file-&gt;f_inode);</div><div class="line">    <span class="keyword">char</span> buf;  </div><div class="line"></div><div class="line">    printk(KERN_INFO<span class="string">"%s OK.\n"</span>,__func__);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(count != <span class="number">1</span>)&#123;</div><div class="line">        printk(KERN_INFO<span class="string">"write count != 1.\n"</span>); </div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (copy_from_user(&amp;buf, user_buf, count))</div><div class="line">        <span class="keyword">return</span> -EFAULT;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="number">0x01</span> == buf)  </div><div class="line">        *GPIO_DATAOUT |=  (<span class="number">0x01</span>&lt;&lt;minor);    </div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">0x00</span> == buf)</div><div class="line">        *GPIO_DATAOUT &amp;= ~(<span class="number">0x01</span>&lt;&lt;minor);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;  </div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> file_operations leds_fops = &#123;</div><div class="line">    .owner  =   THIS_MODULE,  </div><div class="line">    .open   =   leds_drv_open,     </div><div class="line">    .write  =   leds_drv_write,   </div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">leds_drv_init</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">//1.申请设备号</span></div><div class="line">    <span class="keyword">dev_t</span> devid;</div><div class="line"></div><div class="line">    printk(KERN_INFO<span class="string">"%s OK.\n"</span>,__func__);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(alloc_chrdev_region(&amp;devid, <span class="number">0</span>, TI_LEDS_CNT, <span class="string">"ti_leds"</span>) &lt; <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        printk(KERN_INFO<span class="string">"%s ERROR.\n"</span>,__func__);</div><div class="line">        <span class="keyword">goto</span> error;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    major = MAJOR(devid);</div><div class="line"></div><div class="line">    <span class="comment">//2.注册到系统中</span></div><div class="line">    cdev_init(&amp;leds_cdev, &amp;leds_fops);        </div><div class="line">    cdev_add(&amp;leds_cdev, devid, TI_LEDS_CNT);   </div><div class="line"></div><div class="line">    leds_cls = class_create(THIS_MODULE, <span class="string">"ti_leds"</span>);</div><div class="line"></div><div class="line">    device_create(leds_cls, <span class="literal">NULL</span>, MKDEV(major, <span class="number">0</span>), <span class="literal">NULL</span>, <span class="string">"ti_led0"</span>); </div><div class="line">    device_create(leds_cls, <span class="literal">NULL</span>, MKDEV(major, <span class="number">1</span>), <span class="literal">NULL</span>, <span class="string">"ti_led1"</span>); </div><div class="line">    device_create(leds_cls, <span class="literal">NULL</span>, MKDEV(major, <span class="number">2</span>), <span class="literal">NULL</span>, <span class="string">"ti_led2"</span>); </div><div class="line">    device_create(leds_cls, <span class="literal">NULL</span>, MKDEV(major, <span class="number">3</span>), <span class="literal">NULL</span>, <span class="string">"ti_led3"</span>);</div><div class="line"></div><div class="line">    <span class="comment">//3.硬件相关</span></div><div class="line">    PRCM_CM_PER_GPIO5_CLKCTRL = ioremap(<span class="number">0x44DF8800</span>+<span class="number">0x498</span>, <span class="number">0x04</span>*<span class="number">1</span>);</div><div class="line"></div><div class="line">    CTRL_CONF_UART3_RXD       = ioremap(<span class="number">0x44E10000</span>+<span class="number">0xA28</span>, <span class="number">0x04</span>*<span class="number">4</span>);</div><div class="line">    CTRL_CONF_UART3_TXD       = CTRL_CONF_UART3_RXD + <span class="number">1</span>;</div><div class="line">    CTRL_CONF_UART3_CTSN      = CTRL_CONF_UART3_RXD + <span class="number">2</span>;</div><div class="line">    CTRL_CONF_UART3_RTSN      = CTRL_CONF_UART3_RXD + <span class="number">3</span>; </div><div class="line"></div><div class="line">    GPIO_OE                   = ioremap(<span class="number">0x48322000</span>+<span class="number">0x134</span>, <span class="number">0x04</span>); </div><div class="line">    GPIO_DATAOUT              = ioremap(<span class="number">0x48322000</span>+<span class="number">0x13C</span>, <span class="number">0x04</span>);</div><div class="line">    GPIO_SETDATAOUT           = ioremap(<span class="number">0x48322000</span>+<span class="number">0x194</span>, <span class="number">0x04</span>);</div><div class="line"></div><div class="line">error:</div><div class="line">    unregister_chrdev_region(MKDEV(major, <span class="number">0</span>), TI_LEDS_CNT);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">leds_drv_exit</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">unsigned</span> i;</div><div class="line">    printk(KERN_INFO<span class="string">"%s OK.\n"</span>,__func__);</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;TI_LEDS_CNT;i++)</div><div class="line">    &#123;</div><div class="line">        device_destroy(leds_cls,  MKDEV(major, i));</div><div class="line">    &#125;</div><div class="line">    class_destroy(leds_cls);</div><div class="line">    cdev_del(&amp;leds_cdev);</div><div class="line">    unregister_chrdev(major, <span class="string">"ti_leds"</span>); </div><div class="line"></div><div class="line">    iounmap(PRCM_CM_PER_GPIO5_CLKCTRL);</div><div class="line">    iounmap(CTRL_CONF_UART3_RXD);</div><div class="line">    iounmap(GPIO_OE);</div><div class="line">    iounmap(GPIO_DATAOUT);</div><div class="line">    iounmap(GPIO_SETDATAOUT);</div><div class="line">&#125;</div><div class="line"></div><div class="line">module_init(leds_drv_init);</div><div class="line">module_exit(leds_drv_exit);</div><div class="line"></div><div class="line">MODULE_LICENSE(<span class="string">"GPL"</span>);</div><div class="line">MODULE_AUTHOR(<span class="string">"hceng &lt;huangcheng.job@foxmail.com&gt;"</span>);</div><div class="line">MODULE_DESCRIPTION(<span class="string">"TI am437x board leds drvice"</span>);</div><div class="line">MODULE_ALIAS(<span class="string">"character device:ti_leds"</span>);</div><div class="line">MODULE_VERSION(<span class="string">"V1.0"</span>);</div></pre></td></tr></table></figure><h2 id="2-2测试代码-跑马灯"><a href="#2-2测试代码-跑马灯" class="headerlink" title="2.2测试代码(跑马灯)"></a>2.2测试代码(跑马灯)</h2><figure class="highlight c"><figcaption><span>[leds_app.c]</span><a href="https://github.com/hceng/am437x/blob/master/drive/1th_led/v1.0/leds_app.c" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> msleep(x) usleep(x*1000)</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> fd[<span class="number">4</span>];</div><div class="line">    <span class="keyword">int</span> val = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">    <span class="comment">//const char *dev[] = &#123;"/dev/ti_led0", "/dev/ti_led1", "/dev/ti_led2", "/dev/ti_led3"&#125;;</span></div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *dev[] = &#123;<span class="string">"/dev/ti_led2"</span>, <span class="string">"/dev/ti_led0"</span>, <span class="string">"/dev/ti_led3"</span>, <span class="string">"/dev/ti_led1"</span>&#125;;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)</div><div class="line">    &#123;</div><div class="line">        fd[i] = open(dev[i], O_RDWR);</div><div class="line">        <span class="keyword">if</span> (fd[i] &lt; <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"can't open %s\n"</span>, *dev[i]);</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//leds off all.</span></div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)</div><div class="line">    &#123;</div><div class="line">        write(fd[i], &amp;val, <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//flicker leds.</span></div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        val = !val;</div><div class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)</div><div class="line">        &#123;</div><div class="line">            write(fd[i], &amp;val, <span class="number">1</span>);</div><div class="line">            msleep(<span class="number">300</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="2-3关于printk调试"><a href="#2-3关于printk调试" class="headerlink" title="2.3关于printk调试"></a>2.3关于printk调试</h2><p>内核的printk定义了如下的打印等级：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#define KERN_EMERG        &quot;&lt;0&gt;&quot; /* system is unusable */</div><div class="line">#define KERN_ALERT        &quot;&lt;1&gt;&quot; /* action must be taken immediately */</div><div class="line">#define KERN_CRIT         &quot;&lt;2&gt;&quot; /* critical conditions */</div><div class="line">#define KERN_ERR          &quot;&lt;3&gt;&quot; /* error conditions */</div><div class="line">#define KERN_WARNING      &quot;&lt;4&gt;&quot; /* warning conditions */</div><div class="line">#define KERN_NOTICE       &quot;&lt;5&gt;&quot; /* normal but significant condition */</div><div class="line">#define KERN_INFO         &quot;&lt;6&gt;&quot; /* informational */</div><div class="line">#define KERN_DEBUG        &quot;&lt;7&gt;&quot; /* debug-level messages */</div></pre></td></tr></table></figure></p><ul><li>如果使用<strong>串口登陆</strong>，可通过修改/proc/sys/kernel/printk里的参数进行设置：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo &quot;8  4    1    7&quot; &gt;/proc/sys/kernel/printk</div></pre></td></tr></table></figure></li></ul><p>上面的四个数字分别代表：<br>控制台日志级别：优先级[s1] 高于该值的消息将被打印至控制台，[s1]数值越小，优先级越高；<br>默认的消息日志级别：将用该优先级来打印没有优先级的消息；<br>最低的控制台日志级别：控制台日志级别可被设置的最小值(最高优先级)；<br>默认的控制台日志级别：控制台日志级别的缺省值；</p><ul><li>如果使用<strong>SSH登陆</strong>，是无法显示printk的打印信息的，但打印的数据会被放在<code>/var/log/messages</code>和<code>/proc/kmsg</code>中，利用这一特性，可以后台运行tail命令进行侦测：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tail -f /var/log/messages &amp;</div></pre></td></tr></table></figure></li></ul><p>缺点是不能设置打印等级，同时内核的其它信息也会被打印出来。</p><h1 id="3-设备驱动模型驱动"><a href="#3-设备驱动模型驱动" class="headerlink" title="3.设备驱动模型驱动"></a>3.设备驱动模型驱动</h1><p>关于<a href="http://localhost:4000/2017/03/18/%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9E%8B/" target="_blank" rel="external">设备驱动模型</a>前面以及有点了解，在写驱动的时候，主要体现在将原本的硬件资源信息抽取了出来，单独放在了一个文件里，当两个文件的分别加载的时候，根据名字匹配，匹配成功则调用probe()函数，进行类似前面的init()进行初始化。其它的内容基本一样，该干嘛就干嘛。</p><h2 id="3-1驱动代码"><a href="#3-1驱动代码" class="headerlink" title="3.1驱动代码"></a>3.1驱动代码</h2><figure class="highlight c"><figcaption><span>[leds_dev.c]</span><a href="https://github.com/hceng/am437x/blob/master/drive/1th_led/v2.0/leds_dev.c" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/fs.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/delay.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/uaccess.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/irq.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/io.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/device.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/platform_device.h&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**************************************************</span></div><div class="line">  TI_BOARD</div><div class="line">  ---------------------------------------------------</div><div class="line">  Ball     Color       Mode             Pin</div><div class="line">  ---------------------------------------------------</div><div class="line">  H24     D7_Blue      0x07     uart3_txd(GPIO5_3)</div><div class="line">  H25     D8_Blue      0x07     uart3_rxd(GPIO5_2)</div><div class="line">  K24     D9_Green     0x07     uart3_rtsn(GPIO5_1)</div><div class="line">  H22     D10_Red      0x07     uart3_ctsn(GPIO5_0)</div><div class="line"> **************************************************/</div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> resource leds_resource[] = &#123;  </div><div class="line"><span class="comment">//PRCM_CM_PER_GPIO5_CLKCTRL(498h)</span></div><div class="line">    [<span class="number">0</span>] = &#123;  </div><div class="line">        .start = <span class="number">0x44DF8800</span>,  </div><div class="line">        .end   = <span class="number">0x44DFFFFF</span>, </div><div class="line">        .name  = <span class="string">"CM_PER"</span>,</div><div class="line">        .flags = IORESOURCE_MEM,</div><div class="line">    &#125;,  </div><div class="line"></div><div class="line"><span class="comment">//CTRL_CONF_UART3_RXD(A28h)、CTRL_CONF_UART3_TXD(A2Ch)、CTRL_CONF_UART3_CTSN(A30h)、CTRL_CONF_UART3_RTSN((A34h))</span></div><div class="line">    [<span class="number">1</span>] = &#123;  </div><div class="line">        .start = <span class="number">0x44E10000</span>,  </div><div class="line">        .end   = <span class="number">0x44E1FFFF</span>, </div><div class="line">        .name  = <span class="string">"CONTROL_MODULE"</span>,</div><div class="line">        .flags = IORESOURCE_MEM,</div><div class="line">    &#125;,</div><div class="line"><span class="comment">//GPIO_OE(134h)、GPIO_SETDATAOUT(194h)、GPIO_DATAOUT(13Ch)</span></div><div class="line">    [<span class="number">2</span>] = &#123; </div><div class="line">        .start = <span class="number">0x48322000</span>,  </div><div class="line">        .end   = <span class="number">0x48322FFF</span>, </div><div class="line">        .name  = <span class="string">"GOIP5"</span>,</div><div class="line">        .flags = IORESOURCE_MEM,</div><div class="line">    &#125;,</div><div class="line">    [<span class="number">3</span>] = &#123; </div><div class="line">        .start = <span class="number">0</span>,  </div><div class="line">        .end   = <span class="number">3</span>, </div><div class="line">        .name  = <span class="string">"GOIP5_PIN"</span>,</div><div class="line">        .flags = IORESOURCE_IO,</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;;  </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">leds_release</span><span class="params">(<span class="keyword">struct</span> device * dev)</span>  </span></div><div class="line">&#123;  </div><div class="line">    printk(KERN_INFO<span class="string">"%s OK.\n"</span>,__func__);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> platform_device leds_dev = &#123;</div><div class="line">    .name          = <span class="string">"ti_am437x_leds_platform"</span>,</div><div class="line">    .id          = <span class="number">-1</span>,  </div><div class="line">    .num_resources = ARRAY_SIZE(leds_resource),  </div><div class="line">    .resource      = leds_resource,  </div><div class="line">    .dev = &#123;   </div><div class="line">        .release = leds_release,   </div><div class="line">    &#125;,    </div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">leds_dev_init</span><span class="params">(<span class="keyword">void</span>)</span>  </span></div><div class="line">&#123;  </div><div class="line">    printk(KERN_INFO<span class="string">"%s OK.\n"</span>,__func__);</div><div class="line">    <span class="keyword">return</span> platform_device_register(&amp;leds_dev);;  </div><div class="line">&#125;  </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">leds_dev_exit</span><span class="params">(<span class="keyword">void</span>)</span>  </span></div><div class="line">&#123;  </div><div class="line">    printk(KERN_INFO<span class="string">"%s OK.\n"</span>,__func__);</div><div class="line">    platform_device_unregister(&amp;leds_dev);  </div><div class="line">&#125;  </div><div class="line"></div><div class="line"></div><div class="line">module_init(leds_dev_init);</div><div class="line">module_exit(leds_dev_exit);</div><div class="line"></div><div class="line">MODULE_LICENSE(<span class="string">"GPL"</span>);</div><div class="line">MODULE_AUTHOR(<span class="string">"hceng &lt;huangcheng.job@foxmail.com&gt;"</span>);</div><div class="line">MODULE_DESCRIPTION(<span class="string">"TI am437x board leds drvice"</span>);</div><div class="line">MODULE_ALIAS(<span class="string">"platform:ti_leds"</span>);</div><div class="line">MODULE_VERSION(<span class="string">"V2.0"</span>);</div></pre></td></tr></table></figure><figure class="highlight c"><figcaption><span>[leds_drv.c]</span><a href="https://github.com/hceng/am437x/blob/master/drive/1th_led/v2.0/leds_drv.c" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/version.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/fs.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/interrupt.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/irq.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/sched.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/pm.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/sysctl.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/proc_fs.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/delay.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/platform_device.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/input.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/irq.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/uaccess.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/io.h&gt;</span> </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/cdev.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/uaccess.h&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> TI_LEDS_CNT     4</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> major;</div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> cdev leds_cdev;</div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> <span class="keyword">class</span> *leds_cls;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> *PRCM_CM_PER_GPIO5_CLKCTRL = <span class="literal">NULL</span>;  </div><div class="line"><span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> *CTRL_CONF_UART3_RXD = <span class="literal">NULL</span>;  </div><div class="line"><span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> *CTRL_CONF_UART3_TXD = <span class="literal">NULL</span>;  </div><div class="line"><span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> *CTRL_CONF_UART3_CTSN = <span class="literal">NULL</span>;</div><div class="line"><span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> *CTRL_CONF_UART3_RTSN = <span class="literal">NULL</span>;</div><div class="line"><span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> *GPIO_OE = <span class="literal">NULL</span>;</div><div class="line"><span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> *GPIO_SETDATAOUT = <span class="literal">NULL</span>;</div><div class="line"><span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> *GPIO_DATAOUT = <span class="literal">NULL</span>;   </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">leds_drv_open</span><span class="params">(<span class="keyword">struct</span> inode *inode, <span class="keyword">struct</span> file *file)</span>  </span></div><div class="line">&#123;    </div><div class="line">    <span class="keyword">int</span> minor = iminor(file-&gt;f_inode);</div><div class="line"></div><div class="line">    printk(KERN_INFO<span class="string">"%s OK.\n"</span>,__func__);</div><div class="line"></div><div class="line">    *PRCM_CM_PER_GPIO5_CLKCTRL  = (<span class="number">0x01</span>&lt;&lt;<span class="number">1</span>);</div><div class="line"></div><div class="line">    *CTRL_CONF_UART3_RXD  &amp;= ~(<span class="number">0x7</span>&lt;&lt;<span class="number">0</span> | <span class="number">0x01</span>&lt;&lt;<span class="number">16</span> | <span class="number">0x01</span>&lt;&lt;<span class="number">17</span> | <span class="number">0x01</span>&lt;&lt;<span class="number">18</span>);</div><div class="line">    *CTRL_CONF_UART3_RXD  |=  (<span class="number">0x7</span>&lt;&lt;<span class="number">0</span> | <span class="number">0x01</span>&lt;&lt;<span class="number">17</span>);</div><div class="line"></div><div class="line">    *GPIO_OE              &amp;= ~(<span class="number">0x01</span>&lt;&lt;minor);</div><div class="line">    *GPIO_SETDATAOUT      |=  (<span class="number">0x01</span>&lt;&lt;minor);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;     </div><div class="line">&#125;   </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> ssize_t <span class="title">leds_drv_write</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="keyword">const</span> <span class="keyword">char</span> __user *user_buf, <span class="keyword">size_t</span> count, <span class="keyword">loff_t</span> * ppos)</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">int</span> minor = iminor(file-&gt;f_inode);</div><div class="line">    <span class="keyword">char</span> buf; </div><div class="line"></div><div class="line">    printk(KERN_INFO<span class="string">"%s OK.\n"</span>,__func__);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(count != <span class="number">1</span>)&#123;</div><div class="line">        printk(KERN_INFO<span class="string">"write count != 1.\n"</span>); </div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (copy_from_user(&amp;buf, user_buf, count))</div><div class="line">        <span class="keyword">return</span> -EFAULT;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="number">0x01</span> == buf)  </div><div class="line">        *GPIO_DATAOUT |=  (<span class="number">0x01</span>&lt;&lt;minor);    </div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">0x00</span> == buf)</div><div class="line">        *GPIO_DATAOUT &amp;= ~(<span class="number">0x01</span>&lt;&lt;minor);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;  </div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> file_operations leds_fops = &#123;  </div><div class="line">    .owner  =   THIS_MODULE,   </div><div class="line">    .open   =   leds_drv_open,       </div><div class="line">    .write  =   leds_drv_write,       </div><div class="line">&#125;; </div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">leds_probe</span><span class="params">(<span class="keyword">struct</span> platform_device *pdev)</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">struct</span> resource *res;  </div><div class="line">    <span class="keyword">dev_t</span> devid;</div><div class="line"></div><div class="line">    printk(KERN_INFO<span class="string">"%s OK.\n"</span>,__func__);</div><div class="line"></div><div class="line">    <span class="comment">//1.申请设备号</span></div><div class="line">    <span class="keyword">if</span>(alloc_chrdev_region(&amp;devid, <span class="number">0</span>, TI_LEDS_CNT, <span class="string">"ti_leds"</span>) &lt; <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        printk(<span class="string">"%s ERROR\n"</span>,__func__);</div><div class="line">        <span class="keyword">goto</span> error;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    major = MAJOR(devid);</div><div class="line"></div><div class="line">    <span class="comment">//2.注册到系统中</span></div><div class="line">    cdev_init(&amp;leds_cdev, &amp;leds_fops);        </div><div class="line">    cdev_add(&amp;leds_cdev, devid, TI_LEDS_CNT);   </div><div class="line"></div><div class="line">    leds_cls = class_create(THIS_MODULE, <span class="string">"ti_leds"</span>);</div><div class="line"></div><div class="line">    device_create(leds_cls, <span class="literal">NULL</span>, MKDEV(major, <span class="number">0</span>), <span class="literal">NULL</span>, <span class="string">"ti_led0"</span>); </div><div class="line">    device_create(leds_cls, <span class="literal">NULL</span>, MKDEV(major, <span class="number">1</span>), <span class="literal">NULL</span>, <span class="string">"ti_led1"</span>); </div><div class="line">    device_create(leds_cls, <span class="literal">NULL</span>, MKDEV(major, <span class="number">2</span>), <span class="literal">NULL</span>, <span class="string">"ti_led2"</span>); </div><div class="line">    device_create(leds_cls, <span class="literal">NULL</span>, MKDEV(major, <span class="number">3</span>), <span class="literal">NULL</span>, <span class="string">"ti_led3"</span>);</div><div class="line"></div><div class="line">    <span class="comment">//3.硬件相关</span></div><div class="line">    res = platform_get_resource_byname(pdev, IORESOURCE_MEM, <span class="string">"CM_PER"</span>);</div><div class="line">    <span class="keyword">if</span> (!res) </div><div class="line">        <span class="keyword">return</span> -EINVAL;</div><div class="line">    PRCM_CM_PER_GPIO5_CLKCTRL = ioremap(res-&gt;start+<span class="number">0x498</span>, <span class="number">0x04</span>*<span class="number">1</span>);</div><div class="line"></div><div class="line">    res = platform_get_resource_byname(pdev, IORESOURCE_MEM, <span class="string">"CONTROL_MODULE"</span>); </div><div class="line">    <span class="keyword">if</span> (!res) </div><div class="line">        <span class="keyword">return</span> -EINVAL;</div><div class="line">    CTRL_CONF_UART3_RXD         = ioremap(res-&gt;start+<span class="number">0xA28</span>, <span class="number">0x04</span>*<span class="number">4</span>);</div><div class="line">    CTRL_CONF_UART3_TXD         = CTRL_CONF_UART3_RXD + <span class="number">1</span>;</div><div class="line">    CTRL_CONF_UART3_CTSN        = CTRL_CONF_UART3_RXD + <span class="number">2</span>;</div><div class="line">    CTRL_CONF_UART3_RTSN        = CTRL_CONF_UART3_RXD + <span class="number">3</span>; </div><div class="line"></div><div class="line">    res = platform_get_resource_byname(pdev, IORESOURCE_MEM, <span class="string">"GOIP5"</span>); </div><div class="line">    <span class="keyword">if</span> (!res) </div><div class="line">        <span class="keyword">return</span> -EINVAL;</div><div class="line">    GPIO_OE                     = ioremap(res-&gt;start+<span class="number">0x134</span>, <span class="number">0x04</span>); </div><div class="line">    GPIO_DATAOUT                = ioremap(res-&gt;start+<span class="number">0x13C</span>, <span class="number">0x04</span>);</div><div class="line">    GPIO_SETDATAOUT             = ioremap(res-&gt;start+<span class="number">0x194</span>, <span class="number">0x04</span>);</div><div class="line"></div><div class="line">    *PRCM_CM_PER_GPIO5_CLKCTRL  = (<span class="number">0x01</span>&lt;&lt;<span class="number">1</span>);<span class="comment">//使能GPIO外设时钟</span></div><div class="line"></div><div class="line">error:</div><div class="line">    unregister_chrdev_region(MKDEV(major, <span class="number">0</span>), TI_LEDS_CNT);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;  </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">leds_remove</span><span class="params">(<span class="keyword">struct</span> platform_device *pdev)</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">unsigned</span> i;</div><div class="line">    printk(KERN_INFO<span class="string">"%s OK.\n"</span>,__func__);</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;TI_LEDS_CNT;i++)</div><div class="line">    &#123;</div><div class="line">        device_destroy(leds_cls,  MKDEV(major, i));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    class_destroy(leds_cls);</div><div class="line">    cdev_del(&amp;leds_cdev);</div><div class="line">    unregister_chrdev(major, <span class="string">"ti_leds"</span>); </div><div class="line"></div><div class="line">    iounmap(PRCM_CM_PER_GPIO5_CLKCTRL);</div><div class="line">    iounmap(CTRL_CONF_UART3_RXD);</div><div class="line">    iounmap(GPIO_OE);</div><div class="line">    iounmap(GPIO_DATAOUT);</div><div class="line">    iounmap(GPIO_SETDATAOUT);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> platform_driver leds_drv = &#123;  </div><div class="line">    .probe      = leds_probe,  </div><div class="line">    .remove     = leds_remove,  </div><div class="line">    .driver     = &#123;  </div><div class="line">        .name   = <span class="string">"ti_am437x_leds_platform"</span>,  </div><div class="line">    &#125;  </div><div class="line">&#125;;  </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">leds_drv_init</span><span class="params">(<span class="keyword">void</span>)</span>  </span></div><div class="line">&#123;  </div><div class="line">    printk(KERN_INFO<span class="string">"%s OK.\n"</span>,__func__);</div><div class="line">    <span class="keyword">return</span> platform_driver_register(&amp;leds_drv);  </div><div class="line">&#125;  </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">leds_drv_exit</span><span class="params">(<span class="keyword">void</span>)</span>  </span></div><div class="line">&#123;  </div><div class="line">    printk(KERN_INFO<span class="string">"%s OK.\n"</span>,__func__);</div><div class="line">    platform_driver_unregister(&amp;leds_drv);  </div><div class="line">&#125;  </div><div class="line"></div><div class="line"></div><div class="line">module_init(leds_drv_init);</div><div class="line">module_exit(leds_drv_exit);</div><div class="line"></div><div class="line">MODULE_LICENSE(<span class="string">"GPL"</span>);</div><div class="line">MODULE_AUTHOR(<span class="string">"hceng &lt;huangcheng.job@foxmail.com&gt;"</span>);</div><div class="line">MODULE_DESCRIPTION(<span class="string">"TI am437x board leds drvice"</span>);</div><div class="line">MODULE_ALIAS(<span class="string">"platform:ti_leds"</span>);</div><div class="line">MODULE_VERSION(<span class="string">"V2.0"</span>);</div></pre></td></tr></table></figure><p>测试程序同前面的一样。</p><h1 id="4-设备树驱动"><a href="#4-设备树驱动" class="headerlink" title="4.设备树驱动"></a>4.设备树驱动</h1><h2 id="4-1初识设备树"><a href="#4-1初识设备树" class="headerlink" title="4.1初识设备树"></a>4.1初识设备树</h2><blockquote><p>1）前面的总线设备驱动模型中，硬件资源来自于leds_dev.c里面的信息，这样会导致不同的板子，会添加不同的硬件资源信息，造成内核的臃肿。<br>2）使用设备树后，内核不再包含硬件的描述，硬件描述放在单独的DTS里面，然后编译成二进制的DTB，在U-Boot启动的时候加载进去，然后内核进行解析。<br>3）DTS、DTC和DTB之间的关系：<br>DTS经过DTC编译得到DTB，DTB通过DTC反编译得到DTS.</p></blockquote><p><img src="http://oo2opkb6t.bkt.clouddn.com/image/blog/170812/4.png" alt=""></p><blockquote><p>4）ARM中，所有的DTS文件放在<code>arch/arm/boot/dts</code>目录中，为了简化，将Soc公用部分提取了出来作为dtsi，类似头文件。<br>5）DTC编译工具的源代码在scripts/dtc目录中，编译内核时，编译内核时，需要使能才能将源码编译成工具，对应于<code>scripts/dtc/Makefile</code>中<code>&quot;hostprogs-y:=dtc&quot;</code>。Ubuntu也可直接安装DTC工具：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install device-tree-compiler</div></pre></td></tr></table></figure></p><p>6)内核的<code>arch/arm/boot/dts/Makefile</code>中，描述了当某种Soc被选中后，哪些.dtb会编译出来。执行<code>make dtbs</code>，会根据<code>arch/arm/Makefile</code>编译指定目标。<br>7）单独编译与反编译：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">./scripts/dtc/dtc -I dts -O dtb -o xxx.dtb arch/arm/boot/dts/xxx.dts   //dts-&gt;dtb</div><div class="line">./scripts/dtc/dtc -I dtb -O dts -o xxx.dts arch/arm/boot/dts/xxx.dtb   //dtb-&gt;dts</div></pre></td></tr></table></figure></p><p>8）后面认识深刻了，再总结总结。</p></blockquote><h2 id="4-2修改AM437x设备树"><a href="#4-2修改AM437x设备树" class="headerlink" title="4.2修改AM437x设备树"></a>4.2修改AM437x设备树</h2><p>AM437x的设备树文件在<code>~/ti-processor-sdk-linux-am437x-evm-01.00.00.03/board-support/linux-3.14.43+gitAUTOINC+875c69b2c3-g875c69b/arch/arm/boot/dts/</code>中，主要是<strong>am4372.dtsi</strong>和<strong>am437x-sk-evm.dts</strong>。我的目的是希望写个设备树框架的LED程序，因此想让am437x-sk-evm.dts干净点，只包含LED硬件描述，因此我需要删除am437x-sk-evm.dts里面的其它硬件描述。经过测试，am437x-sk-evm.dts里面包含部分MMC的描述，一旦删除将不能成功启动内核。而且，后面调试的时候，希望开发板通过NFS挂载的方式，直接加载编译的驱动模块，因此需要保留网卡描述部分。最后，将MMC和网卡必须的部分，提取了出来，放在了<a href="https://github.com/hceng/am437x/blob/master/drive/1th_led/v3.0/am4372.dtsi" target="_blank" rel="external">am4372.dtsi</a>中。精简后的am437x-sk-evm.dts内容如下：<br><figure class="highlight c"><figcaption><span>[am437x-sk-evm.dts]</span><a href="https://github.com/hceng/am437x/blob/master/drive/1th_led/v3.0/am437x-sk-evm.dts" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* AM437x SK EVM */</span></div><div class="line"></div><div class="line">/dts-v1/;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"am4372.dtsi"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dt-bindings/pinctrl/am43xx.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dt-bindings/gpio/gpio.h&gt;</span></span></div><div class="line"></div><div class="line">/ &#123;</div><div class="line">model = <span class="string">"TI AM437x SK EVM"</span>;</div><div class="line">compatible = <span class="string">"ti,am437x-sk-evm"</span>,<span class="string">"ti,am4372"</span>,<span class="string">"ti,am43"</span>;</div><div class="line"></div><div class="line">    led_pin &#123;</div><div class="line">        compatible    = <span class="string">"ti_leds"</span>;</div><div class="line">        pinctrl-names = <span class="string">"default"</span>;</div><div class="line">        pinctrl<span class="number">-0</span> = &lt;&amp;leds_pins&gt;;</div><div class="line">        am437x,led_gpio0 = &lt;&amp;gpio5 <span class="number">0</span> GPIO_ACTIVE_HIGH&gt;;</div><div class="line">        am437x,led_gpio1 = &lt;&amp;gpio5 <span class="number">1</span> GPIO_ACTIVE_HIGH&gt;;</div><div class="line">        am437x,led_gpio2 = &lt;&amp;gpio5 <span class="number">2</span> GPIO_ACTIVE_HIGH&gt;;</div><div class="line">        am437x,led_gpio3 = &lt;&amp;gpio5 <span class="number">3</span> GPIO_ACTIVE_HIGH&gt;;</div><div class="line">    &#125;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">&amp;am43xx_pinmux &#123;</div><div class="line"></div><div class="line">leds_pins: leds_pins &#123;</div><div class="line">pinctrl-single,pins = &lt;</div><div class="line"><span class="number">0x228</span> (PIN_OUTPUT | MUX_MODE7)<span class="comment">/* uart3_rxd.gpio5_2 */</span></div><div class="line"><span class="number">0x22c</span> (PIN_OUTPUT | MUX_MODE7)<span class="comment">/* uart3_txd.gpio5_3 */</span></div><div class="line"><span class="number">0x230</span> (PIN_OUTPUT | MUX_MODE7)<span class="comment">/* uart3_ctsn.gpio5_0 */</span></div><div class="line"><span class="number">0x234</span> (PIN_OUTPUT | MUX_MODE7)<span class="comment">/* uart3_rtsn.gpio5_1 */</span></div><div class="line">&gt;;</div><div class="line">&#125;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">&amp;gpio5 &#123;</div><div class="line">status = <span class="string">"okay"</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><br>额，在调试的过程中，需要不断编译新的DTB和复制到SD卡的rootfs分区中，仿照前面写了个<a href="https://github.com/hceng/am437x/blob/master/drive/1th_led/v3.0/hceng.sh" target="_blank" rel="external">脚本</a>进行自动编译和复制，同时检查文件的生成时间间隔，实际中，确实减少了焦躁的重复操作。</p><h2 id="4-3驱动代码"><a href="#4-3驱动代码" class="headerlink" title="4.3驱动代码"></a>4.3驱动代码</h2><figure class="highlight c"><figcaption><span>[leds_drv.c]</span><a href="https://github.com/hceng/am437x/blob/master/drive/1th_led/v3.0/leds_drv.c" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/version.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/fs.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/interrupt.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/irq.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/sched.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/pm.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/sysctl.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/proc_fs.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/delay.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/platform_device.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/input.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/irq.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/uaccess.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/io.h&gt;</span> </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/cdev.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/uaccess.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/gpio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/of_gpio.h&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> TI_LEDS_CNT     4</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> major;</div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> cdev leds_cdev;</div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> <span class="keyword">class</span> *leds_cls;</div><div class="line"><span class="keyword">static</span> <span class="keyword">int</span> led0,led1,led2,led3; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">leds_drv_open</span><span class="params">(<span class="keyword">struct</span> inode *inode, <span class="keyword">struct</span> file *file)</span>  </span></div><div class="line">&#123;    </div><div class="line">    printk(KERN_INFO<span class="string">"%s OK.\n"</span>,__func__); </div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;     </div><div class="line">&#125;   </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">static</span> ssize_t <span class="title">leds_drv_write</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="keyword">const</span> <span class="keyword">char</span> __user *user_buf, <span class="keyword">size_t</span> count, <span class="keyword">loff_t</span> * ppos)</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">int</span> minor = iminor(file-&gt;f_inode); </div><div class="line"><span class="keyword">char</span> buf;</div><div class="line"></div><div class="line">    printk(KERN_INFO<span class="string">"%s OK.\n"</span>,__func__);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(count != <span class="number">1</span>)&#123;</div><div class="line">        printk(KERN_INFO<span class="string">"write count != 1.\n"</span>); </div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (copy_from_user(&amp;buf, user_buf, count))</div><div class="line">        <span class="keyword">return</span> -EFAULT;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(<span class="number">0x01</span> == buf)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">switch</span>(minor)&#123;</div><div class="line">        <span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">            gpio_set_value(led0, <span class="number">0</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">            gpio_set_value(led1, <span class="number">0</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">            gpio_set_value(led2, <span class="number">0</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="number">3</span>:</div><div class="line">            gpio_set_value(led3, <span class="number">0</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            printk(KERN_INFO<span class="string">"%s receive minor error.\n"</span>,__func__);</div><div class="line">        &#125;                       </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">0x00</span> == buf)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">switch</span>(minor)&#123;</div><div class="line">        <span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">            gpio_set_value(led0, <span class="number">1</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">            gpio_set_value(led1, <span class="number">1</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">            gpio_set_value(led2, <span class="number">1</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="number">3</span>:</div><div class="line">            gpio_set_value(led3, <span class="number">1</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            printk(KERN_INFO<span class="string">"%s receive minor error\n"</span>,__func__);</div><div class="line">        &#125;       </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;  </div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> file_operations leds_fops = &#123;  </div><div class="line">    .owner  =   THIS_MODULE,   </div><div class="line">    .open   =   leds_drv_open,       </div><div class="line">    .write  =   leds_drv_write,       </div><div class="line">&#125;; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">leds_probe</span><span class="params">(<span class="keyword">struct</span> platform_device *pdev)</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">struct</span> device *dev = &amp;pdev-&gt;dev;</div><div class="line">    <span class="keyword">dev_t</span> devid;</div><div class="line"></div><div class="line">    printk(KERN_INFO<span class="string">"%s OK.\n"</span>,__func__);</div><div class="line"></div><div class="line">    <span class="comment">//1.申请设备号</span></div><div class="line">    <span class="keyword">if</span>(alloc_chrdev_region(&amp;devid, <span class="number">0</span>, TI_LEDS_CNT, <span class="string">"ti_leds"</span>) &lt; <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        printk(KERN_INFO<span class="string">"%s ERROR.\n"</span>,__func__);</div><div class="line">        <span class="keyword">goto</span> error;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    major = MAJOR(devid);</div><div class="line"></div><div class="line">    <span class="comment">//2.注册到系统中</span></div><div class="line">    cdev_init(&amp;leds_cdev, &amp;leds_fops);        </div><div class="line">    cdev_add(&amp;leds_cdev, devid, TI_LEDS_CNT);   </div><div class="line"></div><div class="line">    leds_cls = class_create(THIS_MODULE, <span class="string">"ti_leds"</span>);</div><div class="line"></div><div class="line">    device_create(leds_cls, <span class="literal">NULL</span>, MKDEV(major, <span class="number">0</span>), <span class="literal">NULL</span>, <span class="string">"ti_led0"</span>); </div><div class="line">    device_create(leds_cls, <span class="literal">NULL</span>, MKDEV(major, <span class="number">1</span>), <span class="literal">NULL</span>, <span class="string">"ti_led1"</span>); </div><div class="line">    device_create(leds_cls, <span class="literal">NULL</span>, MKDEV(major, <span class="number">2</span>), <span class="literal">NULL</span>, <span class="string">"ti_led2"</span>); </div><div class="line">    device_create(leds_cls, <span class="literal">NULL</span>, MKDEV(major, <span class="number">3</span>), <span class="literal">NULL</span>, <span class="string">"ti_led3"</span>);</div><div class="line"></div><div class="line">    <span class="comment">//3.硬件相关</span></div><div class="line">    led0 = of_get_named_gpio(dev-&gt;of_node, <span class="string">"am437x,led_gpio0"</span>, <span class="number">0</span>);;</div><div class="line">    led1 = of_get_named_gpio(dev-&gt;of_node, <span class="string">"am437x,led_gpio1"</span>, <span class="number">0</span>);;</div><div class="line">    led2 = of_get_named_gpio(dev-&gt;of_node, <span class="string">"am437x,led_gpio2"</span>, <span class="number">0</span>);;</div><div class="line">    led3 = of_get_named_gpio(dev-&gt;of_node, <span class="string">"am437x,led_gpio3"</span>, <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="comment">//printk(KERN_INFO"led0 = %d\n",led0);</span></div><div class="line">    <span class="comment">//printk(KERN_INFO"led1 = %d\n",led1);</span></div><div class="line">    <span class="comment">//printk(KERN_INFO"led2 = %d\n",led2);</span></div><div class="line">    <span class="comment">//printk(KERN_INFO"led3 = %d\n",led3);</span></div><div class="line"></div><div class="line">    devm_gpio_request_one(dev, led0, GPIOF_OUT_INIT_HIGH, <span class="string">"LED0"</span>);</div><div class="line">    devm_gpio_request_one(dev, led1, GPIOF_OUT_INIT_HIGH, <span class="string">"LED1"</span>);</div><div class="line">    devm_gpio_request_one(dev, led2, GPIOF_OUT_INIT_HIGH, <span class="string">"LED2"</span>);</div><div class="line">    devm_gpio_request_one(dev, led3, GPIOF_OUT_INIT_HIGH, <span class="string">"LED3"</span>);</div><div class="line"></div><div class="line">error:</div><div class="line">    unregister_chrdev_region(MKDEV(major, <span class="number">0</span>), TI_LEDS_CNT);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">leds_remove</span><span class="params">(<span class="keyword">struct</span> platform_device *pdev)</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">unsigned</span> i;</div><div class="line">    printk(KERN_INFO<span class="string">"%s OK.\n"</span>,__func__);</div><div class="line"></div><div class="line">    </div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;TI_LEDS_CNT;i++)</div><div class="line">    &#123;</div><div class="line">        device_destroy(leds_cls,  MKDEV(major, i));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    class_destroy(leds_cls);</div><div class="line">    cdev_del(&amp;leds_cdev);</div><div class="line">    unregister_chrdev(major, <span class="string">"ti_leds"</span>); </div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">struct</span> of_device_id of_gpio_leds_match[] = &#123;</div><div class="line">&#123; .compatible = <span class="string">"ti_leds"</span>, &#125;,</div><div class="line">&#123;&#125;,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> platform_driver leds_drv = &#123;</div><div class="line">.probe= leds_probe,</div><div class="line">.remove= leds_remove,</div><div class="line">.driver= &#123;</div><div class="line">.name= <span class="string">"ti_am437x_leds_platform"</span>,</div><div class="line">.owner= THIS_MODULE,</div><div class="line">.of_match_table = of_match_ptr(of_gpio_leds_match),</div><div class="line">&#125;,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">leds_drv_init</span><span class="params">(<span class="keyword">void</span>)</span>  </span></div><div class="line">&#123;  </div><div class="line">    printk(KERN_INFO<span class="string">"%s OK.\n"</span>,__func__);</div><div class="line">    <span class="keyword">return</span> platform_driver_register(&amp;leds_drv);  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">leds_drv_exit</span><span class="params">(<span class="keyword">void</span>)</span>  </span></div><div class="line">&#123;  </div><div class="line">    printk(KERN_INFO<span class="string">"%s OK.\n"</span>,__func__);</div><div class="line">    platform_driver_unregister(&amp;leds_drv);  </div><div class="line">&#125;  </div><div class="line"></div><div class="line"></div><div class="line">module_init(leds_drv_init);</div><div class="line">module_exit(leds_drv_exit);</div><div class="line"></div><div class="line">MODULE_LICENSE(<span class="string">"GPL"</span>);</div><div class="line">MODULE_AUTHOR(<span class="string">"hceng &lt;huangcheng.job@foxmail.com&gt;"</span>);</div><div class="line">MODULE_DESCRIPTION(<span class="string">"TI am437x board leds drvice"</span>);</div><div class="line">MODULE_ALIAS(<span class="string">"platform:device tree:ti_leds"</span>);</div><div class="line">MODULE_VERSION(<span class="string">"V3.0"</span>);</div></pre></td></tr></table></figure><p>测试程序同前面的一样。</p><h1 id="5-LED子系统驱动"><a href="#5-LED子系统驱动" class="headerlink" title="5.LED子系统驱动"></a>5.LED子系统驱动</h1><p>留个挂念，以后再添加。</p><h1 id="6-心得"><a href="#6-心得" class="headerlink" title="6.心得"></a>6.心得</h1><p>在我理解到驱动=裸机+软件框架的时候，我对之前的裸机也就没那么排斥了。<br>而且这个软件框架，就现在来看，核心的那几步像：申请设备号、注册设备、创建类和创建节点这些都不变，早晚会做。<br>所以，我算入门了吗？😀<br>下一步，开始另一个阶段~</p><hr><p><div align="center"><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本文采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href="http://hceng.cn/" target="_blank" rel="external">hceng’s blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要记录AM437X驱动的LED。含简单的字符设备驱动、设备驱动模型、设备树以及LED子系统。&lt;br&gt;
    
    </summary>
    
    
      <category term="AM437X" scheme="http://yoursite.com/tags/AM437X/"/>
    
      <category term="Linux驱动" scheme="http://yoursite.com/tags/Linux%E9%A9%B1%E5%8A%A8/"/>
    
  </entry>
  
</feed>
